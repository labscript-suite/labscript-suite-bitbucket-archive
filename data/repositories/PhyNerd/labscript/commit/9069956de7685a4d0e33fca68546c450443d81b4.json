{"rendered": {"message": {"raw": "Fixes and changes to properties (previously referred to as generic attributes)\n\nImplemented serialisation at several points:\n    - Connection table properties and unit conversion parameters are both now\n      serialised unconditionally using JSON.\n    - Device properties are now written in write_device_properties, which is\n      called from stop(), rather than earlier during init_device_group.\n      This is so that device code can call self.set_property(... location='device_properties')\n      after init_device_group (which now doesn't do much) and still have these\n      be written to the file.\n    - Renamed 'destination' to 'location' everyhwere (more meaningful for 'get')\n    - This code relies on serialisation and deserialisation code in labscript_utils.properties.\n\nFixed a bug where added_properties was passed into the decorator by itself\nrather than as a list; 'in' checks still passed, as all strings are substrings\nof themselves, but this would produce broken behaviour in other cases.", "markup": "markdown", "html": "<p>Fixes and changes to properties (previously referred to as generic attributes)</p>\n<p>Implemented serialisation at several points:<br />\n    - Connection table properties and unit conversion parameters are both now<br />\n      serialised unconditionally using JSON.<br />\n    - Device properties are now written in write_device_properties, which is<br />\n      called from stop(), rather than earlier during init_device_group.<br />\n      This is so that device code can call self.set_property(... location='device_properties')<br />\n      after init_device_group (which now doesn't do much) and still have these<br />\n      be written to the file.<br />\n    - Renamed 'destination' to 'location' everyhwere (more meaningful for 'get')<br />\n    - This code relies on serialisation and deserialisation code in labscript_utils.properties.</p>\n<p>Fixed a bug where added_properties was passed into the decorator by itself<br />\nrather than as a list; 'in' checks still passed, as all strings are substrings<br />\nof themselves, but this would produce broken behaviour in other cases.</p>", "type": "rendered"}}, "hash": "9069956de7685a4d0e33fca68546c450443d81b4", "repository": {"links": {"self": {"href": "data/repositories/PhyNerd/labscript.json"}, "html": {"href": "#!/PhyNerd/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7ae7c0f3-4119-4307-8b3f-652003761155}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "PhyNerd/labscript", "uuid": "{7ae7c0f3-4119-4307-8b3f-652003761155}"}, "links": {"self": {"href": "data/repositories/PhyNerd/labscript/commit/9069956de7685a4d0e33fca68546c450443d81b4.json"}, "comments": {"href": "data/repositories/PhyNerd/labscript/commit/9069956de7685a4d0e33fca68546c450443d81b4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/labscript/patch/9069956de7685a4d0e33fca68546c450443d81b4"}, "html": {"href": "#!/PhyNerd/labscript/commits/9069956de7685a4d0e33fca68546c450443d81b4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/labscript/diff/9069956de7685a4d0e33fca68546c450443d81b4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/labscript/commit/9069956de7685a4d0e33fca68546c450443d81b4/approve"}, "statuses": {"href": "data/repositories/PhyNerd/labscript/commit/9069956de7685a4d0e33fca68546c450443d81b4/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes and changes to properties (previously referred to as generic attributes)\n\nImplemented serialisation at several points:\n    - Connection table properties and unit conversion parameters are both now\n      serialised unconditionally using JSON.\n    - Device properties are now written in write_device_properties, which is\n      called from stop(), rather than earlier during init_device_group.\n      This is so that device code can call self.set_property(... location='device_properties')\n      after init_device_group (which now doesn't do much) and still have these\n      be written to the file.\n    - Renamed 'destination' to 'location' everyhwere (more meaningful for 'get')\n    - This code relies on serialisation and deserialisation code in labscript_utils.properties.\n\nFixed a bug where added_properties was passed into the decorator by itself\nrather than as a list; 'in' checks still passed, as all strings are substrings\nof themselves, but this would produce broken behaviour in other cases.", "markup": "markdown", "html": "<p>Fixes and changes to properties (previously referred to as generic attributes)</p>\n<p>Implemented serialisation at several points:<br />\n    - Connection table properties and unit conversion parameters are both now<br />\n      serialised unconditionally using JSON.<br />\n    - Device properties are now written in write_device_properties, which is<br />\n      called from stop(), rather than earlier during init_device_group.<br />\n      This is so that device code can call self.set_property(... location='device_properties')<br />\n      after init_device_group (which now doesn't do much) and still have these<br />\n      be written to the file.<br />\n    - Renamed 'destination' to 'location' everyhwere (more meaningful for 'get')<br />\n    - This code relies on serialisation and deserialisation code in labscript_utils.properties.</p>\n<p>Fixed a bug where added_properties was passed into the decorator by itself<br />\nrather than as a list; 'in' checks still passed, as all strings are substrings<br />\nof themselves, but this would produce broken behaviour in other cases.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "9cb698a019fba0f392ba2efb94a14dbd5202fead", "type": "commit", "links": {"self": {"href": "data/repositories/PhyNerd/labscript/commit/9cb698a019fba0f392ba2efb94a14dbd5202fead.json"}, "html": {"href": "#!/PhyNerd/labscript/commits/9cb698a019fba0f392ba2efb94a14dbd5202fead"}}}], "date": "2015-01-05T06:14:53+00:00", "message": "Fixes and changes to properties (previously referred to as generic attributes)\n\nImplemented serialisation at several points:\n    - Connection table properties and unit conversion parameters are both now\n      serialised unconditionally using JSON.\n    - Device properties are now written in write_device_properties, which is\n      called from stop(), rather than earlier during init_device_group.\n      This is so that device code can call self.set_property(... location='device_properties')\n      after init_device_group (which now doesn't do much) and still have these\n      be written to the file.\n    - Renamed 'destination' to 'location' everyhwere (more meaningful for 'get')\n    - This code relies on serialisation and deserialisation code in labscript_utils.properties.\n\nFixed a bug where added_properties was passed into the decorator by itself\nrather than as a list; 'in' checks still passed, as all strings are substrings\nof themselves, but this would produce broken behaviour in other cases.", "type": "commit", "git_hash": "1c2489c4986e3f25466872254d1e716f6a6b95d0", "tags": null, "branches": "default"}