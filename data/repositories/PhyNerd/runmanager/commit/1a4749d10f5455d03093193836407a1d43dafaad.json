{"rendered": {"message": {"raw": "Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.\n\nThis also involved:\n * creating a new batch compiler for labscript based on the generalised class\n * Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)\n * Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)\n\nThere are some additional benefits to this, for instance the __builtins__ dict is saved just before invoking the script, which means that any modules that modify __builtins__ on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when `finally` is executed!)\n\nTODO: Allow the batch_compiler script to be selected by the labconfig file!", "markup": "markdown", "html": "<p>Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.</p>\n<p>This also involved:<br />\n * creating a new batch compiler for labscript based on the generalised class<br />\n * Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)<br />\n * Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)</p>\n<p>There are some additional benefits to this, for instance the <strong>builtins</strong> dict is saved just before invoking the script, which means that any modules that modify <strong>builtins</strong> on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when <code>finally</code> is executed!)</p>\n<p>TODO: Allow the batch_compiler script to be selected by the labconfig file!</p>", "type": "rendered"}}, "hash": "1a4749d10f5455d03093193836407a1d43dafaad", "repository": {"links": {"self": {"href": "data/repositories/PhyNerd/runmanager.json"}, "html": {"href": "#!/PhyNerd/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c22a4e6f-3edf-4cf1-ba9b-d1248f2df52c}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "PhyNerd/runmanager", "uuid": "{c22a4e6f-3edf-4cf1-ba9b-d1248f2df52c}"}, "links": {"self": {"href": "data/repositories/PhyNerd/runmanager/commit/1a4749d10f5455d03093193836407a1d43dafaad.json"}, "comments": {"href": "data/repositories/PhyNerd/runmanager/commit/1a4749d10f5455d03093193836407a1d43dafaad/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/runmanager/patch/1a4749d10f5455d03093193836407a1d43dafaad"}, "html": {"href": "#!/PhyNerd/runmanager/commits/1a4749d10f5455d03093193836407a1d43dafaad"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/runmanager/diff/1a4749d10f5455d03093193836407a1d43dafaad"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/runmanager/commit/1a4749d10f5455d03093193836407a1d43dafaad/approve"}, "statuses": {"href": "data/repositories/PhyNerd/runmanager/commit/1a4749d10f5455d03093193836407a1d43dafaad/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.\n\nThis also involved:\n * creating a new batch compiler for labscript based on the generalised class\n * Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)\n * Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)\n\nThere are some additional benefits to this, for instance the __builtins__ dict is saved just before invoking the script, which means that any modules that modify __builtins__ on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when `finally` is executed!)\n\nTODO: Allow the batch_compiler script to be selected by the labconfig file!", "markup": "markdown", "html": "<p>Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.</p>\n<p>This also involved:<br />\n * creating a new batch compiler for labscript based on the generalised class<br />\n * Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)<br />\n * Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)</p>\n<p>There are some additional benefits to this, for instance the <strong>builtins</strong> dict is saved just before invoking the script, which means that any modules that modify <strong>builtins</strong> on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when <code>finally</code> is executed!)</p>\n<p>TODO: Allow the batch_compiler script to be selected by the labconfig file!</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "464950e2c916533a99a4512ac04ca1548bbe5651", "type": "commit", "links": {"self": {"href": "data/repositories/PhyNerd/runmanager/commit/464950e2c916533a99a4512ac04ca1548bbe5651.json"}, "html": {"href": "#!/PhyNerd/runmanager/commits/464950e2c916533a99a4512ac04ca1548bbe5651"}}}], "date": "2018-03-13T03:52:03+00:00", "message": "Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.\n\nThis also involved:\n * creating a new batch compiler for labscript based on the generalised class\n * Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)\n * Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)\n\nThere are some additional benefits to this, for instance the __builtins__ dict is saved just before invoking the script, which means that any modules that modify __builtins__ on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when `finally` is executed!)\n\nTODO: Allow the batch_compiler script to be selected by the labconfig file!", "type": "commit", "git_hash": "57e4f6b90313fc664820793d72752264dc877b9e", "tags": null, "branches": "labscript-agnostic"}