{"rendered": {"message": {"raw": "Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\n\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\n\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "markup": "markdown", "html": "<p>Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.<br />\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.</p>\n<p>The wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.</p>\n<p>It is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.</p>", "type": "rendered"}}, "hash": "9d779507789666b95dbffb60bc01e83538e75546", "repository": {"links": {"self": {"href": "data/repositories/ReneKolb/labscript.json"}, "html": {"href": "#!/ReneKolb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e5bcc338-0f71-423d-a5e3-5e9b093934f9}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "ReneKolb/labscript", "uuid": "{e5bcc338-0f71-423d-a5e3-5e9b093934f9}"}, "links": {"self": {"href": "data/repositories/ReneKolb/labscript/commit/9d779507789666b95dbffb60bc01e83538e75546.json"}, "comments": {"href": "data/repositories/ReneKolb/labscript/commit/9d779507789666b95dbffb60bc01e83538e75546/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/patch/9d779507789666b95dbffb60bc01e83538e75546"}, "html": {"href": "#!/ReneKolb/labscript/commits/9d779507789666b95dbffb60bc01e83538e75546"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/diff/9d779507789666b95dbffb60bc01e83538e75546"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/commit/9d779507789666b95dbffb60bc01e83538e75546/approve"}, "statuses": {"href": "data/repositories/ReneKolb/labscript/commit/9d779507789666b95dbffb60bc01e83538e75546/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\n\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\n\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "markup": "markdown", "html": "<p>Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.<br />\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.</p>\n<p>The wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.</p>\n<p>It is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "43df3cb9323f529d64bb06e4efa8920b4e9accfb", "type": "commit", "links": {"self": {"href": "data/repositories/ReneKolb/labscript/commit/43df3cb9323f529d64bb06e4efa8920b4e9accfb.json"}, "html": {"href": "#!/ReneKolb/labscript/commits/43df3cb9323f529d64bb06e4efa8920b4e9accfb"}}}], "date": "2015-11-03T05:44:48+00:00", "message": "Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\n\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\n\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "type": "commit", "git_hash": "9312870dddd92c5e550da4070c273ff12ab24395", "tags": null, "branches": "default"}