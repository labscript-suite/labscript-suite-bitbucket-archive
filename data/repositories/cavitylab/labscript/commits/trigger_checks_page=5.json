{"pagelen": 100, "previous": "data/repositories/cavitylab/labscript/commits/trigger_checks_page=4.json", "values": [{"rendered": {"message": {"raw": "Added __init__.py again... changed my mind", "markup": "markdown", "html": "<p>Added <strong>init</strong>.py again... changed my mind</p>", "type": "rendered"}}, "hash": "1aabe361ece58e3bfe422a30869e2f8e8acc1f9e", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e"}, "html": {"href": "#!/cavitylab/labscript/commits/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1aabe361ece58e3bfe422a30869e2f8e8acc1f9e/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added __init__.py again... changed my mind", "markup": "markdown", "html": "<p>Added <strong>init</strong>.py again... changed my mind</p>", "type": "rendered"}, "parents": [{"hash": "676e18bf1680e908369b7dd93e6007789a025fa5", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/676e18bf1680e908369b7dd93e6007789a025fa5.json"}, "html": {"href": "#!/cavitylab/labscript/commits/676e18bf1680e908369b7dd93e6007789a025fa5"}}}], "date": "2012-06-15T01:29:54+00:00", "message": "Added __init__.py again... changed my mind", "type": "commit"}, {"rendered": {"message": {"raw": "Deleted __init__", "markup": "markdown", "html": "<p>Deleted <strong>init</strong></p>", "type": "rendered"}}, "hash": "676e18bf1680e908369b7dd93e6007789a025fa5", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/676e18bf1680e908369b7dd93e6007789a025fa5.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/676e18bf1680e908369b7dd93e6007789a025fa5/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/676e18bf1680e908369b7dd93e6007789a025fa5"}, "html": {"href": "#!/cavitylab/labscript/commits/676e18bf1680e908369b7dd93e6007789a025fa5"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/676e18bf1680e908369b7dd93e6007789a025fa5"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/676e18bf1680e908369b7dd93e6007789a025fa5/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/676e18bf1680e908369b7dd93e6007789a025fa5/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Deleted __init__", "markup": "markdown", "html": "<p>Deleted <strong>init</strong></p>", "type": "rendered"}, "parents": [{"hash": "c15fb01eb701a1edd61ea14bd6703ad0443d0e8d", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d.json"}, "html": {"href": "#!/cavitylab/labscript/commits/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d"}}}], "date": "2012-06-15T01:25:25+00:00", "message": "Deleted __init__", "type": "commit"}, {"rendered": {"message": {"raw": "Some refactoring of labscript.\nLabscript now only opens the hdf5 file when it needs it, rather than just having it open the whole time whilst the user's code is running. The file is only open in a context manager, which means that if an exception is raised, the file will be closed.\nPreviously exceptions would be raised and the files would only close upon the process exiting. This was all well and good, since most labscript errors explicity called sys.exit(), and the process would end, and the files would close. However, now that labscripts are being compiled in a long-running process by runmanager, the process does not end. So we need to make sure those files get closed, otherwise we can't delete failed compilations without closing runmanager.\nI've also replaced all labscript errors with 'raise LabscriptError(message)' instead of 'sys.stderr.write(message); sys.exit(1)'. This provides a traceback so that users can see where things went wrong, and it also allows for easier future modification by catching the LabscriptError exception class instead of a giant find and replace (there were 58).\nI've also disabled 'minor' warnings by default, where an output's value isn't defined at t=0 (or ever). Now the only warnings you get are when you set an output to two values at the same time. These are actually pretty important, so hopefully the decrease in visual pollution will make people read them and make mistakes in their experiments less often.\nThis change also makes it a bit easier to refactor labscript further, since there are now no global varaibles.", "markup": "markdown", "html": "<p>Some refactoring of labscript.<br />\nLabscript now only opens the hdf5 file when it needs it, rather than just having it open the whole time whilst the user's code is running. The file is only open in a context manager, which means that if an exception is raised, the file will be closed.<br />\nPreviously exceptions would be raised and the files would only close upon the process exiting. This was all well and good, since most labscript errors explicity called sys.exit(), and the process would end, and the files would close. However, now that labscripts are being compiled in a long-running process by runmanager, the process does not end. So we need to make sure those files get closed, otherwise we can't delete failed compilations without closing runmanager.<br />\nI've also replaced all labscript errors with 'raise LabscriptError(message)' instead of 'sys.stderr.write(message); sys.exit(1)'. This provides a traceback so that users can see where things went wrong, and it also allows for easier future modification by catching the LabscriptError exception class instead of a giant find and replace (there were 58).<br />\nI've also disabled 'minor' warnings by default, where an output's value isn't defined at t=0 (or ever). Now the only warnings you get are when you set an output to two values at the same time. These are actually pretty important, so hopefully the decrease in visual pollution will make people read them and make mistakes in their experiments less often.<br />\nThis change also makes it a bit easier to refactor labscript further, since there are now no global varaibles.</p>", "type": "rendered"}}, "hash": "c15fb01eb701a1edd61ea14bd6703ad0443d0e8d", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d"}, "html": {"href": "#!/cavitylab/labscript/commits/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/c15fb01eb701a1edd61ea14bd6703ad0443d0e8d/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Some refactoring of labscript.\nLabscript now only opens the hdf5 file when it needs it, rather than just having it open the whole time whilst the user's code is running. The file is only open in a context manager, which means that if an exception is raised, the file will be closed.\nPreviously exceptions would be raised and the files would only close upon the process exiting. This was all well and good, since most labscript errors explicity called sys.exit(), and the process would end, and the files would close. However, now that labscripts are being compiled in a long-running process by runmanager, the process does not end. So we need to make sure those files get closed, otherwise we can't delete failed compilations without closing runmanager.\nI've also replaced all labscript errors with 'raise LabscriptError(message)' instead of 'sys.stderr.write(message); sys.exit(1)'. This provides a traceback so that users can see where things went wrong, and it also allows for easier future modification by catching the LabscriptError exception class instead of a giant find and replace (there were 58).\nI've also disabled 'minor' warnings by default, where an output's value isn't defined at t=0 (or ever). Now the only warnings you get are when you set an output to two values at the same time. These are actually pretty important, so hopefully the decrease in visual pollution will make people read them and make mistakes in their experiments less often.\nThis change also makes it a bit easier to refactor labscript further, since there are now no global varaibles.", "markup": "markdown", "html": "<p>Some refactoring of labscript.<br />\nLabscript now only opens the hdf5 file when it needs it, rather than just having it open the whole time whilst the user's code is running. The file is only open in a context manager, which means that if an exception is raised, the file will be closed.<br />\nPreviously exceptions would be raised and the files would only close upon the process exiting. This was all well and good, since most labscript errors explicity called sys.exit(), and the process would end, and the files would close. However, now that labscripts are being compiled in a long-running process by runmanager, the process does not end. So we need to make sure those files get closed, otherwise we can't delete failed compilations without closing runmanager.<br />\nI've also replaced all labscript errors with 'raise LabscriptError(message)' instead of 'sys.stderr.write(message); sys.exit(1)'. This provides a traceback so that users can see where things went wrong, and it also allows for easier future modification by catching the LabscriptError exception class instead of a giant find and replace (there were 58).<br />\nI've also disabled 'minor' warnings by default, where an output's value isn't defined at t=0 (or ever). Now the only warnings you get are when you set an output to two values at the same time. These are actually pretty important, so hopefully the decrease in visual pollution will make people read them and make mistakes in their experiments less often.<br />\nThis change also makes it a bit easier to refactor labscript further, since there are now no global varaibles.</p>", "type": "rendered"}, "parents": [{"hash": "7131a20858f415a23eac5f3c2fceba79ccbf1bf4", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7131a20858f415a23eac5f3c2fceba79ccbf1bf4.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7131a20858f415a23eac5f3c2fceba79ccbf1bf4"}}}], "date": "2012-06-13T11:10:51+00:00", "message": "Some refactoring of labscript.\nLabscript now only opens the hdf5 file when it needs it, rather than just having it open the whole time whilst the user's code is running. The file is only open in a context manager, which means that if an exception is raised, the file will be closed.\nPreviously exceptions would be raised and the files would only close upon the process exiting. This was all well and good, since most labscript errors explicity called sys.exit(), and the process would end, and the files would close. However, now that labscripts are being compiled in a long-running process by runmanager, the process does not end. So we need to make sure those files get closed, otherwise we can't delete failed compilations without closing runmanager.\nI've also replaced all labscript errors with 'raise LabscriptError(message)' instead of 'sys.stderr.write(message); sys.exit(1)'. This provides a traceback so that users can see where things went wrong, and it also allows for easier future modification by catching the LabscriptError exception class instead of a giant find and replace (there were 58).\nI've also disabled 'minor' warnings by default, where an output's value isn't defined at t=0 (or ever). Now the only warnings you get are when you set an output to two values at the same time. These are actually pretty important, so hopefully the decrease in visual pollution will make people read them and make mistakes in their experiments less often.\nThis change also makes it a bit easier to refactor labscript further, since there are now no global varaibles.", "type": "commit"}, {"rendered": {"message": {"raw": "Added truncation options to the exp_ramp function", "markup": "markdown", "html": "<p>Added truncation options to the exp_ramp function</p>", "type": "rendered"}}, "hash": "7131a20858f415a23eac5f3c2fceba79ccbf1bf4", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7131a20858f415a23eac5f3c2fceba79ccbf1bf4.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7131a20858f415a23eac5f3c2fceba79ccbf1bf4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7131a20858f415a23eac5f3c2fceba79ccbf1bf4"}, "html": {"href": "#!/cavitylab/labscript/commits/7131a20858f415a23eac5f3c2fceba79ccbf1bf4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7131a20858f415a23eac5f3c2fceba79ccbf1bf4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7131a20858f415a23eac5f3c2fceba79ccbf1bf4/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7131a20858f415a23eac5f3c2fceba79ccbf1bf4/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added truncation options to the exp_ramp function", "markup": "markdown", "html": "<p>Added truncation options to the exp_ramp function</p>", "type": "rendered"}, "parents": [{"hash": "13993b0d972576b9257efca334b02568d8b4297a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/13993b0d972576b9257efca334b02568d8b4297a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/13993b0d972576b9257efca334b02568d8b4297a"}}}], "date": "2012-06-05T03:54:46+00:00", "message": "Added truncation options to the exp_ramp function", "type": "commit"}, {"rendered": {"message": {"raw": "Previous fix for #515 didn't work, this fixes #515 properly.", "markup": "markdown", "html": "<p>Previous fix for #515 didn't work, this fixes #515 properly.</p>", "type": "rendered"}}, "hash": "13993b0d972576b9257efca334b02568d8b4297a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/13993b0d972576b9257efca334b02568d8b4297a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/13993b0d972576b9257efca334b02568d8b4297a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/13993b0d972576b9257efca334b02568d8b4297a"}, "html": {"href": "#!/cavitylab/labscript/commits/13993b0d972576b9257efca334b02568d8b4297a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/13993b0d972576b9257efca334b02568d8b4297a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/13993b0d972576b9257efca334b02568d8b4297a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/13993b0d972576b9257efca334b02568d8b4297a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Previous fix for #515 didn't work, this fixes #515 properly.", "markup": "markdown", "html": "<p>Previous fix for #515 didn't work, this fixes #515 properly.</p>", "type": "rendered"}, "parents": [{"hash": "9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3"}}}], "date": "2012-06-01T04:21:28+00:00", "message": "Previous fix for #515 didn't work, this fixes #515 properly.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes #515. Passes startupinfo flag to subprocess.Popen in order to supress the command window when calling svn command line utilities.", "markup": "markdown", "html": "<p>Fixes #515. Passes startupinfo flag to subprocess.Popen in order to supress the command window when calling svn command line utilities.</p>", "type": "rendered"}}, "hash": "9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3"}, "html": {"href": "#!/cavitylab/labscript/commits/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9ceb2ba704ad858c2ddeb5eed8a5b52346d259a3/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes #515. Passes startupinfo flag to subprocess.Popen in order to supress the command window when calling svn command line utilities.", "markup": "markdown", "html": "<p>Fixes #515. Passes startupinfo flag to subprocess.Popen in order to supress the command window when calling svn command line utilities.</p>", "type": "rendered"}, "parents": [{"hash": "a5a9af2ea181e115eda9a31544e40d4eeb3072da", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/a5a9af2ea181e115eda9a31544e40d4eeb3072da.json"}, "html": {"href": "#!/cavitylab/labscript/commits/a5a9af2ea181e115eda9a31544e40d4eeb3072da"}}}], "date": "2012-06-01T04:15:16+00:00", "message": "Fixes #515. Passes startupinfo flag to subprocess.Popen in order to supress the command window when calling svn command line utilities.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes #515.\nLabscript now saves all used modules of labscriptlib into a hierarchical group structure, along with svn info on each file.", "markup": "markdown", "html": "<p>Fixes #515.<br />\nLabscript now saves all used modules of labscriptlib into a hierarchical group structure, along with svn info on each file.</p>", "type": "rendered"}}, "hash": "a5a9af2ea181e115eda9a31544e40d4eeb3072da", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/a5a9af2ea181e115eda9a31544e40d4eeb3072da.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/a5a9af2ea181e115eda9a31544e40d4eeb3072da/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/a5a9af2ea181e115eda9a31544e40d4eeb3072da"}, "html": {"href": "#!/cavitylab/labscript/commits/a5a9af2ea181e115eda9a31544e40d4eeb3072da"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/a5a9af2ea181e115eda9a31544e40d4eeb3072da"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/a5a9af2ea181e115eda9a31544e40d4eeb3072da/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/a5a9af2ea181e115eda9a31544e40d4eeb3072da/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes #515.\nLabscript now saves all used modules of labscriptlib into a hierarchical group structure, along with svn info on each file.", "markup": "markdown", "html": "<p>Fixes #515.<br />\nLabscript now saves all used modules of labscriptlib into a hierarchical group structure, along with svn info on each file.</p>", "type": "rendered"}, "parents": [{"hash": "fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2.json"}, "html": {"href": "#!/cavitylab/labscript/commits/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2"}}}], "date": "2012-05-28T06:39:47+00:00", "message": "Fixes #515.\nLabscript now saves all used modules of labscriptlib into a hierarchical group structure, along with svn info on each file.", "type": "commit"}, {"rendered": {"message": {"raw": "the exp_ramp function of AnalogQuantity did not return duration.\n\nThis bug will only have affected the spinorlab if they were calling:\nt += channel.exp_ramp(....)\nwhich I don't think they were (I don't think it was responsible for bug #511 as the ramp functions were not in use as the channels were not on the fast clock)\n\nThe bug was already fixed in the working copy of the dual_species lab, but not committed due to the function being modified further by Shaun.\n\nThe bug was fixed in the working copy of the spinor lab on Friday morning, but not committed.\n\nIt is now committed!", "markup": "markdown", "html": "<p>the exp_ramp function of AnalogQuantity did not return duration.</p>\n<p>This bug will only have affected the spinorlab if they were calling:<br />\nt += channel.exp_ramp(....)<br />\nwhich I don't think they were (I don't think it was responsible for bug #511 as the ramp functions were not in use as the channels were not on the fast clock)</p>\n<p>The bug was already fixed in the working copy of the dual_species lab, but not committed due to the function being modified further by Shaun.</p>\n<p>The bug was fixed in the working copy of the spinor lab on Friday morning, but not committed.</p>\n<p>It is now committed!</p>", "type": "rendered"}}, "hash": "fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2"}, "html": {"href": "#!/cavitylab/labscript/commits/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/fd3dc2883bd2877cbc90c9b87986bd1bdae1fbb2/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "the exp_ramp function of AnalogQuantity did not return duration.\n\nThis bug will only have affected the spinorlab if they were calling:\nt += channel.exp_ramp(....)\nwhich I don't think they were (I don't think it was responsible for bug #511 as the ramp functions were not in use as the channels were not on the fast clock)\n\nThe bug was already fixed in the working copy of the dual_species lab, but not committed due to the function being modified further by Shaun.\n\nThe bug was fixed in the working copy of the spinor lab on Friday morning, but not committed.\n\nIt is now committed!", "markup": "markdown", "html": "<p>the exp_ramp function of AnalogQuantity did not return duration.</p>\n<p>This bug will only have affected the spinorlab if they were calling:<br />\nt += channel.exp_ramp(....)<br />\nwhich I don't think they were (I don't think it was responsible for bug #511 as the ramp functions were not in use as the channels were not on the fast clock)</p>\n<p>The bug was already fixed in the working copy of the dual_species lab, but not committed due to the function being modified further by Shaun.</p>\n<p>The bug was fixed in the working copy of the spinor lab on Friday morning, but not committed.</p>\n<p>It is now committed!</p>", "type": "rendered"}, "parents": [{"hash": "746c4d5344766c48e5fa1bc35d45df88ea53c4f9", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/746c4d5344766c48e5fa1bc35d45df88ea53c4f9.json"}, "html": {"href": "#!/cavitylab/labscript/commits/746c4d5344766c48e5fa1bc35d45df88ea53c4f9"}}}], "date": "2012-05-28T02:42:57+00:00", "message": "the exp_ramp function of AnalogQuantity did not return duration.\n\nThis bug will only have affected the spinorlab if they were calling:\nt += channel.exp_ramp(....)\nwhich I don't think they were (I don't think it was responsible for bug #511 as the ramp functions were not in use as the channels were not on the fast clock)\n\nThe bug was already fixed in the working copy of the dual_species lab, but not committed due to the function being modified further by Shaun.\n\nThe bug was fixed in the working copy of the spinor lab on Friday morning, but not committed.\n\nIt is now committed!", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug.\n\nPreviously, if the ramp rate was so low that the time between instructions was greater than 55s (a rate of less than (1/110) Hz), the length between instructions would be out by half the remainder of the instruction length when divided by 55.\n\nThis is because we incremented the instruction counter j for the added LONG_DELAY instruction before making the END_LOOP instruction. We thus branched back to the LONG_DELAY instruction instead of the LOOP instruction defining the beginning of the loop. The length of time between the LOOP instruction and LONG_DELAY instruction was half the remainder of the instruction length when divided by 55 (where the instruction length is half the time between rising edges on the clock)", "markup": "markdown", "html": "<p>Fixed a bug.</p>\n<p>Previously, if the ramp rate was so low that the time between instructions was greater than 55s (a rate of less than (1/110) Hz), the length between instructions would be out by half the remainder of the instruction length when divided by 55.</p>\n<p>This is because we incremented the instruction counter j for the added LONG_DELAY instruction before making the END_LOOP instruction. We thus branched back to the LONG_DELAY instruction instead of the LOOP instruction defining the beginning of the loop. The length of time between the LOOP instruction and LONG_DELAY instruction was half the remainder of the instruction length when divided by 55 (where the instruction length is half the time between rising edges on the clock)</p>", "type": "rendered"}}, "hash": "746c4d5344766c48e5fa1bc35d45df88ea53c4f9", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/746c4d5344766c48e5fa1bc35d45df88ea53c4f9.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/746c4d5344766c48e5fa1bc35d45df88ea53c4f9/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/746c4d5344766c48e5fa1bc35d45df88ea53c4f9"}, "html": {"href": "#!/cavitylab/labscript/commits/746c4d5344766c48e5fa1bc35d45df88ea53c4f9"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/746c4d5344766c48e5fa1bc35d45df88ea53c4f9"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/746c4d5344766c48e5fa1bc35d45df88ea53c4f9/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/746c4d5344766c48e5fa1bc35d45df88ea53c4f9/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed a bug.\n\nPreviously, if the ramp rate was so low that the time between instructions was greater than 55s (a rate of less than (1/110) Hz), the length between instructions would be out by half the remainder of the instruction length when divided by 55.\n\nThis is because we incremented the instruction counter j for the added LONG_DELAY instruction before making the END_LOOP instruction. We thus branched back to the LONG_DELAY instruction instead of the LOOP instruction defining the beginning of the loop. The length of time between the LOOP instruction and LONG_DELAY instruction was half the remainder of the instruction length when divided by 55 (where the instruction length is half the time between rising edges on the clock)", "markup": "markdown", "html": "<p>Fixed a bug.</p>\n<p>Previously, if the ramp rate was so low that the time between instructions was greater than 55s (a rate of less than (1/110) Hz), the length between instructions would be out by half the remainder of the instruction length when divided by 55.</p>\n<p>This is because we incremented the instruction counter j for the added LONG_DELAY instruction before making the END_LOOP instruction. We thus branched back to the LONG_DELAY instruction instead of the LOOP instruction defining the beginning of the loop. The length of time between the LOOP instruction and LONG_DELAY instruction was half the remainder of the instruction length when divided by 55 (where the instruction length is half the time between rising edges on the clock)</p>", "type": "rendered"}, "parents": [{"hash": "30ad0c18991ddf864dbe892a7823c560a6781e7f", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/30ad0c18991ddf864dbe892a7823c560a6781e7f.json"}, "html": {"href": "#!/cavitylab/labscript/commits/30ad0c18991ddf864dbe892a7823c560a6781e7f"}}}], "date": "2012-05-28T02:36:23+00:00", "message": "Fixed a bug.\n\nPreviously, if the ramp rate was so low that the time between instructions was greater than 55s (a rate of less than (1/110) Hz), the length between instructions would be out by half the remainder of the instruction length when divided by 55.\n\nThis is because we incremented the instruction counter j for the added LONG_DELAY instruction before making the END_LOOP instruction. We thus branched back to the LONG_DELAY instruction instead of the LOOP instruction defining the beginning of the loop. The length of time between the LOOP instruction and LONG_DELAY instruction was half the remainder of the instruction length when divided by 55 (where the instruction length is half the time between rising edges on the clock)", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes part of bug #507, providing a better error from labscript.", "markup": "markdown", "html": "<p>Fixes part of bug #507, providing a better error from labscript.</p>", "type": "rendered"}}, "hash": "30ad0c18991ddf864dbe892a7823c560a6781e7f", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/30ad0c18991ddf864dbe892a7823c560a6781e7f.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/30ad0c18991ddf864dbe892a7823c560a6781e7f/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/30ad0c18991ddf864dbe892a7823c560a6781e7f"}, "html": {"href": "#!/cavitylab/labscript/commits/30ad0c18991ddf864dbe892a7823c560a6781e7f"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/30ad0c18991ddf864dbe892a7823c560a6781e7f"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/30ad0c18991ddf864dbe892a7823c560a6781e7f/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/30ad0c18991ddf864dbe892a7823c560a6781e7f/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes part of bug #507, providing a better error from labscript.", "markup": "markdown", "html": "<p>Fixes part of bug #507, providing a better error from labscript.</p>", "type": "rendered"}, "parents": [{"hash": "72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3"}}}], "date": "2012-05-21T02:32:08+00:00", "message": "Fixes part of bug #507, providing a better error from labscript.", "type": "commit"}, {"rendered": {"message": {"raw": "Added an exp_ramp function ramp.", "markup": "markdown", "html": "<p>Added an exp_ramp function ramp.</p>", "type": "rendered"}}, "hash": "72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3"}, "html": {"href": "#!/cavitylab/labscript/commits/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/72ee51b8ddc8ac6ab3dbda1ab9907e73b9437db3/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added an exp_ramp function ramp.", "markup": "markdown", "html": "<p>Added an exp_ramp function ramp.</p>", "type": "rendered"}, "parents": [{"hash": "525425ba03e32691cee611403b465410c70eab8d", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/525425ba03e32691cee611403b465410c70eab8d.json"}, "html": {"href": "#!/cavitylab/labscript/commits/525425ba03e32691cee611403b465410c70eab8d"}}}], "date": "2012-05-09T04:18:34+00:00", "message": "Added an exp_ramp function ramp.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug in new sine_ramp function (duration was not returned). Also added check for value type in constant function of AnalogQuantity class. This makes the origin of TypeError more apparent.", "markup": "markdown", "html": "<p>Fixed bug in new sine_ramp function (duration was not returned). Also added check for value type in constant function of AnalogQuantity class. This makes the origin of TypeError more apparent.</p>", "type": "rendered"}}, "hash": "525425ba03e32691cee611403b465410c70eab8d", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/525425ba03e32691cee611403b465410c70eab8d.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/525425ba03e32691cee611403b465410c70eab8d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/525425ba03e32691cee611403b465410c70eab8d"}, "html": {"href": "#!/cavitylab/labscript/commits/525425ba03e32691cee611403b465410c70eab8d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/525425ba03e32691cee611403b465410c70eab8d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/525425ba03e32691cee611403b465410c70eab8d/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/525425ba03e32691cee611403b465410c70eab8d/statuses_page=1.json"}}, "author": {"raw": "rander", "type": "author", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "summary": {"raw": "Fixed bug in new sine_ramp function (duration was not returned). Also added check for value type in constant function of AnalogQuantity class. This makes the origin of TypeError more apparent.", "markup": "markdown", "html": "<p>Fixed bug in new sine_ramp function (duration was not returned). Also added check for value type in constant function of AnalogQuantity class. This makes the origin of TypeError more apparent.</p>", "type": "rendered"}, "parents": [{"hash": "0b7f23c2182b596637aae1140a5ca229994e3815", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0b7f23c2182b596637aae1140a5ca229994e3815.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0b7f23c2182b596637aae1140a5ca229994e3815"}}}], "date": "2012-05-04T08:54:49+00:00", "message": "Fixed bug in new sine_ramp function (duration was not returned). Also added check for value type in constant function of AnalogQuantity class. This makes the origin of TypeError more apparent.", "type": "commit"}, {"rendered": {"message": {"raw": "Added sine_ramp function to labscript.", "markup": "markdown", "html": "<p>Added sine_ramp function to labscript.</p>", "type": "rendered"}}, "hash": "0b7f23c2182b596637aae1140a5ca229994e3815", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0b7f23c2182b596637aae1140a5ca229994e3815.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0b7f23c2182b596637aae1140a5ca229994e3815/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0b7f23c2182b596637aae1140a5ca229994e3815"}, "html": {"href": "#!/cavitylab/labscript/commits/0b7f23c2182b596637aae1140a5ca229994e3815"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0b7f23c2182b596637aae1140a5ca229994e3815"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0b7f23c2182b596637aae1140a5ca229994e3815/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0b7f23c2182b596637aae1140a5ca229994e3815/statuses_page=1.json"}}, "author": {"raw": "rander", "type": "author", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "summary": {"raw": "Added sine_ramp function to labscript.", "markup": "markdown", "html": "<p>Added sine_ramp function to labscript.</p>", "type": "rendered"}, "parents": [{"hash": "23dc12d0635585a8496f05568cde7c27ae7485d7", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/23dc12d0635585a8496f05568cde7c27ae7485d7.json"}, "html": {"href": "#!/cavitylab/labscript/commits/23dc12d0635585a8496f05568cde7c27ae7485d7"}}}], "date": "2012-05-03T16:06:55+00:00", "message": "Added sine_ramp function to labscript.", "type": "commit"}, {"rendered": {"message": {"raw": "Removed some redundant printlines", "markup": "markdown", "html": "<p>Removed some redundant printlines</p>", "type": "rendered"}}, "hash": "23dc12d0635585a8496f05568cde7c27ae7485d7", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/23dc12d0635585a8496f05568cde7c27ae7485d7.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/23dc12d0635585a8496f05568cde7c27ae7485d7/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/23dc12d0635585a8496f05568cde7c27ae7485d7"}, "html": {"href": "#!/cavitylab/labscript/commits/23dc12d0635585a8496f05568cde7c27ae7485d7"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/23dc12d0635585a8496f05568cde7c27ae7485d7"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/23dc12d0635585a8496f05568cde7c27ae7485d7/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/23dc12d0635585a8496f05568cde7c27ae7485d7/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Removed some redundant printlines", "markup": "markdown", "html": "<p>Removed some redundant printlines</p>", "type": "rendered"}, "parents": [{"hash": "3c36471c0d909615d82800881d898550904f0a77", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/3c36471c0d909615d82800881d898550904f0a77.json"}, "html": {"href": "#!/cavitylab/labscript/commits/3c36471c0d909615d82800881d898550904f0a77"}}}], "date": "2012-04-24T03:30:53+00:00", "message": "Removed some redundant printlines", "type": "commit"}, {"rendered": {"message": {"raw": "fixes #479, by rounding the end time of ramps to the nearest 0.1 ns, which is the same rounding applied to the times of other instructions. This way equality checks should come out as expected.", "markup": "markdown", "html": "<p>fixes #479, by rounding the end time of ramps to the nearest 0.1 ns, which is the same rounding applied to the times of other instructions. This way equality checks should come out as expected.</p>", "type": "rendered"}}, "hash": "3c36471c0d909615d82800881d898550904f0a77", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/3c36471c0d909615d82800881d898550904f0a77.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/3c36471c0d909615d82800881d898550904f0a77/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/3c36471c0d909615d82800881d898550904f0a77"}, "html": {"href": "#!/cavitylab/labscript/commits/3c36471c0d909615d82800881d898550904f0a77"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/3c36471c0d909615d82800881d898550904f0a77"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/3c36471c0d909615d82800881d898550904f0a77/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/3c36471c0d909615d82800881d898550904f0a77/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "fixes #479, by rounding the end time of ramps to the nearest 0.1 ns, which is the same rounding applied to the times of other instructions. This way equality checks should come out as expected.", "markup": "markdown", "html": "<p>fixes #479, by rounding the end time of ramps to the nearest 0.1 ns, which is the same rounding applied to the times of other instructions. This way equality checks should come out as expected.</p>", "type": "rendered"}, "parents": [{"hash": "0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c"}}}], "date": "2012-04-24T02:42:43+00:00", "message": "fixes #479, by rounding the end time of ramps to the nearest 0.1 ns, which is the same rounding applied to the times of other instructions. This way equality checks should come out as expected.", "type": "commit"}, {"rendered": {"message": {"raw": "Created html to latex conversion dictionaries", "markup": "markdown", "html": "<p>Created html to latex conversion dictionaries</p>", "type": "rendered"}}, "hash": "0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c"}, "html": {"href": "#!/cavitylab/labscript/commits/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0e2d1b8c1a29d3b1cf0311e0c8666eea12b5cb4c/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Created html to latex conversion dictionaries", "markup": "markdown", "html": "<p>Created html to latex conversion dictionaries</p>", "type": "rendered"}, "parents": [{"hash": "b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b"}}}], "date": "2012-02-29T04:37:50+00:00", "message": "Created html to latex conversion dictionaries", "type": "commit"}, {"rendered": {"message": {"raw": "Added bibfix folder", "markup": "markdown", "html": "<p>Added bibfix folder</p>", "type": "rendered"}}, "hash": "b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b"}, "html": {"href": "#!/cavitylab/labscript/commits/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/b67bebbc07d3cfaa2e1b5cc45de5f78906264b1b/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added bibfix folder", "markup": "markdown", "html": "<p>Added bibfix folder</p>", "type": "rendered"}, "parents": [{"hash": "ed7af56bcc411158045154c1523fb3aaf4bf654c", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/ed7af56bcc411158045154c1523fb3aaf4bf654c.json"}, "html": {"href": "#!/cavitylab/labscript/commits/ed7af56bcc411158045154c1523fb3aaf4bf654c"}}}], "date": "2012-02-29T04:31:21+00:00", "message": "Added bibfix folder", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug where unit conversions are mistakenly applied to devices that have none", "markup": "markdown", "html": "<p>Fixed bug where unit conversions are mistakenly applied to devices that have none</p>", "type": "rendered"}}, "hash": "ed7af56bcc411158045154c1523fb3aaf4bf654c", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/ed7af56bcc411158045154c1523fb3aaf4bf654c.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/ed7af56bcc411158045154c1523fb3aaf4bf654c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/ed7af56bcc411158045154c1523fb3aaf4bf654c"}, "html": {"href": "#!/cavitylab/labscript/commits/ed7af56bcc411158045154c1523fb3aaf4bf654c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/ed7af56bcc411158045154c1523fb3aaf4bf654c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/ed7af56bcc411158045154c1523fb3aaf4bf654c/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/ed7af56bcc411158045154c1523fb3aaf4bf654c/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Fixed bug where unit conversions are mistakenly applied to devices that have none", "markup": "markdown", "html": "<p>Fixed bug where unit conversions are mistakenly applied to devices that have none</p>", "type": "rendered"}, "parents": [{"hash": "2228897f9e3db3a36bfb3162e1eccd2049320a06", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/2228897f9e3db3a36bfb3162e1eccd2049320a06.json"}, "html": {"href": "#!/cavitylab/labscript/commits/2228897f9e3db3a36bfb3162e1eccd2049320a06"}}}], "date": "2012-02-23T03:49:31+00:00", "message": "Fixed bug where unit conversions are mistakenly applied to devices that have none", "type": "commit"}, {"rendered": {"message": {"raw": "Ficed final small bug in ZaberStageController, missing argument to make_timeseries", "markup": "markdown", "html": "<p>Ficed final small bug in ZaberStageController, missing argument to make_timeseries</p>", "type": "rendered"}}, "hash": "2228897f9e3db3a36bfb3162e1eccd2049320a06", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/2228897f9e3db3a36bfb3162e1eccd2049320a06.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/2228897f9e3db3a36bfb3162e1eccd2049320a06/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/2228897f9e3db3a36bfb3162e1eccd2049320a06"}, "html": {"href": "#!/cavitylab/labscript/commits/2228897f9e3db3a36bfb3162e1eccd2049320a06"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/2228897f9e3db3a36bfb3162e1eccd2049320a06"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/2228897f9e3db3a36bfb3162e1eccd2049320a06/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/2228897f9e3db3a36bfb3162e1eccd2049320a06/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Ficed final small bug in ZaberStageController, missing argument to make_timeseries", "markup": "markdown", "html": "<p>Ficed final small bug in ZaberStageController, missing argument to make_timeseries</p>", "type": "rendered"}, "parents": [{"hash": "bb49d2598a93b40e29d90740577a4096d5990435", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/bb49d2598a93b40e29d90740577a4096d5990435.json"}, "html": {"href": "#!/cavitylab/labscript/commits/bb49d2598a93b40e29d90740577a4096d5990435"}}}], "date": "2012-02-23T03:21:09+00:00", "message": "Ficed final small bug in ZaberStageController, missing argument to make_timeseries", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug with static devices", "markup": "markdown", "html": "<p>Fixed bug with static devices</p>", "type": "rendered"}}, "hash": "bb49d2598a93b40e29d90740577a4096d5990435", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/bb49d2598a93b40e29d90740577a4096d5990435.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/bb49d2598a93b40e29d90740577a4096d5990435/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/bb49d2598a93b40e29d90740577a4096d5990435"}, "html": {"href": "#!/cavitylab/labscript/commits/bb49d2598a93b40e29d90740577a4096d5990435"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/bb49d2598a93b40e29d90740577a4096d5990435"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/bb49d2598a93b40e29d90740577a4096d5990435/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/bb49d2598a93b40e29d90740577a4096d5990435/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Fixed bug with static devices", "markup": "markdown", "html": "<p>Fixed bug with static devices</p>", "type": "rendered"}, "parents": [{"hash": "b3e92d323d90c95e6babb4470617fb22d300c340", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/b3e92d323d90c95e6babb4470617fb22d300c340.json"}, "html": {"href": "#!/cavitylab/labscript/commits/b3e92d323d90c95e6babb4470617fb22d300c340"}}}], "date": "2012-02-23T03:12:32+00:00", "message": "Fixed bug with static devices", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed max values for Zaber Stage positions", "markup": "markdown", "html": "<p>Fixed max values for Zaber Stage positions</p>", "type": "rendered"}}, "hash": "b3e92d323d90c95e6babb4470617fb22d300c340", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/b3e92d323d90c95e6babb4470617fb22d300c340.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/b3e92d323d90c95e6babb4470617fb22d300c340/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/b3e92d323d90c95e6babb4470617fb22d300c340"}, "html": {"href": "#!/cavitylab/labscript/commits/b3e92d323d90c95e6babb4470617fb22d300c340"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/b3e92d323d90c95e6babb4470617fb22d300c340"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/b3e92d323d90c95e6babb4470617fb22d300c340/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/b3e92d323d90c95e6babb4470617fb22d300c340/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Fixed max values for Zaber Stage positions", "markup": "markdown", "html": "<p>Fixed max values for Zaber Stage positions</p>", "type": "rendered"}, "parents": [{"hash": "7e844b2f9d80ff80f6d2edde6c3018d370bf59f1", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1"}}}], "date": "2012-02-23T02:57:27+00:00", "message": "Fixed max values for Zaber Stage positions", "type": "commit"}, {"rendered": {"message": {"raw": "Added support for Zaber translation stages", "markup": "markdown", "html": "<p>Added support for Zaber translation stages</p>", "type": "rendered"}}, "hash": "7e844b2f9d80ff80f6d2edde6c3018d370bf59f1", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1"}, "html": {"href": "#!/cavitylab/labscript/commits/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7e844b2f9d80ff80f6d2edde6c3018d370bf59f1/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Added support for Zaber translation stages", "markup": "markdown", "html": "<p>Added support for Zaber translation stages</p>", "type": "rendered"}, "parents": [{"hash": "1f610841f36b1ad74b6485b9ea30f170a0e3717e", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1f610841f36b1ad74b6485b9ea30f170a0e3717e.json"}, "html": {"href": "#!/cavitylab/labscript/commits/1f610841f36b1ad74b6485b9ea30f170a0e3717e"}}}], "date": "2012-02-23T02:40:23+00:00", "message": "Added support for Zaber translation stages", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed error in error reporting", "markup": "markdown", "html": "<p>Fixed error in error reporting</p>", "type": "rendered"}}, "hash": "1f610841f36b1ad74b6485b9ea30f170a0e3717e", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1f610841f36b1ad74b6485b9ea30f170a0e3717e.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1f610841f36b1ad74b6485b9ea30f170a0e3717e/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1f610841f36b1ad74b6485b9ea30f170a0e3717e"}, "html": {"href": "#!/cavitylab/labscript/commits/1f610841f36b1ad74b6485b9ea30f170a0e3717e"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1f610841f36b1ad74b6485b9ea30f170a0e3717e"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1f610841f36b1ad74b6485b9ea30f170a0e3717e/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1f610841f36b1ad74b6485b9ea30f170a0e3717e/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed error in error reporting", "markup": "markdown", "html": "<p>Fixed error in error reporting</p>", "type": "rendered"}, "parents": [{"hash": "fdf6e6ba16031a305b61e730406454983a8d0c39", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fdf6e6ba16031a305b61e730406454983a8d0c39.json"}, "html": {"href": "#!/cavitylab/labscript/commits/fdf6e6ba16031a305b61e730406454983a8d0c39"}}}], "date": "2012-02-17T06:20:49+00:00", "message": "Fixed error in error reporting", "type": "commit"}, {"rendered": {"message": {"raw": "moved globals and device variables into the \"builtins\" module.\n\nAll globals and devices are now available as variables within any imported module", "markup": "markdown", "html": "<p>moved globals and device variables into the \"builtins\" module.</p>\n<p>All globals and devices are now available as variables within any imported module</p>", "type": "rendered"}}, "hash": "fdf6e6ba16031a305b61e730406454983a8d0c39", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fdf6e6ba16031a305b61e730406454983a8d0c39.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/fdf6e6ba16031a305b61e730406454983a8d0c39/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/fdf6e6ba16031a305b61e730406454983a8d0c39"}, "html": {"href": "#!/cavitylab/labscript/commits/fdf6e6ba16031a305b61e730406454983a8d0c39"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/fdf6e6ba16031a305b61e730406454983a8d0c39"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/fdf6e6ba16031a305b61e730406454983a8d0c39/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/fdf6e6ba16031a305b61e730406454983a8d0c39/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "moved globals and device variables into the \"builtins\" module.\n\nAll globals and devices are now available as variables within any imported module", "markup": "markdown", "html": "<p>moved globals and device variables into the \"builtins\" module.</p>\n<p>All globals and devices are now available as variables within any imported module</p>", "type": "rendered"}, "parents": [{"hash": "8821a6dfc781de2eaaa9d75fdb77eb277b3b500b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b"}}}], "date": "2012-02-16T05:43:47+00:00", "message": "moved globals and device variables into the \"builtins\" module.\n\nAll globals and devices are now available as variables within any imported module", "type": "commit"}, {"rendered": {"message": {"raw": "Modified Calibrations name to Unit conversions\nRenamed \"connected to\" to \"parent port\" in connection table and related code\n\nAdded a UnitConversionBase class which handles order of magnitude conversions (eg to p,n,u,m,k,M,G,T SI-prefixes) automatically. Just make your conversion class a subclass of UniConversionBase and pass you conversion a 'magnitudes' dictionary key with the value containing a list of prefixes as strings (eg {'magnitudes':['k','G'],...})", "markup": "markdown", "html": "<p>Modified Calibrations name to Unit conversions<br />\nRenamed \"connected to\" to \"parent port\" in connection table and related code</p>\n<p>Added a UnitConversionBase class which handles order of magnitude conversions (eg to p,n,u,m,k,M,G,T SI-prefixes) automatically. Just make your conversion class a subclass of UniConversionBase and pass you conversion a 'magnitudes' dictionary key with the value containing a list of prefixes as strings (eg {'magnitudes':['k','G'],...})</p>", "type": "rendered"}}, "hash": "8821a6dfc781de2eaaa9d75fdb77eb277b3b500b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b"}, "html": {"href": "#!/cavitylab/labscript/commits/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/8821a6dfc781de2eaaa9d75fdb77eb277b3b500b/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Modified Calibrations name to Unit conversions\nRenamed \"connected to\" to \"parent port\" in connection table and related code\n\nAdded a UnitConversionBase class which handles order of magnitude conversions (eg to p,n,u,m,k,M,G,T SI-prefixes) automatically. Just make your conversion class a subclass of UniConversionBase and pass you conversion a 'magnitudes' dictionary key with the value containing a list of prefixes as strings (eg {'magnitudes':['k','G'],...})", "markup": "markdown", "html": "<p>Modified Calibrations name to Unit conversions<br />\nRenamed \"connected to\" to \"parent port\" in connection table and related code</p>\n<p>Added a UnitConversionBase class which handles order of magnitude conversions (eg to p,n,u,m,k,M,G,T SI-prefixes) automatically. Just make your conversion class a subclass of UniConversionBase and pass you conversion a 'magnitudes' dictionary key with the value containing a list of prefixes as strings (eg {'magnitudes':['k','G'],...})</p>", "type": "rendered"}, "parents": [{"hash": "9f0203e8c7fe4c99af8594f454d550ef17911964", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f0203e8c7fe4c99af8594f454d550ef17911964.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9f0203e8c7fe4c99af8594f454d550ef17911964"}}}], "date": "2012-02-16T05:05:21+00:00", "message": "Modified Calibrations name to Unit conversions\nRenamed \"connected to\" to \"parent port\" in connection table and related code\n\nAdded a UnitConversionBase class which handles order of magnitude conversions (eg to p,n,u,m,k,M,G,T SI-prefixes) automatically. Just make your conversion class a subclass of UniConversionBase and pass you conversion a 'magnitudes' dictionary key with the value containing a list of prefixes as strings (eg {'magnitudes':['k','G'],...})", "type": "commit"}, {"rendered": {"message": {"raw": "No longer contains any API for programming in analysis routines", "markup": "markdown", "html": "<p>No longer contains any API for programming in analysis routines</p>", "type": "rendered"}}, "hash": "9f0203e8c7fe4c99af8594f454d550ef17911964", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f0203e8c7fe4c99af8594f454d550ef17911964.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9f0203e8c7fe4c99af8594f454d550ef17911964/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9f0203e8c7fe4c99af8594f454d550ef17911964"}, "html": {"href": "#!/cavitylab/labscript/commits/9f0203e8c7fe4c99af8594f454d550ef17911964"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9f0203e8c7fe4c99af8594f454d550ef17911964"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9f0203e8c7fe4c99af8594f454d550ef17911964/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9f0203e8c7fe4c99af8594f454d550ef17911964/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "No longer contains any API for programming in analysis routines", "markup": "markdown", "html": "<p>No longer contains any API for programming in analysis routines</p>", "type": "rendered"}, "parents": [{"hash": "83591aafdbe1c40153fdd872dbdbc27f8f0f97e8", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8.json"}, "html": {"href": "#!/cavitylab/labscript/commits/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8"}}}], "date": "2012-02-06T02:47:19+00:00", "message": "No longer contains any API for programming in analysis routines", "type": "commit"}, {"rendered": {"message": {"raw": "Added software limits for analog/DDS channels\nThis only applies to labscript files, and is untested. Will test significantly once I've implemented the software limits in BLACS manual mode too\n\nRenamed dds \"en\" channels in the connection table to \"gate\". SO if you have a DDS called xyz the gate will be in the connection table as \"xyz_gate\". This is to bring labscript in line with BLACS names, and should fix the saving and restoring of gate states issue when the connection table changes.\n\nNote, your connection table for BLACS will need to be recompiled or else newly compiled experiments won't submit, even if the connection table python file has not changed (the internal h5 name for dds gates has changed and things will not match)", "markup": "markdown", "html": "<p>Added software limits for analog/DDS channels<br />\nThis only applies to labscript files, and is untested. Will test significantly once I've implemented the software limits in BLACS manual mode too</p>\n<p>Renamed dds \"en\" channels in the connection table to \"gate\". SO if you have a DDS called xyz the gate will be in the connection table as \"xyz_gate\". This is to bring labscript in line with BLACS names, and should fix the saving and restoring of gate states issue when the connection table changes.</p>\n<p>Note, your connection table for BLACS will need to be recompiled or else newly compiled experiments won't submit, even if the connection table python file has not changed (the internal h5 name for dds gates has changed and things will not match)</p>", "type": "rendered"}}, "hash": "83591aafdbe1c40153fdd872dbdbc27f8f0f97e8", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8"}, "html": {"href": "#!/cavitylab/labscript/commits/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/83591aafdbe1c40153fdd872dbdbc27f8f0f97e8/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added software limits for analog/DDS channels\nThis only applies to labscript files, and is untested. Will test significantly once I've implemented the software limits in BLACS manual mode too\n\nRenamed dds \"en\" channels in the connection table to \"gate\". SO if you have a DDS called xyz the gate will be in the connection table as \"xyz_gate\". This is to bring labscript in line with BLACS names, and should fix the saving and restoring of gate states issue when the connection table changes.\n\nNote, your connection table for BLACS will need to be recompiled or else newly compiled experiments won't submit, even if the connection table python file has not changed (the internal h5 name for dds gates has changed and things will not match)", "markup": "markdown", "html": "<p>Added software limits for analog/DDS channels<br />\nThis only applies to labscript files, and is untested. Will test significantly once I've implemented the software limits in BLACS manual mode too</p>\n<p>Renamed dds \"en\" channels in the connection table to \"gate\". SO if you have a DDS called xyz the gate will be in the connection table as \"xyz_gate\". This is to bring labscript in line with BLACS names, and should fix the saving and restoring of gate states issue when the connection table changes.</p>\n<p>Note, your connection table for BLACS will need to be recompiled or else newly compiled experiments won't submit, even if the connection table python file has not changed (the internal h5 name for dds gates has changed and things will not match)</p>", "type": "rendered"}, "parents": [{"hash": "8605e26188e4c8c3f92d1b06cd8dff7189a4062c", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/8605e26188e4c8c3f92d1b06cd8dff7189a4062c.json"}, "html": {"href": "#!/cavitylab/labscript/commits/8605e26188e4c8c3f92d1b06cd8dff7189a4062c"}}}], "date": "2012-01-24T06:00:16+00:00", "message": "Added software limits for analog/DDS channels\nThis only applies to labscript files, and is untested. Will test significantly once I've implemented the software limits in BLACS manual mode too\n\nRenamed dds \"en\" channels in the connection table to \"gate\". SO if you have a DDS called xyz the gate will be in the connection table as \"xyz_gate\". This is to bring labscript in line with BLACS names, and should fix the saving and restoring of gate states issue when the connection table changes.\n\nNote, your connection table for BLACS will need to be recompiled or else newly compiled experiments won't submit, even if the connection table python file has not changed (the internal h5 name for dds gates has changed and things will not match)", "type": "commit"}, {"rendered": {"message": {"raw": "Added restoring of front panels for the NI cards and pulseblaster\n\nThe Digital Lock state is not yet restored as the user doesn't have a way to unlock yet (implementation coming soon)\n\nChanged the column names in the front_panel group in the h5 file to better reflect the fact that the units were stored in \"base units\"\n\nModified the definition of the calibrations functions to use the to_base/from_base syntax.", "markup": "markdown", "html": "<p>Added restoring of front panels for the NI cards and pulseblaster</p>\n<p>The Digital Lock state is not yet restored as the user doesn't have a way to unlock yet (implementation coming soon)</p>\n<p>Changed the column names in the front_panel group in the h5 file to better reflect the fact that the units were stored in \"base units\"</p>\n<p>Modified the definition of the calibrations functions to use the to_base/from_base syntax.</p>", "type": "rendered"}}, "hash": "8605e26188e4c8c3f92d1b06cd8dff7189a4062c", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/8605e26188e4c8c3f92d1b06cd8dff7189a4062c.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/8605e26188e4c8c3f92d1b06cd8dff7189a4062c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/8605e26188e4c8c3f92d1b06cd8dff7189a4062c"}, "html": {"href": "#!/cavitylab/labscript/commits/8605e26188e4c8c3f92d1b06cd8dff7189a4062c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/8605e26188e4c8c3f92d1b06cd8dff7189a4062c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/8605e26188e4c8c3f92d1b06cd8dff7189a4062c/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/8605e26188e4c8c3f92d1b06cd8dff7189a4062c/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added restoring of front panels for the NI cards and pulseblaster\n\nThe Digital Lock state is not yet restored as the user doesn't have a way to unlock yet (implementation coming soon)\n\nChanged the column names in the front_panel group in the h5 file to better reflect the fact that the units were stored in \"base units\"\n\nModified the definition of the calibrations functions to use the to_base/from_base syntax.", "markup": "markdown", "html": "<p>Added restoring of front panels for the NI cards and pulseblaster</p>\n<p>The Digital Lock state is not yet restored as the user doesn't have a way to unlock yet (implementation coming soon)</p>\n<p>Changed the column names in the front_panel group in the h5 file to better reflect the fact that the units were stored in \"base units\"</p>\n<p>Modified the definition of the calibrations functions to use the to_base/from_base syntax.</p>", "type": "rendered"}, "parents": [{"hash": "829f32d591e17a2b3d21f4378fb210b80f2324fb", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/829f32d591e17a2b3d21f4378fb210b80f2324fb.json"}, "html": {"href": "#!/cavitylab/labscript/commits/829f32d591e17a2b3d21f4378fb210b80f2324fb"}}}], "date": "2012-01-23T05:04:26+00:00", "message": "Added restoring of front panels for the NI cards and pulseblaster\n\nThe Digital Lock state is not yet restored as the user doesn't have a way to unlock yet (implementation coming soon)\n\nChanged the column names in the front_panel group in the h5 file to better reflect the fact that the units were stored in \"base units\"\n\nModified the definition of the calibrations functions to use the to_base/from_base syntax.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bugs in novatech and NI-6363 static mode. Buffered mode almost certainly is still broken. Will fix on Monday.", "markup": "markdown", "html": "<p>Fixed bugs in novatech and NI-6363 static mode. Buffered mode almost certainly is still broken. Will fix on Monday.</p>", "type": "rendered"}}, "hash": "829f32d591e17a2b3d21f4378fb210b80f2324fb", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/829f32d591e17a2b3d21f4378fb210b80f2324fb.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/829f32d591e17a2b3d21f4378fb210b80f2324fb/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/829f32d591e17a2b3d21f4378fb210b80f2324fb"}, "html": {"href": "#!/cavitylab/labscript/commits/829f32d591e17a2b3d21f4378fb210b80f2324fb"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/829f32d591e17a2b3d21f4378fb210b80f2324fb"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/829f32d591e17a2b3d21f4378fb210b80f2324fb/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/829f32d591e17a2b3d21f4378fb210b80f2324fb/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bugs in novatech and NI-6363 static mode. Buffered mode almost certainly is still broken. Will fix on Monday.", "markup": "markdown", "html": "<p>Fixed bugs in novatech and NI-6363 static mode. Buffered mode almost certainly is still broken. Will fix on Monday.</p>", "type": "rendered"}, "parents": [{"hash": "187323ba9b862ffcfa2da8d3248c4c71df11b3c5", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/187323ba9b862ffcfa2da8d3248c4c71df11b3c5.json"}, "html": {"href": "#!/cavitylab/labscript/commits/187323ba9b862ffcfa2da8d3248c4c71df11b3c5"}}}], "date": "2012-01-20T05:55:01+00:00", "message": "Fixed bugs in novatech and NI-6363 static mode. Buffered mode almost certainly is still broken. Will fix on Monday.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bugs in NI PCI 6363. BLACS now starts without it crashing. Actual static and buffered mode still require testing.", "markup": "markdown", "html": "<p>Fixed bugs in NI PCI 6363. BLACS now starts without it crashing. Actual static and buffered mode still require testing.</p>", "type": "rendered"}}, "hash": "187323ba9b862ffcfa2da8d3248c4c71df11b3c5", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/187323ba9b862ffcfa2da8d3248c4c71df11b3c5.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/187323ba9b862ffcfa2da8d3248c4c71df11b3c5/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/187323ba9b862ffcfa2da8d3248c4c71df11b3c5"}, "html": {"href": "#!/cavitylab/labscript/commits/187323ba9b862ffcfa2da8d3248c4c71df11b3c5"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/187323ba9b862ffcfa2da8d3248c4c71df11b3c5"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/187323ba9b862ffcfa2da8d3248c4c71df11b3c5/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/187323ba9b862ffcfa2da8d3248c4c71df11b3c5/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bugs in NI PCI 6363. BLACS now starts without it crashing. Actual static and buffered mode still require testing.", "markup": "markdown", "html": "<p>Fixed bugs in NI PCI 6363. BLACS now starts without it crashing. Actual static and buffered mode still require testing.</p>", "type": "rendered"}, "parents": [{"hash": "fc4315d9f8104e9a0c292f1171a0189193028ce1", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fc4315d9f8104e9a0c292f1171a0189193028ce1.json"}, "html": {"href": "#!/cavitylab/labscript/commits/fc4315d9f8104e9a0c292f1171a0189193028ce1"}}}], "date": "2012-01-20T05:07:47+00:00", "message": "Fixed bugs in NI PCI 6363. BLACS now starts without it crashing. Actual static and buffered mode still require testing.", "type": "commit"}, {"rendered": {"message": {"raw": "Made it such that an analysis group is created even if there are no analyses.", "markup": "markdown", "html": "<p>Made it such that an analysis group is created even if there are no analyses.</p>", "type": "rendered"}}, "hash": "fc4315d9f8104e9a0c292f1171a0189193028ce1", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fc4315d9f8104e9a0c292f1171a0189193028ce1.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/fc4315d9f8104e9a0c292f1171a0189193028ce1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/fc4315d9f8104e9a0c292f1171a0189193028ce1"}, "html": {"href": "#!/cavitylab/labscript/commits/fc4315d9f8104e9a0c292f1171a0189193028ce1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/fc4315d9f8104e9a0c292f1171a0189193028ce1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/fc4315d9f8104e9a0c292f1171a0189193028ce1/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/fc4315d9f8104e9a0c292f1171a0189193028ce1/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Made it such that an analysis group is created even if there are no analyses.", "markup": "markdown", "html": "<p>Made it such that an analysis group is created even if there are no analyses.</p>", "type": "rendered"}, "parents": [{"hash": "9f4565f57b9e76c19195569de901dded26ae212f", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f4565f57b9e76c19195569de901dded26ae212f.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9f4565f57b9e76c19195569de901dded26ae212f"}}}], "date": "2012-01-18T05:23:37+00:00", "message": "Made it such that an analysis group is created even if there are no analyses.", "type": "commit"}, {"rendered": {"message": {"raw": "Pulseblasters now take into account the enable/disable state of their DDS child objects when writing their Pulse programs. DDSs are disabled by default, remember to enable them in your experiments!", "markup": "markdown", "html": "<p>Pulseblasters now take into account the enable/disable state of their DDS child objects when writing their Pulse programs. DDSs are disabled by default, remember to enable them in your experiments!</p>", "type": "rendered"}}, "hash": "9f4565f57b9e76c19195569de901dded26ae212f", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f4565f57b9e76c19195569de901dded26ae212f.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9f4565f57b9e76c19195569de901dded26ae212f/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9f4565f57b9e76c19195569de901dded26ae212f"}, "html": {"href": "#!/cavitylab/labscript/commits/9f4565f57b9e76c19195569de901dded26ae212f"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9f4565f57b9e76c19195569de901dded26ae212f"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9f4565f57b9e76c19195569de901dded26ae212f/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9f4565f57b9e76c19195569de901dded26ae212f/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Pulseblasters now take into account the enable/disable state of their DDS child objects when writing their Pulse programs. DDSs are disabled by default, remember to enable them in your experiments!", "markup": "markdown", "html": "<p>Pulseblasters now take into account the enable/disable state of their DDS child objects when writing their Pulse programs. DDSs are disabled by default, remember to enable them in your experiments!</p>", "type": "rendered"}, "parents": [{"hash": "9ab93d1c2e7cdf41454db7da9c1efbe867d2b523", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523"}}}], "date": "2012-01-16T01:17:54+00:00", "message": "Pulseblasters now take into account the enable/disable state of their DDS child objects when writing their Pulse programs. DDSs are disabled by default, remember to enable them in your experiments!", "type": "commit"}, {"rendered": {"message": {"raw": "renamed the \"enable\" property in the DDS and StaticDDS classes to \"gate\" to avoid a conflict with a method of the same name.", "markup": "markdown", "html": "<p>renamed the \"enable\" property in the DDS and StaticDDS classes to \"gate\" to avoid a conflict with a method of the same name.</p>", "type": "rendered"}}, "hash": "9ab93d1c2e7cdf41454db7da9c1efbe867d2b523", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523"}, "html": {"href": "#!/cavitylab/labscript/commits/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9ab93d1c2e7cdf41454db7da9c1efbe867d2b523/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "renamed the \"enable\" property in the DDS and StaticDDS classes to \"gate\" to avoid a conflict with a method of the same name.", "markup": "markdown", "html": "<p>renamed the \"enable\" property in the DDS and StaticDDS classes to \"gate\" to avoid a conflict with a method of the same name.</p>", "type": "rendered"}, "parents": [{"hash": "3e87258a2e4f183c798e2a9690f7e32597cac13b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/3e87258a2e4f183c798e2a9690f7e32597cac13b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/3e87258a2e4f183c798e2a9690f7e32597cac13b"}}}], "date": "2012-01-16T00:53:20+00:00", "message": "renamed the \"enable\" property in the DDS and StaticDDS classes to \"gate\" to avoid a conflict with a method of the same name.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where the first instruction was set to 0 if a value wasn't specified at t=0. It is now set to use self.default_value instead.\n\nStarted to implement changes to DDS where you can specify the digital gate channel for a Novatech DDS, and can change the enable state for the PulseBlaster DDS's\n\nThe Novatech DDS modifications should now work, but need testing. The Pulseblaster is not implemented fully yet.\n\nNone of this should affect any existing labscript files as everything should be backwards compatible with the previous syntax!", "markup": "markdown", "html": "<p>Fixed a bug where the first instruction was set to 0 if a value wasn't specified at t=0. It is now set to use self.default_value instead.</p>\n<p>Started to implement changes to DDS where you can specify the digital gate channel for a Novatech DDS, and can change the enable state for the PulseBlaster DDS's</p>\n<p>The Novatech DDS modifications should now work, but need testing. The Pulseblaster is not implemented fully yet.</p>\n<p>None of this should affect any existing labscript files as everything should be backwards compatible with the previous syntax!</p>", "type": "rendered"}}, "hash": "3e87258a2e4f183c798e2a9690f7e32597cac13b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/3e87258a2e4f183c798e2a9690f7e32597cac13b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/3e87258a2e4f183c798e2a9690f7e32597cac13b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/3e87258a2e4f183c798e2a9690f7e32597cac13b"}, "html": {"href": "#!/cavitylab/labscript/commits/3e87258a2e4f183c798e2a9690f7e32597cac13b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/3e87258a2e4f183c798e2a9690f7e32597cac13b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/3e87258a2e4f183c798e2a9690f7e32597cac13b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/3e87258a2e4f183c798e2a9690f7e32597cac13b/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed a bug where the first instruction was set to 0 if a value wasn't specified at t=0. It is now set to use self.default_value instead.\n\nStarted to implement changes to DDS where you can specify the digital gate channel for a Novatech DDS, and can change the enable state for the PulseBlaster DDS's\n\nThe Novatech DDS modifications should now work, but need testing. The Pulseblaster is not implemented fully yet.\n\nNone of this should affect any existing labscript files as everything should be backwards compatible with the previous syntax!", "markup": "markdown", "html": "<p>Fixed a bug where the first instruction was set to 0 if a value wasn't specified at t=0. It is now set to use self.default_value instead.</p>\n<p>Started to implement changes to DDS where you can specify the digital gate channel for a Novatech DDS, and can change the enable state for the PulseBlaster DDS's</p>\n<p>The Novatech DDS modifications should now work, but need testing. The Pulseblaster is not implemented fully yet.</p>\n<p>None of this should affect any existing labscript files as everything should be backwards compatible with the previous syntax!</p>", "type": "rendered"}, "parents": [{"hash": "d16e46e9ad1fe9a7d51f0c7a8383388fa623a037", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037.json"}, "html": {"href": "#!/cavitylab/labscript/commits/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037"}}}], "date": "2012-01-13T06:38:04+00:00", "message": "Fixed a bug where the first instruction was set to 0 if a value wasn't specified at t=0. It is now set to use self.default_value instead.\n\nStarted to implement changes to DDS where you can specify the digital gate channel for a Novatech DDS, and can change the enable state for the PulseBlaster DDS's\n\nThe Novatech DDS modifications should now work, but need testing. The Pulseblaster is not implemented fully yet.\n\nNone of this should affect any existing labscript files as everything should be backwards compatible with the previous syntax!", "type": "commit"}, {"rendered": {"message": {"raw": "Added calibrations for AnalogOuts and DDS output types.", "markup": "markdown", "html": "<p>Added calibrations for AnalogOuts and DDS output types.</p>", "type": "rendered"}}, "hash": "d16e46e9ad1fe9a7d51f0c7a8383388fa623a037", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037"}, "html": {"href": "#!/cavitylab/labscript/commits/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/d16e46e9ad1fe9a7d51f0c7a8383388fa623a037/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added calibrations for AnalogOuts and DDS output types.", "markup": "markdown", "html": "<p>Added calibrations for AnalogOuts and DDS output types.</p>", "type": "rendered"}, "parents": [{"hash": "0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654"}}}], "date": "2012-01-13T04:13:23+00:00", "message": "Added calibrations for AnalogOuts and DDS output types.", "type": "commit"}, {"rendered": {"message": {"raw": "Made necessary changes to labscript to implement the new pulseblaster scheme. There are now two dummy instructions at the start which will be filled in by BLACS, and a brach to zero at the end.\nRequires testing.", "markup": "markdown", "html": "<p>Made necessary changes to labscript to implement the new pulseblaster scheme. There are now two dummy instructions at the start which will be filled in by BLACS, and a brach to zero at the end.<br />\nRequires testing.</p>", "type": "rendered"}}, "hash": "0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654"}, "html": {"href": "#!/cavitylab/labscript/commits/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0e15ebc6fb0ff2a674d48ec90b0f053dbbe77654/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Made necessary changes to labscript to implement the new pulseblaster scheme. There are now two dummy instructions at the start which will be filled in by BLACS, and a brach to zero at the end.\nRequires testing.", "markup": "markdown", "html": "<p>Made necessary changes to labscript to implement the new pulseblaster scheme. There are now two dummy instructions at the start which will be filled in by BLACS, and a brach to zero at the end.<br />\nRequires testing.</p>", "type": "rendered"}, "parents": [{"hash": "95a4f531ac3094e4fa6524e57a83205dd2644377", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/95a4f531ac3094e4fa6524e57a83205dd2644377.json"}, "html": {"href": "#!/cavitylab/labscript/commits/95a4f531ac3094e4fa6524e57a83205dd2644377"}}}], "date": "2012-01-12T22:57:35+00:00", "message": "Made necessary changes to labscript to implement the new pulseblaster scheme. There are now two dummy instructions at the start which will be filled in by BLACS, and a brach to zero at the end.\nRequires testing.", "type": "commit"}, {"rendered": {"message": {"raw": "Round all times to the nearest 0.1ns, so that floating point rounding errors don't break equality checks.", "markup": "markdown", "html": "<p>Round all times to the nearest 0.1ns, so that floating point rounding errors don't break equality checks.</p>", "type": "rendered"}}, "hash": "95a4f531ac3094e4fa6524e57a83205dd2644377", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/95a4f531ac3094e4fa6524e57a83205dd2644377.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/95a4f531ac3094e4fa6524e57a83205dd2644377/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/95a4f531ac3094e4fa6524e57a83205dd2644377"}, "html": {"href": "#!/cavitylab/labscript/commits/95a4f531ac3094e4fa6524e57a83205dd2644377"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/95a4f531ac3094e4fa6524e57a83205dd2644377"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/95a4f531ac3094e4fa6524e57a83205dd2644377/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/95a4f531ac3094e4fa6524e57a83205dd2644377/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Round all times to the nearest 0.1ns, so that floating point rounding errors don't break equality checks.", "markup": "markdown", "html": "<p>Round all times to the nearest 0.1ns, so that floating point rounding errors don't break equality checks.</p>", "type": "rendered"}, "parents": [{"hash": "12756d8b8658107085358f89c30abb65ba1cc517", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/12756d8b8658107085358f89c30abb65ba1cc517.json"}, "html": {"href": "#!/cavitylab/labscript/commits/12756d8b8658107085358f89c30abb65ba1cc517"}}}], "date": "2012-01-11T03:07:14+00:00", "message": "Round all times to the nearest 0.1ns, so that floating point rounding errors don't break equality checks.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where the Pulseblaster's DDS1 had its amplitude and phase swapped.", "markup": "markdown", "html": "<p>Fixed a bug where the Pulseblaster's DDS1 had its amplitude and phase swapped.</p>", "type": "rendered"}}, "hash": "12756d8b8658107085358f89c30abb65ba1cc517", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/12756d8b8658107085358f89c30abb65ba1cc517.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/12756d8b8658107085358f89c30abb65ba1cc517/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/12756d8b8658107085358f89c30abb65ba1cc517"}, "html": {"href": "#!/cavitylab/labscript/commits/12756d8b8658107085358f89c30abb65ba1cc517"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/12756d8b8658107085358f89c30abb65ba1cc517"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/12756d8b8658107085358f89c30abb65ba1cc517/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/12756d8b8658107085358f89c30abb65ba1cc517/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed a bug where the Pulseblaster's DDS1 had its amplitude and phase swapped.", "markup": "markdown", "html": "<p>Fixed a bug where the Pulseblaster's DDS1 had its amplitude and phase swapped.</p>", "type": "rendered"}, "parents": [{"hash": "cd76b7589148e33f4ad1a305b9aa40544abe2597", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/cd76b7589148e33f4ad1a305b9aa40544abe2597.json"}, "html": {"href": "#!/cavitylab/labscript/commits/cd76b7589148e33f4ad1a305b9aa40544abe2597"}}}], "date": "2012-01-05T05:37:18+00:00", "message": "Fixed a bug where the Pulseblaster's DDS1 had its amplitude and phase swapped.", "type": "commit"}, {"rendered": {"message": {"raw": "Pulseblaster DDSs now have their frequencies set in Hz", "markup": "markdown", "html": "<p>Pulseblaster DDSs now have their frequencies set in Hz</p>", "type": "rendered"}}, "hash": "cd76b7589148e33f4ad1a305b9aa40544abe2597", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/cd76b7589148e33f4ad1a305b9aa40544abe2597.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/cd76b7589148e33f4ad1a305b9aa40544abe2597/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/cd76b7589148e33f4ad1a305b9aa40544abe2597"}, "html": {"href": "#!/cavitylab/labscript/commits/cd76b7589148e33f4ad1a305b9aa40544abe2597"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/cd76b7589148e33f4ad1a305b9aa40544abe2597"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/cd76b7589148e33f4ad1a305b9aa40544abe2597/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/cd76b7589148e33f4ad1a305b9aa40544abe2597/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Pulseblaster DDSs now have their frequencies set in Hz", "markup": "markdown", "html": "<p>Pulseblaster DDSs now have their frequencies set in Hz</p>", "type": "rendered"}, "parents": [{"hash": "953c23a92c160160dd0f17022e11512d071c30ad", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/953c23a92c160160dd0f17022e11512d071c30ad.json"}, "html": {"href": "#!/cavitylab/labscript/commits/953c23a92c160160dd0f17022e11512d071c30ad"}}}], "date": "2012-01-05T04:32:03+00:00", "message": "Pulseblaster DDSs now have their frequencies set in Hz", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where registers were not picked correctly on the pulseblaster DDSs", "markup": "markdown", "html": "<p>Fixed a bug where registers were not picked correctly on the pulseblaster DDSs</p>", "type": "rendered"}}, "hash": "953c23a92c160160dd0f17022e11512d071c30ad", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/953c23a92c160160dd0f17022e11512d071c30ad.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/953c23a92c160160dd0f17022e11512d071c30ad/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/953c23a92c160160dd0f17022e11512d071c30ad"}, "html": {"href": "#!/cavitylab/labscript/commits/953c23a92c160160dd0f17022e11512d071c30ad"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/953c23a92c160160dd0f17022e11512d071c30ad"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/953c23a92c160160dd0f17022e11512d071c30ad/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/953c23a92c160160dd0f17022e11512d071c30ad/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed a bug where registers were not picked correctly on the pulseblaster DDSs", "markup": "markdown", "html": "<p>Fixed a bug where registers were not picked correctly on the pulseblaster DDSs</p>", "type": "rendered"}, "parents": [{"hash": "f1dba604043f8f04e4fbfb0b31a44697777eae00", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/f1dba604043f8f04e4fbfb0b31a44697777eae00.json"}, "html": {"href": "#!/cavitylab/labscript/commits/f1dba604043f8f04e4fbfb0b31a44697777eae00"}}}], "date": "2012-01-05T04:24:00+00:00", "message": "Fixed a bug where registers were not picked correctly on the pulseblaster DDSs", "type": "commit"}, {"rendered": {"message": {"raw": "Analysis system should now be able to plot results of motload rate in my specifically engineered example...", "markup": "markdown", "html": "<p>Analysis system should now be able to plot results of motload rate in my specifically engineered example...</p>", "type": "rendered"}}, "hash": "f1dba604043f8f04e4fbfb0b31a44697777eae00", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/f1dba604043f8f04e4fbfb0b31a44697777eae00.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/f1dba604043f8f04e4fbfb0b31a44697777eae00/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/f1dba604043f8f04e4fbfb0b31a44697777eae00"}, "html": {"href": "#!/cavitylab/labscript/commits/f1dba604043f8f04e4fbfb0b31a44697777eae00"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/f1dba604043f8f04e4fbfb0b31a44697777eae00"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/f1dba604043f8f04e4fbfb0b31a44697777eae00/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/f1dba604043f8f04e4fbfb0b31a44697777eae00/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Analysis system should now be able to plot results of motload rate in my specifically engineered example...", "markup": "markdown", "html": "<p>Analysis system should now be able to plot results of motload rate in my specifically engineered example...</p>", "type": "rendered"}, "parents": [{"hash": "0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4"}}}], "date": "2012-01-04T05:42:19+00:00", "message": "Analysis system should now be able to plot results of motload rate in my specifically engineered example...", "type": "commit"}, {"rendered": {"message": {"raw": "Made required changes to be able to record anaysis instructions, which will be followed by the analysis system once the experiment completes.", "markup": "markdown", "html": "<p>Made required changes to be able to record anaysis instructions, which will be followed by the analysis system once the experiment completes.</p>", "type": "rendered"}}, "hash": "0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4"}, "html": {"href": "#!/cavitylab/labscript/commits/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0ad221c5af7f7827fdcf0e86d8b311daa2ac70b4/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Made required changes to be able to record anaysis instructions, which will be followed by the analysis system once the experiment completes.", "markup": "markdown", "html": "<p>Made required changes to be able to record anaysis instructions, which will be followed by the analysis system once the experiment completes.</p>", "type": "rendered"}, "parents": [{"hash": "20f7aba8f5273451f3a04ab0349185793811f2c0", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/20f7aba8f5273451f3a04ab0349185793811f2c0.json"}, "html": {"href": "#!/cavitylab/labscript/commits/20f7aba8f5273451f3a04ab0349185793811f2c0"}}}], "date": "2012-01-04T01:11:23+00:00", "message": "Made required changes to be able to record anaysis instructions, which will be followed by the analysis system once the experiment completes.", "type": "commit"}, {"rendered": {"message": {"raw": "Analog acquisition now working in BLACS. Acquisition calls in labscript now return the duration of the acquisition.", "markup": "markdown", "html": "<p>Analog acquisition now working in BLACS. Acquisition calls in labscript now return the duration of the acquisition.</p>", "type": "rendered"}}, "hash": "20f7aba8f5273451f3a04ab0349185793811f2c0", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/20f7aba8f5273451f3a04ab0349185793811f2c0.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/20f7aba8f5273451f3a04ab0349185793811f2c0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/20f7aba8f5273451f3a04ab0349185793811f2c0"}, "html": {"href": "#!/cavitylab/labscript/commits/20f7aba8f5273451f3a04ab0349185793811f2c0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/20f7aba8f5273451f3a04ab0349185793811f2c0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/20f7aba8f5273451f3a04ab0349185793811f2c0/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/20f7aba8f5273451f3a04ab0349185793811f2c0/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Analog acquisition now working in BLACS. Acquisition calls in labscript now return the duration of the acquisition.", "markup": "markdown", "html": "<p>Analog acquisition now working in BLACS. Acquisition calls in labscript now return the duration of the acquisition.</p>", "type": "rendered"}, "parents": [{"hash": "4f9518003ccef0cf5c87f22640c2802b28f52f81", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4f9518003ccef0cf5c87f22640c2802b28f52f81.json"}, "html": {"href": "#!/cavitylab/labscript/commits/4f9518003ccef0cf5c87f22640c2802b28f52f81"}}}], "date": "2011-12-15T22:27:14+00:00", "message": "Analog acquisition now working in BLACS. Acquisition calls in labscript now return the duration of the acquisition.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bugs with NI PCI 6733 and 6363. Turns out if there wasn't any buffered digital output, the clock signal wouldn't be used properly for the analogue output. This was because the static-mode DO had ownership of the PFI which was being used for clocking.\n\nSo now when there is no DO, some empty DO is created. We can make this better in the future by having the task not take ownership of the PFI in the first place. In fact I'll do that soon, it's just complicated by the fact that the port/line syntax and PFI refer to the same terminals, so I have to work out which to skip over.", "markup": "markdown", "html": "<p>Fixed bugs with NI PCI 6733 and 6363. Turns out if there wasn't any buffered digital output, the clock signal wouldn't be used properly for the analogue output. This was because the static-mode DO had ownership of the PFI which was being used for clocking.</p>\n<p>So now when there is no DO, some empty DO is created. We can make this better in the future by having the task not take ownership of the PFI in the first place. In fact I'll do that soon, it's just complicated by the fact that the port/line syntax and PFI refer to the same terminals, so I have to work out which to skip over.</p>", "type": "rendered"}}, "hash": "4f9518003ccef0cf5c87f22640c2802b28f52f81", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4f9518003ccef0cf5c87f22640c2802b28f52f81.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/4f9518003ccef0cf5c87f22640c2802b28f52f81/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/4f9518003ccef0cf5c87f22640c2802b28f52f81"}, "html": {"href": "#!/cavitylab/labscript/commits/4f9518003ccef0cf5c87f22640c2802b28f52f81"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/4f9518003ccef0cf5c87f22640c2802b28f52f81"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/4f9518003ccef0cf5c87f22640c2802b28f52f81/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/4f9518003ccef0cf5c87f22640c2802b28f52f81/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bugs with NI PCI 6733 and 6363. Turns out if there wasn't any buffered digital output, the clock signal wouldn't be used properly for the analogue output. This was because the static-mode DO had ownership of the PFI which was being used for clocking.\n\nSo now when there is no DO, some empty DO is created. We can make this better in the future by having the task not take ownership of the PFI in the first place. In fact I'll do that soon, it's just complicated by the fact that the port/line syntax and PFI refer to the same terminals, so I have to work out which to skip over.", "markup": "markdown", "html": "<p>Fixed bugs with NI PCI 6733 and 6363. Turns out if there wasn't any buffered digital output, the clock signal wouldn't be used properly for the analogue output. This was because the static-mode DO had ownership of the PFI which was being used for clocking.</p>\n<p>So now when there is no DO, some empty DO is created. We can make this better in the future by having the task not take ownership of the PFI in the first place. In fact I'll do that soon, it's just complicated by the fact that the port/line syntax and PFI refer to the same terminals, so I have to work out which to skip over.</p>", "type": "rendered"}, "parents": [{"hash": "06b9088527fde855057aa1b293e77f11dfdb1b2a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/06b9088527fde855057aa1b293e77f11dfdb1b2a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/06b9088527fde855057aa1b293e77f11dfdb1b2a"}}}], "date": "2011-12-13T05:52:27+00:00", "message": "Fixed bugs with NI PCI 6733 and 6363. Turns out if there wasn't any buffered digital output, the clock signal wouldn't be used properly for the analogue output. This was because the static-mode DO had ownership of the PFI which was being used for clocking.\n\nSo now when there is no DO, some empty DO is created. We can make this better in the future by having the task not take ownership of the PFI in the first place. In fact I'll do that soon, it's just complicated by the fact that the port/line syntax and PFI refer to the same terminals, so I have to work out which to skip over.", "type": "commit"}, {"rendered": {"message": {"raw": "The NI PCI 6733 now checks to see that is has an even number of outputs, and throws an error if it doesn't.\nNI cards now take an initialisation parameter saying what PFI terminal they are getting the clock on. This need not be on the same device, if its on another NI device linked by an RTSI cable, that's fine too.\nAlso there is now always a clock tick at stop_time, but this cannot have new values -- the stop time must be after the final values of all devices and there is error checking for this. This final clock tick will be used when we implement the 'waits' feature, and will also be used to give the NI PCI 6733 it's one extra clock tick as required by bug #357.\nNI cards also now only create groups for analog and digital output and acquisition if they in fact have some data to put in that group. If there is no digital output for example, they don't even create a group for it. The hardware programming modules may have to implement some checking so that they don't crash if there is no data (they should simply skip that type of programming if there is no group)", "markup": "markdown", "html": "<p>The NI PCI 6733 now checks to see that is has an even number of outputs, and throws an error if it doesn't.<br />\nNI cards now take an initialisation parameter saying what PFI terminal they are getting the clock on. This need not be on the same device, if its on another NI device linked by an RTSI cable, that's fine too.<br />\nAlso there is now always a clock tick at stop_time, but this cannot have new values -- the stop time must be after the final values of all devices and there is error checking for this. This final clock tick will be used when we implement the 'waits' feature, and will also be used to give the NI PCI 6733 it's one extra clock tick as required by bug #357.<br />\nNI cards also now only create groups for analog and digital output and acquisition if they in fact have some data to put in that group. If there is no digital output for example, they don't even create a group for it. The hardware programming modules may have to implement some checking so that they don't crash if there is no data (they should simply skip that type of programming if there is no group)</p>", "type": "rendered"}}, "hash": "06b9088527fde855057aa1b293e77f11dfdb1b2a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/06b9088527fde855057aa1b293e77f11dfdb1b2a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/06b9088527fde855057aa1b293e77f11dfdb1b2a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/06b9088527fde855057aa1b293e77f11dfdb1b2a"}, "html": {"href": "#!/cavitylab/labscript/commits/06b9088527fde855057aa1b293e77f11dfdb1b2a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/06b9088527fde855057aa1b293e77f11dfdb1b2a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/06b9088527fde855057aa1b293e77f11dfdb1b2a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/06b9088527fde855057aa1b293e77f11dfdb1b2a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "The NI PCI 6733 now checks to see that is has an even number of outputs, and throws an error if it doesn't.\nNI cards now take an initialisation parameter saying what PFI terminal they are getting the clock on. This need not be on the same device, if its on another NI device linked by an RTSI cable, that's fine too.\nAlso there is now always a clock tick at stop_time, but this cannot have new values -- the stop time must be after the final values of all devices and there is error checking for this. This final clock tick will be used when we implement the 'waits' feature, and will also be used to give the NI PCI 6733 it's one extra clock tick as required by bug #357.\nNI cards also now only create groups for analog and digital output and acquisition if they in fact have some data to put in that group. If there is no digital output for example, they don't even create a group for it. The hardware programming modules may have to implement some checking so that they don't crash if there is no data (they should simply skip that type of programming if there is no group)", "markup": "markdown", "html": "<p>The NI PCI 6733 now checks to see that is has an even number of outputs, and throws an error if it doesn't.<br />\nNI cards now take an initialisation parameter saying what PFI terminal they are getting the clock on. This need not be on the same device, if its on another NI device linked by an RTSI cable, that's fine too.<br />\nAlso there is now always a clock tick at stop_time, but this cannot have new values -- the stop time must be after the final values of all devices and there is error checking for this. This final clock tick will be used when we implement the 'waits' feature, and will also be used to give the NI PCI 6733 it's one extra clock tick as required by bug #357.<br />\nNI cards also now only create groups for analog and digital output and acquisition if they in fact have some data to put in that group. If there is no digital output for example, they don't even create a group for it. The hardware programming modules may have to implement some checking so that they don't crash if there is no data (they should simply skip that type of programming if there is no group)</p>", "type": "rendered"}, "parents": [{"hash": "70b30db494b546d27864e9792df13467d82df778", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/70b30db494b546d27864e9792df13467d82df778.json"}, "html": {"href": "#!/cavitylab/labscript/commits/70b30db494b546d27864e9792df13467d82df778"}}}], "date": "2011-12-13T03:49:00+00:00", "message": "The NI PCI 6733 now checks to see that is has an even number of outputs, and throws an error if it doesn't.\nNI cards now take an initialisation parameter saying what PFI terminal they are getting the clock on. This need not be on the same device, if its on another NI device linked by an RTSI cable, that's fine too.\nAlso there is now always a clock tick at stop_time, but this cannot have new values -- the stop time must be after the final values of all devices and there is error checking for this. This final clock tick will be used when we implement the 'waits' feature, and will also be used to give the NI PCI 6733 it's one extra clock tick as required by bug #357.\nNI cards also now only create groups for analog and digital output and acquisition if they in fact have some data to put in that group. If there is no digital output for example, they don't even create a group for it. The hardware programming modules may have to implement some checking so that they don't crash if there is no data (they should simply skip that type of programming if there is no group)", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes in labscript and BLACS for the NI PCI 6733. Appears to be working for static mode, still requires testing for buffered mode.", "markup": "markdown", "html": "<p>Fixes in labscript and BLACS for the NI PCI 6733. Appears to be working for static mode, still requires testing for buffered mode.</p>", "type": "rendered"}}, "hash": "70b30db494b546d27864e9792df13467d82df778", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/70b30db494b546d27864e9792df13467d82df778.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/70b30db494b546d27864e9792df13467d82df778/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/70b30db494b546d27864e9792df13467d82df778"}, "html": {"href": "#!/cavitylab/labscript/commits/70b30db494b546d27864e9792df13467d82df778"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/70b30db494b546d27864e9792df13467d82df778"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/70b30db494b546d27864e9792df13467d82df778/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/70b30db494b546d27864e9792df13467d82df778/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes in labscript and BLACS for the NI PCI 6733. Appears to be working for static mode, still requires testing for buffered mode.", "markup": "markdown", "html": "<p>Fixes in labscript and BLACS for the NI PCI 6733. Appears to be working for static mode, still requires testing for buffered mode.</p>", "type": "rendered"}, "parents": [{"hash": "151c3a2aeca07811e33ad71a9328dc9cbafe8df6", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/151c3a2aeca07811e33ad71a9328dc9cbafe8df6.json"}, "html": {"href": "#!/cavitylab/labscript/commits/151c3a2aeca07811e33ad71a9328dc9cbafe8df6"}}}], "date": "2011-12-09T03:12:16+00:00", "message": "Fixes in labscript and BLACS for the NI PCI 6733. Appears to be working for static mode, still requires testing for buffered mode.", "type": "commit"}, {"rendered": {"message": {"raw": "Added BLACS tab and hardware programming file for the NI PCI 6733", "markup": "markdown", "html": "<p>Added BLACS tab and hardware programming file for the NI PCI 6733</p>", "type": "rendered"}}, "hash": "151c3a2aeca07811e33ad71a9328dc9cbafe8df6", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/151c3a2aeca07811e33ad71a9328dc9cbafe8df6.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/151c3a2aeca07811e33ad71a9328dc9cbafe8df6/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/151c3a2aeca07811e33ad71a9328dc9cbafe8df6"}, "html": {"href": "#!/cavitylab/labscript/commits/151c3a2aeca07811e33ad71a9328dc9cbafe8df6"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/151c3a2aeca07811e33ad71a9328dc9cbafe8df6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/151c3a2aeca07811e33ad71a9328dc9cbafe8df6/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/151c3a2aeca07811e33ad71a9328dc9cbafe8df6/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added BLACS tab and hardware programming file for the NI PCI 6733", "markup": "markdown", "html": "<p>Added BLACS tab and hardware programming file for the NI PCI 6733</p>", "type": "rendered"}, "parents": [{"hash": "1f5505e8ae64aa91d60770e5c9333a73454b6634", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1f5505e8ae64aa91d60770e5c9333a73454b6634.json"}, "html": {"href": "#!/cavitylab/labscript/commits/1f5505e8ae64aa91d60770e5c9333a73454b6634"}}}], "date": "2011-12-09T01:30:54+00:00", "message": "Added BLACS tab and hardware programming file for the NI PCI 6733", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed some bugs in the camera tab for BLACS. Still need to get save/load working or at the very least, skipped over.", "markup": "markdown", "html": "<p>Fixed some bugs in the camera tab for BLACS. Still need to get save/load working or at the very least, skipped over.</p>", "type": "rendered"}}, "hash": "1f5505e8ae64aa91d60770e5c9333a73454b6634", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1f5505e8ae64aa91d60770e5c9333a73454b6634.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1f5505e8ae64aa91d60770e5c9333a73454b6634/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1f5505e8ae64aa91d60770e5c9333a73454b6634"}, "html": {"href": "#!/cavitylab/labscript/commits/1f5505e8ae64aa91d60770e5c9333a73454b6634"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1f5505e8ae64aa91d60770e5c9333a73454b6634"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1f5505e8ae64aa91d60770e5c9333a73454b6634/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1f5505e8ae64aa91d60770e5c9333a73454b6634/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed some bugs in the camera tab for BLACS. Still need to get save/load working or at the very least, skipped over.", "markup": "markdown", "html": "<p>Fixed some bugs in the camera tab for BLACS. Still need to get save/load working or at the very least, skipped over.</p>", "type": "rendered"}, "parents": [{"hash": "13b54fed629e0f70f922dd3e107055c974bf51f2", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/13b54fed629e0f70f922dd3e107055c974bf51f2.json"}, "html": {"href": "#!/cavitylab/labscript/commits/13b54fed629e0f70f922dd3e107055c974bf51f2"}}}], "date": "2011-12-07T06:20:41+00:00", "message": "Fixed some bugs in the camera tab for BLACS. Still need to get save/load working or at the very least, skipped over.", "type": "commit"}, {"rendered": {"message": {"raw": "Got rid of camera subclass for specific model of camera. We'll keep just a single class, and a single BLACS tab for cameras in general. The imaging system will take care of the differences, and say no if you try to do something the connected camera can't do.", "markup": "markdown", "html": "<p>Got rid of camera subclass for specific model of camera. We'll keep just a single class, and a single BLACS tab for cameras in general. The imaging system will take care of the differences, and say no if you try to do something the connected camera can't do.</p>", "type": "rendered"}}, "hash": "13b54fed629e0f70f922dd3e107055c974bf51f2", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/13b54fed629e0f70f922dd3e107055c974bf51f2.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/13b54fed629e0f70f922dd3e107055c974bf51f2/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/13b54fed629e0f70f922dd3e107055c974bf51f2"}, "html": {"href": "#!/cavitylab/labscript/commits/13b54fed629e0f70f922dd3e107055c974bf51f2"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/13b54fed629e0f70f922dd3e107055c974bf51f2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/13b54fed629e0f70f922dd3e107055c974bf51f2/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/13b54fed629e0f70f922dd3e107055c974bf51f2/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Got rid of camera subclass for specific model of camera. We'll keep just a single class, and a single BLACS tab for cameras in general. The imaging system will take care of the differences, and say no if you try to do something the connected camera can't do.", "markup": "markdown", "html": "<p>Got rid of camera subclass for specific model of camera. We'll keep just a single class, and a single BLACS tab for cameras in general. The imaging system will take care of the differences, and say no if you try to do something the connected camera can't do.</p>", "type": "rendered"}, "parents": [{"hash": "2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef.json"}, "html": {"href": "#!/cavitylab/labscript/commits/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef"}}}], "date": "2011-12-07T00:58:16+00:00", "message": "Got rid of camera subclass for specific model of camera. We'll keep just a single class, and a single BLACS tab for cameras in general. The imaging system will take care of the differences, and say no if you try to do something the connected camera can't do.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug with the changes to the camera class I just commited.", "markup": "markdown", "html": "<p>Fixed a bug with the changes to the camera class I just commited.</p>", "type": "rendered"}}, "hash": "2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef"}, "html": {"href": "#!/cavitylab/labscript/commits/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/2cb83f25a3d7710a71ab01cfea0ef8c44014d9ef/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed a bug with the changes to the camera class I just commited.", "markup": "markdown", "html": "<p>Fixed a bug with the changes to the camera class I just commited.</p>", "type": "rendered"}, "parents": [{"hash": "c9a54528064bc0872adf2fbe38466cdc2e6e96c9", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c9a54528064bc0872adf2fbe38466cdc2e6e96c9.json"}, "html": {"href": "#!/cavitylab/labscript/commits/c9a54528064bc0872adf2fbe38466cdc2e6e96c9"}}}], "date": "2011-12-06T06:07:25+00:00", "message": "Fixed a bug with the changes to the camera class I just commited.", "type": "commit"}, {"rendered": {"message": {"raw": "Exposure time is now stored as an attribute to the camera group, rather than being in the list of exposures.", "markup": "markdown", "html": "<p>Exposure time is now stored as an attribute to the camera group, rather than being in the list of exposures.</p>", "type": "rendered"}}, "hash": "c9a54528064bc0872adf2fbe38466cdc2e6e96c9", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c9a54528064bc0872adf2fbe38466cdc2e6e96c9.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/c9a54528064bc0872adf2fbe38466cdc2e6e96c9/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/c9a54528064bc0872adf2fbe38466cdc2e6e96c9"}, "html": {"href": "#!/cavitylab/labscript/commits/c9a54528064bc0872adf2fbe38466cdc2e6e96c9"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/c9a54528064bc0872adf2fbe38466cdc2e6e96c9"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/c9a54528064bc0872adf2fbe38466cdc2e6e96c9/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/c9a54528064bc0872adf2fbe38466cdc2e6e96c9/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Exposure time is now stored as an attribute to the camera group, rather than being in the list of exposures.", "markup": "markdown", "html": "<p>Exposure time is now stored as an attribute to the camera group, rather than being in the list of exposures.</p>", "type": "rendered"}, "parents": [{"hash": "361b7c830d107194fad9db447c4e9e2e683bfbf4", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/361b7c830d107194fad9db447c4e9e2e683bfbf4.json"}, "html": {"href": "#!/cavitylab/labscript/commits/361b7c830d107194fad9db447c4e9e2e683bfbf4"}}}], "date": "2011-12-06T06:03:47+00:00", "message": "Exposure time is now stored as an attribute to the camera group, rather than being in the list of exposures.", "type": "commit"}, {"rendered": {"message": {"raw": "Camera class now requires a constant exposure time, rather than allowing for one each exposure. This must be set when the camera object is initialised.", "markup": "markdown", "html": "<p>Camera class now requires a constant exposure time, rather than allowing for one each exposure. This must be set when the camera object is initialised.</p>", "type": "rendered"}}, "hash": "361b7c830d107194fad9db447c4e9e2e683bfbf4", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/361b7c830d107194fad9db447c4e9e2e683bfbf4.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/361b7c830d107194fad9db447c4e9e2e683bfbf4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/361b7c830d107194fad9db447c4e9e2e683bfbf4"}, "html": {"href": "#!/cavitylab/labscript/commits/361b7c830d107194fad9db447c4e9e2e683bfbf4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/361b7c830d107194fad9db447c4e9e2e683bfbf4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/361b7c830d107194fad9db447c4e9e2e683bfbf4/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/361b7c830d107194fad9db447c4e9e2e683bfbf4/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Camera class now requires a constant exposure time, rather than allowing for one each exposure. This must be set when the camera object is initialised.", "markup": "markdown", "html": "<p>Camera class now requires a constant exposure time, rather than allowing for one each exposure. This must be set when the camera object is initialised.</p>", "type": "rendered"}, "parents": [{"hash": "affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4.json"}, "html": {"href": "#!/cavitylab/labscript/commits/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4"}}}], "date": "2011-12-06T06:02:02+00:00", "message": "Camera class now requires a constant exposure time, rather than allowing for one each exposure. This must be set when the camera object is initialised.", "type": "commit"}, {"rendered": {"message": {"raw": "Incorrect unpack statement in Camera class (line 881)", "markup": "markdown", "html": "<p>Incorrect unpack statement in Camera class (line 881)</p>", "type": "rendered"}}, "hash": "affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4"}, "html": {"href": "#!/cavitylab/labscript/commits/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/affcd6e3eb6d9219215fd91bbbd0ca3deb9022b4/statuses_page=1.json"}}, "author": {"raw": "martijnj", "type": "author"}, "summary": {"raw": "Incorrect unpack statement in Camera class (line 881)", "markup": "markdown", "html": "<p>Incorrect unpack statement in Camera class (line 881)</p>", "type": "rendered"}, "parents": [{"hash": "37368cfdb31a54ea2a3109b2b0a7012941de135d", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/37368cfdb31a54ea2a3109b2b0a7012941de135d.json"}, "html": {"href": "#!/cavitylab/labscript/commits/37368cfdb31a54ea2a3109b2b0a7012941de135d"}}}], "date": "2011-11-25T00:38:57+00:00", "message": "Incorrect unpack statement in Camera class (line 881)", "type": "commit"}, {"rendered": {"message": {"raw": "Implemented a camera class which takes care of multiple exposures and the digital triggering for said exposures. It records the exposure times and a string name for each exposure, as well as the frame type (frame_types = ['atoms','flat','dark','fluoro','clean']) into its group in the devices section of the hdf5 file.\nCompile example.py for an example!", "markup": "markdown", "html": "<p>Implemented a camera class which takes care of multiple exposures and the digital triggering for said exposures. It records the exposure times and a string name for each exposure, as well as the frame type (frame_types = ['atoms','flat','dark','fluoro','clean']) into its group in the devices section of the hdf5 file.<br />\nCompile example.py for an example!</p>", "type": "rendered"}}, "hash": "37368cfdb31a54ea2a3109b2b0a7012941de135d", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/37368cfdb31a54ea2a3109b2b0a7012941de135d.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/37368cfdb31a54ea2a3109b2b0a7012941de135d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/37368cfdb31a54ea2a3109b2b0a7012941de135d"}, "html": {"href": "#!/cavitylab/labscript/commits/37368cfdb31a54ea2a3109b2b0a7012941de135d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/37368cfdb31a54ea2a3109b2b0a7012941de135d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/37368cfdb31a54ea2a3109b2b0a7012941de135d/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/37368cfdb31a54ea2a3109b2b0a7012941de135d/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Implemented a camera class which takes care of multiple exposures and the digital triggering for said exposures. It records the exposure times and a string name for each exposure, as well as the frame type (frame_types = ['atoms','flat','dark','fluoro','clean']) into its group in the devices section of the hdf5 file.\nCompile example.py for an example!", "markup": "markdown", "html": "<p>Implemented a camera class which takes care of multiple exposures and the digital triggering for said exposures. It records the exposure times and a string name for each exposure, as well as the frame type (frame_types = ['atoms','flat','dark','fluoro','clean']) into its group in the devices section of the hdf5 file.<br />\nCompile example.py for an example!</p>", "type": "rendered"}, "parents": [{"hash": "bbba8b6f9022576515d82599618f2a2b2c978ccd", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/bbba8b6f9022576515d82599618f2a2b2c978ccd.json"}, "html": {"href": "#!/cavitylab/labscript/commits/bbba8b6f9022576515d82599618f2a2b2c978ccd"}}}], "date": "2011-11-24T04:01:09+00:00", "message": "Implemented a camera class which takes care of multiple exposures and the digital triggering for said exposures. It records the exposure times and a string name for each exposure, as well as the frame type (frame_types = ['atoms','flat','dark','fluoro','clean']) into its group in the devices section of the hdf5 file.\nCompile example.py for an example!", "type": "commit"}, {"rendered": {"message": {"raw": "Novatechs now have only one dummy instruction at the end.", "markup": "markdown", "html": "<p>Novatechs now have only one dummy instruction at the end.</p>", "type": "rendered"}}, "hash": "bbba8b6f9022576515d82599618f2a2b2c978ccd", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/bbba8b6f9022576515d82599618f2a2b2c978ccd.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/bbba8b6f9022576515d82599618f2a2b2c978ccd/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/bbba8b6f9022576515d82599618f2a2b2c978ccd"}, "html": {"href": "#!/cavitylab/labscript/commits/bbba8b6f9022576515d82599618f2a2b2c978ccd"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/bbba8b6f9022576515d82599618f2a2b2c978ccd"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/bbba8b6f9022576515d82599618f2a2b2c978ccd/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/bbba8b6f9022576515d82599618f2a2b2c978ccd/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Novatechs now have only one dummy instruction at the end.", "markup": "markdown", "html": "<p>Novatechs now have only one dummy instruction at the end.</p>", "type": "rendered"}, "parents": [{"hash": "0e6bdad502d650fb48da41343c2e63640cd14f39", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e6bdad502d650fb48da41343c2e63640cd14f39.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0e6bdad502d650fb48da41343c2e63640cd14f39"}}}], "date": "2011-11-23T02:45:04+00:00", "message": "Novatechs now have only one dummy instruction at the end.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes #319 slighly better (previous commit message said it was bug #307, this was a typo).\nNow throws an error if the experiment is not finite duration.", "markup": "markdown", "html": "<p>Fixes #319 slighly better (previous commit message said it was bug #307, this was a typo).<br />\nNow throws an error if the experiment is not finite duration.</p>", "type": "rendered"}}, "hash": "0e6bdad502d650fb48da41343c2e63640cd14f39", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e6bdad502d650fb48da41343c2e63640cd14f39.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0e6bdad502d650fb48da41343c2e63640cd14f39/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0e6bdad502d650fb48da41343c2e63640cd14f39"}, "html": {"href": "#!/cavitylab/labscript/commits/0e6bdad502d650fb48da41343c2e63640cd14f39"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0e6bdad502d650fb48da41343c2e63640cd14f39"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0e6bdad502d650fb48da41343c2e63640cd14f39/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0e6bdad502d650fb48da41343c2e63640cd14f39/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes #319 slighly better (previous commit message said it was bug #307, this was a typo).\nNow throws an error if the experiment is not finite duration.", "markup": "markdown", "html": "<p>Fixes #319 slighly better (previous commit message said it was bug #307, this was a typo).<br />\nNow throws an error if the experiment is not finite duration.</p>", "type": "rendered"}, "parents": [{"hash": "55626ae9ac2304b308fb459e432a3e0aeb7fd413", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/55626ae9ac2304b308fb459e432a3e0aeb7fd413.json"}, "html": {"href": "#!/cavitylab/labscript/commits/55626ae9ac2304b308fb459e432a3e0aeb7fd413"}}}], "date": "2011-11-22T10:14:29+00:00", "message": "Fixes #319 slighly better (previous commit message said it was bug #307, this was a typo).\nNow throws an error if the experiment is not finite duration.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixes bug #307. Pulseblasters now have a minimum of one clock tick (at t = 0), and if the experiment is of nonzero duration, a minimum of two (one at t=0 and another at the stop time).", "markup": "markdown", "html": "<p>Fixes bug #307. Pulseblasters now have a minimum of one clock tick (at t = 0), and if the experiment is of nonzero duration, a minimum of two (one at t=0 and another at the stop time).</p>", "type": "rendered"}}, "hash": "55626ae9ac2304b308fb459e432a3e0aeb7fd413", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/55626ae9ac2304b308fb459e432a3e0aeb7fd413.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/55626ae9ac2304b308fb459e432a3e0aeb7fd413/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/55626ae9ac2304b308fb459e432a3e0aeb7fd413"}, "html": {"href": "#!/cavitylab/labscript/commits/55626ae9ac2304b308fb459e432a3e0aeb7fd413"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/55626ae9ac2304b308fb459e432a3e0aeb7fd413"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/55626ae9ac2304b308fb459e432a3e0aeb7fd413/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/55626ae9ac2304b308fb459e432a3e0aeb7fd413/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixes bug #307. Pulseblasters now have a minimum of one clock tick (at t = 0), and if the experiment is of nonzero duration, a minimum of two (one at t=0 and another at the stop time).", "markup": "markdown", "html": "<p>Fixes bug #307. Pulseblasters now have a minimum of one clock tick (at t = 0), and if the experiment is of nonzero duration, a minimum of two (one at t=0 and another at the stop time).</p>", "type": "rendered"}, "parents": [{"hash": "48f5c190967309a7a9c4f155e673142fa0f0c889", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/48f5c190967309a7a9c4f155e673142fa0f0c889.json"}, "html": {"href": "#!/cavitylab/labscript/commits/48f5c190967309a7a9c4f155e673142fa0f0c889"}}}], "date": "2011-11-22T09:55:00+00:00", "message": "Fixes bug #307. Pulseblasters now have a minimum of one clock tick (at t = 0), and if the experiment is of nonzero duration, a minimum of two (one at t=0 and another at the stop time).", "type": "commit"}, {"rendered": {"message": {"raw": "Changed slow clock to a rising edge", "markup": "markdown", "html": "<p>Changed slow clock to a rising edge</p>", "type": "rendered"}}, "hash": "48f5c190967309a7a9c4f155e673142fa0f0c889", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/48f5c190967309a7a9c4f155e673142fa0f0c889.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/48f5c190967309a7a9c4f155e673142fa0f0c889/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/48f5c190967309a7a9c4f155e673142fa0f0c889"}, "html": {"href": "#!/cavitylab/labscript/commits/48f5c190967309a7a9c4f155e673142fa0f0c889"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/48f5c190967309a7a9c4f155e673142fa0f0c889"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/48f5c190967309a7a9c4f155e673142fa0f0c889/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/48f5c190967309a7a9c4f155e673142fa0f0c889/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Changed slow clock to a rising edge", "markup": "markdown", "html": "<p>Changed slow clock to a rising edge</p>", "type": "rendered"}, "parents": [{"hash": "5869a0721cbec6b26434e91ae560a06a67599f24", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5869a0721cbec6b26434e91ae560a06a67599f24.json"}, "html": {"href": "#!/cavitylab/labscript/commits/5869a0721cbec6b26434e91ae560a06a67599f24"}}}], "date": "2011-11-21T00:45:36+00:00", "message": "Changed slow clock to a rising edge", "type": "commit"}, {"rendered": {"message": {"raw": "(hopefully )fixed silly mistake in previous commit.", "markup": "markdown", "html": "<p>(hopefully )fixed silly mistake in previous commit.</p>", "type": "rendered"}}, "hash": "5869a0721cbec6b26434e91ae560a06a67599f24", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5869a0721cbec6b26434e91ae560a06a67599f24.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/5869a0721cbec6b26434e91ae560a06a67599f24/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/5869a0721cbec6b26434e91ae560a06a67599f24"}, "html": {"href": "#!/cavitylab/labscript/commits/5869a0721cbec6b26434e91ae560a06a67599f24"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/5869a0721cbec6b26434e91ae560a06a67599f24"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/5869a0721cbec6b26434e91ae560a06a67599f24/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/5869a0721cbec6b26434e91ae560a06a67599f24/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "(hopefully )fixed silly mistake in previous commit.", "markup": "markdown", "html": "<p>(hopefully )fixed silly mistake in previous commit.</p>", "type": "rendered"}, "parents": [{"hash": "0f1476dcc64865490f151d38b895223c3b48f21b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0f1476dcc64865490f151d38b895223c3b48f21b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0f1476dcc64865490f151d38b895223c3b48f21b"}}}], "date": "2011-11-10T07:08:22+00:00", "message": "(hopefully )fixed silly mistake in previous commit.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where PulseBlasters with no children wouldn't generate_code. Now we can compile connection tables where PulseBlasters have no children.", "markup": "markdown", "html": "<p>Fixed a bug where PulseBlasters with no children wouldn't generate_code. Now we can compile connection tables where PulseBlasters have no children.</p>", "type": "rendered"}}, "hash": "0f1476dcc64865490f151d38b895223c3b48f21b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0f1476dcc64865490f151d38b895223c3b48f21b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0f1476dcc64865490f151d38b895223c3b48f21b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0f1476dcc64865490f151d38b895223c3b48f21b"}, "html": {"href": "#!/cavitylab/labscript/commits/0f1476dcc64865490f151d38b895223c3b48f21b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0f1476dcc64865490f151d38b895223c3b48f21b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0f1476dcc64865490f151d38b895223c3b48f21b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0f1476dcc64865490f151d38b895223c3b48f21b/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed a bug where PulseBlasters with no children wouldn't generate_code. Now we can compile connection tables where PulseBlasters have no children.", "markup": "markdown", "html": "<p>Fixed a bug where PulseBlasters with no children wouldn't generate_code. Now we can compile connection tables where PulseBlasters have no children.</p>", "type": "rendered"}, "parents": [{"hash": "1270ee891124894e64143fdb11254c40b7257fc3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1270ee891124894e64143fdb11254c40b7257fc3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/1270ee891124894e64143fdb11254c40b7257fc3"}}}], "date": "2011-11-10T07:06:07+00:00", "message": "Fixed a bug where PulseBlasters with no children wouldn't generate_code. Now we can compile connection tables where PulseBlasters have no children.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug where Andor camera didn't work when its parent was not a PulseBlaster.\n\nThis was due to NI Cards not calling Device.generate_code after overriding that method. Device.generate_code simply calls generate_code on all child devices -- so since it wasn't being called, the Andor camera wasn't having its generate_code method called, and wasn't writing anything to the h5 file!", "markup": "markdown", "html": "<p>Fixed bug where Andor camera didn't work when its parent was not a PulseBlaster.</p>\n<p>This was due to NI Cards not calling Device.generate_code after overriding that method. Device.generate_code simply calls generate_code on all child devices -- so since it wasn't being called, the Andor camera wasn't having its generate_code method called, and wasn't writing anything to the h5 file!</p>", "type": "rendered"}}, "hash": "1270ee891124894e64143fdb11254c40b7257fc3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1270ee891124894e64143fdb11254c40b7257fc3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1270ee891124894e64143fdb11254c40b7257fc3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1270ee891124894e64143fdb11254c40b7257fc3"}, "html": {"href": "#!/cavitylab/labscript/commits/1270ee891124894e64143fdb11254c40b7257fc3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1270ee891124894e64143fdb11254c40b7257fc3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1270ee891124894e64143fdb11254c40b7257fc3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1270ee891124894e64143fdb11254c40b7257fc3/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bug where Andor camera didn't work when its parent was not a PulseBlaster.\n\nThis was due to NI Cards not calling Device.generate_code after overriding that method. Device.generate_code simply calls generate_code on all child devices -- so since it wasn't being called, the Andor camera wasn't having its generate_code method called, and wasn't writing anything to the h5 file!", "markup": "markdown", "html": "<p>Fixed bug where Andor camera didn't work when its parent was not a PulseBlaster.</p>\n<p>This was due to NI Cards not calling Device.generate_code after overriding that method. Device.generate_code simply calls generate_code on all child devices -- so since it wasn't being called, the Andor camera wasn't having its generate_code method called, and wasn't writing anything to the h5 file!</p>", "type": "rendered"}, "parents": [{"hash": "6a9990d6ba3035da50bba22fcb85622098f081a6", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6a9990d6ba3035da50bba22fcb85622098f081a6.json"}, "html": {"href": "#!/cavitylab/labscript/commits/6a9990d6ba3035da50bba22fcb85622098f081a6"}}}], "date": "2011-11-04T00:50:31+00:00", "message": "Fixed bug where Andor camera didn't work when its parent was not a PulseBlaster.\n\nThis was due to NI Cards not calling Device.generate_code after overriding that method. Device.generate_code simply calls generate_code on all child devices -- so since it wasn't being called, the Andor camera wasn't having its generate_code method called, and wasn't writing anything to the h5 file!", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed small bugs in AndoriXon", "markup": "markdown", "html": "<p>Fixed small bugs in AndoriXon</p>", "type": "rendered"}}, "hash": "6a9990d6ba3035da50bba22fcb85622098f081a6", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6a9990d6ba3035da50bba22fcb85622098f081a6.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/6a9990d6ba3035da50bba22fcb85622098f081a6/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/6a9990d6ba3035da50bba22fcb85622098f081a6"}, "html": {"href": "#!/cavitylab/labscript/commits/6a9990d6ba3035da50bba22fcb85622098f081a6"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/6a9990d6ba3035da50bba22fcb85622098f081a6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/6a9990d6ba3035da50bba22fcb85622098f081a6/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/6a9990d6ba3035da50bba22fcb85622098f081a6/statuses_page=1.json"}}, "author": {"raw": "shjohnst", "type": "author", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, "summary": {"raw": "Fixed small bugs in AndoriXon", "markup": "markdown", "html": "<p>Fixed small bugs in AndoriXon</p>", "type": "rendered"}, "parents": [{"hash": "61801e189a7f5c2588d3809c3a7f72849a410f01", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/61801e189a7f5c2588d3809c3a7f72849a410f01.json"}, "html": {"href": "#!/cavitylab/labscript/commits/61801e189a7f5c2588d3809c3a7f72849a410f01"}}}], "date": "2011-11-04T00:43:46+00:00", "message": "Fixed small bugs in AndoriXon", "type": "commit"}, {"rendered": {"message": {"raw": "Now supports Andor iXon cameras. The AndoriXon class is a subclass of DigitalOut, and is instantiated with the same arguments. The parent device and connection should be  the device and connection for the digital output that triggers the camera's acquisition.\nThe class has a method trigger(t) which specifies that you want the digital line to go high at time t to trigger the acquisition.\nThe class has a bunch of methods set_SomeParameter for setting all the cameras settings.\nIf any of them aren't set, a warning is thrown and the default value is used.\nThe camera has its own group in the devices group of the h5 file, and its group contains a single dataset with its settings. There is no information stored here for what the digital line does, that info is contained in the group for whichever Pulseblaster or NI card the digital line is connected to.", "markup": "markdown", "html": "<p>Now supports Andor iXon cameras. The AndoriXon class is a subclass of DigitalOut, and is instantiated with the same arguments. The parent device and connection should be  the device and connection for the digital output that triggers the camera's acquisition.<br />\nThe class has a method trigger(t) which specifies that you want the digital line to go high at time t to trigger the acquisition.<br />\nThe class has a bunch of methods set_SomeParameter for setting all the cameras settings.<br />\nIf any of them aren't set, a warning is thrown and the default value is used.<br />\nThe camera has its own group in the devices group of the h5 file, and its group contains a single dataset with its settings. There is no information stored here for what the digital line does, that info is contained in the group for whichever Pulseblaster or NI card the digital line is connected to.</p>", "type": "rendered"}}, "hash": "61801e189a7f5c2588d3809c3a7f72849a410f01", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/61801e189a7f5c2588d3809c3a7f72849a410f01.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/61801e189a7f5c2588d3809c3a7f72849a410f01/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/61801e189a7f5c2588d3809c3a7f72849a410f01"}, "html": {"href": "#!/cavitylab/labscript/commits/61801e189a7f5c2588d3809c3a7f72849a410f01"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/61801e189a7f5c2588d3809c3a7f72849a410f01"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/61801e189a7f5c2588d3809c3a7f72849a410f01/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/61801e189a7f5c2588d3809c3a7f72849a410f01/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Now supports Andor iXon cameras. The AndoriXon class is a subclass of DigitalOut, and is instantiated with the same arguments. The parent device and connection should be  the device and connection for the digital output that triggers the camera's acquisition.\nThe class has a method trigger(t) which specifies that you want the digital line to go high at time t to trigger the acquisition.\nThe class has a bunch of methods set_SomeParameter for setting all the cameras settings.\nIf any of them aren't set, a warning is thrown and the default value is used.\nThe camera has its own group in the devices group of the h5 file, and its group contains a single dataset with its settings. There is no information stored here for what the digital line does, that info is contained in the group for whichever Pulseblaster or NI card the digital line is connected to.", "markup": "markdown", "html": "<p>Now supports Andor iXon cameras. The AndoriXon class is a subclass of DigitalOut, and is instantiated with the same arguments. The parent device and connection should be  the device and connection for the digital output that triggers the camera's acquisition.<br />\nThe class has a method trigger(t) which specifies that you want the digital line to go high at time t to trigger the acquisition.<br />\nThe class has a bunch of methods set_SomeParameter for setting all the cameras settings.<br />\nIf any of them aren't set, a warning is thrown and the default value is used.<br />\nThe camera has its own group in the devices group of the h5 file, and its group contains a single dataset with its settings. There is no information stored here for what the digital line does, that info is contained in the group for whichever Pulseblaster or NI card the digital line is connected to.</p>", "type": "rendered"}, "parents": [{"hash": "4348aeab3c6580b6b678b2629c7270acbdd2ef93", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4348aeab3c6580b6b678b2629c7270acbdd2ef93.json"}, "html": {"href": "#!/cavitylab/labscript/commits/4348aeab3c6580b6b678b2629c7270acbdd2ef93"}}}], "date": "2011-11-02T06:08:23+00:00", "message": "Now supports Andor iXon cameras. The AndoriXon class is a subclass of DigitalOut, and is instantiated with the same arguments. The parent device and connection should be  the device and connection for the digital output that triggers the camera's acquisition.\nThe class has a method trigger(t) which specifies that you want the digital line to go high at time t to trigger the acquisition.\nThe class has a bunch of methods set_SomeParameter for setting all the cameras settings.\nIf any of them aren't set, a warning is thrown and the default value is used.\nThe camera has its own group in the devices group of the h5 file, and its group contains a single dataset with its settings. There is no information stored here for what the digital line does, that info is contained in the group for whichever Pulseblaster or NI card the digital line is connected to.", "type": "commit"}, {"rendered": {"message": {"raw": "Shutters now store their calibrations in a top level group called 'calibrations', then a subgroup called 'Shutter' (ie, the name of the class for shutter objects). This is how we should store all calibrations for devices, so that runviewer can use them to translate between hardware programming numbers and human written/readable numbers.\n\nWhilst the calibrations will almost certainly be stored in global variables most of the time, we don't want to define a naming convention or place any restrictions on how you should use globals, so this storing of calibrations is the final say on what calibrations actually got used at compile time.", "markup": "markdown", "html": "<p>Shutters now store their calibrations in a top level group called 'calibrations', then a subgroup called 'Shutter' (ie, the name of the class for shutter objects). This is how we should store all calibrations for devices, so that runviewer can use them to translate between hardware programming numbers and human written/readable numbers.</p>\n<p>Whilst the calibrations will almost certainly be stored in global variables most of the time, we don't want to define a naming convention or place any restrictions on how you should use globals, so this storing of calibrations is the final say on what calibrations actually got used at compile time.</p>", "type": "rendered"}}, "hash": "4348aeab3c6580b6b678b2629c7270acbdd2ef93", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4348aeab3c6580b6b678b2629c7270acbdd2ef93.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/4348aeab3c6580b6b678b2629c7270acbdd2ef93/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/4348aeab3c6580b6b678b2629c7270acbdd2ef93"}, "html": {"href": "#!/cavitylab/labscript/commits/4348aeab3c6580b6b678b2629c7270acbdd2ef93"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/4348aeab3c6580b6b678b2629c7270acbdd2ef93"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/4348aeab3c6580b6b678b2629c7270acbdd2ef93/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/4348aeab3c6580b6b678b2629c7270acbdd2ef93/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Shutters now store their calibrations in a top level group called 'calibrations', then a subgroup called 'Shutter' (ie, the name of the class for shutter objects). This is how we should store all calibrations for devices, so that runviewer can use them to translate between hardware programming numbers and human written/readable numbers.\n\nWhilst the calibrations will almost certainly be stored in global variables most of the time, we don't want to define a naming convention or place any restrictions on how you should use globals, so this storing of calibrations is the final say on what calibrations actually got used at compile time.", "markup": "markdown", "html": "<p>Shutters now store their calibrations in a top level group called 'calibrations', then a subgroup called 'Shutter' (ie, the name of the class for shutter objects). This is how we should store all calibrations for devices, so that runviewer can use them to translate between hardware programming numbers and human written/readable numbers.</p>\n<p>Whilst the calibrations will almost certainly be stored in global variables most of the time, we don't want to define a naming convention or place any restrictions on how you should use globals, so this storing of calibrations is the final say on what calibrations actually got used at compile time.</p>", "type": "rendered"}, "parents": [{"hash": "046029e2663f97d4671b876c85ec60b170afb2e1", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/046029e2663f97d4671b876c85ec60b170afb2e1.json"}, "html": {"href": "#!/cavitylab/labscript/commits/046029e2663f97d4671b876c85ec60b170afb2e1"}}}], "date": "2011-10-18T03:36:29+00:00", "message": "Shutters now store their calibrations in a top level group called 'calibrations', then a subgroup called 'Shutter' (ie, the name of the class for shutter objects). This is how we should store all calibrations for devices, so that runviewer can use them to translate between hardware programming numbers and human written/readable numbers.\n\nWhilst the calibrations will almost certainly be stored in global variables most of the time, we don't want to define a naming convention or place any restrictions on how you should use globals, so this storing of calibrations is the final say on what calibrations actually got used at compile time.", "type": "commit"}, {"rendered": {"message": {"raw": "Runviewer now plots all the way to stop_time, rather than stopping on the last data point. This is possible because labscript now stores the stop_time as an attribute to the pulseblasters.", "markup": "markdown", "html": "<p>Runviewer now plots all the way to stop_time, rather than stopping on the last data point. This is possible because labscript now stores the stop_time as an attribute to the pulseblasters.</p>", "type": "rendered"}}, "hash": "046029e2663f97d4671b876c85ec60b170afb2e1", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/046029e2663f97d4671b876c85ec60b170afb2e1.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/046029e2663f97d4671b876c85ec60b170afb2e1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/046029e2663f97d4671b876c85ec60b170afb2e1"}, "html": {"href": "#!/cavitylab/labscript/commits/046029e2663f97d4671b876c85ec60b170afb2e1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/046029e2663f97d4671b876c85ec60b170afb2e1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/046029e2663f97d4671b876c85ec60b170afb2e1/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/046029e2663f97d4671b876c85ec60b170afb2e1/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Runviewer now plots all the way to stop_time, rather than stopping on the last data point. This is possible because labscript now stores the stop_time as an attribute to the pulseblasters.", "markup": "markdown", "html": "<p>Runviewer now plots all the way to stop_time, rather than stopping on the last data point. This is possible because labscript now stores the stop_time as an attribute to the pulseblasters.</p>", "type": "rendered"}, "parents": [{"hash": "e8e10b57919ad68bd855c000ff3c5553a153106f", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/e8e10b57919ad68bd855c000ff3c5553a153106f.json"}, "html": {"href": "#!/cavitylab/labscript/commits/e8e10b57919ad68bd855c000ff3c5553a153106f"}}}], "date": "2011-10-17T23:36:50+00:00", "message": "Runviewer now plots all the way to stop_time, rather than stopping on the last data point. This is possible because labscript now stores the stop_time as an attribute to the pulseblasters.", "type": "commit"}, {"rendered": {"message": {"raw": "Now supports nothing happening for longer than 2^32 clock cycles (about 57 seconds) through use of LONG_DELAY PulseBlaster instructions.", "markup": "markdown", "html": "<p>Now supports nothing happening for longer than 2^32 clock cycles (about 57 seconds) through use of LONG_DELAY PulseBlaster instructions.</p>", "type": "rendered"}}, "hash": "e8e10b57919ad68bd855c000ff3c5553a153106f", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/e8e10b57919ad68bd855c000ff3c5553a153106f.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/e8e10b57919ad68bd855c000ff3c5553a153106f/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/e8e10b57919ad68bd855c000ff3c5553a153106f"}, "html": {"href": "#!/cavitylab/labscript/commits/e8e10b57919ad68bd855c000ff3c5553a153106f"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/e8e10b57919ad68bd855c000ff3c5553a153106f"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/e8e10b57919ad68bd855c000ff3c5553a153106f/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/e8e10b57919ad68bd855c000ff3c5553a153106f/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Now supports nothing happening for longer than 2^32 clock cycles (about 57 seconds) through use of LONG_DELAY PulseBlaster instructions.", "markup": "markdown", "html": "<p>Now supports nothing happening for longer than 2^32 clock cycles (about 57 seconds) through use of LONG_DELAY PulseBlaster instructions.</p>", "type": "rendered"}, "parents": [{"hash": "878798ca1b0ea60e84bb215bddbfd0bb326b9855", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/878798ca1b0ea60e84bb215bddbfd0bb326b9855.json"}, "html": {"href": "#!/cavitylab/labscript/commits/878798ca1b0ea60e84bb215bddbfd0bb326b9855"}}}], "date": "2011-10-17T09:14:08+00:00", "message": "Now supports nothing happening for longer than 2^32 clock cycles (about 57 seconds) through use of LONG_DELAY PulseBlaster instructions.", "type": "commit"}, {"rendered": {"message": {"raw": "Novatech DDSs can now use static mode too -- the two DDS outputs that don't support table mode. A new device class was made called StaticDDS, with methods to set phase, amp and freq. These should be instantiated as normal, as a child of the Novatech device, and with connection being set to 'channel 2' or 3.", "markup": "markdown", "html": "<p>Novatech DDSs can now use static mode too -- the two DDS outputs that don't support table mode. A new device class was made called StaticDDS, with methods to set phase, amp and freq. These should be instantiated as normal, as a child of the Novatech device, and with connection being set to 'channel 2' or 3.</p>", "type": "rendered"}}, "hash": "878798ca1b0ea60e84bb215bddbfd0bb326b9855", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/878798ca1b0ea60e84bb215bddbfd0bb326b9855.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/878798ca1b0ea60e84bb215bddbfd0bb326b9855/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/878798ca1b0ea60e84bb215bddbfd0bb326b9855"}, "html": {"href": "#!/cavitylab/labscript/commits/878798ca1b0ea60e84bb215bddbfd0bb326b9855"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/878798ca1b0ea60e84bb215bddbfd0bb326b9855"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/878798ca1b0ea60e84bb215bddbfd0bb326b9855/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/878798ca1b0ea60e84bb215bddbfd0bb326b9855/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Novatech DDSs can now use static mode too -- the two DDS outputs that don't support table mode. A new device class was made called StaticDDS, with methods to set phase, amp and freq. These should be instantiated as normal, as a child of the Novatech device, and with connection being set to 'channel 2' or 3.", "markup": "markdown", "html": "<p>Novatech DDSs can now use static mode too -- the two DDS outputs that don't support table mode. A new device class was made called StaticDDS, with methods to set phase, amp and freq. These should be instantiated as normal, as a child of the Novatech device, and with connection being set to 'channel 2' or 3.</p>", "type": "rendered"}, "parents": [{"hash": "7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd"}}}], "date": "2011-10-14T06:51:20+00:00", "message": "Novatech DDSs can now use static mode too -- the two DDS outputs that don't support table mode. A new device class was made called StaticDDS, with methods to set phase, amp and freq. These should be instantiated as normal, as a child of the Novatech device, and with connection being set to 'channel 2' or 3.", "type": "commit"}, {"rendered": {"message": {"raw": "Now creates both DDS groups for pulseblasters, regardless of whether the DDS is used.", "markup": "markdown", "html": "<p>Now creates both DDS groups for pulseblasters, regardless of whether the DDS is used.</p>", "type": "rendered"}}, "hash": "7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd"}, "html": {"href": "#!/cavitylab/labscript/commits/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7485bffd30f59cca1b58e4b0d4684f39d9d6c3cd/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Now creates both DDS groups for pulseblasters, regardless of whether the DDS is used.", "markup": "markdown", "html": "<p>Now creates both DDS groups for pulseblasters, regardless of whether the DDS is used.</p>", "type": "rendered"}, "parents": [{"hash": "fdab2f0458b4c0879ee95a71a0de26f16c62a26b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fdab2f0458b4c0879ee95a71a0de26f16c62a26b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/fdab2f0458b4c0879ee95a71a0de26f16c62a26b"}}}], "date": "2011-10-12T00:43:13+00:00", "message": "Now creates both DDS groups for pulseblasters, regardless of whether the DDS is used.", "type": "commit"}, {"rendered": {"message": {"raw": "Runmanager starting to support launching runviewer. Runviewer now supports pulseblasters (flags only so far). This support required a change in labscript, so won't work for plotting h5 files compiled before this change.", "markup": "markdown", "html": "<p>Runmanager starting to support launching runviewer. Runviewer now supports pulseblasters (flags only so far). This support required a change in labscript, so won't work for plotting h5 files compiled before this change.</p>", "type": "rendered"}}, "hash": "fdab2f0458b4c0879ee95a71a0de26f16c62a26b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fdab2f0458b4c0879ee95a71a0de26f16c62a26b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/fdab2f0458b4c0879ee95a71a0de26f16c62a26b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/fdab2f0458b4c0879ee95a71a0de26f16c62a26b"}, "html": {"href": "#!/cavitylab/labscript/commits/fdab2f0458b4c0879ee95a71a0de26f16c62a26b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/fdab2f0458b4c0879ee95a71a0de26f16c62a26b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/fdab2f0458b4c0879ee95a71a0de26f16c62a26b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/fdab2f0458b4c0879ee95a71a0de26f16c62a26b/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Runmanager starting to support launching runviewer. Runviewer now supports pulseblasters (flags only so far). This support required a change in labscript, so won't work for plotting h5 files compiled before this change.", "markup": "markdown", "html": "<p>Runmanager starting to support launching runviewer. Runviewer now supports pulseblasters (flags only so far). This support required a change in labscript, so won't work for plotting h5 files compiled before this change.</p>", "type": "rendered"}, "parents": [{"hash": "1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a"}}}], "date": "2011-10-12T00:19:05+00:00", "message": "Runmanager starting to support launching runviewer. Runviewer now supports pulseblasters (flags only so far). This support required a change in labscript, so won't work for plotting h5 files compiled before this change.", "type": "commit"}, {"rendered": {"message": {"raw": "Implements feature #298", "markup": "markdown", "html": "<p>Implements feature #298</p>", "type": "rendered"}}, "hash": "1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a"}, "html": {"href": "#!/cavitylab/labscript/commits/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1bedbe6047590ffd20bfa7ad9cbafe26c140ea6a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Implements feature #298", "markup": "markdown", "html": "<p>Implements feature #298</p>", "type": "rendered"}, "parents": [{"hash": "cf1cc3d9fe7f33c3dc17aea7b01e46101f062917", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917.json"}, "html": {"href": "#!/cavitylab/labscript/commits/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917"}}}], "date": "2011-10-10T00:50:31+00:00", "message": "Implements feature #298", "type": "commit"}, {"rendered": {"message": {"raw": "updated path within h5 file", "markup": "markdown", "html": "<p>updated path within h5 file</p>", "type": "rendered"}}, "hash": "cf1cc3d9fe7f33c3dc17aea7b01e46101f062917", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917"}, "html": {"href": "#!/cavitylab/labscript/commits/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/cf1cc3d9fe7f33c3dc17aea7b01e46101f062917/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "updated path within h5 file", "markup": "markdown", "html": "<p>updated path within h5 file</p>", "type": "rendered"}, "parents": [{"hash": "c9a9db9e95643070d4d8542b9a87a06a5eb2cda3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3"}}}], "date": "2011-10-05T00:06:04+00:00", "message": "updated path within h5 file", "type": "commit"}, {"rendered": {"message": {"raw": "Moved Pulsblaster Programming API to the hardware_programming folder. We now have a hardware_programming module!\n\nAdded a function to the pulseblaster code to program from a H5 file and a pulseblaster number. Added phase and enable code to all functions!\n\nChanged the way spinapi is imported.", "markup": "markdown", "html": "<p>Moved Pulsblaster Programming API to the hardware_programming folder. We now have a hardware_programming module!</p>\n<p>Added a function to the pulseblaster code to program from a H5 file and a pulseblaster number. Added phase and enable code to all functions!</p>\n<p>Changed the way spinapi is imported.</p>", "type": "rendered"}}, "hash": "c9a9db9e95643070d4d8542b9a87a06a5eb2cda3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3"}, "html": {"href": "#!/cavitylab/labscript/commits/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/c9a9db9e95643070d4d8542b9a87a06a5eb2cda3/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Moved Pulsblaster Programming API to the hardware_programming folder. We now have a hardware_programming module!\n\nAdded a function to the pulseblaster code to program from a H5 file and a pulseblaster number. Added phase and enable code to all functions!\n\nChanged the way spinapi is imported.", "markup": "markdown", "html": "<p>Moved Pulsblaster Programming API to the hardware_programming folder. We now have a hardware_programming module!</p>\n<p>Added a function to the pulseblaster code to program from a H5 file and a pulseblaster number. Added phase and enable code to all functions!</p>\n<p>Changed the way spinapi is imported.</p>", "type": "rendered"}, "parents": [{"hash": "55899fa823999d568ed3fa8d5e78b7bc8437bc86", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/55899fa823999d568ed3fa8d5e78b7bc8437bc86.json"}, "html": {"href": "#!/cavitylab/labscript/commits/55899fa823999d568ed3fa8d5e78b7bc8437bc86"}}}], "date": "2011-10-03T07:23:10+00:00", "message": "Moved Pulsblaster Programming API to the hardware_programming folder. We now have a hardware_programming module!\n\nAdded a function to the pulseblaster code to program from a H5 file and a pulseblaster number. Added phase and enable code to all functions!\n\nChanged the way spinapi is imported.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug where digital outputs on lines >= 8 were ignored. This was due to the fact than when a uint8 is shifted by more than 8 bits, python gives zero, rather than typecasting. So now the raw ones and zeros are stored as 32 bit ints, so they can be bitshifted further.", "markup": "markdown", "html": "<p>Fixed bug where digital outputs on lines &gt;= 8 were ignored. This was due to the fact than when a uint8 is shifted by more than 8 bits, python gives zero, rather than typecasting. So now the raw ones and zeros are stored as 32 bit ints, so they can be bitshifted further.</p>", "type": "rendered"}}, "hash": "55899fa823999d568ed3fa8d5e78b7bc8437bc86", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/55899fa823999d568ed3fa8d5e78b7bc8437bc86.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/55899fa823999d568ed3fa8d5e78b7bc8437bc86/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/55899fa823999d568ed3fa8d5e78b7bc8437bc86"}, "html": {"href": "#!/cavitylab/labscript/commits/55899fa823999d568ed3fa8d5e78b7bc8437bc86"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/55899fa823999d568ed3fa8d5e78b7bc8437bc86"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/55899fa823999d568ed3fa8d5e78b7bc8437bc86/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/55899fa823999d568ed3fa8d5e78b7bc8437bc86/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bug where digital outputs on lines >= 8 were ignored. This was due to the fact than when a uint8 is shifted by more than 8 bits, python gives zero, rather than typecasting. So now the raw ones and zeros are stored as 32 bit ints, so they can be bitshifted further.", "markup": "markdown", "html": "<p>Fixed bug where digital outputs on lines &gt;= 8 were ignored. This was due to the fact than when a uint8 is shifted by more than 8 bits, python gives zero, rather than typecasting. So now the raw ones and zeros are stored as 32 bit ints, so they can be bitshifted further.</p>", "type": "rendered"}, "parents": [{"hash": "c41468993b2aec1cea034442c11d6978e626fd8b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c41468993b2aec1cea034442c11d6978e626fd8b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/c41468993b2aec1cea034442c11d6978e626fd8b"}}}], "date": "2011-09-30T05:17:25+00:00", "message": "Fixed bug where digital outputs on lines >= 8 were ignored. This was due to the fact than when a uint8 is shifted by more than 8 bits, python gives zero, rather than typecasting. So now the raw ones and zeros are stored as 32 bit ints, so they can be bitshifted further.", "type": "commit"}, {"rendered": {"message": {"raw": "Created the RCP package, containing the moduleserver module. This is just a short script that takes a module name and port number as an argument. The script starts an XML RCP server which serves all the functions in that module, on the given port.\nFor example\npython -m RCP.moduleserver spinapi 8000\nwill serve all the functions in the spinapi module on port 8000.", "markup": "markdown", "html": "<p>Created the RCP package, containing the moduleserver module. This is just a short script that takes a module name and port number as an argument. The script starts an XML RCP server which serves all the functions in that module, on the given port.<br />\nFor example<br />\npython -m RCP.moduleserver spinapi 8000<br />\nwill serve all the functions in the spinapi module on port 8000.</p>", "type": "rendered"}}, "hash": "c41468993b2aec1cea034442c11d6978e626fd8b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/c41468993b2aec1cea034442c11d6978e626fd8b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/c41468993b2aec1cea034442c11d6978e626fd8b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/c41468993b2aec1cea034442c11d6978e626fd8b"}, "html": {"href": "#!/cavitylab/labscript/commits/c41468993b2aec1cea034442c11d6978e626fd8b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/c41468993b2aec1cea034442c11d6978e626fd8b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/c41468993b2aec1cea034442c11d6978e626fd8b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/c41468993b2aec1cea034442c11d6978e626fd8b/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Created the RCP package, containing the moduleserver module. This is just a short script that takes a module name and port number as an argument. The script starts an XML RCP server which serves all the functions in that module, on the given port.\nFor example\npython -m RCP.moduleserver spinapi 8000\nwill serve all the functions in the spinapi module on port 8000.", "markup": "markdown", "html": "<p>Created the RCP package, containing the moduleserver module. This is just a short script that takes a module name and port number as an argument. The script starts an XML RCP server which serves all the functions in that module, on the given port.<br />\nFor example<br />\npython -m RCP.moduleserver spinapi 8000<br />\nwill serve all the functions in the spinapi module on port 8000.</p>", "type": "rendered"}, "parents": [{"hash": "a274966f90acbd87de77495887ba40dc61ad7d70", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/a274966f90acbd87de77495887ba40dc61ad7d70.json"}, "html": {"href": "#!/cavitylab/labscript/commits/a274966f90acbd87de77495887ba40dc61ad7d70"}}}], "date": "2011-09-14T11:29:52+00:00", "message": "Created the RCP package, containing the moduleserver module. This is just a short script that takes a module name and port number as an argument. The script starts an XML RCP server which serves all the functions in that module, on the given port.\nFor example\npython -m RCP.moduleserver spinapi 8000\nwill serve all the functions in the spinapi module on port 8000.", "type": "commit"}, {"rendered": {"message": {"raw": "pulseblaster programming moved into its own module. Also modified so that the main function is called as a Python function instead of taking input from command line args and outputting to stdout. This way we can use the script from a LabVIEW script node, like:\nimport pulseblaster\nfinal states = pulseblaster.program_all_pulseblasters(h5_file, initial_states)", "markup": "markdown", "html": "<p>pulseblaster programming moved into its own module. Also modified so that the main function is called as a Python function instead of taking input from command line args and outputting to stdout. This way we can use the script from a LabVIEW script node, like:<br />\nimport pulseblaster<br />\nfinal states = pulseblaster.program_all_pulseblasters(h5_file, initial_states)</p>", "type": "rendered"}}, "hash": "a274966f90acbd87de77495887ba40dc61ad7d70", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/a274966f90acbd87de77495887ba40dc61ad7d70.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/a274966f90acbd87de77495887ba40dc61ad7d70/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/a274966f90acbd87de77495887ba40dc61ad7d70"}, "html": {"href": "#!/cavitylab/labscript/commits/a274966f90acbd87de77495887ba40dc61ad7d70"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/a274966f90acbd87de77495887ba40dc61ad7d70"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/a274966f90acbd87de77495887ba40dc61ad7d70/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/a274966f90acbd87de77495887ba40dc61ad7d70/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "pulseblaster programming moved into its own module. Also modified so that the main function is called as a Python function instead of taking input from command line args and outputting to stdout. This way we can use the script from a LabVIEW script node, like:\nimport pulseblaster\nfinal states = pulseblaster.program_all_pulseblasters(h5_file, initial_states)", "markup": "markdown", "html": "<p>pulseblaster programming moved into its own module. Also modified so that the main function is called as a Python function instead of taking input from command line args and outputting to stdout. This way we can use the script from a LabVIEW script node, like:<br />\nimport pulseblaster<br />\nfinal states = pulseblaster.program_all_pulseblasters(h5_file, initial_states)</p>", "type": "rendered"}, "parents": [{"hash": "17297e96ab008051403ec01dfc5e78cf860c9cec", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/17297e96ab008051403ec01dfc5e78cf860c9cec.json"}, "html": {"href": "#!/cavitylab/labscript/commits/17297e96ab008051403ec01dfc5e78cf860c9cec"}}}], "date": "2011-09-12T02:14:36+00:00", "message": "pulseblaster programming moved into its own module. Also modified so that the main function is called as a Python function instead of taking input from command line args and outputting to stdout. This way we can use the script from a LabVIEW script node, like:\nimport pulseblaster\nfinal states = pulseblaster.program_all_pulseblasters(h5_file, initial_states)", "type": "commit"}, {"rendered": {"message": {"raw": "deleted calibrations.h5", "markup": "markdown", "html": "<p>deleted calibrations.h5</p>", "type": "rendered"}}, "hash": "17297e96ab008051403ec01dfc5e78cf860c9cec", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/17297e96ab008051403ec01dfc5e78cf860c9cec.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/17297e96ab008051403ec01dfc5e78cf860c9cec/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/17297e96ab008051403ec01dfc5e78cf860c9cec"}, "html": {"href": "#!/cavitylab/labscript/commits/17297e96ab008051403ec01dfc5e78cf860c9cec"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/17297e96ab008051403ec01dfc5e78cf860c9cec"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/17297e96ab008051403ec01dfc5e78cf860c9cec/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/17297e96ab008051403ec01dfc5e78cf860c9cec/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "deleted calibrations.h5", "markup": "markdown", "html": "<p>deleted calibrations.h5</p>", "type": "rendered"}, "parents": [{"hash": "1349d3740f00433101bef4d6cba6674ad6fc5b6a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1349d3740f00433101bef4d6cba6674ad6fc5b6a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/1349d3740f00433101bef4d6cba6674ad6fc5b6a"}}}], "date": "2011-09-08T08:58:49+00:00", "message": "deleted calibrations.h5", "type": "commit"}, {"rendered": {"message": {"raw": "pulseblaster.py fixed up -- appears to work now. It takes as command line arguments the initial amplitudes and frequencies of the DDSs of all pulseblasters, and it prints to stdout the final frequencies and amplitudes for use by LabVIEW in maintaining output continuity.\n\nusege:\n\npython pulseblaster.py dds0initamp dds0initfreq dds1initamp dds1initfreq runfile.h5\n\nThis will return:\n\ndds0finalamp dds0finalfreq dds1finalamp dds1finalfreq.\n\nIf there is more than one pulesblaster, simply add another four arguments for each one, before the h5 file.\n\nFrequencies in MHz, amplitudes from 0 to 1.", "markup": "markdown", "html": "<p>pulseblaster.py fixed up -- appears to work now. It takes as command line arguments the initial amplitudes and frequencies of the DDSs of all pulseblasters, and it prints to stdout the final frequencies and amplitudes for use by LabVIEW in maintaining output continuity.</p>\n<p>usege:</p>\n<p>python pulseblaster.py dds0initamp dds0initfreq dds1initamp dds1initfreq runfile.h5</p>\n<p>This will return:</p>\n<p>dds0finalamp dds0finalfreq dds1finalamp dds1finalfreq.</p>\n<p>If there is more than one pulesblaster, simply add another four arguments for each one, before the h5 file.</p>\n<p>Frequencies in MHz, amplitudes from 0 to 1.</p>", "type": "rendered"}}, "hash": "1349d3740f00433101bef4d6cba6674ad6fc5b6a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/1349d3740f00433101bef4d6cba6674ad6fc5b6a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/1349d3740f00433101bef4d6cba6674ad6fc5b6a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/1349d3740f00433101bef4d6cba6674ad6fc5b6a"}, "html": {"href": "#!/cavitylab/labscript/commits/1349d3740f00433101bef4d6cba6674ad6fc5b6a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/1349d3740f00433101bef4d6cba6674ad6fc5b6a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/1349d3740f00433101bef4d6cba6674ad6fc5b6a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/1349d3740f00433101bef4d6cba6674ad6fc5b6a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "pulseblaster.py fixed up -- appears to work now. It takes as command line arguments the initial amplitudes and frequencies of the DDSs of all pulseblasters, and it prints to stdout the final frequencies and amplitudes for use by LabVIEW in maintaining output continuity.\n\nusege:\n\npython pulseblaster.py dds0initamp dds0initfreq dds1initamp dds1initfreq runfile.h5\n\nThis will return:\n\ndds0finalamp dds0finalfreq dds1finalamp dds1finalfreq.\n\nIf there is more than one pulesblaster, simply add another four arguments for each one, before the h5 file.\n\nFrequencies in MHz, amplitudes from 0 to 1.", "markup": "markdown", "html": "<p>pulseblaster.py fixed up -- appears to work now. It takes as command line arguments the initial amplitudes and frequencies of the DDSs of all pulseblasters, and it prints to stdout the final frequencies and amplitudes for use by LabVIEW in maintaining output continuity.</p>\n<p>usege:</p>\n<p>python pulseblaster.py dds0initamp dds0initfreq dds1initamp dds1initfreq runfile.h5</p>\n<p>This will return:</p>\n<p>dds0finalamp dds0finalfreq dds1finalamp dds1finalfreq.</p>\n<p>If there is more than one pulesblaster, simply add another four arguments for each one, before the h5 file.</p>\n<p>Frequencies in MHz, amplitudes from 0 to 1.</p>", "type": "rendered"}, "parents": [{"hash": "5c96d081bb86b18e931ba913e5b7be8d32e0047a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5c96d081bb86b18e931ba913e5b7be8d32e0047a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/5c96d081bb86b18e931ba913e5b7be8d32e0047a"}}}], "date": "2011-09-08T08:55:21+00:00", "message": "pulseblaster.py fixed up -- appears to work now. It takes as command line arguments the initial amplitudes and frequencies of the DDSs of all pulseblasters, and it prints to stdout the final frequencies and amplitudes for use by LabVIEW in maintaining output continuity.\n\nusege:\n\npython pulseblaster.py dds0initamp dds0initfreq dds1initamp dds1initfreq runfile.h5\n\nThis will return:\n\ndds0finalamp dds0finalfreq dds1finalamp dds1finalfreq.\n\nIf there is more than one pulesblaster, simply add another four arguments for each one, before the h5 file.\n\nFrequencies in MHz, amplitudes from 0 to 1.", "type": "commit"}, {"rendered": {"message": {"raw": "pulseblaster.py should now program all the DDS functionality for an arbitrary number of pulseblasters. It hasn't been tested though, and probably needs much work still.", "markup": "markdown", "html": "<p>pulseblaster.py should now program all the DDS functionality for an arbitrary number of pulseblasters. It hasn't been tested though, and probably needs much work still.</p>", "type": "rendered"}}, "hash": "5c96d081bb86b18e931ba913e5b7be8d32e0047a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5c96d081bb86b18e931ba913e5b7be8d32e0047a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/5c96d081bb86b18e931ba913e5b7be8d32e0047a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/5c96d081bb86b18e931ba913e5b7be8d32e0047a"}, "html": {"href": "#!/cavitylab/labscript/commits/5c96d081bb86b18e931ba913e5b7be8d32e0047a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/5c96d081bb86b18e931ba913e5b7be8d32e0047a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/5c96d081bb86b18e931ba913e5b7be8d32e0047a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/5c96d081bb86b18e931ba913e5b7be8d32e0047a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "pulseblaster.py should now program all the DDS functionality for an arbitrary number of pulseblasters. It hasn't been tested though, and probably needs much work still.", "markup": "markdown", "html": "<p>pulseblaster.py should now program all the DDS functionality for an arbitrary number of pulseblasters. It hasn't been tested though, and probably needs much work still.</p>", "type": "rendered"}, "parents": [{"hash": "aaec9b541b04e95d28d361a026109c6a59602a57", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/aaec9b541b04e95d28d361a026109c6a59602a57.json"}, "html": {"href": "#!/cavitylab/labscript/commits/aaec9b541b04e95d28d361a026109c6a59602a57"}}}], "date": "2011-09-08T07:40:16+00:00", "message": "pulseblaster.py should now program all the DDS functionality for an arbitrary number of pulseblasters. It hasn't been tested though, and probably needs much work still.", "type": "commit"}, {"rendered": {"message": {"raw": "Removed spinconfig and spinapi. These will now have their own system wide install so that pypulse and labscript don't have to bundle them.", "markup": "markdown", "html": "<p>Removed spinconfig and spinapi. These will now have their own system wide install so that pypulse and labscript don't have to bundle them.</p>", "type": "rendered"}}, "hash": "aaec9b541b04e95d28d361a026109c6a59602a57", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/aaec9b541b04e95d28d361a026109c6a59602a57.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/aaec9b541b04e95d28d361a026109c6a59602a57/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/aaec9b541b04e95d28d361a026109c6a59602a57"}, "html": {"href": "#!/cavitylab/labscript/commits/aaec9b541b04e95d28d361a026109c6a59602a57"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/aaec9b541b04e95d28d361a026109c6a59602a57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/aaec9b541b04e95d28d361a026109c6a59602a57/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/aaec9b541b04e95d28d361a026109c6a59602a57/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Removed spinconfig and spinapi. These will now have their own system wide install so that pypulse and labscript don't have to bundle them.", "markup": "markdown", "html": "<p>Removed spinconfig and spinapi. These will now have their own system wide install so that pypulse and labscript don't have to bundle them.</p>", "type": "rendered"}, "parents": [{"hash": "6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c.json"}, "html": {"href": "#!/cavitylab/labscript/commits/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c"}}}], "date": "2011-09-08T05:21:31+00:00", "message": "Removed spinconfig and spinapi. These will now have their own system wide install so that pypulse and labscript don't have to bundle them.", "type": "commit"}, {"rendered": {"message": {"raw": "Oooh just realised a bug after the last commit. I added the dummy values to the *sets* of amp, phase and freq registers, and the dummy values were all equal to zero. So if zero was already in there, this did nothing. And then when LabVIEW overwrote the dummy instructions with the state of the front panel, it would have caused all subsequent references to that register to be possibly nonzero.\n\nSo later parts of the pulse program requesting a zero value would point to these registers and the result could be any value at all. Bad.\n\nSo I've changed it now so that the zero gets added in explicitly.", "markup": "markdown", "html": "<p>Oooh just realised a bug after the last commit. I added the dummy values to the <em>sets</em> of amp, phase and freq registers, and the dummy values were all equal to zero. So if zero was already in there, this did nothing. And then when LabVIEW overwrote the dummy instructions with the state of the front panel, it would have caused all subsequent references to that register to be possibly nonzero.</p>\n<p>So later parts of the pulse program requesting a zero value would point to these registers and the result could be any value at all. Bad.</p>\n<p>So I've changed it now so that the zero gets added in explicitly.</p>", "type": "rendered"}}, "hash": "6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c"}, "html": {"href": "#!/cavitylab/labscript/commits/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/6b8e76b9fbb0ac86b84bf92313fcb45e55d1850c/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Oooh just realised a bug after the last commit. I added the dummy values to the *sets* of amp, phase and freq registers, and the dummy values were all equal to zero. So if zero was already in there, this did nothing. And then when LabVIEW overwrote the dummy instructions with the state of the front panel, it would have caused all subsequent references to that register to be possibly nonzero.\n\nSo later parts of the pulse program requesting a zero value would point to these registers and the result could be any value at all. Bad.\n\nSo I've changed it now so that the zero gets added in explicitly.", "markup": "markdown", "html": "<p>Oooh just realised a bug after the last commit. I added the dummy values to the <em>sets</em> of amp, phase and freq registers, and the dummy values were all equal to zero. So if zero was already in there, this did nothing. And then when LabVIEW overwrote the dummy instructions with the state of the front panel, it would have caused all subsequent references to that register to be possibly nonzero.</p>\n<p>So later parts of the pulse program requesting a zero value would point to these registers and the result could be any value at all. Bad.</p>\n<p>So I've changed it now so that the zero gets added in explicitly.</p>", "type": "rendered"}, "parents": [{"hash": "6d5b1f9789381b58bce4158157d8ed48fac473be", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6d5b1f9789381b58bce4158157d8ed48fac473be.json"}, "html": {"href": "#!/cavitylab/labscript/commits/6d5b1f9789381b58bce4158157d8ed48fac473be"}}}], "date": "2011-09-06T13:52:33+00:00", "message": "Oooh just realised a bug after the last commit. I added the dummy values to the *sets* of amp, phase and freq registers, and the dummy values were all equal to zero. So if zero was already in there, this did nothing. And then when LabVIEW overwrote the dummy instructions with the state of the front panel, it would have caused all subsequent references to that register to be possibly nonzero.\n\nSo later parts of the pulse program requesting a zero value would point to these registers and the result could be any value at all. Bad.\n\nSo I've changed it now so that the zero gets added in explicitly.", "type": "commit"}, {"rendered": {"message": {"raw": "PulseBlaster DDSs now work. You can create a DDS object, declare its parent to be a pulseblaster, and set its amplitude, freq and phase as with the existing DDS objects.\n\nThe ranges are checked, and the number of registers are checked such that labscript will throw an error if an out of bounds value is requested or the allowed number of registers is exceeded. Note that I've hardcoded the register limits for the new firmware -- the old firmware has much lower limits and labscript will not throw an error if they are exceeded.\n\nIf anyone is actually going to use one of the old boards for its DDS output, I can put the error checking in easily enough, and maybe make the firmware version an argument to the creation of a PulseBlaster object. But I won't bother unless they're actually in use.", "markup": "markdown", "html": "<p>PulseBlaster DDSs now work. You can create a DDS object, declare its parent to be a pulseblaster, and set its amplitude, freq and phase as with the existing DDS objects.</p>\n<p>The ranges are checked, and the number of registers are checked such that labscript will throw an error if an out of bounds value is requested or the allowed number of registers is exceeded. Note that I've hardcoded the register limits for the new firmware -- the old firmware has much lower limits and labscript will not throw an error if they are exceeded.</p>\n<p>If anyone is actually going to use one of the old boards for its DDS output, I can put the error checking in easily enough, and maybe make the firmware version an argument to the creation of a PulseBlaster object. But I won't bother unless they're actually in use.</p>", "type": "rendered"}}, "hash": "6d5b1f9789381b58bce4158157d8ed48fac473be", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/6d5b1f9789381b58bce4158157d8ed48fac473be.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/6d5b1f9789381b58bce4158157d8ed48fac473be/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/6d5b1f9789381b58bce4158157d8ed48fac473be"}, "html": {"href": "#!/cavitylab/labscript/commits/6d5b1f9789381b58bce4158157d8ed48fac473be"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/6d5b1f9789381b58bce4158157d8ed48fac473be"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/6d5b1f9789381b58bce4158157d8ed48fac473be/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/6d5b1f9789381b58bce4158157d8ed48fac473be/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "PulseBlaster DDSs now work. You can create a DDS object, declare its parent to be a pulseblaster, and set its amplitude, freq and phase as with the existing DDS objects.\n\nThe ranges are checked, and the number of registers are checked such that labscript will throw an error if an out of bounds value is requested or the allowed number of registers is exceeded. Note that I've hardcoded the register limits for the new firmware -- the old firmware has much lower limits and labscript will not throw an error if they are exceeded.\n\nIf anyone is actually going to use one of the old boards for its DDS output, I can put the error checking in easily enough, and maybe make the firmware version an argument to the creation of a PulseBlaster object. But I won't bother unless they're actually in use.", "markup": "markdown", "html": "<p>PulseBlaster DDSs now work. You can create a DDS object, declare its parent to be a pulseblaster, and set its amplitude, freq and phase as with the existing DDS objects.</p>\n<p>The ranges are checked, and the number of registers are checked such that labscript will throw an error if an out of bounds value is requested or the allowed number of registers is exceeded. Note that I've hardcoded the register limits for the new firmware -- the old firmware has much lower limits and labscript will not throw an error if they are exceeded.</p>\n<p>If anyone is actually going to use one of the old boards for its DDS output, I can put the error checking in easily enough, and maybe make the firmware version an argument to the creation of a PulseBlaster object. But I won't bother unless they're actually in use.</p>", "type": "rendered"}, "parents": [{"hash": "0e862ec09f11144c3406b0578446dd1f76d7e373", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e862ec09f11144c3406b0578446dd1f76d7e373.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0e862ec09f11144c3406b0578446dd1f76d7e373"}}}], "date": "2011-09-06T13:42:53+00:00", "message": "PulseBlaster DDSs now work. You can create a DDS object, declare its parent to be a pulseblaster, and set its amplitude, freq and phase as with the existing DDS objects.\n\nThe ranges are checked, and the number of registers are checked such that labscript will throw an error if an out of bounds value is requested or the allowed number of registers is exceeded. Note that I've hardcoded the register limits for the new firmware -- the old firmware has much lower limits and labscript will not throw an error if they are exceeded.\n\nIf anyone is actually going to use one of the old boards for its DDS output, I can put the error checking in easily enough, and maybe make the firmware version an argument to the creation of a PulseBlaster object. But I won't bother unless they're actually in use.", "type": "commit"}, {"rendered": {"message": {"raw": "Removed references to a calibration file. Calibrations will now be handled via global variables.", "markup": "markdown", "html": "<p>Removed references to a calibration file. Calibrations will now be handled via global variables.</p>", "type": "rendered"}}, "hash": "0e862ec09f11144c3406b0578446dd1f76d7e373", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0e862ec09f11144c3406b0578446dd1f76d7e373.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0e862ec09f11144c3406b0578446dd1f76d7e373/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0e862ec09f11144c3406b0578446dd1f76d7e373"}, "html": {"href": "#!/cavitylab/labscript/commits/0e862ec09f11144c3406b0578446dd1f76d7e373"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0e862ec09f11144c3406b0578446dd1f76d7e373"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0e862ec09f11144c3406b0578446dd1f76d7e373/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0e862ec09f11144c3406b0578446dd1f76d7e373/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Removed references to a calibration file. Calibrations will now be handled via global variables.", "markup": "markdown", "html": "<p>Removed references to a calibration file. Calibrations will now be handled via global variables.</p>", "type": "rendered"}, "parents": [{"hash": "07b22fea6ea85737556304bff85ffea2edf15fbb", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/07b22fea6ea85737556304bff85ffea2edf15fbb.json"}, "html": {"href": "#!/cavitylab/labscript/commits/07b22fea6ea85737556304bff85ffea2edf15fbb"}}}], "date": "2011-09-06T01:18:07+00:00", "message": "Removed references to a calibration file. Calibrations will now be handled via global variables.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where when running a labscript without an h5 file, the one created still had its globals group called 'params'. Now it's called 'globals' like it should be.", "markup": "markdown", "html": "<p>Fixed a bug where when running a labscript without an h5 file, the one created still had its globals group called 'params'. Now it's called 'globals' like it should be.</p>", "type": "rendered"}}, "hash": "07b22fea6ea85737556304bff85ffea2edf15fbb", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/07b22fea6ea85737556304bff85ffea2edf15fbb.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/07b22fea6ea85737556304bff85ffea2edf15fbb/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/07b22fea6ea85737556304bff85ffea2edf15fbb"}, "html": {"href": "#!/cavitylab/labscript/commits/07b22fea6ea85737556304bff85ffea2edf15fbb"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/07b22fea6ea85737556304bff85ffea2edf15fbb"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/07b22fea6ea85737556304bff85ffea2edf15fbb/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/07b22fea6ea85737556304bff85ffea2edf15fbb/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed a bug where when running a labscript without an h5 file, the one created still had its globals group called 'params'. Now it's called 'globals' like it should be.", "markup": "markdown", "html": "<p>Fixed a bug where when running a labscript without an h5 file, the one created still had its globals group called 'params'. Now it's called 'globals' like it should be.</p>", "type": "rendered"}, "parents": [{"hash": "679a97f731a03eeebec1de501ff6c532cbe853f1", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/679a97f731a03eeebec1de501ff6c532cbe853f1.json"}, "html": {"href": "#!/cavitylab/labscript/commits/679a97f731a03eeebec1de501ff6c532cbe853f1"}}}], "date": "2011-09-02T06:43:41+00:00", "message": "Fixed a bug where when running a labscript without an h5 file, the one created still had its globals group called 'params'. Now it's called 'globals' like it should be.", "type": "commit"}, {"rendered": {"message": {"raw": "Changed 'params' to 'globals' in looking up the group in the run file from which to pull out global variables.", "markup": "markdown", "html": "<p>Changed 'params' to 'globals' in looking up the group in the run file from which to pull out global variables.</p>", "type": "rendered"}}, "hash": "679a97f731a03eeebec1de501ff6c532cbe853f1", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/679a97f731a03eeebec1de501ff6c532cbe853f1.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/679a97f731a03eeebec1de501ff6c532cbe853f1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/679a97f731a03eeebec1de501ff6c532cbe853f1"}, "html": {"href": "#!/cavitylab/labscript/commits/679a97f731a03eeebec1de501ff6c532cbe853f1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/679a97f731a03eeebec1de501ff6c532cbe853f1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/679a97f731a03eeebec1de501ff6c532cbe853f1/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/679a97f731a03eeebec1de501ff6c532cbe853f1/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Changed 'params' to 'globals' in looking up the group in the run file from which to pull out global variables.", "markup": "markdown", "html": "<p>Changed 'params' to 'globals' in looking up the group in the run file from which to pull out global variables.</p>", "type": "rendered"}, "parents": [{"hash": "197ab0c69d2624548073f31494f2f1986937656a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/197ab0c69d2624548073f31494f2f1986937656a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/197ab0c69d2624548073f31494f2f1986937656a"}}}], "date": "2011-09-01T07:15:56+00:00", "message": "Changed 'params' to 'globals' in looking up the group in the run file from which to pull out global variables.", "type": "commit"}, {"rendered": {"message": {"raw": "removed h5_from_globals.py, it will now live under the runmanager project.", "markup": "markdown", "html": "<p>removed h5_from_globals.py, it will now live under the runmanager project.</p>", "type": "rendered"}}, "hash": "197ab0c69d2624548073f31494f2f1986937656a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/197ab0c69d2624548073f31494f2f1986937656a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/197ab0c69d2624548073f31494f2f1986937656a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/197ab0c69d2624548073f31494f2f1986937656a"}, "html": {"href": "#!/cavitylab/labscript/commits/197ab0c69d2624548073f31494f2f1986937656a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/197ab0c69d2624548073f31494f2f1986937656a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/197ab0c69d2624548073f31494f2f1986937656a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/197ab0c69d2624548073f31494f2f1986937656a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "removed h5_from_globals.py, it will now live under the runmanager project.", "markup": "markdown", "html": "<p>removed h5_from_globals.py, it will now live under the runmanager project.</p>", "type": "rendered"}, "parents": [{"hash": "7ef6e45ffa8a2276c1718e4dd336d4963d4712db", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7ef6e45ffa8a2276c1718e4dd336d4963d4712db.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7ef6e45ffa8a2276c1718e4dd336d4963d4712db"}}}], "date": "2011-08-29T09:19:35+00:00", "message": "removed h5_from_globals.py, it will now live under the runmanager project.", "type": "commit"}, {"rendered": {"message": {"raw": "added dialog.present() to the confirm-overwrite dialogue. Hopefully this will make it pop over the top of labview when it runs minimised from the state machine. Requires testing still.", "markup": "markdown", "html": "<p>added dialog.present() to the confirm-overwrite dialogue. Hopefully this will make it pop over the top of labview when it runs minimised from the state machine. Requires testing still.</p>", "type": "rendered"}}, "hash": "7ef6e45ffa8a2276c1718e4dd336d4963d4712db", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7ef6e45ffa8a2276c1718e4dd336d4963d4712db.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7ef6e45ffa8a2276c1718e4dd336d4963d4712db/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7ef6e45ffa8a2276c1718e4dd336d4963d4712db"}, "html": {"href": "#!/cavitylab/labscript/commits/7ef6e45ffa8a2276c1718e4dd336d4963d4712db"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7ef6e45ffa8a2276c1718e4dd336d4963d4712db"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7ef6e45ffa8a2276c1718e4dd336d4963d4712db/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7ef6e45ffa8a2276c1718e4dd336d4963d4712db/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "added dialog.present() to the confirm-overwrite dialogue. Hopefully this will make it pop over the top of labview when it runs minimised from the state machine. Requires testing still.", "markup": "markdown", "html": "<p>added dialog.present() to the confirm-overwrite dialogue. Hopefully this will make it pop over the top of labview when it runs minimised from the state machine. Requires testing still.</p>", "type": "rendered"}, "parents": [{"hash": "d4cf27f71107b362d2b79896c01e8717418e44b0", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d4cf27f71107b362d2b79896c01e8717418e44b0.json"}, "html": {"href": "#!/cavitylab/labscript/commits/d4cf27f71107b362d2b79896c01e8717418e44b0"}}}], "date": "2011-08-28T23:35:47+00:00", "message": "added dialog.present() to the confirm-overwrite dialogue. Hopefully this will make it pop over the top of labview when it runs minimised from the state machine. Requires testing still.", "type": "commit"}, {"rendered": {"message": {"raw": "Removed the scale factor for NI boards. Each individual output still has its scale factor in the connection table, I think, which we can use for plotting. Still undecided as to what to do about cases where there are multiple units an output could be viewed in. For example, magnetic field outputs can be viewed in Gauss, or in amps in the coils, or in volts on the input line.", "markup": "markdown", "html": "<p>Removed the scale factor for NI boards. Each individual output still has its scale factor in the connection table, I think, which we can use for plotting. Still undecided as to what to do about cases where there are multiple units an output could be viewed in. For example, magnetic field outputs can be viewed in Gauss, or in amps in the coils, or in volts on the input line.</p>", "type": "rendered"}}, "hash": "d4cf27f71107b362d2b79896c01e8717418e44b0", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d4cf27f71107b362d2b79896c01e8717418e44b0.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/d4cf27f71107b362d2b79896c01e8717418e44b0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/d4cf27f71107b362d2b79896c01e8717418e44b0"}, "html": {"href": "#!/cavitylab/labscript/commits/d4cf27f71107b362d2b79896c01e8717418e44b0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/d4cf27f71107b362d2b79896c01e8717418e44b0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/d4cf27f71107b362d2b79896c01e8717418e44b0/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/d4cf27f71107b362d2b79896c01e8717418e44b0/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Removed the scale factor for NI boards. Each individual output still has its scale factor in the connection table, I think, which we can use for plotting. Still undecided as to what to do about cases where there are multiple units an output could be viewed in. For example, magnetic field outputs can be viewed in Gauss, or in amps in the coils, or in volts on the input line.", "markup": "markdown", "html": "<p>Removed the scale factor for NI boards. Each individual output still has its scale factor in the connection table, I think, which we can use for plotting. Still undecided as to what to do about cases where there are multiple units an output could be viewed in. For example, magnetic field outputs can be viewed in Gauss, or in amps in the coils, or in volts on the input line.</p>", "type": "rendered"}, "parents": [{"hash": "f87cd4c1d244f3a0216015df70246c127defd244", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/f87cd4c1d244f3a0216015df70246c127defd244.json"}, "html": {"href": "#!/cavitylab/labscript/commits/f87cd4c1d244f3a0216015df70246c127defd244"}}}], "date": "2011-08-26T10:17:08+00:00", "message": "Removed the scale factor for NI boards. Each individual output still has its scale factor in the connection table, I think, which we can use for plotting. Still undecided as to what to do about cases where there are multiple units an output could be viewed in. For example, magnetic field outputs can be viewed in Gauss, or in amps in the coils, or in volts on the input line.", "type": "commit"}, {"rendered": {"message": {"raw": "added a script for making h5 files out of a command line list of globals. Also can be imported as a module and used to make h5 files out of a dictionary of globals.", "markup": "markdown", "html": "<p>added a script for making h5 files out of a command line list of globals. Also can be imported as a module and used to make h5 files out of a dictionary of globals.</p>", "type": "rendered"}}, "hash": "f87cd4c1d244f3a0216015df70246c127defd244", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/f87cd4c1d244f3a0216015df70246c127defd244.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/f87cd4c1d244f3a0216015df70246c127defd244/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/f87cd4c1d244f3a0216015df70246c127defd244"}, "html": {"href": "#!/cavitylab/labscript/commits/f87cd4c1d244f3a0216015df70246c127defd244"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/f87cd4c1d244f3a0216015df70246c127defd244"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/f87cd4c1d244f3a0216015df70246c127defd244/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/f87cd4c1d244f3a0216015df70246c127defd244/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "added a script for making h5 files out of a command line list of globals. Also can be imported as a module and used to make h5 files out of a dictionary of globals.", "markup": "markdown", "html": "<p>added a script for making h5 files out of a command line list of globals. Also can be imported as a module and used to make h5 files out of a dictionary of globals.</p>", "type": "rendered"}, "parents": [{"hash": "237aa83b5e638c3234026f67f0506fed7e51c401", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/237aa83b5e638c3234026f67f0506fed7e51c401.json"}, "html": {"href": "#!/cavitylab/labscript/commits/237aa83b5e638c3234026f67f0506fed7e51c401"}}}], "date": "2011-08-26T10:10:14+00:00", "message": "added a script for making h5 files out of a command line list of globals. Also can be imported as a module and used to make h5 files out of a dictionary of globals.", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed bug where maximum-clock-rate-exceeded error did not display properly.", "markup": "markdown", "html": "<p>Fixed bug where maximum-clock-rate-exceeded error did not display properly.</p>", "type": "rendered"}}, "hash": "237aa83b5e638c3234026f67f0506fed7e51c401", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/237aa83b5e638c3234026f67f0506fed7e51c401.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/237aa83b5e638c3234026f67f0506fed7e51c401/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/237aa83b5e638c3234026f67f0506fed7e51c401"}, "html": {"href": "#!/cavitylab/labscript/commits/237aa83b5e638c3234026f67f0506fed7e51c401"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/237aa83b5e638c3234026f67f0506fed7e51c401"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/237aa83b5e638c3234026f67f0506fed7e51c401/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/237aa83b5e638c3234026f67f0506fed7e51c401/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fixed bug where maximum-clock-rate-exceeded error did not display properly.", "markup": "markdown", "html": "<p>Fixed bug where maximum-clock-rate-exceeded error did not display properly.</p>", "type": "rendered"}, "parents": [{"hash": "7d301cf19d0eedb67f51ebed9f986b16146cc7dc", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7d301cf19d0eedb67f51ebed9f986b16146cc7dc.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7d301cf19d0eedb67f51ebed9f986b16146cc7dc"}}}], "date": "2011-08-26T08:28:44+00:00", "message": "Fixed bug where maximum-clock-rate-exceeded error did not display properly.", "type": "commit"}, {"rendered": {"message": {"raw": "fixed bug where globals were't parsed  correctly.", "markup": "markdown", "html": "<p>fixed bug where globals were't parsed  correctly.</p>", "type": "rendered"}}, "hash": "7d301cf19d0eedb67f51ebed9f986b16146cc7dc", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7d301cf19d0eedb67f51ebed9f986b16146cc7dc.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7d301cf19d0eedb67f51ebed9f986b16146cc7dc/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7d301cf19d0eedb67f51ebed9f986b16146cc7dc"}, "html": {"href": "#!/cavitylab/labscript/commits/7d301cf19d0eedb67f51ebed9f986b16146cc7dc"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7d301cf19d0eedb67f51ebed9f986b16146cc7dc"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7d301cf19d0eedb67f51ebed9f986b16146cc7dc/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7d301cf19d0eedb67f51ebed9f986b16146cc7dc/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "fixed bug where globals were't parsed  correctly.", "markup": "markdown", "html": "<p>fixed bug where globals were't parsed  correctly.</p>", "type": "rendered"}, "parents": [{"hash": "fb67e710d877841f0d176d84fc34045347597bf3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fb67e710d877841f0d176d84fc34045347597bf3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/fb67e710d877841f0d176d84fc34045347597bf3"}}}], "date": "2011-08-26T07:57:04+00:00", "message": "fixed bug where globals were't parsed  correctly.", "type": "commit"}, {"rendered": {"message": {"raw": "Analogue output values are no longer stored as ints, they are instead 32 bit floats. Was probably premature optimisation to have not used floats int he first place.\n\nAlso the script name and path are stored as attributes to the script dataset.", "markup": "markdown", "html": "<p>Analogue output values are no longer stored as ints, they are instead 32 bit floats. Was probably premature optimisation to have not used floats int he first place.</p>\n<p>Also the script name and path are stored as attributes to the script dataset.</p>", "type": "rendered"}}, "hash": "fb67e710d877841f0d176d84fc34045347597bf3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/fb67e710d877841f0d176d84fc34045347597bf3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/fb67e710d877841f0d176d84fc34045347597bf3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/fb67e710d877841f0d176d84fc34045347597bf3"}, "html": {"href": "#!/cavitylab/labscript/commits/fb67e710d877841f0d176d84fc34045347597bf3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/fb67e710d877841f0d176d84fc34045347597bf3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/fb67e710d877841f0d176d84fc34045347597bf3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/fb67e710d877841f0d176d84fc34045347597bf3/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Analogue output values are no longer stored as ints, they are instead 32 bit floats. Was probably premature optimisation to have not used floats int he first place.\n\nAlso the script name and path are stored as attributes to the script dataset.", "markup": "markdown", "html": "<p>Analogue output values are no longer stored as ints, they are instead 32 bit floats. Was probably premature optimisation to have not used floats int he first place.</p>\n<p>Also the script name and path are stored as attributes to the script dataset.</p>", "type": "rendered"}, "parents": [{"hash": "94b4b01f84542710bc0aeac249729a9cbfb55dd3", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/94b4b01f84542710bc0aeac249729a9cbfb55dd3.json"}, "html": {"href": "#!/cavitylab/labscript/commits/94b4b01f84542710bc0aeac249729a9cbfb55dd3"}}}], "date": "2011-08-26T04:33:31+00:00", "message": "Analogue output values are no longer stored as ints, they are instead 32 bit floats. Was probably premature optimisation to have not used floats int he first place.\n\nAlso the script name and path are stored as attributes to the script dataset.", "type": "commit"}, {"rendered": {"message": {"raw": "Now doesn't allow intereactive imports (since labscript relies on there being an actual script file). Also, doesn't create a calibrations file if it doesn't exist.\nMight ditch calibrations altogether depending on whether we end up using globals for that functionality.\n\nSystem wide install should now work so long as labscript's parent directory is in the PYTHONPATH. This is probably how we should do things. On the master image I've added C:\\pythonlib to the %PYTHONPATH% system variable,\nand put labscript in C:\\pythonlib\\labscript. labscript should now be importable from anywhere on the system.", "markup": "markdown", "html": "<p>Now doesn't allow intereactive imports (since labscript relies on there being an actual script file). Also, doesn't create a calibrations file if it doesn't exist.<br />\nMight ditch calibrations altogether depending on whether we end up using globals for that functionality.</p>\n<p>System wide install should now work so long as labscript's parent directory is in the PYTHONPATH. This is probably how we should do things. On the master image I've added C:\\pythonlib to the %PYTHONPATH% system variable,<br />\nand put labscript in C:\\pythonlib\\labscript. labscript should now be importable from anywhere on the system.</p>", "type": "rendered"}}, "hash": "94b4b01f84542710bc0aeac249729a9cbfb55dd3", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/94b4b01f84542710bc0aeac249729a9cbfb55dd3.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/94b4b01f84542710bc0aeac249729a9cbfb55dd3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/94b4b01f84542710bc0aeac249729a9cbfb55dd3"}, "html": {"href": "#!/cavitylab/labscript/commits/94b4b01f84542710bc0aeac249729a9cbfb55dd3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/94b4b01f84542710bc0aeac249729a9cbfb55dd3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/94b4b01f84542710bc0aeac249729a9cbfb55dd3/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/94b4b01f84542710bc0aeac249729a9cbfb55dd3/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Now doesn't allow intereactive imports (since labscript relies on there being an actual script file). Also, doesn't create a calibrations file if it doesn't exist.\nMight ditch calibrations altogether depending on whether we end up using globals for that functionality.\n\nSystem wide install should now work so long as labscript's parent directory is in the PYTHONPATH. This is probably how we should do things. On the master image I've added C:\\pythonlib to the %PYTHONPATH% system variable,\nand put labscript in C:\\pythonlib\\labscript. labscript should now be importable from anywhere on the system.", "markup": "markdown", "html": "<p>Now doesn't allow intereactive imports (since labscript relies on there being an actual script file). Also, doesn't create a calibrations file if it doesn't exist.<br />\nMight ditch calibrations altogether depending on whether we end up using globals for that functionality.</p>\n<p>System wide install should now work so long as labscript's parent directory is in the PYTHONPATH. This is probably how we should do things. On the master image I've added C:\\pythonlib to the %PYTHONPATH% system variable,<br />\nand put labscript in C:\\pythonlib\\labscript. labscript should now be importable from anywhere on the system.</p>", "type": "rendered"}, "parents": [{"hash": "9f46960757b872e7e10264fba5d841b0c25288ca", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f46960757b872e7e10264fba5d841b0c25288ca.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9f46960757b872e7e10264fba5d841b0c25288ca"}}}], "date": "2011-08-22T06:15:20+00:00", "message": "Now doesn't allow intereactive imports (since labscript relies on there being an actual script file). Also, doesn't create a calibrations file if it doesn't exist.\nMight ditch calibrations altogether depending on whether we end up using globals for that functionality.\n\nSystem wide install should now work so long as labscript's parent directory is in the PYTHONPATH. This is probably how we should do things. On the master image I've added C:\\pythonlib to the %PYTHONPATH% system variable,\nand put labscript in C:\\pythonlib\\labscript. labscript should now be importable from anywhere on the system.", "type": "commit"}, {"rendered": {"message": {"raw": "added __init__.py so that the labscript folder will be recognised as a module if it is in the PYTHONPATH", "markup": "markdown", "html": "<p>added <strong>init</strong>.py so that the labscript folder will be recognised as a module if it is in the PYTHONPATH</p>", "type": "rendered"}}, "hash": "9f46960757b872e7e10264fba5d841b0c25288ca", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9f46960757b872e7e10264fba5d841b0c25288ca.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9f46960757b872e7e10264fba5d841b0c25288ca/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9f46960757b872e7e10264fba5d841b0c25288ca"}, "html": {"href": "#!/cavitylab/labscript/commits/9f46960757b872e7e10264fba5d841b0c25288ca"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9f46960757b872e7e10264fba5d841b0c25288ca"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9f46960757b872e7e10264fba5d841b0c25288ca/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9f46960757b872e7e10264fba5d841b0c25288ca/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "added __init__.py so that the labscript folder will be recognised as a module if it is in the PYTHONPATH", "markup": "markdown", "html": "<p>added <strong>init</strong>.py so that the labscript folder will be recognised as a module if it is in the PYTHONPATH</p>", "type": "rendered"}, "parents": [{"hash": "9749461a4aaf64003c2ffe448e94e5ecf007f737", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9749461a4aaf64003c2ffe448e94e5ecf007f737.json"}, "html": {"href": "#!/cavitylab/labscript/commits/9749461a4aaf64003c2ffe448e94e5ecf007f737"}}}], "date": "2011-08-22T05:30:38+00:00", "message": "added __init__.py so that the labscript folder will be recognised as a module if it is in the PYTHONPATH", "type": "commit"}, {"rendered": {"message": {"raw": "Resolves issue #259. If no hdf5 file is provided, labscript creates one with the same name as the labscript file. So for example coils.py will create coils.h5.\nIf coils.h5 exists,the user is prompted as to whether the existing file should be overwritten. This prompt is graphical so that it will be seen whether a terminal is present or not (as is the case when the labscript is run from LabVIEW).\nIf the command line flag '-replace' is used, the prompt is supressed and the existing file is automatically overwritten.", "markup": "markdown", "html": "<p>Resolves issue #259. If no hdf5 file is provided, labscript creates one with the same name as the labscript file. So for example coils.py will create coils.h5.<br />\nIf coils.h5 exists,the user is prompted as to whether the existing file should be overwritten. This prompt is graphical so that it will be seen whether a terminal is present or not (as is the case when the labscript is run from LabVIEW).<br />\nIf the command line flag '-replace' is used, the prompt is supressed and the existing file is automatically overwritten.</p>", "type": "rendered"}}, "hash": "9749461a4aaf64003c2ffe448e94e5ecf007f737", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/9749461a4aaf64003c2ffe448e94e5ecf007f737.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/9749461a4aaf64003c2ffe448e94e5ecf007f737/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/9749461a4aaf64003c2ffe448e94e5ecf007f737"}, "html": {"href": "#!/cavitylab/labscript/commits/9749461a4aaf64003c2ffe448e94e5ecf007f737"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/9749461a4aaf64003c2ffe448e94e5ecf007f737"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/9749461a4aaf64003c2ffe448e94e5ecf007f737/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/9749461a4aaf64003c2ffe448e94e5ecf007f737/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Resolves issue #259. If no hdf5 file is provided, labscript creates one with the same name as the labscript file. So for example coils.py will create coils.h5.\nIf coils.h5 exists,the user is prompted as to whether the existing file should be overwritten. This prompt is graphical so that it will be seen whether a terminal is present or not (as is the case when the labscript is run from LabVIEW).\nIf the command line flag '-replace' is used, the prompt is supressed and the existing file is automatically overwritten.", "markup": "markdown", "html": "<p>Resolves issue #259. If no hdf5 file is provided, labscript creates one with the same name as the labscript file. So for example coils.py will create coils.h5.<br />\nIf coils.h5 exists,the user is prompted as to whether the existing file should be overwritten. This prompt is graphical so that it will be seen whether a terminal is present or not (as is the case when the labscript is run from LabVIEW).<br />\nIf the command line flag '-replace' is used, the prompt is supressed and the existing file is automatically overwritten.</p>", "type": "rendered"}, "parents": [{"hash": "d2f72c38371b395e3d202d36533ff31f54ad0b95", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d2f72c38371b395e3d202d36533ff31f54ad0b95.json"}, "html": {"href": "#!/cavitylab/labscript/commits/d2f72c38371b395e3d202d36533ff31f54ad0b95"}}}], "date": "2011-08-20T06:20:09+00:00", "message": "Resolves issue #259. If no hdf5 file is provided, labscript creates one with the same name as the labscript file. So for example coils.py will create coils.h5.\nIf coils.h5 exists,the user is prompted as to whether the existing file should be overwritten. This prompt is graphical so that it will be seen whether a terminal is present or not (as is the case when the labscript is run from LabVIEW).\nIf the command line flag '-replace' is used, the prompt is supressed and the existing file is automatically overwritten.", "type": "commit"}, {"rendered": {"message": {"raw": "Fast clock is now hard coded as flag 0 of the PulseBlaster. Flag 1 is the slow clock. This is due to some of the boards not providing output on flags 4-11.", "markup": "markdown", "html": "<p>Fast clock is now hard coded as flag 0 of the PulseBlaster. Flag 1 is the slow clock. This is due to some of the boards not providing output on flags 4-11.</p>", "type": "rendered"}}, "hash": "d2f72c38371b395e3d202d36533ff31f54ad0b95", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/d2f72c38371b395e3d202d36533ff31f54ad0b95.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/d2f72c38371b395e3d202d36533ff31f54ad0b95/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/d2f72c38371b395e3d202d36533ff31f54ad0b95"}, "html": {"href": "#!/cavitylab/labscript/commits/d2f72c38371b395e3d202d36533ff31f54ad0b95"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/d2f72c38371b395e3d202d36533ff31f54ad0b95"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/d2f72c38371b395e3d202d36533ff31f54ad0b95/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/d2f72c38371b395e3d202d36533ff31f54ad0b95/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fast clock is now hard coded as flag 0 of the PulseBlaster. Flag 1 is the slow clock. This is due to some of the boards not providing output on flags 4-11.", "markup": "markdown", "html": "<p>Fast clock is now hard coded as flag 0 of the PulseBlaster. Flag 1 is the slow clock. This is due to some of the boards not providing output on flags 4-11.</p>", "type": "rendered"}, "parents": [{"hash": "5344f8b64df3ea6661e39521ed1bebfe270c745e", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5344f8b64df3ea6661e39521ed1bebfe270c745e.json"}, "html": {"href": "#!/cavitylab/labscript/commits/5344f8b64df3ea6661e39521ed1bebfe270c745e"}}}], "date": "2011-08-19T05:28:00+00:00", "message": "Fast clock is now hard coded as flag 0 of the PulseBlaster. Flag 1 is the slow clock. This is due to some of the boards not providing output on flags 4-11.", "type": "commit"}, {"rendered": {"message": {"raw": "stop() no longer does sys.exit(0), so that subsequent commands in the labscript file (like plotting) will still execute. Any changes made to the output objects after stop() has been called however, will not be written to the hdf5 file.", "markup": "markdown", "html": "<p>stop() no longer does sys.exit(0), so that subsequent commands in the labscript file (like plotting) will still execute. Any changes made to the output objects after stop() has been called however, will not be written to the hdf5 file.</p>", "type": "rendered"}}, "hash": "5344f8b64df3ea6661e39521ed1bebfe270c745e", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/5344f8b64df3ea6661e39521ed1bebfe270c745e.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/5344f8b64df3ea6661e39521ed1bebfe270c745e/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/5344f8b64df3ea6661e39521ed1bebfe270c745e"}, "html": {"href": "#!/cavitylab/labscript/commits/5344f8b64df3ea6661e39521ed1bebfe270c745e"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/5344f8b64df3ea6661e39521ed1bebfe270c745e"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/5344f8b64df3ea6661e39521ed1bebfe270c745e/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/5344f8b64df3ea6661e39521ed1bebfe270c745e/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "stop() no longer does sys.exit(0), so that subsequent commands in the labscript file (like plotting) will still execute. Any changes made to the output objects after stop() has been called however, will not be written to the hdf5 file.", "markup": "markdown", "html": "<p>stop() no longer does sys.exit(0), so that subsequent commands in the labscript file (like plotting) will still execute. Any changes made to the output objects after stop() has been called however, will not be written to the hdf5 file.</p>", "type": "rendered"}, "parents": [{"hash": "0f2542eca2a0222070356abde310daab84b4f51b", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0f2542eca2a0222070356abde310daab84b4f51b.json"}, "html": {"href": "#!/cavitylab/labscript/commits/0f2542eca2a0222070356abde310daab84b4f51b"}}}], "date": "2011-08-19T04:19:42+00:00", "message": "stop() no longer does sys.exit(0), so that subsequent commands in the labscript file (like plotting) will still execute. Any changes made to the output objects after stop() has been called however, will not be written to the hdf5 file.", "type": "commit"}, {"rendered": {"message": {"raw": "added edit_connections.py. This script generates a minimalistic labscript from the connection table in an hdf5 file. I previously forgot to add to version control and had deleted it...thank you recycle bin!", "markup": "markdown", "html": "<p>added edit_connections.py. This script generates a minimalistic labscript from the connection table in an hdf5 file. I previously forgot to add to version control and had deleted it...thank you recycle bin!</p>", "type": "rendered"}}, "hash": "0f2542eca2a0222070356abde310daab84b4f51b", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/0f2542eca2a0222070356abde310daab84b4f51b.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/0f2542eca2a0222070356abde310daab84b4f51b/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/0f2542eca2a0222070356abde310daab84b4f51b"}, "html": {"href": "#!/cavitylab/labscript/commits/0f2542eca2a0222070356abde310daab84b4f51b"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/0f2542eca2a0222070356abde310daab84b4f51b"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/0f2542eca2a0222070356abde310daab84b4f51b/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/0f2542eca2a0222070356abde310daab84b4f51b/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "added edit_connections.py. This script generates a minimalistic labscript from the connection table in an hdf5 file. I previously forgot to add to version control and had deleted it...thank you recycle bin!", "markup": "markdown", "html": "<p>added edit_connections.py. This script generates a minimalistic labscript from the connection table in an hdf5 file. I previously forgot to add to version control and had deleted it...thank you recycle bin!</p>", "type": "rendered"}, "parents": [{"hash": "4234f859acddf29bb1805f7e8863e6b4bc3ef905", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4234f859acddf29bb1805f7e8863e6b4bc3ef905.json"}, "html": {"href": "#!/cavitylab/labscript/commits/4234f859acddf29bb1805f7e8863e6b4bc3ef905"}}}], "date": "2011-07-04T04:08:05+00:00", "message": "added edit_connections.py. This script generates a minimalistic labscript from the connection table in an hdf5 file. I previously forgot to add to version control and had deleted it...thank you recycle bin!", "type": "commit"}, {"rendered": {"message": {"raw": "small change for debugging with labVIEW", "markup": "markdown", "html": "<p>small change for debugging with labVIEW</p>", "type": "rendered"}}, "hash": "4234f859acddf29bb1805f7e8863e6b4bc3ef905", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/4234f859acddf29bb1805f7e8863e6b4bc3ef905.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/4234f859acddf29bb1805f7e8863e6b4bc3ef905/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/4234f859acddf29bb1805f7e8863e6b4bc3ef905"}, "html": {"href": "#!/cavitylab/labscript/commits/4234f859acddf29bb1805f7e8863e6b4bc3ef905"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/4234f859acddf29bb1805f7e8863e6b4bc3ef905"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/4234f859acddf29bb1805f7e8863e6b4bc3ef905/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/4234f859acddf29bb1805f7e8863e6b4bc3ef905/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "small change for debugging with labVIEW", "markup": "markdown", "html": "<p>small change for debugging with labVIEW</p>", "type": "rendered"}, "parents": [{"hash": "77556402f8bbc9f43c6e335cec46c05f72ecfd5e", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/77556402f8bbc9f43c6e335cec46c05f72ecfd5e.json"}, "html": {"href": "#!/cavitylab/labscript/commits/77556402f8bbc9f43c6e335cec46c05f72ecfd5e"}}}], "date": "2011-04-18T07:12:51+00:00", "message": "small change for debugging with labVIEW", "type": "commit"}, {"rendered": {"message": {"raw": "Pulse program now follow the spec of having an initial dummy instruction and a wait then branch to 0 at the end.", "markup": "markdown", "html": "<p>Pulse program now follow the spec of having an initial dummy instruction and a wait then branch to 0 at the end.</p>", "type": "rendered"}}, "hash": "77556402f8bbc9f43c6e335cec46c05f72ecfd5e", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/77556402f8bbc9f43c6e335cec46c05f72ecfd5e.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/77556402f8bbc9f43c6e335cec46c05f72ecfd5e/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/77556402f8bbc9f43c6e335cec46c05f72ecfd5e"}, "html": {"href": "#!/cavitylab/labscript/commits/77556402f8bbc9f43c6e335cec46c05f72ecfd5e"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/77556402f8bbc9f43c6e335cec46c05f72ecfd5e"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/77556402f8bbc9f43c6e335cec46c05f72ecfd5e/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/77556402f8bbc9f43c6e335cec46c05f72ecfd5e/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Pulse program now follow the spec of having an initial dummy instruction and a wait then branch to 0 at the end.", "markup": "markdown", "html": "<p>Pulse program now follow the spec of having an initial dummy instruction and a wait then branch to 0 at the end.</p>", "type": "rendered"}, "parents": [{"hash": "7364388ac7d3bb74e8a04ffc39f4996611a8af8a", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7364388ac7d3bb74e8a04ffc39f4996611a8af8a.json"}, "html": {"href": "#!/cavitylab/labscript/commits/7364388ac7d3bb74e8a04ffc39f4996611a8af8a"}}}], "date": "2011-04-18T06:05:18+00:00", "message": "Pulse program now follow the spec of having an initial dummy instruction and a wait then branch to 0 at the end.", "type": "commit"}, {"rendered": {"message": {"raw": "Made some changes as discussed today with the Phil and Russ, regarding interactions with the LabVIEW control system.\n\n1. Numbering of devices now starts from zero.\n\n2. No initial pulse program instruction is issued putting the clock flags into the correct state to start ticking. Instead, LabVIEW will\n   program this instruction, as it can keep all the other flags in the state they are in the front panel. Previously labscript just set them to zero.\n   This should avoid accidental triggering and closing of shutters etc. A smooth transition from state-of-the-front-panel to labscript's initial instruction\n   is important for avoiding these problems.\n\n3. In the same vein, the end of the pulse program is now handled differently. The second last instruction is a WAIT instruction, and LabVIEW will know that the\n   program is finished by polling the pulseblaster's status to see if it's waiting (and if there is more than one WAIT instruction in the program, LabVIEW can count them.)\n   Then LabVIEW programs instruction zero with the front panel state, and then sends a software trigger telling the pulse program to resume. The program moves to its\n   final instruction, which is to brach to line zero. Then the system ends up in the state of the front panel without missing a beat. Again, this is important so that there\n   are no intermediate states between buffered output and front panel states. There should always be a direct transition from one to the other with nothing in between.\n\n4. Code generation now works. Run:\n\n         utils/edit_connections.py infile.h5 outfile.py\n\n   to generate a minimalistic labscript from the connection table in the already-compiled infile.h5. Still needing to be done is to make this automatically open in a text editor,\n   and then when the text editor is closed to make it compile and generate a hdf5 file with the new connection table. In that case I should probably make the intermediate .py file just\n   a temporary file, and have the user instead specify the desired output hdf5 file to compile the minimalistic labscript to.", "markup": "markdown", "html": "<p>Made some changes as discussed today with the Phil and Russ, regarding interactions with the LabVIEW control system.</p>\n<ol>\n<li>\n<p>Numbering of devices now starts from zero.</p>\n</li>\n<li>\n<p>No initial pulse program instruction is issued putting the clock flags into the correct state to start ticking. Instead, LabVIEW will<br />\n   program this instruction, as it can keep all the other flags in the state they are in the front panel. Previously labscript just set them to zero.<br />\n   This should avoid accidental triggering and closing of shutters etc. A smooth transition from state-of-the-front-panel to labscript's initial instruction<br />\n   is important for avoiding these problems.</p>\n</li>\n<li>\n<p>In the same vein, the end of the pulse program is now handled differently. The second last instruction is a WAIT instruction, and LabVIEW will know that the<br />\n   program is finished by polling the pulseblaster's status to see if it's waiting (and if there is more than one WAIT instruction in the program, LabVIEW can count them.)<br />\n   Then LabVIEW programs instruction zero with the front panel state, and then sends a software trigger telling the pulse program to resume. The program moves to its<br />\n   final instruction, which is to brach to line zero. Then the system ends up in the state of the front panel without missing a beat. Again, this is important so that there<br />\n   are no intermediate states between buffered output and front panel states. There should always be a direct transition from one to the other with nothing in between.</p>\n</li>\n<li>\n<p>Code generation now works. Run:</p>\n<div class=\"codehilite\"><pre><span></span> utils/edit_connections.py infile.h5 outfile.py\n</pre></div>\n\n\n</li>\n</ol>\n<p>to generate a minimalistic labscript from the connection table in the already-compiled infile.h5. Still needing to be done is to make this automatically open in a text editor,<br />\n   and then when the text editor is closed to make it compile and generate a hdf5 file with the new connection table. In that case I should probably make the intermediate .py file just<br />\n   a temporary file, and have the user instead specify the desired output hdf5 file to compile the minimalistic labscript to.</p>", "type": "rendered"}}, "hash": "7364388ac7d3bb74e8a04ffc39f4996611a8af8a", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/labscript.json"}, "html": {"href": "#!/cavitylab/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{85322b88-a6d9-4e3e-bc98-201124f6bf82}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "cavitylab/labscript", "uuid": "{85322b88-a6d9-4e3e-bc98-201124f6bf82}"}, "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/7364388ac7d3bb74e8a04ffc39f4996611a8af8a.json"}, "comments": {"href": "data/repositories/cavitylab/labscript/commit/7364388ac7d3bb74e8a04ffc39f4996611a8af8a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/patch/7364388ac7d3bb74e8a04ffc39f4996611a8af8a"}, "html": {"href": "#!/cavitylab/labscript/commits/7364388ac7d3bb74e8a04ffc39f4996611a8af8a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/diff/7364388ac7d3bb74e8a04ffc39f4996611a8af8a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/labscript/commit/7364388ac7d3bb74e8a04ffc39f4996611a8af8a/approve"}, "statuses": {"href": "data/repositories/cavitylab/labscript/commit/7364388ac7d3bb74e8a04ffc39f4996611a8af8a/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Made some changes as discussed today with the Phil and Russ, regarding interactions with the LabVIEW control system.\n\n1. Numbering of devices now starts from zero.\n\n2. No initial pulse program instruction is issued putting the clock flags into the correct state to start ticking. Instead, LabVIEW will\n   program this instruction, as it can keep all the other flags in the state they are in the front panel. Previously labscript just set them to zero.\n   This should avoid accidental triggering and closing of shutters etc. A smooth transition from state-of-the-front-panel to labscript's initial instruction\n   is important for avoiding these problems.\n\n3. In the same vein, the end of the pulse program is now handled differently. The second last instruction is a WAIT instruction, and LabVIEW will know that the\n   program is finished by polling the pulseblaster's status to see if it's waiting (and if there is more than one WAIT instruction in the program, LabVIEW can count them.)\n   Then LabVIEW programs instruction zero with the front panel state, and then sends a software trigger telling the pulse program to resume. The program moves to its\n   final instruction, which is to brach to line zero. Then the system ends up in the state of the front panel without missing a beat. Again, this is important so that there\n   are no intermediate states between buffered output and front panel states. There should always be a direct transition from one to the other with nothing in between.\n\n4. Code generation now works. Run:\n\n         utils/edit_connections.py infile.h5 outfile.py\n\n   to generate a minimalistic labscript from the connection table in the already-compiled infile.h5. Still needing to be done is to make this automatically open in a text editor,\n   and then when the text editor is closed to make it compile and generate a hdf5 file with the new connection table. In that case I should probably make the intermediate .py file just\n   a temporary file, and have the user instead specify the desired output hdf5 file to compile the minimalistic labscript to.", "markup": "markdown", "html": "<p>Made some changes as discussed today with the Phil and Russ, regarding interactions with the LabVIEW control system.</p>\n<ol>\n<li>\n<p>Numbering of devices now starts from zero.</p>\n</li>\n<li>\n<p>No initial pulse program instruction is issued putting the clock flags into the correct state to start ticking. Instead, LabVIEW will<br />\n   program this instruction, as it can keep all the other flags in the state they are in the front panel. Previously labscript just set them to zero.<br />\n   This should avoid accidental triggering and closing of shutters etc. A smooth transition from state-of-the-front-panel to labscript's initial instruction<br />\n   is important for avoiding these problems.</p>\n</li>\n<li>\n<p>In the same vein, the end of the pulse program is now handled differently. The second last instruction is a WAIT instruction, and LabVIEW will know that the<br />\n   program is finished by polling the pulseblaster's status to see if it's waiting (and if there is more than one WAIT instruction in the program, LabVIEW can count them.)<br />\n   Then LabVIEW programs instruction zero with the front panel state, and then sends a software trigger telling the pulse program to resume. The program moves to its<br />\n   final instruction, which is to brach to line zero. Then the system ends up in the state of the front panel without missing a beat. Again, this is important so that there<br />\n   are no intermediate states between buffered output and front panel states. There should always be a direct transition from one to the other with nothing in between.</p>\n</li>\n<li>\n<p>Code generation now works. Run:</p>\n<div class=\"codehilite\"><pre><span></span> utils/edit_connections.py infile.h5 outfile.py\n</pre></div>\n\n\n</li>\n</ol>\n<p>to generate a minimalistic labscript from the connection table in the already-compiled infile.h5. Still needing to be done is to make this automatically open in a text editor,<br />\n   and then when the text editor is closed to make it compile and generate a hdf5 file with the new connection table. In that case I should probably make the intermediate .py file just<br />\n   a temporary file, and have the user instead specify the desired output hdf5 file to compile the minimalistic labscript to.</p>", "type": "rendered"}, "parents": [{"hash": "a84deec20212bd8049e6e6b1b4b513a8430d8713", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/labscript/commit/a84deec20212bd8049e6e6b1b4b513a8430d8713.json"}, "html": {"href": "#!/cavitylab/labscript/commits/a84deec20212bd8049e6e6b1b4b513a8430d8713"}}}], "date": "2011-04-14T05:24:43+00:00", "message": "Made some changes as discussed today with the Phil and Russ, regarding interactions with the LabVIEW control system.\n\n1. Numbering of devices now starts from zero.\n\n2. No initial pulse program instruction is issued putting the clock flags into the correct state to start ticking. Instead, LabVIEW will\n   program this instruction, as it can keep all the other flags in the state they are in the front panel. Previously labscript just set them to zero.\n   This should avoid accidental triggering and closing of shutters etc. A smooth transition from state-of-the-front-panel to labscript's initial instruction\n   is important for avoiding these problems.\n\n3. In the same vein, the end of the pulse program is now handled differently. The second last instruction is a WAIT instruction, and LabVIEW will know that the\n   program is finished by polling the pulseblaster's status to see if it's waiting (and if there is more than one WAIT instruction in the program, LabVIEW can count them.)\n   Then LabVIEW programs instruction zero with the front panel state, and then sends a software trigger telling the pulse program to resume. The program moves to its\n   final instruction, which is to brach to line zero. Then the system ends up in the state of the front panel without missing a beat. Again, this is important so that there\n   are no intermediate states between buffered output and front panel states. There should always be a direct transition from one to the other with nothing in between.\n\n4. Code generation now works. Run:\n\n         utils/edit_connections.py infile.h5 outfile.py\n\n   to generate a minimalistic labscript from the connection table in the already-compiled infile.h5. Still needing to be done is to make this automatically open in a text editor,\n   and then when the text editor is closed to make it compile and generate a hdf5 file with the new connection table. In that case I should probably make the intermediate .py file just\n   a temporary file, and have the user instead specify the desired output hdf5 file to compile the minimalistic labscript to.", "type": "commit"}], "next": "data/repositories/cavitylab/labscript/commits/trigger_checks_page=6.json"}