{"rendered": {"message": {"raw": "* Trigger a preparse after remote set_globals()\n* Add `interactive` kwarg to Runmanager.get_active_groups so that it can raise\n  an exception for remote calls rather than show an error dialog.\n* Turn app.preparse_globals_required into a Queue instead of an Event so that\n  the number of times it is triggerd can be counted, in order that callers\n  can block until all preparsing is complete using .join()\n* Add method runmanager.wait_until_preparse_complete() that does this.\n* Call app.wait_until_preparse_complete.wait() in handle_n_shots so that the\n  result is not subject to a race condition w.r.t. previous remote calls.\n* Call app.wait_until_preparse_complete() in handle_engage(). I'm not sure\n  it's necessary, but it is strange to be (virtually) clicking engage when the\n  button is greyed out, and there may be code (present or future ) that assumes\n  you can't do this.\n* Do not run blocking remote code such as globals evaluation in the main thread.\n  have remote methods only hop into the main thread when required.\n* Modify remote handle_error_in_globals to take into account all globals, not\n  just those open in tabs.\n* remove inmain() call from the remote server's handler - apply inmain calls\n  only where they are required within individual handler methods, so that the\n  GUI is not blocked by globals parsing.\n* remove some unused imports", "markup": "markdown", "html": "<ul>\n<li>Trigger a preparse after remote set_globals()</li>\n<li>Add <code>interactive</code> kwarg to Runmanager.get_active_groups so that it can raise<br />\n  an exception for remote calls rather than show an error dialog.</li>\n<li>Turn app.preparse_globals_required into a Queue instead of an Event so that<br />\n  the number of times it is triggerd can be counted, in order that callers<br />\n  can block until all preparsing is complete using .join()</li>\n<li>Add method runmanager.wait_until_preparse_complete() that does this.</li>\n<li>Call app.wait_until_preparse_complete.wait() in handle_n_shots so that the<br />\n  result is not subject to a race condition w.r.t. previous remote calls.</li>\n<li>Call app.wait_until_preparse_complete() in handle_engage(). I'm not sure<br />\n  it's necessary, but it is strange to be (virtually) clicking engage when the<br />\n  button is greyed out, and there may be code (present or future ) that assumes<br />\n  you can't do this.</li>\n<li>Do not run blocking remote code such as globals evaluation in the main thread.<br />\n  have remote methods only hop into the main thread when required.</li>\n<li>Modify remote handle_error_in_globals to take into account all globals, not<br />\n  just those open in tabs.</li>\n<li>remove inmain() call from the remote server's handler - apply inmain calls<br />\n  only where they are required within individual handler methods, so that the<br />\n  GUI is not blocked by globals parsing.</li>\n<li>remove some unused imports</li>\n</ul>", "type": "rendered"}}, "hash": "5a8f7283597adbd82a17372e44b113438fabbf03", "repository": {"links": {"self": {"href": "data/repositories/cavitylab/runmanager.json"}, "html": {"href": "#!/cavitylab/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{843babfe-b196-447a-b035-9a0b89171be6}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cavitylab/runmanager", "uuid": "{843babfe-b196-447a-b035-9a0b89171be6}"}, "links": {"self": {"href": "data/repositories/cavitylab/runmanager/commit/5a8f7283597adbd82a17372e44b113438fabbf03.json"}, "comments": {"href": "data/repositories/cavitylab/runmanager/commit/5a8f7283597adbd82a17372e44b113438fabbf03/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/runmanager/patch/5a8f7283597adbd82a17372e44b113438fabbf03"}, "html": {"href": "#!/cavitylab/runmanager/commits/5a8f7283597adbd82a17372e44b113438fabbf03"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/runmanager/diff/5a8f7283597adbd82a17372e44b113438fabbf03"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cavitylab/runmanager/commit/5a8f7283597adbd82a17372e44b113438fabbf03/approve"}, "statuses": {"href": "data/repositories/cavitylab/runmanager/commit/5a8f7283597adbd82a17372e44b113438fabbf03/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "* Trigger a preparse after remote set_globals()\n* Add `interactive` kwarg to Runmanager.get_active_groups so that it can raise\n  an exception for remote calls rather than show an error dialog.\n* Turn app.preparse_globals_required into a Queue instead of an Event so that\n  the number of times it is triggerd can be counted, in order that callers\n  can block until all preparsing is complete using .join()\n* Add method runmanager.wait_until_preparse_complete() that does this.\n* Call app.wait_until_preparse_complete.wait() in handle_n_shots so that the\n  result is not subject to a race condition w.r.t. previous remote calls.\n* Call app.wait_until_preparse_complete() in handle_engage(). I'm not sure\n  it's necessary, but it is strange to be (virtually) clicking engage when the\n  button is greyed out, and there may be code (present or future ) that assumes\n  you can't do this.\n* Do not run blocking remote code such as globals evaluation in the main thread.\n  have remote methods only hop into the main thread when required.\n* Modify remote handle_error_in_globals to take into account all globals, not\n  just those open in tabs.\n* remove inmain() call from the remote server's handler - apply inmain calls\n  only where they are required within individual handler methods, so that the\n  GUI is not blocked by globals parsing.\n* remove some unused imports", "markup": "markdown", "html": "<ul>\n<li>Trigger a preparse after remote set_globals()</li>\n<li>Add <code>interactive</code> kwarg to Runmanager.get_active_groups so that it can raise<br />\n  an exception for remote calls rather than show an error dialog.</li>\n<li>Turn app.preparse_globals_required into a Queue instead of an Event so that<br />\n  the number of times it is triggerd can be counted, in order that callers<br />\n  can block until all preparsing is complete using .join()</li>\n<li>Add method runmanager.wait_until_preparse_complete() that does this.</li>\n<li>Call app.wait_until_preparse_complete.wait() in handle_n_shots so that the<br />\n  result is not subject to a race condition w.r.t. previous remote calls.</li>\n<li>Call app.wait_until_preparse_complete() in handle_engage(). I'm not sure<br />\n  it's necessary, but it is strange to be (virtually) clicking engage when the<br />\n  button is greyed out, and there may be code (present or future ) that assumes<br />\n  you can't do this.</li>\n<li>Do not run blocking remote code such as globals evaluation in the main thread.<br />\n  have remote methods only hop into the main thread when required.</li>\n<li>Modify remote handle_error_in_globals to take into account all globals, not<br />\n  just those open in tabs.</li>\n<li>remove inmain() call from the remote server's handler - apply inmain calls<br />\n  only where they are required within individual handler methods, so that the<br />\n  GUI is not blocked by globals parsing.</li>\n<li>remove some unused imports</li>\n</ul>", "type": "rendered"}, "participants": [], "parents": [{"hash": "b414a5fea450807a890fb923ee0c06cf6ee7b055", "type": "commit", "links": {"self": {"href": "data/repositories/cavitylab/runmanager/commit/b414a5fea450807a890fb923ee0c06cf6ee7b055.json"}, "html": {"href": "#!/cavitylab/runmanager/commits/b414a5fea450807a890fb923ee0c06cf6ee7b055"}}}], "date": "2019-05-13T23:51:40+00:00", "message": "* Trigger a preparse after remote set_globals()\n* Add `interactive` kwarg to Runmanager.get_active_groups so that it can raise\n  an exception for remote calls rather than show an error dialog.\n* Turn app.preparse_globals_required into a Queue instead of an Event so that\n  the number of times it is triggerd can be counted, in order that callers\n  can block until all preparsing is complete using .join()\n* Add method runmanager.wait_until_preparse_complete() that does this.\n* Call app.wait_until_preparse_complete.wait() in handle_n_shots so that the\n  result is not subject to a race condition w.r.t. previous remote calls.\n* Call app.wait_until_preparse_complete() in handle_engage(). I'm not sure\n  it's necessary, but it is strange to be (virtually) clicking engage when the\n  button is greyed out, and there may be code (present or future ) that assumes\n  you can't do this.\n* Do not run blocking remote code such as globals evaluation in the main thread.\n  have remote methods only hop into the main thread when required.\n* Modify remote handle_error_in_globals to take into account all globals, not\n  just those open in tabs.\n* remove inmain() call from the remote server's handler - apply inmain calls\n  only where they are required within individual handler methods, so that the\n  GUI is not blocked by globals parsing.\n* remove some unused imports", "type": "commit", "git_hash": "405648121f5bfa7fe4662d8a6e0494c033b02265", "tags": null, "branches": "remote"}