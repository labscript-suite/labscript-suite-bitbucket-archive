{"rendered": {"message": {"raw": "Fix a deadlock restarting IMAQdxCamera.\n\nIf restart was clicked whilst continuously acquiring, the ImageReceiver could\nbe waiting on the previous frame to be updated, and thus would not respond to\nthe request to shutdown. However since shutdown() was called from the main thread,\nit would be waiting forever.\n\nNow it regularly checks self.stopping (an attribute set bt the parent class\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\nupdate event to process, so that it does not deadlock.\n\nAlso, if the update event runs but finds that it has already been shut down,\nit does nothing, since the Qt widgets may have been destroyed already.", "markup": "markdown", "html": "<p>Fix a deadlock restarting IMAQdxCamera.</p>\n<p>If restart was clicked whilst continuously acquiring, the ImageReceiver could<br />\nbe waiting on the previous frame to be updated, and thus would not respond to<br />\nthe request to shutdown. However since shutdown() was called from the main thread,<br />\nit would be waiting forever.</p>\n<p>Now it regularly checks self.stopping (an attribute set bt the parent class<br />\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the<br />\nupdate event to process, so that it does not deadlock.</p>\n<p>Also, if the update event runs but finds that it has already been shut down,<br />\nit does nothing, since the Qt widgets may have been destroyed already.</p>", "type": "rendered"}}, "hash": "453cc019b61b0a76838612bce63f4c1c3e469449", "repository": {"links": {"self": {"href": "data/repositories/cbillington/labscript_devices.json"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "links": {"self": {"href": "data/repositories/cbillington/labscript_devices/commit/453cc019b61b0a76838612bce63f4c1c3e469449.json"}, "comments": {"href": "data/repositories/cbillington/labscript_devices/commit/453cc019b61b0a76838612bce63f4c1c3e469449/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/patch/453cc019b61b0a76838612bce63f4c1c3e469449"}, "html": {"href": "#!/cbillington/labscript_devices/commits/453cc019b61b0a76838612bce63f4c1c3e469449"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/diff/453cc019b61b0a76838612bce63f4c1c3e469449"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/453cc019b61b0a76838612bce63f4c1c3e469449/approve"}, "statuses": {"href": "data/repositories/cbillington/labscript_devices/commit/453cc019b61b0a76838612bce63f4c1c3e469449/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fix a deadlock restarting IMAQdxCamera.\n\nIf restart was clicked whilst continuously acquiring, the ImageReceiver could\nbe waiting on the previous frame to be updated, and thus would not respond to\nthe request to shutdown. However since shutdown() was called from the main thread,\nit would be waiting forever.\n\nNow it regularly checks self.stopping (an attribute set bt the parent class\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\nupdate event to process, so that it does not deadlock.\n\nAlso, if the update event runs but finds that it has already been shut down,\nit does nothing, since the Qt widgets may have been destroyed already.", "markup": "markdown", "html": "<p>Fix a deadlock restarting IMAQdxCamera.</p>\n<p>If restart was clicked whilst continuously acquiring, the ImageReceiver could<br />\nbe waiting on the previous frame to be updated, and thus would not respond to<br />\nthe request to shutdown. However since shutdown() was called from the main thread,<br />\nit would be waiting forever.</p>\n<p>Now it regularly checks self.stopping (an attribute set bt the parent class<br />\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the<br />\nupdate event to process, so that it does not deadlock.</p>\n<p>Also, if the update event runs but finds that it has already been shut down,<br />\nit does nothing, since the Qt widgets may have been destroyed already.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "b680ed305954c0a3be91c381790d2941fea004d3", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/labscript_devices/commit/b680ed305954c0a3be91c381790d2941fea004d3.json"}, "html": {"href": "#!/cbillington/labscript_devices/commits/b680ed305954c0a3be91c381790d2941fea004d3"}}}], "date": "2019-07-03T20:33:53+00:00", "message": "Fix a deadlock restarting IMAQdxCamera.\n\nIf restart was clicked whilst continuously acquiring, the ImageReceiver could\nbe waiting on the previous frame to be updated, and thus would not respond to\nthe request to shutdown. However since shutdown() was called from the main thread,\nit would be waiting forever.\n\nNow it regularly checks self.stopping (an attribute set bt the parent class\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\nupdate event to process, so that it does not deadlock.\n\nAlso, if the update event runs but finds that it has already been shut down,\nit does nothing, since the Qt widgets may have been destroyed already.", "type": "commit", "git_hash": "a882864670a4c9ac492616bf1f87d08051520c27", "tags": null, "branches": "bugfix"}