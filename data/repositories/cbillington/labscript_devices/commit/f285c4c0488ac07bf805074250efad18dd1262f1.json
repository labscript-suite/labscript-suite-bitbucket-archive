{"rendered": {"message": {"raw": "hacking on wait monitor. Not yet functional, some issues to iron out with\nincomplete sample detection and small buffers.\n\nPlan is to\n\n* acquire pulse width instead of semiperiod, this will entail\nonly one read event per pulse rather than two, solving the issue of data\ncoming faster than it can be read and filling the buffer. Or maybe we will\nstill do semiperiod, but will read 2 samples at a time as David Meyer has had\nsucess with. The advantage of this latter approach is that we do not need to\nstore the pulse duration in the h5 file in order to take it into account -\nwe can measure it.\n\n* Determine whether a device has incomplete sample detection empirically.\n  In get_capabilities.py we can create a task that outputs on a DO and reads in\n  a counter, and we can see what we get and store whether it looks like\n  incomplete sample detection. This should be achievable without asking the user\n  to connect back any cables physically, as we should be able to configure\n  them to be connected internally. This will not work if there are any devices\n  out there with counters but no digital outs!", "markup": "markdown", "html": "<p>hacking on wait monitor. Not yet functional, some issues to iron out with<br />\nincomplete sample detection and small buffers.</p>\n<p>Plan is to</p>\n<ul>\n<li>\n<p>acquire pulse width instead of semiperiod, this will entail<br />\nonly one read event per pulse rather than two, solving the issue of data<br />\ncoming faster than it can be read and filling the buffer. Or maybe we will<br />\nstill do semiperiod, but will read 2 samples at a time as David Meyer has had<br />\nsucess with. The advantage of this latter approach is that we do not need to<br />\nstore the pulse duration in the h5 file in order to take it into account -<br />\nwe can measure it.</p>\n</li>\n<li>\n<p>Determine whether a device has incomplete sample detection empirically.<br />\n  In get_capabilities.py we can create a task that outputs on a DO and reads in<br />\n  a counter, and we can see what we get and store whether it looks like<br />\n  incomplete sample detection. This should be achievable without asking the user<br />\n  to connect back any cables physically, as we should be able to configure<br />\n  them to be connected internally. This will not work if there are any devices<br />\n  out there with counters but no digital outs!</p>\n</li>\n</ul>", "type": "rendered"}}, "hash": "f285c4c0488ac07bf805074250efad18dd1262f1", "repository": {"links": {"self": {"href": "data/repositories/cbillington/labscript_devices.json"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "links": {"self": {"href": "data/repositories/cbillington/labscript_devices/commit/f285c4c0488ac07bf805074250efad18dd1262f1.json"}, "comments": {"href": "data/repositories/cbillington/labscript_devices/commit/f285c4c0488ac07bf805074250efad18dd1262f1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/patch/f285c4c0488ac07bf805074250efad18dd1262f1"}, "html": {"href": "#!/cbillington/labscript_devices/commits/f285c4c0488ac07bf805074250efad18dd1262f1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/diff/f285c4c0488ac07bf805074250efad18dd1262f1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/f285c4c0488ac07bf805074250efad18dd1262f1/approve"}, "statuses": {"href": "data/repositories/cbillington/labscript_devices/commit/f285c4c0488ac07bf805074250efad18dd1262f1/statuses_page=1.json"}}, "author": {"raw": "Chris Billington", "type": "author"}, "summary": {"raw": "hacking on wait monitor. Not yet functional, some issues to iron out with\nincomplete sample detection and small buffers.\n\nPlan is to\n\n* acquire pulse width instead of semiperiod, this will entail\nonly one read event per pulse rather than two, solving the issue of data\ncoming faster than it can be read and filling the buffer. Or maybe we will\nstill do semiperiod, but will read 2 samples at a time as David Meyer has had\nsucess with. The advantage of this latter approach is that we do not need to\nstore the pulse duration in the h5 file in order to take it into account -\nwe can measure it.\n\n* Determine whether a device has incomplete sample detection empirically.\n  In get_capabilities.py we can create a task that outputs on a DO and reads in\n  a counter, and we can see what we get and store whether it looks like\n  incomplete sample detection. This should be achievable without asking the user\n  to connect back any cables physically, as we should be able to configure\n  them to be connected internally. This will not work if there are any devices\n  out there with counters but no digital outs!", "markup": "markdown", "html": "<p>hacking on wait monitor. Not yet functional, some issues to iron out with<br />\nincomplete sample detection and small buffers.</p>\n<p>Plan is to</p>\n<ul>\n<li>\n<p>acquire pulse width instead of semiperiod, this will entail<br />\nonly one read event per pulse rather than two, solving the issue of data<br />\ncoming faster than it can be read and filling the buffer. Or maybe we will<br />\nstill do semiperiod, but will read 2 samples at a time as David Meyer has had<br />\nsucess with. The advantage of this latter approach is that we do not need to<br />\nstore the pulse duration in the h5 file in order to take it into account -<br />\nwe can measure it.</p>\n</li>\n<li>\n<p>Determine whether a device has incomplete sample detection empirically.<br />\n  In get_capabilities.py we can create a task that outputs on a DO and reads in<br />\n  a counter, and we can see what we get and store whether it looks like<br />\n  incomplete sample detection. This should be achievable without asking the user<br />\n  to connect back any cables physically, as we should be able to configure<br />\n  them to be connected internally. This will not work if there are any devices<br />\n  out there with counters but no digital outs!</p>\n</li>\n</ul>", "type": "rendered"}, "participants": [], "parents": [{"hash": "c7e2538e0da8152fe41a8d66d237a5748f133f42", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/labscript_devices/commit/c7e2538e0da8152fe41a8d66d237a5748f133f42.json"}, "html": {"href": "#!/cbillington/labscript_devices/commits/c7e2538e0da8152fe41a8d66d237a5748f133f42"}}}], "date": "2018-10-10T21:20:25+00:00", "message": "hacking on wait monitor. Not yet functional, some issues to iron out with\nincomplete sample detection and small buffers.\n\nPlan is to\n\n* acquire pulse width instead of semiperiod, this will entail\nonly one read event per pulse rather than two, solving the issue of data\ncoming faster than it can be read and filling the buffer. Or maybe we will\nstill do semiperiod, but will read 2 samples at a time as David Meyer has had\nsucess with. The advantage of this latter approach is that we do not need to\nstore the pulse duration in the h5 file in order to take it into account -\nwe can measure it.\n\n* Determine whether a device has incomplete sample detection empirically.\n  In get_capabilities.py we can create a task that outputs on a DO and reads in\n  a counter, and we can see what we get and store whether it looks like\n  incomplete sample detection. This should be achievable without asking the user\n  to connect back any cables physically, as we should be able to configure\n  them to be connected internally. This will not work if there are any devices\n  out there with counters but no digital outs!", "type": "commit", "git_hash": "37880394e97ff7616a1ad59406e46fd5c4a8df22", "tags": null, "branches": "NI_DAQmx"}