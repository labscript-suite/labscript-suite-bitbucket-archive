{"rendered": {"message": {"raw": "Prevent race conditions in filewatcher stopping - modified info after\nshutdown is now guaranteeed to reflect file changes before stop() was called.\n\nIntroduce \"clean modified info\" that can be returned by a method, which\nis not just what the user passed in, but also the initial info for files\nthat the user did not pass in a value for.\n\nBLACS saving just the modified info made no sense. It needs to save the clean\nmodified into against which changes will be detected.\n\nCompare file list and not just modificiation in order to determine whether\neverything is in the initial state.\n\nOnly remove deleted files from the list of files to watch if they were not files\nthat were explicitly added (i.e. they are files within a tracked directory,\ncreated after the watch behan). This  way, a deletion and restoration of a\nwatched file can trigger a 'original' event.", "markup": "markdown", "html": "<p>Prevent race conditions in filewatcher stopping - modified info after<br />\nshutdown is now guaranteeed to reflect file changes before stop() was called.</p>\n<p>Introduce \"clean modified info\" that can be returned by a method, which<br />\nis not just what the user passed in, but also the initial info for files<br />\nthat the user did not pass in a value for.</p>\n<p>BLACS saving just the modified info made no sense. It needs to save the clean<br />\nmodified into against which changes will be detected.</p>\n<p>Compare file list and not just modificiation in order to determine whether<br />\neverything is in the initial state.</p>\n<p>Only remove deleted files from the list of files to watch if they were not files<br />\nthat were explicitly added (i.e. they are files within a tracked directory,<br />\ncreated after the watch behan). This  way, a deletion and restoration of a<br />\nwatched file can trigger a 'original' event.</p>", "type": "rendered"}}, "hash": "0a887bcf8b86577b65de01990883597014d2372a", "repository": {"links": {"self": {"href": "data/repositories/cbillington/labscript_utils.json"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/0a887bcf8b86577b65de01990883597014d2372a.json"}, "comments": {"href": "data/repositories/cbillington/labscript_utils/commit/0a887bcf8b86577b65de01990883597014d2372a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/patch/0a887bcf8b86577b65de01990883597014d2372a"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0a887bcf8b86577b65de01990883597014d2372a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/diff/0a887bcf8b86577b65de01990883597014d2372a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0a887bcf8b86577b65de01990883597014d2372a/approve"}, "statuses": {"href": "data/repositories/cbillington/labscript_utils/commit/0a887bcf8b86577b65de01990883597014d2372a/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Prevent race conditions in filewatcher stopping - modified info after\nshutdown is now guaranteeed to reflect file changes before stop() was called.\n\nIntroduce \"clean modified info\" that can be returned by a method, which\nis not just what the user passed in, but also the initial info for files\nthat the user did not pass in a value for.\n\nBLACS saving just the modified info made no sense. It needs to save the clean\nmodified into against which changes will be detected.\n\nCompare file list and not just modificiation in order to determine whether\neverything is in the initial state.\n\nOnly remove deleted files from the list of files to watch if they were not files\nthat were explicitly added (i.e. they are files within a tracked directory,\ncreated after the watch behan). This  way, a deletion and restoration of a\nwatched file can trigger a 'original' event.", "markup": "markdown", "html": "<p>Prevent race conditions in filewatcher stopping - modified info after<br />\nshutdown is now guaranteeed to reflect file changes before stop() was called.</p>\n<p>Introduce \"clean modified info\" that can be returned by a method, which<br />\nis not just what the user passed in, but also the initial info for files<br />\nthat the user did not pass in a value for.</p>\n<p>BLACS saving just the modified info made no sense. It needs to save the clean<br />\nmodified into against which changes will be detected.</p>\n<p>Compare file list and not just modificiation in order to determine whether<br />\neverything is in the initial state.</p>\n<p>Only remove deleted files from the list of files to watch if they were not files<br />\nthat were explicitly added (i.e. they are files within a tracked directory,<br />\ncreated after the watch behan). This  way, a deletion and restoration of a<br />\nwatched file can trigger a 'original' event.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "a836b27d9cf14755a7262b2e07c41fc02d6b72d3", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/a836b27d9cf14755a7262b2e07c41fc02d6b72d3.json"}, "html": {"href": "#!/cbillington/labscript_utils/commits/a836b27d9cf14755a7262b2e07c41fc02d6b72d3"}}}], "date": "2019-12-05T02:01:21+00:00", "message": "Prevent race conditions in filewatcher stopping - modified info after\nshutdown is now guaranteeed to reflect file changes before stop() was called.\n\nIntroduce \"clean modified info\" that can be returned by a method, which\nis not just what the user passed in, but also the initial info for files\nthat the user did not pass in a value for.\n\nBLACS saving just the modified info made no sense. It needs to save the clean\nmodified into against which changes will be detected.\n\nCompare file list and not just modificiation in order to determine whether\neverything is in the initial state.\n\nOnly remove deleted files from the list of files to watch if they were not files\nthat were explicitly added (i.e. they are files within a tracked directory,\ncreated after the watch behan). This  way, a deletion and restoration of a\nwatched file can trigger a 'original' event.", "type": "commit", "git_hash": "13d3141063be4a9caa497c13326e06d3c4f029d2", "tags": null, "branches": "filewatcher_events"}