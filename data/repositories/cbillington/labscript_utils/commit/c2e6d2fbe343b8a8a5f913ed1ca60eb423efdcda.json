{"rendered": {"message": {"raw": "Add 'get_version' remote method to all servers in labscript. This remote method\ncan be used to get the version of any package in the server's environment via\nlabscript_utils.versions.get_version.\n\nThis is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.\n\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their `handler()` method during `__init__` with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.\n\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\nthe result as a string. So normally this would be `['get_version', 'labscript']`\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\nproject name and its import name are not the same.", "markup": "markdown", "html": "<p>Add 'get_version' remote method to all servers in labscript. This remote method<br />\ncan be used to get the version of any package in the server's environment via<br />\nlabscript_utils.versions.get_version.</p>\n<p>This is useful so that we may better error-check compatibility mismatches<br />\nbetween programs communicating remotely, and so that we can evolve protocols to<br />\nallow new functionality whilst either providing backward compatibility for old<br />\npeers or raising errors about versions instead of crashing with less useful info.</p>\n<p>Implementation is done by having labscript_utils.ls_zprocess.ZMQServer instances<br />\nreplace their <code>handler()</code> method during <code>__init__</code> with a wrapped version implementing<br />\nthe new method. This way all labscript programs get this remote method.<br />\nAny other remote methods universal to labscript programs in the future can be<br />\nput here.</p>\n<p>Clients can call <code>zmq_get(..., data=['get_version', *args])</code>, and this will<br />\ntranslate to a call <code>labscript_utils.versions.get_version(*args</code>) and return<br />\nthe result as a string. So normally this would be <code>['get_version', 'labscript']</code><br />\nbut could also be <code>['get_version', 'serial', 'pyserial']</code> for the case where the<br />\nproject name and its import name are not the same.</p>", "type": "rendered"}}, "hash": "c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda", "repository": {"links": {"self": {"href": "data/repositories/cbillington/labscript_utils.json"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda.json"}, "comments": {"href": "data/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/patch/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda"}, "html": {"href": "#!/cbillington/labscript_utils/commits/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/diff/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda/approve"}, "statuses": {"href": "data/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Add 'get_version' remote method to all servers in labscript. This remote method\ncan be used to get the version of any package in the server's environment via\nlabscript_utils.versions.get_version.\n\nThis is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.\n\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their `handler()` method during `__init__` with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.\n\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\nthe result as a string. So normally this would be `['get_version', 'labscript']`\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\nproject name and its import name are not the same.", "markup": "markdown", "html": "<p>Add 'get_version' remote method to all servers in labscript. This remote method<br />\ncan be used to get the version of any package in the server's environment via<br />\nlabscript_utils.versions.get_version.</p>\n<p>This is useful so that we may better error-check compatibility mismatches<br />\nbetween programs communicating remotely, and so that we can evolve protocols to<br />\nallow new functionality whilst either providing backward compatibility for old<br />\npeers or raising errors about versions instead of crashing with less useful info.</p>\n<p>Implementation is done by having labscript_utils.ls_zprocess.ZMQServer instances<br />\nreplace their <code>handler()</code> method during <code>__init__</code> with a wrapped version implementing<br />\nthe new method. This way all labscript programs get this remote method.<br />\nAny other remote methods universal to labscript programs in the future can be<br />\nput here.</p>\n<p>Clients can call <code>zmq_get(..., data=['get_version', *args])</code>, and this will<br />\ntranslate to a call <code>labscript_utils.versions.get_version(*args</code>) and return<br />\nthe result as a string. So normally this would be <code>['get_version', 'labscript']</code><br />\nbut could also be <code>['get_version', 'serial', 'pyserial']</code> for the case where the<br />\nproject name and its import name are not the same.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "1c809e64145d02a9ab5f77142938359b5e001d1e", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/1c809e64145d02a9ab5f77142938359b5e001d1e.json"}, "html": {"href": "#!/cbillington/labscript_utils/commits/1c809e64145d02a9ab5f77142938359b5e001d1e"}}}], "date": "2019-08-06T17:42:07+00:00", "message": "Add 'get_version' remote method to all servers in labscript. This remote method\ncan be used to get the version of any package in the server's environment via\nlabscript_utils.versions.get_version.\n\nThis is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.\n\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their `handler()` method during `__init__` with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.\n\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\nthe result as a string. So normally this would be `['get_version', 'labscript']`\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\nproject name and its import name are not the same.", "type": "commit", "git_hash": "ae1e30c86789d21d7d60fadf5f4089624e188bdb", "tags": null, "branches": "remote-get-version"}