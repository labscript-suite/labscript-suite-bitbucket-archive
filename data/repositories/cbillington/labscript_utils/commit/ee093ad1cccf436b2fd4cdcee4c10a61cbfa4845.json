{"rendered": {"message": {"raw": "Add RPCServer and RPCClient classes appropriate for labscript programs\nto use for their inter-process communication. These are modelled after the\nrunmanager remote client and server classes, providing a base class to implement\nthe same type of clients and servers in other applications.\n\nThe idea is that we will make a blacs.remote, runviewer.remote and lyse.remote\nmodule containing client classes for making these calls, instead of using\nzmq_get directly. Servers must be upgraded before clients.\n\nEvery request sends the required versions of any necessary components on the\nserver, which allows us to make modifications to protocols whilst raising\nhelpful version exceptions instead of just crashing unhelpfully. Fallback\nmethods allow new style servers to still handle old requests. However, new\nclients communicating with old servers will raise exceptions instructing the\nuser to update the server, since they cannot know in advance whether the server\nis old or new.\n\nSince every RPC call checks versions, add a cache to check_version so that it\ndoes not do disk access every time a version is checked. This makes the\nperformance hit of doing these checks for every call negligable.", "markup": "markdown", "html": "<p>Add RPCServer and RPCClient classes appropriate for labscript programs<br />\nto use for their inter-process communication. These are modelled after the<br />\nrunmanager remote client and server classes, providing a base class to implement<br />\nthe same type of clients and servers in other applications.</p>\n<p>The idea is that we will make a blacs.remote, runviewer.remote and lyse.remote<br />\nmodule containing client classes for making these calls, instead of using<br />\nzmq_get directly. Servers must be upgraded before clients.</p>\n<p>Every request sends the required versions of any necessary components on the<br />\nserver, which allows us to make modifications to protocols whilst raising<br />\nhelpful version exceptions instead of just crashing unhelpfully. Fallback<br />\nmethods allow new style servers to still handle old requests. However, new<br />\nclients communicating with old servers will raise exceptions instructing the<br />\nuser to update the server, since they cannot know in advance whether the server<br />\nis old or new.</p>\n<p>Since every RPC call checks versions, add a cache to check_version so that it<br />\ndoes not do disk access every time a version is checked. This makes the<br />\nperformance hit of doing these checks for every call negligable.</p>", "type": "rendered"}}, "hash": "ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845", "repository": {"links": {"self": {"href": "data/repositories/cbillington/labscript_utils.json"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845.json"}, "comments": {"href": "data/repositories/cbillington/labscript_utils/commit/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/patch/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845"}, "html": {"href": "#!/cbillington/labscript_utils/commits/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/diff/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845/approve"}, "statuses": {"href": "data/repositories/cbillington/labscript_utils/commit/ee093ad1cccf436b2fd4cdcee4c10a61cbfa4845/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Add RPCServer and RPCClient classes appropriate for labscript programs\nto use for their inter-process communication. These are modelled after the\nrunmanager remote client and server classes, providing a base class to implement\nthe same type of clients and servers in other applications.\n\nThe idea is that we will make a blacs.remote, runviewer.remote and lyse.remote\nmodule containing client classes for making these calls, instead of using\nzmq_get directly. Servers must be upgraded before clients.\n\nEvery request sends the required versions of any necessary components on the\nserver, which allows us to make modifications to protocols whilst raising\nhelpful version exceptions instead of just crashing unhelpfully. Fallback\nmethods allow new style servers to still handle old requests. However, new\nclients communicating with old servers will raise exceptions instructing the\nuser to update the server, since they cannot know in advance whether the server\nis old or new.\n\nSince every RPC call checks versions, add a cache to check_version so that it\ndoes not do disk access every time a version is checked. This makes the\nperformance hit of doing these checks for every call negligable.", "markup": "markdown", "html": "<p>Add RPCServer and RPCClient classes appropriate for labscript programs<br />\nto use for their inter-process communication. These are modelled after the<br />\nrunmanager remote client and server classes, providing a base class to implement<br />\nthe same type of clients and servers in other applications.</p>\n<p>The idea is that we will make a blacs.remote, runviewer.remote and lyse.remote<br />\nmodule containing client classes for making these calls, instead of using<br />\nzmq_get directly. Servers must be upgraded before clients.</p>\n<p>Every request sends the required versions of any necessary components on the<br />\nserver, which allows us to make modifications to protocols whilst raising<br />\nhelpful version exceptions instead of just crashing unhelpfully. Fallback<br />\nmethods allow new style servers to still handle old requests. However, new<br />\nclients communicating with old servers will raise exceptions instructing the<br />\nuser to update the server, since they cannot know in advance whether the server<br />\nis old or new.</p>\n<p>Since every RPC call checks versions, add a cache to check_version so that it<br />\ndoes not do disk access every time a version is checked. This makes the<br />\nperformance hit of doing these checks for every call negligable.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda.json"}, "html": {"href": "#!/cbillington/labscript_utils/commits/c2e6d2fbe343b8a8a5f913ed1ca60eb423efdcda"}}}], "date": "2019-08-13T20:36:18+00:00", "message": "Add RPCServer and RPCClient classes appropriate for labscript programs\nto use for their inter-process communication. These are modelled after the\nrunmanager remote client and server classes, providing a base class to implement\nthe same type of clients and servers in other applications.\n\nThe idea is that we will make a blacs.remote, runviewer.remote and lyse.remote\nmodule containing client classes for making these calls, instead of using\nzmq_get directly. Servers must be upgraded before clients.\n\nEvery request sends the required versions of any necessary components on the\nserver, which allows us to make modifications to protocols whilst raising\nhelpful version exceptions instead of just crashing unhelpfully. Fallback\nmethods allow new style servers to still handle old requests. However, new\nclients communicating with old servers will raise exceptions instructing the\nuser to update the server, since they cannot know in advance whether the server\nis old or new.\n\nSince every RPC call checks versions, add a cache to check_version so that it\ndoes not do disk access every time a version is checked. This makes the\nperformance hit of doing these checks for every call negligable.", "type": "commit", "git_hash": "6c366213d6a4372fa833278f4760b71235c3a8ff", "tags": null, "branches": "remote-get-version"}