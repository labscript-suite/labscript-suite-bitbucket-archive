{"rendered": {"message": {"raw": "Split functionality to find comments out of `remove_comments_and_tokenify()`,\ninto new function `get_comments()`, so that it can be used separately by code that\nwants the comments themselves and not just to remove them. This way the remote\nserver's `set_globals()` can preserve only an expression-final comment (or\ncomment block) in multi-line expressions.\n\nUse this functionality in RemoteServer.set_globals() to do the above.\n\nBoth `remote_comments_and_tokenify()` (used in diffing globals) and `get_comments()`\n(used to preserve comments in RemoteServer.set_globals())\nare now compatible with multi-line expressions, and so should work with\nthe word_wrap branch, though some testing would be good.\n\nExample of these two functions in action (with an intentional sytax error in\nthe code being tokenized):\n\n```python\nfrom runmanager import remove_comments_and_tokenify, find_comments\ns = \"\"\"\nfoo(a, # 123\n    b, # baz\n    c)! # qux\n    # foo\n    \"\"\"\n\nexpr, tokens = remove_comments_and_tokenify(s)\nprint(\"without comments:\")\nfor line in expr.splitlines():\n    print(repr(line))\n\nprint(\"tokens:\", tokens)\ncomments = find_comments(s)\nprint(\"comments only:\")\nfor start, end in comments:\n    print(repr(s[start:end]))\n```\nresult:\n```\nwithout comments:\n''\n'foo(a,'\n'    b,'\n'    c)!'\ntokens: ['\\n', 'foo', '(', 'a', ',', '\\n', 'b', ',', '\\n', 'c', ')', '!']\ncomments only:\n' # 123'\n' # baz'\n' # qux\\n    # foo\\n    '\n```", "markup": "markdown", "html": "<p>Split functionality to find comments out of <code>remove_comments_and_tokenify()</code>,<br />\ninto new function <code>get_comments()</code>, so that it can be used separately by code that<br />\nwants the comments themselves and not just to remove them. This way the remote<br />\nserver's <code>set_globals()</code> can preserve only an expression-final comment (or<br />\ncomment block) in multi-line expressions.</p>\n<p>Use this functionality in RemoteServer.set_globals() to do the above.</p>\n<p>Both <code>remote_comments_and_tokenify()</code> (used in diffing globals) and <code>get_comments()</code><br />\n(used to preserve comments in RemoteServer.set_globals())<br />\nare now compatible with multi-line expressions, and so should work with<br />\nthe word_wrap branch, though some testing would be good.</p>\n<p>Example of these two functions in action (with an intentional sytax error in<br />\nthe code being tokenized):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">runmanager</span> <span class=\"kn\">import</span> <span class=\"n\">remove_comments_and_tokenify</span><span class=\"p\">,</span> <span class=\"n\">find_comments</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">foo(a, # 123</span>\n<span class=\"s2\">    b, # baz</span>\n<span class=\"s2\">    c)! # qux</span>\n<span class=\"s2\">    # foo</span>\n<span class=\"s2\">    &quot;&quot;&quot;</span>\n\n<span class=\"n\">expr</span><span class=\"p\">,</span> <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">remove_comments_and_tokenify</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;without comments:&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;tokens:&quot;</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n<span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">find_comments</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;comments only:&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"ow\">in</span> <span class=\"n\">comments</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"n\">end</span><span class=\"p\">]))</span>\n</pre></div>\n\n\n<p>result:</p>\n<div class=\"codehilite\"><pre><span></span>without comments:\n&#39;&#39;\n&#39;foo(a,&#39;\n&#39;    b,&#39;\n&#39;    c)!&#39;\ntokens: [&#39;\\n&#39;, &#39;foo&#39;, &#39;(&#39;, &#39;a&#39;, &#39;,&#39;, &#39;\\n&#39;, &#39;b&#39;, &#39;,&#39;, &#39;\\n&#39;, &#39;c&#39;, &#39;)&#39;, &#39;!&#39;]\ncomments only:\n&#39; # 123&#39;\n&#39; # baz&#39;\n&#39; # qux\\n    # foo\\n    &#39;\n</pre></div>", "type": "rendered"}}, "hash": "042f842324d7128c0f1e02cac47f6889df203ab4", "repository": {"links": {"self": {"href": "data/repositories/cbillington/runmanager.json"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "links": {"self": {"href": "data/repositories/cbillington/runmanager/commit/042f842324d7128c0f1e02cac47f6889df203ab4.json"}, "comments": {"href": "data/repositories/cbillington/runmanager/commit/042f842324d7128c0f1e02cac47f6889df203ab4/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/patch/042f842324d7128c0f1e02cac47f6889df203ab4"}, "html": {"href": "#!/cbillington/runmanager/commits/042f842324d7128c0f1e02cac47f6889df203ab4"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/diff/042f842324d7128c0f1e02cac47f6889df203ab4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/042f842324d7128c0f1e02cac47f6889df203ab4/approve"}, "statuses": {"href": "data/repositories/cbillington/runmanager/commit/042f842324d7128c0f1e02cac47f6889df203ab4/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Split functionality to find comments out of `remove_comments_and_tokenify()`,\ninto new function `get_comments()`, so that it can be used separately by code that\nwants the comments themselves and not just to remove them. This way the remote\nserver's `set_globals()` can preserve only an expression-final comment (or\ncomment block) in multi-line expressions.\n\nUse this functionality in RemoteServer.set_globals() to do the above.\n\nBoth `remote_comments_and_tokenify()` (used in diffing globals) and `get_comments()`\n(used to preserve comments in RemoteServer.set_globals())\nare now compatible with multi-line expressions, and so should work with\nthe word_wrap branch, though some testing would be good.\n\nExample of these two functions in action (with an intentional sytax error in\nthe code being tokenized):\n\n```python\nfrom runmanager import remove_comments_and_tokenify, find_comments\ns = \"\"\"\nfoo(a, # 123\n    b, # baz\n    c)! # qux\n    # foo\n    \"\"\"\n\nexpr, tokens = remove_comments_and_tokenify(s)\nprint(\"without comments:\")\nfor line in expr.splitlines():\n    print(repr(line))\n\nprint(\"tokens:\", tokens)\ncomments = find_comments(s)\nprint(\"comments only:\")\nfor start, end in comments:\n    print(repr(s[start:end]))\n```\nresult:\n```\nwithout comments:\n''\n'foo(a,'\n'    b,'\n'    c)!'\ntokens: ['\\n', 'foo', '(', 'a', ',', '\\n', 'b', ',', '\\n', 'c', ')', '!']\ncomments only:\n' # 123'\n' # baz'\n' # qux\\n    # foo\\n    '\n```", "markup": "markdown", "html": "<p>Split functionality to find comments out of <code>remove_comments_and_tokenify()</code>,<br />\ninto new function <code>get_comments()</code>, so that it can be used separately by code that<br />\nwants the comments themselves and not just to remove them. This way the remote<br />\nserver's <code>set_globals()</code> can preserve only an expression-final comment (or<br />\ncomment block) in multi-line expressions.</p>\n<p>Use this functionality in RemoteServer.set_globals() to do the above.</p>\n<p>Both <code>remote_comments_and_tokenify()</code> (used in diffing globals) and <code>get_comments()</code><br />\n(used to preserve comments in RemoteServer.set_globals())<br />\nare now compatible with multi-line expressions, and so should work with<br />\nthe word_wrap branch, though some testing would be good.</p>\n<p>Example of these two functions in action (with an intentional sytax error in<br />\nthe code being tokenized):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">runmanager</span> <span class=\"kn\">import</span> <span class=\"n\">remove_comments_and_tokenify</span><span class=\"p\">,</span> <span class=\"n\">find_comments</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">foo(a, # 123</span>\n<span class=\"s2\">    b, # baz</span>\n<span class=\"s2\">    c)! # qux</span>\n<span class=\"s2\">    # foo</span>\n<span class=\"s2\">    &quot;&quot;&quot;</span>\n\n<span class=\"n\">expr</span><span class=\"p\">,</span> <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">remove_comments_and_tokenify</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;without comments:&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;tokens:&quot;</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">)</span>\n<span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">find_comments</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;comments only:&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"ow\">in</span> <span class=\"n\">comments</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"n\">end</span><span class=\"p\">]))</span>\n</pre></div>\n\n\n<p>result:</p>\n<div class=\"codehilite\"><pre><span></span>without comments:\n&#39;&#39;\n&#39;foo(a,&#39;\n&#39;    b,&#39;\n&#39;    c)!&#39;\ntokens: [&#39;\\n&#39;, &#39;foo&#39;, &#39;(&#39;, &#39;a&#39;, &#39;,&#39;, &#39;\\n&#39;, &#39;b&#39;, &#39;,&#39;, &#39;\\n&#39;, &#39;c&#39;, &#39;)&#39;, &#39;!&#39;]\ncomments only:\n&#39; # 123&#39;\n&#39; # baz&#39;\n&#39; # qux\\n    # foo\\n    &#39;\n</pre></div>", "type": "rendered"}, "participants": [], "parents": [{"hash": "bf39b5fb732c4674f30378e74987d1a0305c5ce7", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/runmanager/commit/bf39b5fb732c4674f30378e74987d1a0305c5ce7.json"}, "html": {"href": "#!/cbillington/runmanager/commits/bf39b5fb732c4674f30378e74987d1a0305c5ce7"}}}], "date": "2019-05-09T14:05:23+00:00", "message": "Split functionality to find comments out of `remove_comments_and_tokenify()`,\ninto new function `get_comments()`, so that it can be used separately by code that\nwants the comments themselves and not just to remove them. This way the remote\nserver's `set_globals()` can preserve only an expression-final comment (or\ncomment block) in multi-line expressions.\n\nUse this functionality in RemoteServer.set_globals() to do the above.\n\nBoth `remote_comments_and_tokenify()` (used in diffing globals) and `get_comments()`\n(used to preserve comments in RemoteServer.set_globals())\nare now compatible with multi-line expressions, and so should work with\nthe word_wrap branch, though some testing would be good.\n\nExample of these two functions in action (with an intentional sytax error in\nthe code being tokenized):\n\n```python\nfrom runmanager import remove_comments_and_tokenify, find_comments\ns = \"\"\"\nfoo(a, # 123\n    b, # baz\n    c)! # qux\n    # foo\n    \"\"\"\n\nexpr, tokens = remove_comments_and_tokenify(s)\nprint(\"without comments:\")\nfor line in expr.splitlines():\n    print(repr(line))\n\nprint(\"tokens:\", tokens)\ncomments = find_comments(s)\nprint(\"comments only:\")\nfor start, end in comments:\n    print(repr(s[start:end]))\n```\nresult:\n```\nwithout comments:\n''\n'foo(a,'\n'    b,'\n'    c)!'\ntokens: ['\\n', 'foo', '(', 'a', ',', '\\n', 'b', ',', '\\n', 'c', ')', '!']\ncomments only:\n' # 123'\n' # baz'\n' # qux\\n    # foo\\n    '\n```", "type": "commit", "git_hash": "1d6204e059170d8c9bd1b68bdf546f4439cdbfa3", "tags": null, "branches": "remote"}