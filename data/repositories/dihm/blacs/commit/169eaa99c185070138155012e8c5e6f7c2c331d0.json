{"rendered": {"message": {"raw": "You can now pass pickleable or unpickleable objects to the worker class at its initialisation, by passing a dictionary workerargs, for eg workerargs={'x':Queue(),'y':'foobar'} to the Tab class initialisation.\n\nThe worker object will then have x and y added as instance variables self.x and self.y.\n\nThis was motivated by the requirement to pass an extra Queue object to the worker process of the NI card.\n\nAlso if you do try to pass unpickleable objects to the worker later, you used to get a hard crash. Now the worker simply stops responding, and a reset works fine. I don't seem to be able to catch the exception -- it doesn't appear to happen in either the parent or child exceptions! So I'll make this better at some point by checking first that all objects are pickleable before passing them.", "markup": "markdown", "html": "<p>You can now pass pickleable or unpickleable objects to the worker class at its initialisation, by passing a dictionary workerargs, for eg workerargs={'x':Queue(),'y':'foobar'} to the Tab class initialisation.</p>\n<p>The worker object will then have x and y added as instance variables self.x and self.y.</p>\n<p>This was motivated by the requirement to pass an extra Queue object to the worker process of the NI card.</p>\n<p>Also if you do try to pass unpickleable objects to the worker later, you used to get a hard crash. Now the worker simply stops responding, and a reset works fine. I don't seem to be able to catch the exception -- it doesn't appear to happen in either the parent or child exceptions! So I'll make this better at some point by checking first that all objects are pickleable before passing them.</p>", "type": "rendered"}}, "hash": "169eaa99c185070138155012e8c5e6f7c2c331d0", "repository": {"links": {"self": {"href": "data/repositories/dihm/blacs.json"}, "html": {"href": "#!/dihm/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "dihm/blacs", "uuid": "{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}"}, "links": {"self": {"href": "data/repositories/dihm/blacs/commit/169eaa99c185070138155012e8c5e6f7c2c331d0.json"}, "comments": {"href": "data/repositories/dihm/blacs/commit/169eaa99c185070138155012e8c5e6f7c2c331d0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/patch/169eaa99c185070138155012e8c5e6f7c2c331d0"}, "html": {"href": "#!/dihm/blacs/commits/169eaa99c185070138155012e8c5e6f7c2c331d0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/diff/169eaa99c185070138155012e8c5e6f7c2c331d0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/commit/169eaa99c185070138155012e8c5e6f7c2c331d0/approve"}, "statuses": {"href": "data/repositories/dihm/blacs/commit/169eaa99c185070138155012e8c5e6f7c2c331d0/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "You can now pass pickleable or unpickleable objects to the worker class at its initialisation, by passing a dictionary workerargs, for eg workerargs={'x':Queue(),'y':'foobar'} to the Tab class initialisation.\n\nThe worker object will then have x and y added as instance variables self.x and self.y.\n\nThis was motivated by the requirement to pass an extra Queue object to the worker process of the NI card.\n\nAlso if you do try to pass unpickleable objects to the worker later, you used to get a hard crash. Now the worker simply stops responding, and a reset works fine. I don't seem to be able to catch the exception -- it doesn't appear to happen in either the parent or child exceptions! So I'll make this better at some point by checking first that all objects are pickleable before passing them.", "markup": "markdown", "html": "<p>You can now pass pickleable or unpickleable objects to the worker class at its initialisation, by passing a dictionary workerargs, for eg workerargs={'x':Queue(),'y':'foobar'} to the Tab class initialisation.</p>\n<p>The worker object will then have x and y added as instance variables self.x and self.y.</p>\n<p>This was motivated by the requirement to pass an extra Queue object to the worker process of the NI card.</p>\n<p>Also if you do try to pass unpickleable objects to the worker later, you used to get a hard crash. Now the worker simply stops responding, and a reset works fine. I don't seem to be able to catch the exception -- it doesn't appear to happen in either the parent or child exceptions! So I'll make this better at some point by checking first that all objects are pickleable before passing them.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "985a9e05e34b3278839062e8ed91ee91122ce09e", "type": "commit", "links": {"self": {"href": "data/repositories/dihm/blacs/commit/985a9e05e34b3278839062e8ed91ee91122ce09e.json"}, "html": {"href": "#!/dihm/blacs/commits/985a9e05e34b3278839062e8ed91ee91122ce09e"}}}], "date": "2011-11-10T04:53:36+00:00", "message": "You can now pass pickleable or unpickleable objects to the worker class at its initialisation, by passing a dictionary workerargs, for eg workerargs={'x':Queue(),'y':'foobar'} to the Tab class initialisation.\n\nThe worker object will then have x and y added as instance variables self.x and self.y.\n\nThis was motivated by the requirement to pass an extra Queue object to the worker process of the NI card.\n\nAlso if you do try to pass unpickleable objects to the worker later, you used to get a hard crash. Now the worker simply stops responding, and a reset works fine. I don't seem to be able to catch the exception -- it doesn't appear to happen in either the parent or child exceptions! So I'll make this better at some point by checking first that all objects are pickleable before passing them.", "type": "commit", "git_hash": "9815b87e055f915dcd3e8a3f96747c9bc6d07512", "tags": null, "branches": "default"}