{"rendered": {"message": {"raw": "Add initial framework for device_properties widgets in a device BLACS tab.\n\nConfiguration is done using a new style of property dictionary that uses either\nand AO or DO output for each property.\n\n```\ndevice_properties = {'device_property':{'default':value,\n                                        'type':'num',\n                                        'min':0,\n                                        'max':1,\n                                        'base_unit':'V',\n                                        'step':0.1,\n                                        'decimals':1},\n                     'device_property2'}:{'default':value,\n                                          'type':'bool'}\n```\n\nAlso establishes the `program_device_properties` state machine method.\nIn order to program these properties, the BLACS_worker must define\na `program_properties` method. The `check_remote_values` method of the worker\nshould populate the properties values as well as the output values as well.\n\nCurrently, automatic layout is done using the existing `auto-place-widgets` method\nwith a custom group name defined by the user. When mixing types of outputs, it\nisn't particularly pretty. A separate method for property widgets with more refined\nlayout control is likely necessary.", "markup": "markdown", "html": "<p>Add initial framework for device_properties widgets in a device BLACS tab.</p>\n<p>Configuration is done using a new style of property dictionary that uses either<br />\nand AO or DO output for each property.</p>\n<div class=\"codehilite\"><pre><span></span>device_properties = {&#39;device_property&#39;:{&#39;default&#39;:value,\n                                        &#39;type&#39;:&#39;num&#39;,\n                                        &#39;min&#39;:0,\n                                        &#39;max&#39;:1,\n                                        &#39;base_unit&#39;:&#39;V&#39;,\n                                        &#39;step&#39;:0.1,\n                                        &#39;decimals&#39;:1},\n                     &#39;device_property2&#39;}:{&#39;default&#39;:value,\n                                          &#39;type&#39;:&#39;bool&#39;}\n</pre></div>\n\n\n<p>Also establishes the <code>program_device_properties</code> state machine method.<br />\nIn order to program these properties, the BLACS_worker must define<br />\na <code>program_properties</code> method. The <code>check_remote_values</code> method of the worker<br />\nshould populate the properties values as well as the output values as well.</p>\n<p>Currently, automatic layout is done using the existing <code>auto-place-widgets</code> method<br />\nwith a custom group name defined by the user. When mixing types of outputs, it<br />\nisn't particularly pretty. A separate method for property widgets with more refined<br />\nlayout control is likely necessary.</p>", "type": "rendered"}}, "hash": "9ad4c3733eb6d8f0803e81007fd549f0c167becc", "repository": {"links": {"self": {"href": "data/repositories/dihm/blacs.json"}, "html": {"href": "#!/dihm/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "dihm/blacs", "uuid": "{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}"}, "links": {"self": {"href": "data/repositories/dihm/blacs/commit/9ad4c3733eb6d8f0803e81007fd549f0c167becc.json"}, "comments": {"href": "data/repositories/dihm/blacs/commit/9ad4c3733eb6d8f0803e81007fd549f0c167becc/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/patch/9ad4c3733eb6d8f0803e81007fd549f0c167becc"}, "html": {"href": "#!/dihm/blacs/commits/9ad4c3733eb6d8f0803e81007fd549f0c167becc"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/diff/9ad4c3733eb6d8f0803e81007fd549f0c167becc"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/commit/9ad4c3733eb6d8f0803e81007fd549f0c167becc/approve"}, "statuses": {"href": "data/repositories/dihm/blacs/commit/9ad4c3733eb6d8f0803e81007fd549f0c167becc/statuses_page=1.json"}}, "author": {"raw": "Warm Vapor Control <dihm.meyer@gmail.com>", "type": "author", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}}, "summary": {"raw": "Add initial framework for device_properties widgets in a device BLACS tab.\n\nConfiguration is done using a new style of property dictionary that uses either\nand AO or DO output for each property.\n\n```\ndevice_properties = {'device_property':{'default':value,\n                                        'type':'num',\n                                        'min':0,\n                                        'max':1,\n                                        'base_unit':'V',\n                                        'step':0.1,\n                                        'decimals':1},\n                     'device_property2'}:{'default':value,\n                                          'type':'bool'}\n```\n\nAlso establishes the `program_device_properties` state machine method.\nIn order to program these properties, the BLACS_worker must define\na `program_properties` method. The `check_remote_values` method of the worker\nshould populate the properties values as well as the output values as well.\n\nCurrently, automatic layout is done using the existing `auto-place-widgets` method\nwith a custom group name defined by the user. When mixing types of outputs, it\nisn't particularly pretty. A separate method for property widgets with more refined\nlayout control is likely necessary.", "markup": "markdown", "html": "<p>Add initial framework for device_properties widgets in a device BLACS tab.</p>\n<p>Configuration is done using a new style of property dictionary that uses either<br />\nand AO or DO output for each property.</p>\n<div class=\"codehilite\"><pre><span></span>device_properties = {&#39;device_property&#39;:{&#39;default&#39;:value,\n                                        &#39;type&#39;:&#39;num&#39;,\n                                        &#39;min&#39;:0,\n                                        &#39;max&#39;:1,\n                                        &#39;base_unit&#39;:&#39;V&#39;,\n                                        &#39;step&#39;:0.1,\n                                        &#39;decimals&#39;:1},\n                     &#39;device_property2&#39;}:{&#39;default&#39;:value,\n                                          &#39;type&#39;:&#39;bool&#39;}\n</pre></div>\n\n\n<p>Also establishes the <code>program_device_properties</code> state machine method.<br />\nIn order to program these properties, the BLACS_worker must define<br />\na <code>program_properties</code> method. The <code>check_remote_values</code> method of the worker<br />\nshould populate the properties values as well as the output values as well.</p>\n<p>Currently, automatic layout is done using the existing <code>auto-place-widgets</code> method<br />\nwith a custom group name defined by the user. When mixing types of outputs, it<br />\nisn't particularly pretty. A separate method for property widgets with more refined<br />\nlayout control is likely necessary.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "1b4c69c290bddf43a5573d9e6c0e27d6cc67875b", "type": "commit", "links": {"self": {"href": "data/repositories/dihm/blacs/commit/1b4c69c290bddf43a5573d9e6c0e27d6cc67875b.json"}, "html": {"href": "#!/dihm/blacs/commits/1b4c69c290bddf43a5573d9e6c0e27d6cc67875b"}}}], "date": "2019-10-08T17:33:04+00:00", "message": "Add initial framework for device_properties widgets in a device BLACS tab.\n\nConfiguration is done using a new style of property dictionary that uses either\nand AO or DO output for each property.\n\n```\ndevice_properties = {'device_property':{'default':value,\n                                        'type':'num',\n                                        'min':0,\n                                        'max':1,\n                                        'base_unit':'V',\n                                        'step':0.1,\n                                        'decimals':1},\n                     'device_property2'}:{'default':value,\n                                          'type':'bool'}\n```\n\nAlso establishes the `program_device_properties` state machine method.\nIn order to program these properties, the BLACS_worker must define\na `program_properties` method. The `check_remote_values` method of the worker\nshould populate the properties values as well as the output values as well.\n\nCurrently, automatic layout is done using the existing `auto-place-widgets` method\nwith a custom group name defined by the user. When mixing types of outputs, it\nisn't particularly pretty. A separate method for property widgets with more refined\nlayout control is likely necessary.", "type": "commit", "git_hash": "9fe1e7d4771a596371412726226f8e61ab3a0353", "tags": null, "branches": "device_properties"}