{"rendered": {"message": {"raw": "Mostly bug fixes for the expected behaviour of figures and the new features:\n\n* Added a dummy `Plot` object so that scripts that expect to be able to subclass lyse.Plot can still run from the terminal (scripts run from the terminal never instantiate the Plot subclass so anything works here)\n* Changed the figure manager to use a OrderedDict so that plot windows with string identifiers are created in the order in which `figure(identifier)` is called.\n* used labscript_utils.dedent for printing multi-line string comments nicely\n* Fixed a bug with using matplotlib.pyplot.close() when our custom version is called with a figure object as the argument (however I doubt anyone ever actually uses this functionality, so presumably it wasn't that important!)\n* Removed commented out code\n* Improved the reloading of Plot windows. Plot windows are now closed and recreated if either the registered Plot class or identifier has changed. Recreated Plot windows have their window state saved and restored to minimise inconvenience to the user.\n* Added a method to the Plot class that gets called when the window is closed (note: windows are only closed programmatically when the Plot class or identifier has changed. User interaction that \"closes\" windows still hides the window as before) so that subclasses can implement custom behaviour (and we can release the pan/zoom tool lock)\n* Added code that forces a redraw and title update of plot windows that are no in use anymore (so that you don't get confused by a plot showing stale data from a previous run of the analysis script).\n* As a consequence of the above, the Plot.analysis_complete() method (designed for us in Plot subclasses) now has a keyword argument which indicates whether this plot window was in use in this run of the analysis script.", "markup": "markdown", "html": "<p>Mostly bug fixes for the expected behaviour of figures and the new features:</p>\n<ul>\n<li>Added a dummy <code>Plot</code> object so that scripts that expect to be able to subclass lyse.Plot can still run from the terminal (scripts run from the terminal never instantiate the Plot subclass so anything works here)</li>\n<li>Changed the figure manager to use a OrderedDict so that plot windows with string identifiers are created in the order in which <code>figure(identifier)</code> is called.</li>\n<li>used labscript_utils.dedent for printing multi-line string comments nicely</li>\n<li>Fixed a bug with using matplotlib.pyplot.close() when our custom version is called with a figure object as the argument (however I doubt anyone ever actually uses this functionality, so presumably it wasn't that important!)</li>\n<li>Removed commented out code</li>\n<li>Improved the reloading of Plot windows. Plot windows are now closed and recreated if either the registered Plot class or identifier has changed. Recreated Plot windows have their window state saved and restored to minimise inconvenience to the user.</li>\n<li>Added a method to the Plot class that gets called when the window is closed (note: windows are only closed programmatically when the Plot class or identifier has changed. User interaction that \"closes\" windows still hides the window as before) so that subclasses can implement custom behaviour (and we can release the pan/zoom tool lock)</li>\n<li>Added code that forces a redraw and title update of plot windows that are no in use anymore (so that you don't get confused by a plot showing stale data from a previous run of the analysis script).</li>\n<li>As a consequence of the above, the Plot.analysis_complete() method (designed for us in Plot subclasses) now has a keyword argument which indicates whether this plot window was in use in this run of the analysis script.</li>\n</ul>", "type": "rendered"}}, "hash": "16b11ef93019cd5252c469f459ec9cb80372a187", "repository": {"links": {"self": {"href": "data/repositories/dihm/lyse.json"}, "html": {"href": "#!/dihm/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{093f183c-ad2a-4071-88e2-8c47ad45e99d}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "dihm/lyse", "uuid": "{093f183c-ad2a-4071-88e2-8c47ad45e99d}"}, "links": {"self": {"href": "data/repositories/dihm/lyse/commit/16b11ef93019cd5252c469f459ec9cb80372a187.json"}, "comments": {"href": "data/repositories/dihm/lyse/commit/16b11ef93019cd5252c469f459ec9cb80372a187/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/lyse/patch/16b11ef93019cd5252c469f459ec9cb80372a187"}, "html": {"href": "#!/dihm/lyse/commits/16b11ef93019cd5252c469f459ec9cb80372a187"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/lyse/diff/16b11ef93019cd5252c469f459ec9cb80372a187"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/lyse/commit/16b11ef93019cd5252c469f459ec9cb80372a187/approve"}, "statuses": {"href": "data/repositories/dihm/lyse/commit/16b11ef93019cd5252c469f459ec9cb80372a187/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Mostly bug fixes for the expected behaviour of figures and the new features:\n\n* Added a dummy `Plot` object so that scripts that expect to be able to subclass lyse.Plot can still run from the terminal (scripts run from the terminal never instantiate the Plot subclass so anything works here)\n* Changed the figure manager to use a OrderedDict so that plot windows with string identifiers are created in the order in which `figure(identifier)` is called.\n* used labscript_utils.dedent for printing multi-line string comments nicely\n* Fixed a bug with using matplotlib.pyplot.close() when our custom version is called with a figure object as the argument (however I doubt anyone ever actually uses this functionality, so presumably it wasn't that important!)\n* Removed commented out code\n* Improved the reloading of Plot windows. Plot windows are now closed and recreated if either the registered Plot class or identifier has changed. Recreated Plot windows have their window state saved and restored to minimise inconvenience to the user.\n* Added a method to the Plot class that gets called when the window is closed (note: windows are only closed programmatically when the Plot class or identifier has changed. User interaction that \"closes\" windows still hides the window as before) so that subclasses can implement custom behaviour (and we can release the pan/zoom tool lock)\n* Added code that forces a redraw and title update of plot windows that are no in use anymore (so that you don't get confused by a plot showing stale data from a previous run of the analysis script).\n* As a consequence of the above, the Plot.analysis_complete() method (designed for us in Plot subclasses) now has a keyword argument which indicates whether this plot window was in use in this run of the analysis script.", "markup": "markdown", "html": "<p>Mostly bug fixes for the expected behaviour of figures and the new features:</p>\n<ul>\n<li>Added a dummy <code>Plot</code> object so that scripts that expect to be able to subclass lyse.Plot can still run from the terminal (scripts run from the terminal never instantiate the Plot subclass so anything works here)</li>\n<li>Changed the figure manager to use a OrderedDict so that plot windows with string identifiers are created in the order in which <code>figure(identifier)</code> is called.</li>\n<li>used labscript_utils.dedent for printing multi-line string comments nicely</li>\n<li>Fixed a bug with using matplotlib.pyplot.close() when our custom version is called with a figure object as the argument (however I doubt anyone ever actually uses this functionality, so presumably it wasn't that important!)</li>\n<li>Removed commented out code</li>\n<li>Improved the reloading of Plot windows. Plot windows are now closed and recreated if either the registered Plot class or identifier has changed. Recreated Plot windows have their window state saved and restored to minimise inconvenience to the user.</li>\n<li>Added a method to the Plot class that gets called when the window is closed (note: windows are only closed programmatically when the Plot class or identifier has changed. User interaction that \"closes\" windows still hides the window as before) so that subclasses can implement custom behaviour (and we can release the pan/zoom tool lock)</li>\n<li>Added code that forces a redraw and title update of plot windows that are no in use anymore (so that you don't get confused by a plot showing stale data from a previous run of the analysis script).</li>\n<li>As a consequence of the above, the Plot.analysis_complete() method (designed for us in Plot subclasses) now has a keyword argument which indicates whether this plot window was in use in this run of the analysis script.</li>\n</ul>", "type": "rendered"}, "participants": [], "parents": [{"hash": "90162fb21a2c0544f82156341c5d5d18a9ad405e", "type": "commit", "links": {"self": {"href": "data/repositories/dihm/lyse/commit/90162fb21a2c0544f82156341c5d5d18a9ad405e.json"}, "html": {"href": "#!/dihm/lyse/commits/90162fb21a2c0544f82156341c5d5d18a9ad405e"}}}], "date": "2018-10-25T04:54:51+00:00", "message": "Mostly bug fixes for the expected behaviour of figures and the new features:\n\n* Added a dummy `Plot` object so that scripts that expect to be able to subclass lyse.Plot can still run from the terminal (scripts run from the terminal never instantiate the Plot subclass so anything works here)\n* Changed the figure manager to use a OrderedDict so that plot windows with string identifiers are created in the order in which `figure(identifier)` is called.\n* used labscript_utils.dedent for printing multi-line string comments nicely\n* Fixed a bug with using matplotlib.pyplot.close() when our custom version is called with a figure object as the argument (however I doubt anyone ever actually uses this functionality, so presumably it wasn't that important!)\n* Removed commented out code\n* Improved the reloading of Plot windows. Plot windows are now closed and recreated if either the registered Plot class or identifier has changed. Recreated Plot windows have their window state saved and restored to minimise inconvenience to the user.\n* Added a method to the Plot class that gets called when the window is closed (note: windows are only closed programmatically when the Plot class or identifier has changed. User interaction that \"closes\" windows still hides the window as before) so that subclasses can implement custom behaviour (and we can release the pan/zoom tool lock)\n* Added code that forces a redraw and title update of plot windows that are no in use anymore (so that you don't get confused by a plot showing stale data from a previous run of the analysis script).\n* As a consequence of the above, the Plot.analysis_complete() method (designed for us in Plot subclasses) now has a keyword argument which indicates whether this plot window was in use in this run of the analysis script.", "type": "commit", "git_hash": "367eac29579484ecdcee836643f35a8ee15ad375", "tags": null, "branches": "custom-Plot-classes"}