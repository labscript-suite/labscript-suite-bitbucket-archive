{"rendered": {"message": {"raw": "Add wrappers around zprocess functionality configuring it according to labconfig\n\n* Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.\n\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.\n\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using the now-deprecated\n  Process() classes that do not specify a ProcessTree. So it provides backward\n  compatibility for labscript suite programs whilst they remain unencrypted.\n\n* Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.\n\nThese changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.", "markup": "markdown", "html": "<p>Add wrappers around zprocess functionality configuring it according to labconfig</p>\n<ul>\n<li>\n<p>Added ls_zprocess, which wraps zprocess classes with singletons and<br />\n  subclasses configured to use labconfig encryption settings, as well<br />\n  as zlock host and port settings, and zprocess.remote  port setting.</p>\n</li>\n<li>\n<p>Added zlock.py, zlog.py and remote.py, which can be used to start zlock,<br />\n  zlog and zprocess.remote servers according to labconfig settings. zlog should<br />\n  not normally be run manually.</p>\n</li>\n<li>\n<p>Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.<br />\n  Note that once h5_lock is imported by an application, or once a logging handler<br />\n  is configured, the ProcessTree object created is set as the zprocess default<br />\n  process tree. This is backward compatibility for applications not using the<br />\n  wrapped classes. This does not mean encryption can be turned on and work<br />\n  everywhere, that will still be a backward incompatible jump. But it does mean<br />\n  that the settings are inherited by subprocesses using the now-deprecated<br />\n  Process() classes that do not specify a ProcessTree. So it provides backward<br />\n  compatibility for labscript suite programs whilst they remain unencrypted.</p>\n</li>\n<li>\n<p>Bump version so applications may make use of these classes and we can<br />\n  begin to move them to a state where encryption can be turned on.<br />\n  This should be in place before remote devices are implemented in BLACS.</p>\n</li>\n</ul>\n<p>These changes are intended to be backward compatible so far, but encryption<br />\ncannot be used until applications have their use of zprocess ported to use<br />\nthese wrappers.</p>", "type": "rendered"}}, "hash": "9fdae2110d79b7626a10797492e1cbd63755ee5a", "repository": {"links": {"self": {"href": "data/repositories/dsbarker/labscript_utils.json"}, "html": {"href": "#!/dsbarker/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{56cc001e-4981-42d1-be23-614445b1962d}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "dsbarker/labscript_utils", "uuid": "{56cc001e-4981-42d1-be23-614445b1962d}"}, "links": {"self": {"href": "data/repositories/dsbarker/labscript_utils/commit/9fdae2110d79b7626a10797492e1cbd63755ee5a.json"}, "comments": {"href": "data/repositories/dsbarker/labscript_utils/commit/9fdae2110d79b7626a10797492e1cbd63755ee5a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/labscript_utils/patch/9fdae2110d79b7626a10797492e1cbd63755ee5a"}, "html": {"href": "#!/dsbarker/labscript_utils/commits/9fdae2110d79b7626a10797492e1cbd63755ee5a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/labscript_utils/diff/9fdae2110d79b7626a10797492e1cbd63755ee5a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/labscript_utils/commit/9fdae2110d79b7626a10797492e1cbd63755ee5a/approve"}, "statuses": {"href": "data/repositories/dsbarker/labscript_utils/commit/9fdae2110d79b7626a10797492e1cbd63755ee5a/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Add wrappers around zprocess functionality configuring it according to labconfig\n\n* Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.\n\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.\n\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using the now-deprecated\n  Process() classes that do not specify a ProcessTree. So it provides backward\n  compatibility for labscript suite programs whilst they remain unencrypted.\n\n* Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.\n\nThese changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.", "markup": "markdown", "html": "<p>Add wrappers around zprocess functionality configuring it according to labconfig</p>\n<ul>\n<li>\n<p>Added ls_zprocess, which wraps zprocess classes with singletons and<br />\n  subclasses configured to use labconfig encryption settings, as well<br />\n  as zlock host and port settings, and zprocess.remote  port setting.</p>\n</li>\n<li>\n<p>Added zlock.py, zlog.py and remote.py, which can be used to start zlock,<br />\n  zlog and zprocess.remote servers according to labconfig settings. zlog should<br />\n  not normally be run manually.</p>\n</li>\n<li>\n<p>Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.<br />\n  Note that once h5_lock is imported by an application, or once a logging handler<br />\n  is configured, the ProcessTree object created is set as the zprocess default<br />\n  process tree. This is backward compatibility for applications not using the<br />\n  wrapped classes. This does not mean encryption can be turned on and work<br />\n  everywhere, that will still be a backward incompatible jump. But it does mean<br />\n  that the settings are inherited by subprocesses using the now-deprecated<br />\n  Process() classes that do not specify a ProcessTree. So it provides backward<br />\n  compatibility for labscript suite programs whilst they remain unencrypted.</p>\n</li>\n<li>\n<p>Bump version so applications may make use of these classes and we can<br />\n  begin to move them to a state where encryption can be turned on.<br />\n  This should be in place before remote devices are implemented in BLACS.</p>\n</li>\n</ul>\n<p>These changes are intended to be backward compatible so far, but encryption<br />\ncannot be used until applications have their use of zprocess ported to use<br />\nthese wrappers.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "6b2f9766b657cc13e0a1866e1a46718c982095c4", "type": "commit", "links": {"self": {"href": "data/repositories/dsbarker/labscript_utils/commit/6b2f9766b657cc13e0a1866e1a46718c982095c4.json"}, "html": {"href": "#!/dsbarker/labscript_utils/commits/6b2f9766b657cc13e0a1866e1a46718c982095c4"}}}], "date": "2019-02-06T19:06:49+00:00", "message": "Add wrappers around zprocess functionality configuring it according to labconfig\n\n* Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.\n\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.\n\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using the now-deprecated\n  Process() classes that do not specify a ProcessTree. So it provides backward\n  compatibility for labscript suite programs whilst they remain unencrypted.\n\n* Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.\n\nThese changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.", "type": "commit", "git_hash": "9db03e29f8304c9ee669eb4ec7f3ddf22952d655", "tags": null, "branches": "zprocess_changes"}