{"rendered": {"message": {"raw": "Added the ability for analysis scripts to register a custom Plot class\n\nThis allows you to provide custom behaviour in plot windows (such as additional actions)\n\nUse `lyse.register_plot_class(identifier, cls)` to register a class for lyse to use when creating window for `figure(identifier)`, where cls must be a subclass of `lyse.Plot` (which is monkey patched in to the lyse module to avoid the double import denier script triggering if you try to import it directly from lyse.analysis_subprocess)\n\nCurrently we do not support changing the class from one run of the script to the next, without restarting the worker process (as that would require re-instantiating the plot which has a large number of problems). Also, in order to avoid the custom subclass being detected as changing from shot to shot, it needs to be imported from a separate module to the analysis script. If an invalid class is specified, then the default `Plot` class is used and message is printed in the lyse terminal.\n\nI also changed the indexing of the internal storage of plots to use the identifier rather than the fig object. This seems to make much more sense to me, and since we also now expose that dictionary to the analysis script via `lyse.plots`, I figured now would be a good time to change it! I can't see any downside to doing this but please correct me if I'm wrong.\n\nFinally, this obviously has no effect on lyse scripts run from the terminal, since we don't use our figure manager in such cases. A warning is printed informing the user in such instances (if they use `lyse.register_plot_class()`)", "markup": "markdown", "html": "<p>Added the ability for analysis scripts to register a custom Plot class</p>\n<p>This allows you to provide custom behaviour in plot windows (such as additional actions)</p>\n<p>Use <code>lyse.register_plot_class(identifier, cls)</code> to register a class for lyse to use when creating window for <code>figure(identifier)</code>, where cls must be a subclass of <code>lyse.Plot</code> (which is monkey patched in to the lyse module to avoid the double import denier script triggering if you try to import it directly from lyse.analysis_subprocess)</p>\n<p>Currently we do not support changing the class from one run of the script to the next, without restarting the worker process (as that would require re-instantiating the plot which has a large number of problems). Also, in order to avoid the custom subclass being detected as changing from shot to shot, it needs to be imported from a separate module to the analysis script. If an invalid class is specified, then the default <code>Plot</code> class is used and message is printed in the lyse terminal.</p>\n<p>I also changed the indexing of the internal storage of plots to use the identifier rather than the fig object. This seems to make much more sense to me, and since we also now expose that dictionary to the analysis script via <code>lyse.plots</code>, I figured now would be a good time to change it! I can't see any downside to doing this but please correct me if I'm wrong.</p>\n<p>Finally, this obviously has no effect on lyse scripts run from the terminal, since we don't use our figure manager in such cases. A warning is printed informing the user in such instances (if they use <code>lyse.register_plot_class()</code>)</p>", "type": "rendered"}}, "hash": "0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855", "repository": {"links": {"self": {"href": "data/repositories/dsbarker/lyse.json"}, "html": {"href": "#!/dsbarker/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f8a88aa5-81cb-44c0-a205-520f06b51f5c}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "dsbarker/lyse", "uuid": "{f8a88aa5-81cb-44c0-a205-520f06b51f5c}"}, "links": {"self": {"href": "data/repositories/dsbarker/lyse/commit/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855.json"}, "comments": {"href": "data/repositories/dsbarker/lyse/commit/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/lyse/patch/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855"}, "html": {"href": "#!/dsbarker/lyse/commits/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/lyse/diff/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/dsbarker/lyse/commit/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855/approve"}, "statuses": {"href": "data/repositories/dsbarker/lyse/commit/0b3fc87484c0212bfbfb4401d04aa0cf3b0eb855/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added the ability for analysis scripts to register a custom Plot class\n\nThis allows you to provide custom behaviour in plot windows (such as additional actions)\n\nUse `lyse.register_plot_class(identifier, cls)` to register a class for lyse to use when creating window for `figure(identifier)`, where cls must be a subclass of `lyse.Plot` (which is monkey patched in to the lyse module to avoid the double import denier script triggering if you try to import it directly from lyse.analysis_subprocess)\n\nCurrently we do not support changing the class from one run of the script to the next, without restarting the worker process (as that would require re-instantiating the plot which has a large number of problems). Also, in order to avoid the custom subclass being detected as changing from shot to shot, it needs to be imported from a separate module to the analysis script. If an invalid class is specified, then the default `Plot` class is used and message is printed in the lyse terminal.\n\nI also changed the indexing of the internal storage of plots to use the identifier rather than the fig object. This seems to make much more sense to me, and since we also now expose that dictionary to the analysis script via `lyse.plots`, I figured now would be a good time to change it! I can't see any downside to doing this but please correct me if I'm wrong.\n\nFinally, this obviously has no effect on lyse scripts run from the terminal, since we don't use our figure manager in such cases. A warning is printed informing the user in such instances (if they use `lyse.register_plot_class()`)", "markup": "markdown", "html": "<p>Added the ability for analysis scripts to register a custom Plot class</p>\n<p>This allows you to provide custom behaviour in plot windows (such as additional actions)</p>\n<p>Use <code>lyse.register_plot_class(identifier, cls)</code> to register a class for lyse to use when creating window for <code>figure(identifier)</code>, where cls must be a subclass of <code>lyse.Plot</code> (which is monkey patched in to the lyse module to avoid the double import denier script triggering if you try to import it directly from lyse.analysis_subprocess)</p>\n<p>Currently we do not support changing the class from one run of the script to the next, without restarting the worker process (as that would require re-instantiating the plot which has a large number of problems). Also, in order to avoid the custom subclass being detected as changing from shot to shot, it needs to be imported from a separate module to the analysis script. If an invalid class is specified, then the default <code>Plot</code> class is used and message is printed in the lyse terminal.</p>\n<p>I also changed the indexing of the internal storage of plots to use the identifier rather than the fig object. This seems to make much more sense to me, and since we also now expose that dictionary to the analysis script via <code>lyse.plots</code>, I figured now would be a good time to change it! I can't see any downside to doing this but please correct me if I'm wrong.</p>\n<p>Finally, this obviously has no effect on lyse scripts run from the terminal, since we don't use our figure manager in such cases. A warning is printed informing the user in such instances (if they use <code>lyse.register_plot_class()</code>)</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "e652c2de1a31a17fac453ba4e549b88b56419e5e", "type": "commit", "links": {"self": {"href": "data/repositories/dsbarker/lyse/commit/e652c2de1a31a17fac453ba4e549b88b56419e5e.json"}, "html": {"href": "#!/dsbarker/lyse/commits/e652c2de1a31a17fac453ba4e549b88b56419e5e"}}}], "date": "2018-10-19T06:06:16+00:00", "message": "Added the ability for analysis scripts to register a custom Plot class\n\nThis allows you to provide custom behaviour in plot windows (such as additional actions)\n\nUse `lyse.register_plot_class(identifier, cls)` to register a class for lyse to use when creating window for `figure(identifier)`, where cls must be a subclass of `lyse.Plot` (which is monkey patched in to the lyse module to avoid the double import denier script triggering if you try to import it directly from lyse.analysis_subprocess)\n\nCurrently we do not support changing the class from one run of the script to the next, without restarting the worker process (as that would require re-instantiating the plot which has a large number of problems). Also, in order to avoid the custom subclass being detected as changing from shot to shot, it needs to be imported from a separate module to the analysis script. If an invalid class is specified, then the default `Plot` class is used and message is printed in the lyse terminal.\n\nI also changed the indexing of the internal storage of plots to use the identifier rather than the fig object. This seems to make much more sense to me, and since we also now expose that dictionary to the analysis script via `lyse.plots`, I figured now would be a good time to change it! I can't see any downside to doing this but please correct me if I'm wrong.\n\nFinally, this obviously has no effect on lyse scripts run from the terminal, since we don't use our figure manager in such cases. A warning is printed informing the user in such instances (if they use `lyse.register_plot_class()`)", "type": "commit", "git_hash": "c05548b8b4991da17905b2238d77962581c4eb6b", "tags": null, "branches": "custom-Plot-classes"}