{"rendered": {"message": {"raw": "Changes to hashable file watcher.\n\nThe previous logic was a bit off with regard to restarts. Because the current\nmodified info of files was being saved between restarts, this is the info with\nrespect to which modifications were being detected. This means upon every\nrestart, the FileWatcher would not report that there were any differences.\nInstead, the visibility state of the \"connection table needs recompiling\"\nnotification was being saved across restarts, such that it would display if it\nwas being displayed previously, regardless of the file status. This means that\nwith the hashing file watcher, a file being restored to its previous state would\nnot make the notification go away.\n\nThe logic has therefore been changed to store the 'clean' info of the files\nacross restarts, and updating to the current modified info of the files only\nupon recompilation+restart, or when the files are first added to be watched.\n\nHave the callback respond to deleted files as well.", "markup": "markdown", "html": "<p>Changes to hashable file watcher.</p>\n<p>The previous logic was a bit off with regard to restarts. Because the current<br />\nmodified info of files was being saved between restarts, this is the info with<br />\nrespect to which modifications were being detected. This means upon every<br />\nrestart, the FileWatcher would not report that there were any differences.<br />\nInstead, the visibility state of the \"connection table needs recompiling\"<br />\nnotification was being saved across restarts, such that it would display if it<br />\nwas being displayed previously, regardless of the file status. This means that<br />\nwith the hashing file watcher, a file being restored to its previous state would<br />\nnot make the notification go away.</p>\n<p>The logic has therefore been changed to store the 'clean' info of the files<br />\nacross restarts, and updating to the current modified info of the files only<br />\nupon recompilation+restart, or when the files are first added to be watched.</p>\n<p>Have the callback respond to deleted files as well.</p>", "type": "rendered"}}, "hash": "6770661b1a39ccc4999d0a2b7642c07ddc1f0de3", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/commit/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/patch/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3"}, "html": {"href": "#!/labscript_suite/blacs/commits/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/commit/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/commit/6770661b1a39ccc4999d0a2b7642c07ddc1f0de3/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Changes to hashable file watcher.\n\nThe previous logic was a bit off with regard to restarts. Because the current\nmodified info of files was being saved between restarts, this is the info with\nrespect to which modifications were being detected. This means upon every\nrestart, the FileWatcher would not report that there were any differences.\nInstead, the visibility state of the \"connection table needs recompiling\"\nnotification was being saved across restarts, such that it would display if it\nwas being displayed previously, regardless of the file status. This means that\nwith the hashing file watcher, a file being restored to its previous state would\nnot make the notification go away.\n\nThe logic has therefore been changed to store the 'clean' info of the files\nacross restarts, and updating to the current modified info of the files only\nupon recompilation+restart, or when the files are first added to be watched.\n\nHave the callback respond to deleted files as well.", "markup": "markdown", "html": "<p>Changes to hashable file watcher.</p>\n<p>The previous logic was a bit off with regard to restarts. Because the current<br />\nmodified info of files was being saved between restarts, this is the info with<br />\nrespect to which modifications were being detected. This means upon every<br />\nrestart, the FileWatcher would not report that there were any differences.<br />\nInstead, the visibility state of the \"connection table needs recompiling\"<br />\nnotification was being saved across restarts, such that it would display if it<br />\nwas being displayed previously, regardless of the file status. This means that<br />\nwith the hashing file watcher, a file being restored to its previous state would<br />\nnot make the notification go away.</p>\n<p>The logic has therefore been changed to store the 'clean' info of the files<br />\nacross restarts, and updating to the current modified info of the files only<br />\nupon recompilation+restart, or when the files are first added to be watched.</p>\n<p>Have the callback respond to deleted files as well.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "58597f0182076361e83ef90e643db695845ce90a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/58597f0182076361e83ef90e643db695845ce90a.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/58597f0182076361e83ef90e643db695845ce90a"}}}], "date": "2019-12-05T02:31:34+00:00", "message": "Changes to hashable file watcher.\n\nThe previous logic was a bit off with regard to restarts. Because the current\nmodified info of files was being saved between restarts, this is the info with\nrespect to which modifications were being detected. This means upon every\nrestart, the FileWatcher would not report that there were any differences.\nInstead, the visibility state of the \"connection table needs recompiling\"\nnotification was being saved across restarts, such that it would display if it\nwas being displayed previously, regardless of the file status. This means that\nwith the hashing file watcher, a file being restored to its previous state would\nnot make the notification go away.\n\nThe logic has therefore been changed to store the 'clean' info of the files\nacross restarts, and updating to the current modified info of the files only\nupon recompilation+restart, or when the files are first added to be watched.\n\nHave the callback respond to deleted files as well.", "type": "commit", "git_hash": "4331ed630bf068d37a3d52e8dc0c83ab65dc537e", "tags": null, "branches": "hashable_filewatcher"}