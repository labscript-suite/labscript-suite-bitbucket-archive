{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/13/comments/39685362.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/13#comment-39685362"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "Launch BLACS as a secondary control system"}, "content": {"raw": "Suggestion for integrating with remote worker processes. Since the proposed syntax allows the existing `SecondaryControlSystem` calls to be chained, we can just create another class\n\n\n```\n#!python\n\n@labscript_device\nclass SecondaryControlSystem(Device):\n    delimeter = '|'\n\n    @set_passed_properties(\n        property_names = {\"connection_table_properties\": [\"internal_hostname\"]}\n    )\n    def __init__(self, name, internal_hostname, external_address):\n        Device.__init__(self, name, None, None)\n        self.BLACS_connection = str(external_address)\n\n    def __call__(self, port):\n        return '%s%s%s'%(self.name, self.delimeter, port)\n\n@labscript_device\nclass RemoteWorkerBroker(Device):\n    delimeter = '|'\n\n    @set_passed_properties(\n        property_names = {\"connection_table_properties\": [\"internal_hostname\"]}\n    )\n    def __init__(self, name, internal_hostname, external_address):\n        Device.__init__(self, name, None, None)\n        self.BLACS_connection = str(external_address)\n\n    def __call__(self, port):\n        return '%s%s%s'%(self.name, self.delimeter, port)\n```\n\nNote: It should be pointed out (because I had to go back over my previous work on this to figure it out) that `local_hostname` (in the original post) should match what is returned by `socket.gethostname()` on the remote PC (whether that PC be running the secondary control system or the remote worker broker). I've renamed it `internal_hostname` for clarity. `external_address` is how the controlling device (whether that be a primary or secondary BLACS instance) communicates with the remote system (and should probably specify both a hostname and port). The port the secondary BLACS and remote workers launch on should probably be defined in the labconfig file, and don't have to match the port specified in `internal_hostname` in order to support communication through a NAT. I've also changed where this is stored (into the connection table properties) to avoid creating unnecessary device groups.\n\n`internal_hostname` is used solely for the secondary BLACS or remote worker to determine the labscript device name that corresponds to it, so that it can identify which devices it is controlling via `BLACS_connection` column in the connection table.\n\nFinally, I advocate for this syntax primarily because it means the `BLACS_connection` string contains everything you need to know about the chain of communication (and does not rely on looking at various arguments in the connection table properties). It also allows you to (theoretically) create chains longer than primary and secondary or primary and worker (you could have primary -> secondary -> secondary -> secondary -> worker) and provides a unified syntax for the features in this issue and [labscript issue #28](#!/labscript_suite/labscript/issues/28/remote-launching-of-all-blacs-devices)", "markup": "markdown", "html": "<p>Suggestion for integrating with remote worker processes. Since the proposed syntax allows the existing <code>SecondaryControlSystem</code> calls to be chained, we can just create another class</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"nd\">@labscript_device</span>\n<span class=\"k\">class</span> <span class=\"nc\">SecondaryControlSystem</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"n\">delimeter</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|&#39;</span>\n\n    <span class=\"nd\">@set_passed_properties</span><span class=\"p\">(</span>\n        <span class=\"n\">property_names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;connection_table_properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;internal_hostname&quot;</span><span class=\"p\">]}</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">internal_hostname</span><span class=\"p\">,</span> <span class=\"n\">external_address</span><span class=\"p\">):</span>\n        <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS_connection</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">external_address</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s%s%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delimeter</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@labscript_device</span>\n<span class=\"k\">class</span> <span class=\"nc\">RemoteWorkerBroker</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"n\">delimeter</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;|&#39;</span>\n\n    <span class=\"nd\">@set_passed_properties</span><span class=\"p\">(</span>\n        <span class=\"n\">property_names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;connection_table_properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;internal_hostname&quot;</span><span class=\"p\">]}</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">internal_hostname</span><span class=\"p\">,</span> <span class=\"n\">external_address</span><span class=\"p\">):</span>\n        <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS_connection</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">external_address</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;</span><span class=\"si\">%s%s%s</span><span class=\"s1\">&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delimeter</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Note: It should be pointed out (because I had to go back over my previous work on this to figure it out) that <code>local_hostname</code> (in the original post) should match what is returned by <code>socket.gethostname()</code> on the remote PC (whether that PC be running the secondary control system or the remote worker broker). I've renamed it <code>internal_hostname</code> for clarity. <code>external_address</code> is how the controlling device (whether that be a primary or secondary BLACS instance) communicates with the remote system (and should probably specify both a hostname and port). The port the secondary BLACS and remote workers launch on should probably be defined in the labconfig file, and don't have to match the port specified in <code>internal_hostname</code> in order to support communication through a NAT. I've also changed where this is stored (into the connection table properties) to avoid creating unnecessary device groups.</p>\n<p><code>internal_hostname</code> is used solely for the secondary BLACS or remote worker to determine the labscript device name that corresponds to it, so that it can identify which devices it is controlling via <code>BLACS_connection</code> column in the connection table.</p>\n<p>Finally, I advocate for this syntax primarily because it means the <code>BLACS_connection</code> string contains everything you need to know about the chain of communication (and does not rely on looking at various arguments in the connection table properties). It also allows you to (theoretically) create chains longer than primary and secondary or primary and worker (you could have primary -&gt; secondary -&gt; secondary -&gt; secondary -&gt; worker) and provides a unified syntax for the features in this issue and <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/issues/28/remote-launching-of-all-blacs-devices\" rel=\"nofollow\">labscript issue #28</a></p>", "type": "rendered"}, "created_on": "2017-09-07T00:49:00.377161+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 39685362}