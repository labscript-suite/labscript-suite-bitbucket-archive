{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/13/comments/40251810.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/13#comment-40251810"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "Launch BLACS as a secondary control system"}, "content": {"raw": "TODO list for launching BLACS as a secondary control system\n\n1. Add an additional property to labconfig allowing the secondary BLACS control system name to be specified (to match the device name for the `SecondaryControlSystem` as defined in the labscript connection table)\n1. Modify `connections.py` to only return attached devices (via `ConnectionTable.get_attached_devices()`) based on the `BLACS_connection` property of the connection table matching the current instance of BLACS (aka primary or the name specified in the labconfig file). Ensure that entries with class `SecondaryControlSystem` are also returned (for primary BLACS, this is all secondary control system entries where there is no delimeter in the BLACS connection (which corresponds to external address of the secondary control system), and for secondary BLACS, this is any secondary control system entries where the -2 element (when splitting by delimeter) of the BLACS_connection is equal to the secondary control system name).\n1. Create a tab and worker process for secondary control systems (should live in BLACS repository) and ensure that this class is used when instantiating tabs (it's a special case because it is not in labcript_devices). This worker also needs to help synchronise ZMQ events (e.g. those related to waits)\n1. Wait for plugin enable/disable manager to be created/tested/merged\n1. Expand plugin system so that plugins can report they are managing a particular aspect of BLACS (for example, the queue). Have BLACS specify a limit to the number of plugins that can handle that aspect of BLACS (for queue, this would be 1) and raise an error if more than this number of plugins are active\n1. Move ZMQ server from `__main__.py` to `queue.py`\n1. Merge `queue.py` and `analysis_submission.py` into a plugin\n1. Make a new plugin for handling communication from primary BLACS, that can be enabled in secondary BLACS, and manages the programming of devices (as well as forwarding of ZMQ events...e.g. when waits are done).", "markup": "markdown", "html": "<p>TODO list for launching BLACS as a secondary control system</p>\n<ol>\n<li>Add an additional property to labconfig allowing the secondary BLACS control system name to be specified (to match the device name for the <code>SecondaryControlSystem</code> as defined in the labscript connection table)</li>\n<li>Modify <code>connections.py</code> to only return attached devices (via <code>ConnectionTable.get_attached_devices()</code>) based on the <code>BLACS_connection</code> property of the connection table matching the current instance of BLACS (aka primary or the name specified in the labconfig file). Ensure that entries with class <code>SecondaryControlSystem</code> are also returned (for primary BLACS, this is all secondary control system entries where there is no delimeter in the BLACS connection (which corresponds to external address of the secondary control system), and for secondary BLACS, this is any secondary control system entries where the -2 element (when splitting by delimeter) of the BLACS_connection is equal to the secondary control system name).</li>\n<li>Create a tab and worker process for secondary control systems (should live in BLACS repository) and ensure that this class is used when instantiating tabs (it's a special case because it is not in labcript_devices). This worker also needs to help synchronise ZMQ events (e.g. those related to waits)</li>\n<li>Wait for plugin enable/disable manager to be created/tested/merged</li>\n<li>Expand plugin system so that plugins can report they are managing a particular aspect of BLACS (for example, the queue). Have BLACS specify a limit to the number of plugins that can handle that aspect of BLACS (for queue, this would be 1) and raise an error if more than this number of plugins are active</li>\n<li>Move ZMQ server from <code>__main__.py</code> to <code>queue.py</code></li>\n<li>Merge <code>queue.py</code> and <code>analysis_submission.py</code> into a plugin</li>\n<li>Make a new plugin for handling communication from primary BLACS, that can be enabled in secondary BLACS, and manages the programming of devices (as well as forwarding of ZMQ events...e.g. when waits are done).</li>\n</ol>", "type": "rendered"}, "created_on": "2017-10-03T01:06:42.166127+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 40251810}