{"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/blacs/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/issues/15/watch"}, "comments": {"href": "data/repositories/labscript_suite/blacs/issues/15/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/15/improve-shot-cycle-time-in-blacs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/issues/15/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Improve shot cycle time in BLACS", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There are probably many places we can improve the cycle time of a shot in BLACS.\r\n\r\nOne that I have found is the error state checking that occurs during the loop which monitors for the end of the experiment shot. Each iteration of the loop, it checks to see if any devices have restarted mid shot, and aborts appropriately. This check still occurs after the end of the shot has been detected (to ensure that a device restart was not missed between the last check and the end of the experiment). \r\n\r\nHowever, the check for device restart currently scales poorly with the number of devices in use in the experiment. It currently iterates (see [code](#!/labscript_suite/blacs/src/d075c69632b20d376d05915020d26ae4b5b1572b/queue.py?at=default&fileviewer=file-view-default#queue.py-612)) over each device tab and checks the state. However the state checking must be done in the main thread, which thus introduces the overhead associated with posting and event back to the main thread and waiting for the Qt event loop to process the event. And this happens once for **each** device in use.\r\n\r\nWe could instead request the state for all device tabs in one go, thus only posting a single event back to the main thread.\r\n\r\nI would suggest introducing a new method to the queue manager which is\r\n\r\n```\r\n#!python\r\n    @inmain_decorator(wait_for_return=True)\r\n    def get_many_device_error_states(self,devices):\r\n        return [device.error_message for name, device in devices.items()]\r\n\r\n```\r\n\r\nThen the check in the loop (see code link above) can become:\r\n\r\n```\r\n#!python\r\n                        for error_state_message in self.get_many_device_error_states(devices_in_use):\r\n                            if error_state_message:\r\n                                restarted = True\r\n                                break\r\n\r\n```", "markup": "markdown", "html": "<p>There are probably many places we can improve the cycle time of a shot in BLACS.</p>\n<p>One that I have found is the error state checking that occurs during the loop which monitors for the end of the experiment shot. Each iteration of the loop, it checks to see if any devices have restarted mid shot, and aborts appropriately. This check still occurs after the end of the shot has been detected (to ensure that a device restart was not missed between the last check and the end of the experiment). </p>\n<p>However, the check for device restart currently scales poorly with the number of devices in use in the experiment. It currently iterates (see <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/src/d075c69632b20d376d05915020d26ae4b5b1572b/queue.py?at=default&amp;fileviewer=file-view-default#queue.py-612\" rel=\"nofollow\">code</a>) over each device tab and checks the state. However the state checking must be done in the main thread, which thus introduces the overhead associated with posting and event back to the main thread and waiting for the Qt event loop to process the event. And this happens once for <strong>each</strong> device in use.</p>\n<p>We could instead request the state for all device tabs in one go, thus only posting a single event back to the main thread.</p>\n<p>I would suggest introducing a new method to the queue manager which is</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"nd\">@inmain_decorator</span><span class=\"p\">(</span><span class=\"n\">wait_for_return</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_many_device_error_states</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">devices</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">error_message</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">device</span> <span class=\"ow\">in</span> <span class=\"n\">devices</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()]</span>\n</pre></div>\n\n\n<p>Then the check in the loop (see code link above) can become:</p>\n<div class=\"codehilite language-python\"><pre><span></span>                        <span class=\"k\">for</span> <span class=\"n\">error_state_message</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_many_device_error_states</span><span class=\"p\">(</span><span class=\"n\">devices_in_use</span><span class=\"p\">):</span>\n                            <span class=\"k\">if</span> <span class=\"n\">error_state_message</span><span class=\"p\">:</span>\n                                <span class=\"n\">restarted</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                                <span class=\"k\">break</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-07T23:17:47.182789+00:00", "milestone": null, "updated_on": "2017-06-08T15:26:54.305411+00:00", "type": "issue", "id": 15}