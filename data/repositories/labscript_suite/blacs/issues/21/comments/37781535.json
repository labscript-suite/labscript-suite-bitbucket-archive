{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/21/comments/37781535.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/21#comment-37781535"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "inverted Digital outputs"}, "content": {"raw": "My suggestion was that digital outs set to use \"units\" other than \"hardware units\" would be a different colour. This would mean that a non-inverted shutter would still have a different colour, if it was set to use \"shutter state\" units rather than \"hardware state\" units - even though it was non inverted and and the same as the hardware state.\n\nI'm also in favour of keeping lots of syntactic sugar around, but making the underlying implementation as clean as possible. Not just for backward compatibility - I think it provides good hints for quickly understanding what oft-read code is doing, and is good for top-level, not-very-nested code that the user is currently writing. Code that is read less often though, and that other code is relying on to behave well, should try to be more \"kosher\".", "markup": "markdown", "html": "<p>My suggestion was that digital outs set to use \"units\" other than \"hardware units\" would be a different colour. This would mean that a non-inverted shutter would still have a different colour, if it was set to use \"shutter state\" units rather than \"hardware state\" units - even though it was non inverted and and the same as the hardware state.</p>\n<p>I'm also in favour of keeping lots of syntactic sugar around, but making the underlying implementation as clean as possible. Not just for backward compatibility - I think it provides good hints for quickly understanding what oft-read code is doing, and is good for top-level, not-very-nested code that the user is currently writing. Code that is read less often though, and that other code is relying on to behave well, should try to be more \"kosher\".</p>", "type": "rendered"}, "created_on": "2017-06-22T19:24:49.042452+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37781535}