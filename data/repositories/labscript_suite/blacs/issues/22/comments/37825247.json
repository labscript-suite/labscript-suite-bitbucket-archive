{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/22/comments/37825247.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/22#comment-37825247"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "BLACS log file rollover not working"}, "content": {"raw": "Unfortunately I think whatever we do here it always has a small chance of breaking due to the fact that we use the same log file from multiple processes, which is [not supported by the logging module](https://docs.python.org/2/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes) and obviously leaves us open to race conditions. What I'm guessing has happened is that one process is trying to do a rollover whilst another still has the file open. It may have worked in the past if you were merely fortunate enough for both processes to attempt rollover at almost the same time and hence close the file before either of them tried to delete it (though I'm not sure the child processes inherit the configuration - they might not be trying to roll over at all).\n\nUltimately we have to move to having some kind of logging server process that logging clients send their messages to, and which has sole dominion over the log files. The Python logging module documentation has some advice for how to do this, but in the interests of speed I wanted to use zmq for it so that any potentially blocking system calls (whether that's for writing to file or sending on a socket) occur in a different (non-GIL-requiring) thread. This was originally motivated by the fact that the zlock server sometimes hangs for a few seconds when writing to disk (which it only does for logging), just because the operating system is in the middle of a disk sync or something, or is otherwise preoccupied and blocks the file writing call. This makes zlock sometimes slow to respond to clients, causing the very occasional (every few months) takedown of the entirety of BLACS, which is pretty unacceptable. It also causes the much more frequent introduction of smaller delays on the order of milliseconds, which nonetheless add up since we make a lot of calls to zlock.\n\nI have a half-finished implementation of a zmq logging server and client living in [`zprocess.logging`](https://bitbucket.org/cbillington/zprocess/src/72cb79765e03b1ab1bfa114070db187925955ea6/zprocess/logging/?at=default), but it doesn't support rollover yet - I should probably change the server to leverage the standard library's logging module rather than writing to files manually, then I wouldn't have to reinvent the wheel there.\n\nSo that's the plan, and in the meantime I recommend you apply whichever workaround you prefer: disable logging, disable rollover and delete files manually, whatever is most convenient.", "markup": "markdown", "html": "<p>Unfortunately I think whatever we do here it always has a small chance of breaking due to the fact that we use the same log file from multiple processes, which is <a data-is-external-link=\"true\" href=\"https://docs.python.org/2/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes\" rel=\"nofollow\">not supported by the logging module</a> and obviously leaves us open to race conditions. What I'm guessing has happened is that one process is trying to do a rollover whilst another still has the file open. It may have worked in the past if you were merely fortunate enough for both processes to attempt rollover at almost the same time and hence close the file before either of them tried to delete it (though I'm not sure the child processes inherit the configuration - they might not be trying to roll over at all).</p>\n<p>Ultimately we have to move to having some kind of logging server process that logging clients send their messages to, and which has sole dominion over the log files. The Python logging module documentation has some advice for how to do this, but in the interests of speed I wanted to use zmq for it so that any potentially blocking system calls (whether that's for writing to file or sending on a socket) occur in a different (non-GIL-requiring) thread. This was originally motivated by the fact that the zlock server sometimes hangs for a few seconds when writing to disk (which it only does for logging), just because the operating system is in the middle of a disk sync or something, or is otherwise preoccupied and blocks the file writing call. This makes zlock sometimes slow to respond to clients, causing the very occasional (every few months) takedown of the entirety of BLACS, which is pretty unacceptable. It also causes the much more frequent introduction of smaller delays on the order of milliseconds, which nonetheless add up since we make a lot of calls to zlock.</p>\n<p>I have a half-finished implementation of a zmq logging server and client living in <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/72cb79765e03b1ab1bfa114070db187925955ea6/zprocess/logging/?at=default\" rel=\"nofollow\"><code>zprocess.logging</code></a>, but it doesn't support rollover yet - I should probably change the server to leverage the standard library's logging module rather than writing to files manually, then I wouldn't have to reinvent the wheel there.</p>\n<p>So that's the plan, and in the meantime I recommend you apply whichever workaround you prefer: disable logging, disable rollover and delete files manually, whatever is most convenient.</p>", "type": "rendered"}, "created_on": "2017-06-25T19:39:32.926214+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-25T19:43:22.566824+00:00", "type": "issue_comment", "id": 37825247}