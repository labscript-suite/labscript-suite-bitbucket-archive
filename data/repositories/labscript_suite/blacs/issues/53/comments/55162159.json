{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/53/comments/55162159.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/53#comment-55162159"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/53.json"}}, "type": "issue", "id": 53, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "Ways of speeding up cycle time. Pipelining, readahead, removing redundant steps."}, "content": {"raw": "I suspect another slow point is the NI cards with multiple worker processes \\(which is most of them I think\\).\n\nThere is no particular reason why communication with each worker process needs to be serialised, other than the fact that it\u2019s a bit more complicated to implement.\n\nTo change this we would need to rewrite the mainloop in the tab base class \\(maybe taking advantage of some Python3 coroutine features?\\). The `yield` calls in GUI methods would need to \\(optionally, for backwards compatibility\\) return \u201cpromises\u201d \\(a concept from JavaScript I think\u2026effectively an object you query later for the work and equivalent to what we do with `inmain_later`\\). That way, all worker processes can do work simultaneously, speeding up the transitions.\n\nThis will be particularly effective if we cache the HDF5 file.", "markup": "markdown", "html": "<p>I suspect another slow point is the NI cards with multiple worker processes (which is most of them I think).</p>\n<p>There is no particular reason why communication with each worker process needs to be serialised, other than the fact that it\u2019s a bit more complicated to implement.</p>\n<p>To change this we would need to rewrite the mainloop in the tab base class (maybe taking advantage of some Python3 coroutine features?). The <code>yield</code> calls in GUI methods would need to (optionally, for backwards compatibility) return \u201cpromises\u201d (a concept from JavaScript I think\u2026effectively an object you query later for the work and equivalent to what we do with <code>inmain_later</code>). That way, all worker processes can do work simultaneously, speeding up the transitions.</p>\n<p>This will be particularly effective if we cache the HDF5 file.</p>", "type": "rendered"}, "created_on": "2019-12-09T01:40:42.098964+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": null, "type": "issue_comment", "id": 55162159}