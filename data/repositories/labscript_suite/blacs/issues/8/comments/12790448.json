{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/8/comments/12790448.json"}, "html": {"href": "#!/labscript_suite/blacs/issues/8#comment-12790448"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/issues/8.json"}}, "type": "issue", "id": 8, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "title": "'Compile and restart' improvements - making sure it can happen when other things are borked"}, "content": {"raw": "So, question about desired behaviour.\n\nIf a Tab fails to load, do we wipe the saved front panel (and other) settings for that instance of the device or keep it around in the labconfig/<pcname>_BLACS.h5 file indefinitely until the device loads correctly.\n\nI'm in two minds about this. Sometimes front panel state is important to keep (eg flags need to stay high) and if a device tab fails to be created, you don't really want to throw out the front panel state and other settings just because you made a small typo in the DeviceTab class. Alternatively, if it is the saved settings preventing the tab from being created, you do want them forgetten!\n\nJust thought of a potential solution as I was typing this:\n\n* BLACS starts, presents the user with an OutputBox which shows the log file as the rest of BLACS loads.\n* We load the FrontPanelSettings and instantiate the plugins. As long as it has got this far, the user can recompile the connection table\n* we then create the device tabs, and if any of these fail, None of the tabs are shown. The users is prompted to fix the problem with the code, or remove the offending device from their connection table. FrontPanelSettings are not saved on exit in this case (so no settings will be lost for devices that failed to instantiate), but the user is also presented with a button that will wipe FrontPanelSettings (for the failed devices) if they suspect that is the problem.\n\nI probably need to make the QueueManager and AnalysisSubmission classes plugins to make this robust (as I need to be sure the current order I'm instantiating those objects with respect to the Plugins doesn't matter). This would move the ExperimentServer class to the QueueManager plugin, which is probably a wise separation of code anyway! It also will result in BLACS being far more modular (in that it will be easy for someone to replace the queuemanager/analysis submission) with a better/different version.\n\nThis will probably require a major version number bump as the interface for plugins may need to change in a backwards incompatible way.", "markup": "markdown", "html": "<p>So, question about desired behaviour.</p>\n<p>If a Tab fails to load, do we wipe the saved front panel (and other) settings for that instance of the device or keep it around in the labconfig/&lt;pcname&gt;_BLACS.h5 file indefinitely until the device loads correctly.</p>\n<p>I'm in two minds about this. Sometimes front panel state is important to keep (eg flags need to stay high) and if a device tab fails to be created, you don't really want to throw out the front panel state and other settings just because you made a small typo in the DeviceTab class. Alternatively, if it is the saved settings preventing the tab from being created, you do want them forgetten!</p>\n<p>Just thought of a potential solution as I was typing this:</p>\n<ul>\n<li>BLACS starts, presents the user with an OutputBox which shows the log file as the rest of BLACS loads.</li>\n<li>We load the FrontPanelSettings and instantiate the plugins. As long as it has got this far, the user can recompile the connection table</li>\n<li>we then create the device tabs, and if any of these fail, None of the tabs are shown. The users is prompted to fix the problem with the code, or remove the offending device from their connection table. FrontPanelSettings are not saved on exit in this case (so no settings will be lost for devices that failed to instantiate), but the user is also presented with a button that will wipe FrontPanelSettings (for the failed devices) if they suspect that is the problem.</li>\n</ul>\n<p>I probably need to make the QueueManager and AnalysisSubmission classes plugins to make this robust (as I need to be sure the current order I'm instantiating those objects with respect to the Plugins doesn't matter). This would move the ExperimentServer class to the QueueManager plugin, which is probably a wise separation of code anyway! It also will result in BLACS being far more modular (in that it will be easy for someone to replace the queuemanager/analysis submission) with a better/different version.</p>\n<p>This will probably require a major version number bump as the interface for plugins may need to change in a backwards incompatible way.</p>", "type": "rendered"}, "created_on": "2014-10-06T07:19:27.862451+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 12790448}