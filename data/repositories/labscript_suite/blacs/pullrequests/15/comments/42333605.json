{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/15/comments/42333605.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/15/_/diff#comment-42333605"}}, "parent": {"id": 42333279, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/15/comments/42333279.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/15/_/diff#comment-42333279"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/15.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/15"}}, "title": "added recompile success to outputbox"}, "content": {"raw": "Maybe. It's supposed to be a stand-in for stdout and stderr, which do not add newlines - and it gets output directly from the child processes with newlines already appended (because it actually hooks into their stdout and stderr streams).\n\nIf I were to change it to support both ways of interacting with it - I would introduce a \"write\" method that accepted a single string and did not append newlines (it would be a renaming of the current method, which I would keep and deprecate), and a \"print\" method which obeyed the semantics of the Python \"print()\" function, including its default newline and options for disabling it. This would be consistent with write methods of file-like objects in Python never appending  newlines, but the print function doing so (or optionally not). One could probably do this using the actual Python print function in some way so that it would obey its behaviour exactly.\n\nA keyword argument to the existing method call  doesn't make much sense to me - you would have to remember it for every call, which is not much of an improvement over having to remember `+ '\\n'`.", "markup": "markdown", "html": "<p>Maybe. It's supposed to be a stand-in for stdout and stderr, which do not add newlines - and it gets output directly from the child processes with newlines already appended (because it actually hooks into their stdout and stderr streams).</p>\n<p>If I were to change it to support both ways of interacting with it - I would introduce a \"write\" method that accepted a single string and did not append newlines (it would be a renaming of the current method, which I would keep and deprecate), and a \"print\" method which obeyed the semantics of the Python \"print()\" function, including its default newline and options for disabling it. This would be consistent with write methods of file-like objects in Python never appending  newlines, but the print function doing so (or optionally not). One could probably do this using the actual Python print function in some way so that it would obey its behaviour exactly.</p>\n<p>A keyword argument to the existing method call  doesn't make much sense to me - you would have to remember it for every call, which is not much of an improvement over having to remember <code>+ '\\n'</code>.</p>", "type": "rendered"}, "created_on": "2017-08-07T22:53:15.956341+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-07T22:57:57.795112+00:00", "type": "pullrequest_comment", "id": 42333605}