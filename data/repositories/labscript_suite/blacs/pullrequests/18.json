{"rendered": {"description": {"raw": "This adds the ability for plugins to spawn Tabs.\r\n\r\nA plugin can spawn a tab by having a ```get_tab_classes(self)``` function. This function should return a dict of Tab classes, where the key should be the name of the Tab.\r\n\r\nPlugin tabs should inherit from the ```PluginTab``` class in ```blacs.tab_base_classes```. This class provides some basic functionality a tab in BLACS currently needs. Also this allows for the Plugin tabs to use ```get_save_data``` to store and ``` restore_save_data``` to restore data that they might want to save. The initialization of the GUI should be implemented in a function called ```initialise_GUI```, that automatically gets called in the constructor.\r\n\r\nTo visually distinguish plugin tabs from devices their text is blue and they have a different icon.\r\n\r\n![plugin.png](data/bitbucket.org/repo/LoryaEL/images/2179717442-plugin.png)\r\n\r\nHere is example code for a basic tab with a button that raises a exception on click:\r\n\r\n```\r\n#!python\r\n\r\nfrom blacs.tab_base_classes import PluginTab\r\nfrom qtutils.qt.QtWidgets import *\r\n\r\nclass Plugin(object):\r\n    def __init__(self, initial_settings):\r\n        self.menu = None\r\n        self.notifications = {}\r\n        self.BLACS = None\r\n        self.tabs = {}\r\n\r\n    def get_menu_class(self):\r\n        return None\r\n\r\n    def get_notification_classes(self):\r\n        return []\r\n\r\n    def get_setting_classes(self):\r\n        return []\r\n\r\n    def get_callbacks(self):\r\n        return {}\r\n\r\n    def set_menu_instance(self, menu):\r\n        self.menu = menu\r\n\r\n    def set_notification_instances(self, notifications):\r\n        self.notifications = notifications\r\n\r\n    def plugin_setup_complete(self, BLACS):\r\n        self.BLACS = BLACS\r\n\r\n    def get_tab_classes(self):\r\n        return {'hallo': TestTab}\r\n\r\n    def tabs_created(self, tabs_dict):\r\n        self.tabs = tabs_dict\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def close(self):\r\n        pass\r\n\r\n\r\nclass TestTab(PluginTab):\r\n    def initialise_GUI(self):\r\n        self.layout = self.get_tab_layout()\r\n\r\n        self.foobutton = QPushButton('Error')\r\n        self.foobutton.clicked.connect(self.test_abc)\r\n\r\n        self.layout.addWidget(self.foobutton)\r\n\r\n    def test_abc(self, *args):\r\n        raise Exception('test')\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def restore_save_data(self,data):\r\n        return\r\n\r\n```", "markup": "markdown", "html": "<p>This adds the ability for plugins to spawn Tabs.</p>\n<p>A plugin can spawn a tab by having a <code>get_tab_classes(self)</code> function. This function should return a dict of Tab classes, where the key should be the name of the Tab.</p>\n<p>Plugin tabs should inherit from the <code>PluginTab</code> class in <code>blacs.tab_base_classes</code>. This class provides some basic functionality a tab in BLACS currently needs. Also this allows for the Plugin tabs to use <code>get_save_data</code> to store and <code>restore_save_data</code> to restore data that they might want to save. The initialization of the GUI should be implemented in a function called <code>initialise_GUI</code>, that automatically gets called in the constructor.</p>\n<p>To visually distinguish plugin tabs from devices their text is blue and they have a different icon.</p>\n<p><img alt=\"plugin.png\" src=\"data/bitbucket.org/repo/LoryaEL/images/2179717442-plugin.png\" /></p>\n<p>Here is example code for a basic tab with a button that raises a exception on click:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">blacs.tab_base_classes</span> <span class=\"kn\">import</span> <span class=\"n\">PluginTab</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtutils.qt.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Plugin</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">initial_settings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notifications</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tabs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_menu_class</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_notification_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_setting_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_callbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_menu_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">menu</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_notification_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notifications</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notifications</span> <span class=\"o\">=</span> <span class=\"n\">notifications</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">plugin_setup_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BLACS</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS</span> <span class=\"o\">=</span> <span class=\"n\">BLACS</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tab_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">&#39;hallo&#39;</span><span class=\"p\">:</span> <span class=\"n\">TestTab</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tabs_created</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tabs_dict</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tabs</span> <span class=\"o\">=</span> <span class=\"n\">tabs_dict</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestTab</span><span class=\"p\">(</span><span class=\"n\">PluginTab</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">initialise_GUI</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_tab_layout</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span> <span class=\"o\">=</span> <span class=\"n\">QPushButton</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_abc</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_abc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">restore_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>\n</pre></div>", "type": "rendered"}, "title": {"raw": "Plugin Tabs", "markup": "markdown", "html": "<p>Plugin Tabs</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This adds the ability for plugins to spawn Tabs.\r\n\r\nA plugin can spawn a tab by having a ```get_tab_classes(self)``` function. This function should return a dict of Tab classes, where the key should be the name of the Tab.\r\n\r\nPlugin tabs should inherit from the ```PluginTab``` class in ```blacs.tab_base_classes```. This class provides some basic functionality a tab in BLACS currently needs. Also this allows for the Plugin tabs to use ```get_save_data``` to store and ``` restore_save_data``` to restore data that they might want to save. The initialization of the GUI should be implemented in a function called ```initialise_GUI```, that automatically gets called in the constructor.\r\n\r\nTo visually distinguish plugin tabs from devices their text is blue and they have a different icon.\r\n\r\n![plugin.png](data/bitbucket.org/repo/LoryaEL/images/2179717442-plugin.png)\r\n\r\nHere is example code for a basic tab with a button that raises a exception on click:\r\n\r\n```\r\n#!python\r\n\r\nfrom blacs.tab_base_classes import PluginTab\r\nfrom qtutils.qt.QtWidgets import *\r\n\r\nclass Plugin(object):\r\n    def __init__(self, initial_settings):\r\n        self.menu = None\r\n        self.notifications = {}\r\n        self.BLACS = None\r\n        self.tabs = {}\r\n\r\n    def get_menu_class(self):\r\n        return None\r\n\r\n    def get_notification_classes(self):\r\n        return []\r\n\r\n    def get_setting_classes(self):\r\n        return []\r\n\r\n    def get_callbacks(self):\r\n        return {}\r\n\r\n    def set_menu_instance(self, menu):\r\n        self.menu = menu\r\n\r\n    def set_notification_instances(self, notifications):\r\n        self.notifications = notifications\r\n\r\n    def plugin_setup_complete(self, BLACS):\r\n        self.BLACS = BLACS\r\n\r\n    def get_tab_classes(self):\r\n        return {'hallo': TestTab}\r\n\r\n    def tabs_created(self, tabs_dict):\r\n        self.tabs = tabs_dict\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def close(self):\r\n        pass\r\n\r\n\r\nclass TestTab(PluginTab):\r\n    def initialise_GUI(self):\r\n        self.layout = self.get_tab_layout()\r\n\r\n        self.foobutton = QPushButton('Error')\r\n        self.foobutton.clicked.connect(self.test_abc)\r\n\r\n        self.layout.addWidget(self.foobutton)\r\n\r\n    def test_abc(self, *args):\r\n        raise Exception('test')\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def restore_save_data(self,data):\r\n        return\r\n\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/18/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:adee644a72e1%0Da4ef919fc73a?from_pullrequest_id=18"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/18/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/18.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/18/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/18/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/18"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/18/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:adee644a72e1%0Da4ef919fc73a?from_pullrequest_id=18"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/18/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/18/statuses_page=1.json"}}, "title": "Plugin Tabs", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}], "id": 18, "destination": {"commit": {"hash": "a4ef919fc73a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/a4ef919fc73a.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/a4ef919fc73a"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2017-08-22T19:03:11.019492+00:00", "summary": {"raw": "This adds the ability for plugins to spawn Tabs.\r\n\r\nA plugin can spawn a tab by having a ```get_tab_classes(self)``` function. This function should return a dict of Tab classes, where the key should be the name of the Tab.\r\n\r\nPlugin tabs should inherit from the ```PluginTab``` class in ```blacs.tab_base_classes```. This class provides some basic functionality a tab in BLACS currently needs. Also this allows for the Plugin tabs to use ```get_save_data``` to store and ``` restore_save_data``` to restore data that they might want to save. The initialization of the GUI should be implemented in a function called ```initialise_GUI```, that automatically gets called in the constructor.\r\n\r\nTo visually distinguish plugin tabs from devices their text is blue and they have a different icon.\r\n\r\n![plugin.png](data/bitbucket.org/repo/LoryaEL/images/2179717442-plugin.png)\r\n\r\nHere is example code for a basic tab with a button that raises a exception on click:\r\n\r\n```\r\n#!python\r\n\r\nfrom blacs.tab_base_classes import PluginTab\r\nfrom qtutils.qt.QtWidgets import *\r\n\r\nclass Plugin(object):\r\n    def __init__(self, initial_settings):\r\n        self.menu = None\r\n        self.notifications = {}\r\n        self.BLACS = None\r\n        self.tabs = {}\r\n\r\n    def get_menu_class(self):\r\n        return None\r\n\r\n    def get_notification_classes(self):\r\n        return []\r\n\r\n    def get_setting_classes(self):\r\n        return []\r\n\r\n    def get_callbacks(self):\r\n        return {}\r\n\r\n    def set_menu_instance(self, menu):\r\n        self.menu = menu\r\n\r\n    def set_notification_instances(self, notifications):\r\n        self.notifications = notifications\r\n\r\n    def plugin_setup_complete(self, BLACS):\r\n        self.BLACS = BLACS\r\n\r\n    def get_tab_classes(self):\r\n        return {'hallo': TestTab}\r\n\r\n    def tabs_created(self, tabs_dict):\r\n        self.tabs = tabs_dict\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def close(self):\r\n        pass\r\n\r\n\r\nclass TestTab(PluginTab):\r\n    def initialise_GUI(self):\r\n        self.layout = self.get_tab_layout()\r\n\r\n        self.foobutton = QPushButton('Error')\r\n        self.foobutton.clicked.connect(self.test_abc)\r\n\r\n        self.layout.addWidget(self.foobutton)\r\n\r\n    def test_abc(self, *args):\r\n        raise Exception('test')\r\n\r\n    def get_save_data(self):\r\n        return {}\r\n\r\n    def restore_save_data(self,data):\r\n        return\r\n\r\n```", "markup": "markdown", "html": "<p>This adds the ability for plugins to spawn Tabs.</p>\n<p>A plugin can spawn a tab by having a <code>get_tab_classes(self)</code> function. This function should return a dict of Tab classes, where the key should be the name of the Tab.</p>\n<p>Plugin tabs should inherit from the <code>PluginTab</code> class in <code>blacs.tab_base_classes</code>. This class provides some basic functionality a tab in BLACS currently needs. Also this allows for the Plugin tabs to use <code>get_save_data</code> to store and <code>restore_save_data</code> to restore data that they might want to save. The initialization of the GUI should be implemented in a function called <code>initialise_GUI</code>, that automatically gets called in the constructor.</p>\n<p>To visually distinguish plugin tabs from devices their text is blue and they have a different icon.</p>\n<p><img alt=\"plugin.png\" src=\"data/bitbucket.org/repo/LoryaEL/images/2179717442-plugin.png\" /></p>\n<p>Here is example code for a basic tab with a button that raises a exception on click:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">blacs.tab_base_classes</span> <span class=\"kn\">import</span> <span class=\"n\">PluginTab</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtutils.qt.QtWidgets</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Plugin</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">initial_settings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notifications</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tabs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_menu_class</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_notification_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_setting_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_callbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_menu_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">menu</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">menu</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_notification_instances</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notifications</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notifications</span> <span class=\"o\">=</span> <span class=\"n\">notifications</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">plugin_setup_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">BLACS</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BLACS</span> <span class=\"o\">=</span> <span class=\"n\">BLACS</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tab_classes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">&#39;hallo&#39;</span><span class=\"p\">:</span> <span class=\"n\">TestTab</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tabs_created</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tabs_dict</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tabs</span> <span class=\"o\">=</span> <span class=\"n\">tabs_dict</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestTab</span><span class=\"p\">(</span><span class=\"n\">PluginTab</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">initialise_GUI</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_tab_layout</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span> <span class=\"o\">=</span> <span class=\"n\">QPushButton</span><span class=\"p\">(</span><span class=\"s1\">&#39;Error&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span><span class=\"o\">.</span><span class=\"n\">clicked</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_abc</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">addWidget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foobutton</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_abc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">restore_save_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "0cd334a1cf38", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/blacs/commit/0cd334a1cf38"}, "html": {"href": "#!/PhyNerd/blacs/commits/0cd334a1cf38"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/blacs"}, "html": {"href": "#!/PhyNerd/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c389ea50-6212-43e6-a1e4-82d1fda463c1}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "PhyNerd/blacs", "uuid": "{c389ea50-6212-43e6-a1e4-82d1fda463c1}"}, "branch": {"name": "Tabs-for-Plugins"}}, "comment_count": 19, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2018-08-02T01:47:31.698826+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "PARTICIPANT", "participated_on": "2018-08-02T01:44:54.133995+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, {"role": "REVIEWER", "participated_on": "2018-07-12T23:31:21.595269+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "PARTICIPANT", "participated_on": "2018-05-28T20:11:43.307879+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}], "reason": "", "updated_on": "2018-08-02T01:47:31.787492+00:00", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "merge_commit": {"hash": "adee644a72e1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/adee644a72e1.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/adee644a72e1"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}