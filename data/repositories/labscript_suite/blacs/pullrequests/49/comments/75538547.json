{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75538547.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75538547"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "A couple of comments \\(not sure what you want to do about them\\):\n\n* I believe that the `inmain` decorator was probably to serialise access to the `BLACS.plugins` dictionary as well as the dictionary returned by `plugins.get_callbacks()` as dictionary access is not atomic. It was never used to ensure safe access to the GUI. So it might need to be added back in.   \n* Oh, actually it's also needed to safely access the cache of callbacks as well \\(since the cache can be updated, see below\\)...which isn't easy to do, so actually we need to return a copy of the list of callbacks from `blacs.plugins.get_callbacks()`, \\(copied while protected by `inmain`\\) in order to guarantee safe access.  \n* The caching of callbacks worries me \\(this was in fact something I told Jan to do when I reviewed one of his pull requests\\) because I don't think anything prescribes that the list of callbacks returns by the plugin should be static. Maybe the quick fix here is to change the default for `update_cache` to `True`? That way it can be turned off in places where we find speed matters \\(while being aware that we need to think of the consequences of this\\). Alternatively, I guess we could make it convention that any plugin which modifies it\u2019s list of callbacks should also fetch the callbacks and explicitly request that the cache is refreshed.\n\n", "markup": "markdown", "html": "<p>A couple of comments (not sure what you want to do about them):</p>\n<ul>\n<li>I believe that the <code>inmain</code> decorator was probably to serialise access to the <code>BLACS.plugins</code> dictionary as well as the dictionary returned by <code>plugins.get_callbacks()</code> as dictionary access is not atomic. It was never used to ensure safe access to the GUI. So it might need to be added back in.   </li>\n<li>Oh, actually it's also needed to safely access the cache of callbacks as well (since the cache can be updated, see below)...which isn't easy to do, so actually we need to return a copy of the list of callbacks from <code>blacs.plugins.get_callbacks()</code>, (copied while protected by <code>inmain</code>) in order to guarantee safe access.  </li>\n<li>The caching of callbacks worries me (this was in fact something I told Jan to do when I reviewed one of his pull requests) because I don't think anything prescribes that the list of callbacks returns by the plugin should be static. Maybe the quick fix here is to change the default for <code>update_cache</code> to <code>True</code>? That way it can be turned off in places where we find speed matters (while being aware that we need to think of the consequences of this). Alternatively, I guess we could make it convention that any plugin which modifies it\u2019s list of callbacks should also fetch the callbacks and explicitly request that the cache is refreshed.</li>\n</ul>", "type": "rendered"}, "created_on": "2018-09-11T00:30:17.248527+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-09-11T00:30:17.255801+00:00", "type": "pullrequest_comment", "id": 75538547}