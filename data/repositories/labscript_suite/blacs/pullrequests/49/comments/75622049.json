{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75622049.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75622049"}}, "parent": {"id": 75538547, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75538547.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75538547"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "* Since BLACS.plugins is defined once and never modified (at least as things stand presently), I'm happy to not serialise access to it. If we come up with a dynamic plugin loading mechanism in the future (unlikely I would think) then we can  serialise it with its own lock. So I would lean toward not adding back in the `inmain` decorator \n* Ah, this is more likely to be a problem. I suspect we just shouldn't  cache - if performance is an issue we should change the method of attaching callbacks to be more like other frameworks do it (calls to connect and disconnect like in qt) rather than returning a dictionary from a specific method. The only way to 'detach' a callback at present is to dynamically return a different dictionary of callbacks depending on the state of the plugin, which doesn't even work  with caching anyhow - cached callbacks will not respect a change in the return value of `plugin.get_callbacks()`. And we're talking tens of microseconds saved here, and no present code calls `update_cache=True` anyway, so I'm inclined to just remove that argument.", "markup": "markdown", "html": "<ul>\n<li>Since BLACS.plugins is defined once and never modified (at least as things stand presently), I'm happy to not serialise access to it. If we come up with a dynamic plugin loading mechanism in the future (unlikely I would think) then we can  serialise it with its own lock. So I would lean toward not adding back in the <code>inmain</code> decorator </li>\n<li>Ah, this is more likely to be a problem. I suspect we just shouldn't  cache - if performance is an issue we should change the method of attaching callbacks to be more like other frameworks do it (calls to connect and disconnect like in qt) rather than returning a dictionary from a specific method. The only way to 'detach' a callback at present is to dynamically return a different dictionary of callbacks depending on the state of the plugin, which doesn't even work  with caching anyhow - cached callbacks will not respect a change in the return value of <code>plugin.get_callbacks()</code>. And we're talking tens of microseconds saved here, and no present code calls <code>update_cache=True</code> anyway, so I'm inclined to just remove that argument.</li>\n</ul>", "type": "rendered"}, "created_on": "2018-09-11T14:12:53.331766+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-11T14:12:53.343974+00:00", "type": "pullrequest_comment", "id": 75622049}