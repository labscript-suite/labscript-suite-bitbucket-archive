{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75908281.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75908281"}}, "parent": {"id": 75829908, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75829908.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75829908"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "Yes, it's not threadsafe.\n\nHowever, simply wrapping the call in a lock won't suffice - unless other threads (say, within the plugin) acquire the lock as well before modifying state that affects that dictionary.  It would be nice if BLACS could guarantee that it won't call multiple methods on plugins at the same time - this could be achieved via a lock. Otherwise plugins will just have to be responsible for their own thread-safety if they are using threads. But it's a bigger problem than `get_callbacks()`, and we should probably cross that bridge when we get to it (i.e. if we ever have plugins actually dynamically modifying what callbacks they want to register). The capabilities of plugins are simple enough at the moment that simply disallowing changing what callbacks you're connected to seems like a defensible design decision to me. A plugin can always hook into a callback and then just not do anything when it's called, depending on its own state.\n\nSo I'm thinking to not add a lock at the moment, but just to keep an eye on the plugin architecture for once more stuff like that is needed.", "markup": "markdown", "html": "<p>Yes, it's not threadsafe.</p>\n<p>However, simply wrapping the call in a lock won't suffice - unless other threads (say, within the plugin) acquire the lock as well before modifying state that affects that dictionary.  It would be nice if BLACS could guarantee that it won't call multiple methods on plugins at the same time - this could be achieved via a lock. Otherwise plugins will just have to be responsible for their own thread-safety if they are using threads. But it's a bigger problem than <code>get_callbacks()</code>, and we should probably cross that bridge when we get to it (i.e. if we ever have plugins actually dynamically modifying what callbacks they want to register). The capabilities of plugins are simple enough at the moment that simply disallowing changing what callbacks you're connected to seems like a defensible design decision to me. A plugin can always hook into a callback and then just not do anything when it's called, depending on its own state.</p>\n<p>So I'm thinking to not add a lock at the moment, but just to keep an eye on the plugin architecture for once more stuff like that is needed.</p>", "type": "rendered"}, "created_on": "2018-09-13T14:34:48.515053+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-13T14:34:48.527231+00:00", "type": "pullrequest_comment", "id": 75908281}