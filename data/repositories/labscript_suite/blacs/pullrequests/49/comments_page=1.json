{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75538547.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75538547"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "A couple of comments \\(not sure what you want to do about them\\):\n\n* I believe that the `inmain` decorator was probably to serialise access to the `BLACS.plugins` dictionary as well as the dictionary returned by `plugins.get_callbacks()` as dictionary access is not atomic. It was never used to ensure safe access to the GUI. So it might need to be added back in.   \n* Oh, actually it's also needed to safely access the cache of callbacks as well \\(since the cache can be updated, see below\\)...which isn't easy to do, so actually we need to return a copy of the list of callbacks from `blacs.plugins.get_callbacks()`, \\(copied while protected by `inmain`\\) in order to guarantee safe access.  \n* The caching of callbacks worries me \\(this was in fact something I told Jan to do when I reviewed one of his pull requests\\) because I don't think anything prescribes that the list of callbacks returns by the plugin should be static. Maybe the quick fix here is to change the default for `update_cache` to `True`? That way it can be turned off in places where we find speed matters \\(while being aware that we need to think of the consequences of this\\). Alternatively, I guess we could make it convention that any plugin which modifies it\u2019s list of callbacks should also fetch the callbacks and explicitly request that the cache is refreshed.\n\n", "markup": "markdown", "html": "<p>A couple of comments (not sure what you want to do about them):</p>\n<ul>\n<li>I believe that the <code>inmain</code> decorator was probably to serialise access to the <code>BLACS.plugins</code> dictionary as well as the dictionary returned by <code>plugins.get_callbacks()</code> as dictionary access is not atomic. It was never used to ensure safe access to the GUI. So it might need to be added back in.   </li>\n<li>Oh, actually it's also needed to safely access the cache of callbacks as well (since the cache can be updated, see below)...which isn't easy to do, so actually we need to return a copy of the list of callbacks from <code>blacs.plugins.get_callbacks()</code>, (copied while protected by <code>inmain</code>) in order to guarantee safe access.  </li>\n<li>The caching of callbacks worries me (this was in fact something I told Jan to do when I reviewed one of his pull requests) because I don't think anything prescribes that the list of callbacks returns by the plugin should be static. Maybe the quick fix here is to change the default for <code>update_cache</code> to <code>True</code>? That way it can be turned off in places where we find speed matters (while being aware that we need to think of the consequences of this). Alternatively, I guess we could make it convention that any plugin which modifies it\u2019s list of callbacks should also fetch the callbacks and explicitly request that the cache is refreshed.</li>\n</ul>", "type": "rendered"}, "created_on": "2018-09-11T00:30:17.248527+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-09-11T00:30:17.255801+00:00", "type": "pullrequest_comment", "id": 75538547}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75622049.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75622049"}}, "parent": {"id": 75538547, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75538547.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75538547"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "* Since BLACS.plugins is defined once and never modified (at least as things stand presently), I'm happy to not serialise access to it. If we come up with a dynamic plugin loading mechanism in the future (unlikely I would think) then we can  serialise it with its own lock. So I would lean toward not adding back in the `inmain` decorator \n* Ah, this is more likely to be a problem. I suspect we just shouldn't  cache - if performance is an issue we should change the method of attaching callbacks to be more like other frameworks do it (calls to connect and disconnect like in qt) rather than returning a dictionary from a specific method. The only way to 'detach' a callback at present is to dynamically return a different dictionary of callbacks depending on the state of the plugin, which doesn't even work  with caching anyhow - cached callbacks will not respect a change in the return value of `plugin.get_callbacks()`. And we're talking tens of microseconds saved here, and no present code calls `update_cache=True` anyway, so I'm inclined to just remove that argument.", "markup": "markdown", "html": "<ul>\n<li>Since BLACS.plugins is defined once and never modified (at least as things stand presently), I'm happy to not serialise access to it. If we come up with a dynamic plugin loading mechanism in the future (unlikely I would think) then we can  serialise it with its own lock. So I would lean toward not adding back in the <code>inmain</code> decorator </li>\n<li>Ah, this is more likely to be a problem. I suspect we just shouldn't  cache - if performance is an issue we should change the method of attaching callbacks to be more like other frameworks do it (calls to connect and disconnect like in qt) rather than returning a dictionary from a specific method. The only way to 'detach' a callback at present is to dynamically return a different dictionary of callbacks depending on the state of the plugin, which doesn't even work  with caching anyhow - cached callbacks will not respect a change in the return value of <code>plugin.get_callbacks()</code>. And we're talking tens of microseconds saved here, and no present code calls <code>update_cache=True</code> anyway, so I'm inclined to just remove that argument.</li>\n</ul>", "type": "rendered"}, "created_on": "2018-09-11T14:12:53.331766+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-11T14:12:53.343974+00:00", "type": "pullrequest_comment", "id": 75622049}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75829908.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75829908"}}, "parent": {"id": 75622049, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75622049.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75622049"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "Ok, I\u2019m happy with those changes, but the call to `plugin.get_callbacks()` from with `blacs.plugins.get_callbacks()` is still thread unsafe right, because that dictionary returned by the plugin can still be dynamically changed?", "markup": "markdown", "html": "<p>Ok, I\u2019m happy with those changes, but the call to <code>plugin.get_callbacks()</code> from with <code>blacs.plugins.get_callbacks()</code> is still thread unsafe right, because that dictionary returned by the plugin can still be dynamically changed?</p>", "type": "rendered"}, "created_on": "2018-09-13T02:28:10.437413+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-09-13T02:28:10.445298+00:00", "type": "pullrequest_comment", "id": 75829908}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75908281.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75908281"}}, "parent": {"id": 75829908, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75829908.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75829908"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "Yes, it's not threadsafe.\n\nHowever, simply wrapping the call in a lock won't suffice - unless other threads (say, within the plugin) acquire the lock as well before modifying state that affects that dictionary.  It would be nice if BLACS could guarantee that it won't call multiple methods on plugins at the same time - this could be achieved via a lock. Otherwise plugins will just have to be responsible for their own thread-safety if they are using threads. But it's a bigger problem than `get_callbacks()`, and we should probably cross that bridge when we get to it (i.e. if we ever have plugins actually dynamically modifying what callbacks they want to register). The capabilities of plugins are simple enough at the moment that simply disallowing changing what callbacks you're connected to seems like a defensible design decision to me. A plugin can always hook into a callback and then just not do anything when it's called, depending on its own state.\n\nSo I'm thinking to not add a lock at the moment, but just to keep an eye on the plugin architecture for once more stuff like that is needed.", "markup": "markdown", "html": "<p>Yes, it's not threadsafe.</p>\n<p>However, simply wrapping the call in a lock won't suffice - unless other threads (say, within the plugin) acquire the lock as well before modifying state that affects that dictionary.  It would be nice if BLACS could guarantee that it won't call multiple methods on plugins at the same time - this could be achieved via a lock. Otherwise plugins will just have to be responsible for their own thread-safety if they are using threads. But it's a bigger problem than <code>get_callbacks()</code>, and we should probably cross that bridge when we get to it (i.e. if we ever have plugins actually dynamically modifying what callbacks they want to register). The capabilities of plugins are simple enough at the moment that simply disallowing changing what callbacks you're connected to seems like a defensible design decision to me. A plugin can always hook into a callback and then just not do anything when it's called, depending on its own state.</p>\n<p>So I'm thinking to not add a lock at the moment, but just to keep an eye on the plugin architecture for once more stuff like that is needed.</p>", "type": "rendered"}, "created_on": "2018-09-13T14:34:48.515053+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-13T14:34:48.527231+00:00", "type": "pullrequest_comment", "id": 75908281}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75624016.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75624016"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "Ok, modified `get_callbacks()` to just not cache. I don't see much incentive to keep the argument for backward compatibility since no code in BLACS was using it and it seems unlikely third-party plugins are using it unless as a hack to be able to dynamically change callbacks as you described. Such code will break anyway since the function has moved, and the fix is obvious, and I also suspect no such code exists.", "markup": "markdown", "html": "<p>Ok, modified <code>get_callbacks()</code> to just not cache. I don't see much incentive to keep the argument for backward compatibility since no code in BLACS was using it and it seems unlikely third-party plugins are using it unless as a hack to be able to dynamically change callbacks as you described. Such code will break anyway since the function has moved, and the fix is obvious, and I also suspect no such code exists.</p>", "type": "rendered"}, "created_on": "2018-09-11T14:22:23.400095+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-11T14:22:23.406440+00:00", "type": "pullrequest_comment", "id": 75624016}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49/comments/75798827.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49/_/diff#comment-75798827"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 49, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/49.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/49"}}, "title": "Plugin callback priorities"}, "content": {"raw": "Will merge on Monday if there are no further comments.", "markup": "markdown", "html": "<p>Will merge on Monday if there are no further comments.</p>", "type": "rendered"}, "created_on": "2018-09-12T18:25:42.123456+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-12T18:25:42.132335+00:00", "type": "pullrequest_comment", "id": 75798827}], "page": 1, "size": 6}