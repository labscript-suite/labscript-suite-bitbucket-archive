{"rendered": {"description": {"raw": "Added a plugin that allows one to impose a fixed interval between the beginning of\r\nsubsequent shots. This is a feature present in the Spielman fork, and is used to ensure that the experiment that needs to be 'kept warm' can be put in an equilibrium state in which some process runs with a fixed duty cycle despite varying shot durations. For us this is UV desorption or rubidium during MOT loading. To keep a consistent pressure in the MOT cell during this state from one shot to the next, it's important that the UV is on a fixed fraction of the time.\r\n\r\nThis can be achieved by having BLACS wait before running the next shot, leaving a configurable buffer of time so that it can run shots at a fixed interval despite the shots having small variations in duration (for science reasons or software timing differences or otherwise).\r\n\r\nAlthough there is still software timing differences after this point, I decided to insert the delay just before transition_to_buffered is called on all devices. This is because transition_to_buffered may cause some devices to start outputting their initial instructions, which may be undesirable.\r\n\r\nhere's what it looks like:\r\n\r\n![blacs_fixed_plugin.png](data/bitbucket.org/repo/9pKE7ad/images/1175914126-blacs_fixed_plugin.png)\r\n\r\nIf the interval is set to zero, it instead displays 'none', and runs shots as they come without trying to impose a fixed interval. If shots take too long such that the interval is not able to be achieved, an error icon is displayed, but BLACS continues to run shots.\r\n\r\nWhilst waiting, the plugin attaches an additional callback to the abort button, so that it will stop waiting if the abort button is clicked.", "markup": "markdown", "html": "<p>Added a plugin that allows one to impose a fixed interval between the beginning of\nsubsequent shots. This is a feature present in the Spielman fork, and is used to ensure that the experiment that needs to be 'kept warm' can be put in an equilibrium state in which some process runs with a fixed duty cycle despite varying shot durations. For us this is UV desorption or rubidium during MOT loading. To keep a consistent pressure in the MOT cell during this state from one shot to the next, it's important that the UV is on a fixed fraction of the time.</p>\n<p>This can be achieved by having BLACS wait before running the next shot, leaving a configurable buffer of time so that it can run shots at a fixed interval despite the shots having small variations in duration (for science reasons or software timing differences or otherwise).</p>\n<p>Although there is still software timing differences after this point, I decided to insert the delay just before transition_to_buffered is called on all devices. This is because transition_to_buffered may cause some devices to start outputting their initial instructions, which may be undesirable.</p>\n<p>here's what it looks like:</p>\n<p><img alt=\"blacs_fixed_plugin.png\" src=\"data/bitbucket.org/repo/9pKE7ad/images/1175914126-blacs_fixed_plugin.png\" /></p>\n<p>If the interval is set to zero, it instead displays 'none', and runs shots as they come without trying to impose a fixed interval. If shots take too long such that the interval is not able to be achieved, an error icon is displayed, but BLACS continues to run shots.</p>\n<p>Whilst waiting, the plugin attaches an additional callback to the abort button, so that it will stop waiting if the abort button is clicked.</p>", "type": "rendered"}, "title": {"raw": "Fixed shot interval", "markup": "markdown", "html": "<p>Fixed shot interval</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Added a plugin that allows one to impose a fixed interval between the beginning of\r\nsubsequent shots. This is a feature present in the Spielman fork, and is used to ensure that the experiment that needs to be 'kept warm' can be put in an equilibrium state in which some process runs with a fixed duty cycle despite varying shot durations. For us this is UV desorption or rubidium during MOT loading. To keep a consistent pressure in the MOT cell during this state from one shot to the next, it's important that the UV is on a fixed fraction of the time.\r\n\r\nThis can be achieved by having BLACS wait before running the next shot, leaving a configurable buffer of time so that it can run shots at a fixed interval despite the shots having small variations in duration (for science reasons or software timing differences or otherwise).\r\n\r\nAlthough there is still software timing differences after this point, I decided to insert the delay just before transition_to_buffered is called on all devices. This is because transition_to_buffered may cause some devices to start outputting their initial instructions, which may be undesirable.\r\n\r\nhere's what it looks like:\r\n\r\n![blacs_fixed_plugin.png](data/bitbucket.org/repo/9pKE7ad/images/1175914126-blacs_fixed_plugin.png)\r\n\r\nIf the interval is set to zero, it instead displays 'none', and runs shots as they come without trying to impose a fixed interval. If shots take too long such that the interval is not able to be achieved, an error icon is displayed, but BLACS continues to run shots.\r\n\r\nWhilst waiting, the plugin attaches an additional callback to the abort button, so that it will stop waiting if the abort button is clicked.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/50/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:5d3b0134453f%0D634d076ccf54?from_pullrequest_id=50"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/50/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/50"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:5d3b0134453f%0D634d076ccf54?from_pullrequest_id=50"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/50/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/statuses_page=1.json"}}, "title": "Fixed shot interval", "close_source_branch": true, "reviewers": [{"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}], "id": 50, "destination": {"commit": {"hash": "634d076ccf54", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/634d076ccf54.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/634d076ccf54"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-09-10T22:23:12.440679+00:00", "summary": {"raw": "Added a plugin that allows one to impose a fixed interval between the beginning of\r\nsubsequent shots. This is a feature present in the Spielman fork, and is used to ensure that the experiment that needs to be 'kept warm' can be put in an equilibrium state in which some process runs with a fixed duty cycle despite varying shot durations. For us this is UV desorption or rubidium during MOT loading. To keep a consistent pressure in the MOT cell during this state from one shot to the next, it's important that the UV is on a fixed fraction of the time.\r\n\r\nThis can be achieved by having BLACS wait before running the next shot, leaving a configurable buffer of time so that it can run shots at a fixed interval despite the shots having small variations in duration (for science reasons or software timing differences or otherwise).\r\n\r\nAlthough there is still software timing differences after this point, I decided to insert the delay just before transition_to_buffered is called on all devices. This is because transition_to_buffered may cause some devices to start outputting their initial instructions, which may be undesirable.\r\n\r\nhere's what it looks like:\r\n\r\n![blacs_fixed_plugin.png](data/bitbucket.org/repo/9pKE7ad/images/1175914126-blacs_fixed_plugin.png)\r\n\r\nIf the interval is set to zero, it instead displays 'none', and runs shots as they come without trying to impose a fixed interval. If shots take too long such that the interval is not able to be achieved, an error icon is displayed, but BLACS continues to run shots.\r\n\r\nWhilst waiting, the plugin attaches an additional callback to the abort button, so that it will stop waiting if the abort button is clicked.", "markup": "markdown", "html": "<p>Added a plugin that allows one to impose a fixed interval between the beginning of\nsubsequent shots. This is a feature present in the Spielman fork, and is used to ensure that the experiment that needs to be 'kept warm' can be put in an equilibrium state in which some process runs with a fixed duty cycle despite varying shot durations. For us this is UV desorption or rubidium during MOT loading. To keep a consistent pressure in the MOT cell during this state from one shot to the next, it's important that the UV is on a fixed fraction of the time.</p>\n<p>This can be achieved by having BLACS wait before running the next shot, leaving a configurable buffer of time so that it can run shots at a fixed interval despite the shots having small variations in duration (for science reasons or software timing differences or otherwise).</p>\n<p>Although there is still software timing differences after this point, I decided to insert the delay just before transition_to_buffered is called on all devices. This is because transition_to_buffered may cause some devices to start outputting their initial instructions, which may be undesirable.</p>\n<p>here's what it looks like:</p>\n<p><img alt=\"blacs_fixed_plugin.png\" src=\"data/bitbucket.org/repo/9pKE7ad/images/1175914126-blacs_fixed_plugin.png\" /></p>\n<p>If the interval is set to zero, it instead displays 'none', and runs shots as they come without trying to impose a fixed interval. If shots take too long such that the interval is not able to be achieved, an error icon is displayed, but BLACS continues to run shots.</p>\n<p>Whilst waiting, the plugin attaches an additional callback to the abort button, so that it will stop waiting if the abort button is clicked.</p>", "type": "rendered"}, "source": {"commit": {"hash": "8412a3058e93", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/8412a3058e93"}, "html": {"href": "#!/cbillington/blacs/commits/8412a3058e93"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "fixed-shot-interval"}}, "comment_count": 15, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-09-14T21:33:16.017020+00:00", "type": "participant", "approved": false, "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-16T10:24:14.746742+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2018-09-14T04:53:39.354248+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-16T09:31:34.176220+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "", "updated_on": "2020-01-28T21:04:34.139337+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "5d3b0134453f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d3b0134453f.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d3b0134453f"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}