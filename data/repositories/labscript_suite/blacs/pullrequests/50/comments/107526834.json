{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/comments/107526834.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/50/_/diff#comment-107526834"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 50, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/50"}}, "title": "Fixed shot interval"}, "content": {"raw": "OK, this has been reworked. \n\nFirstly it's been renamed 'cycle_time'\n\nAlso, [the corresponding labscript changes create](#!/labscript_suite/labscript/pull-requests/50/) a 'shot_properties' toplevel group in the HDF5 file, containing settings for the shot as a whole that don't pertain to any particular device. This plugin reads that group and looks for two attributes:\n`target_cycle_time` and `cycle_time_delay_after_programming`. The plugin no longer has any GUI, other than updating the queue status to show the delay time remaining to 0.1s accuracy. There is so far no mechanism for ensuring that BLACS has the required plugins enabled - requiring the plugin is documented in labscript's docstring for `stop()`, but that it is it.\n\nThe delay is inserted before or after programming depending on the setting `cycle_time_delay_after_programming`, which defaults to `False`.\n\nIt was not possible to remove all `inmain()` calls after the delay, at least, not if we want to have any visual indication that the delay is in progress. So i think we just have to accept that the cycle time will have jitter on the scale of `inmain()` calls to the GUI. I don't think there is much point optimising further - even if this plugin didn't have any GUI calls, starting the master pseudoclock has an `inmain()` call so that is still there whatever we do. More precise timing should be achieved by starting the experiment ASAP and using a periodically fired hardware trigger to resume a `wait()` early in the experiment.\n\nI will deploy this to our lab on Monday and see how it goes.\n\n\nOur interest in this is keeping the atom number stable over time, since the pressure in the MOT cell is related to the average duty cycle of UV that is shone for a few seconds each shot to desorb rubidium. Whilst things are pretty stable when running normally, differences in shot duration as we are optimising, or differences in programming time when we are scanning over parameters that cause the novatechs to be reprogrammed, benefit from something like this.\n\nThere is presently no way to tell whether a shot ran in the requested time, other than inspecting the run_time attributes of shot files in lyse (which you could do if you wanted). So setting the target cycle time is a polite request only, as and as the plugin is now, it's totally up to you to make sure this is sufficient and to verify it's working.", "markup": "markdown", "html": "<p>OK, this has been reworked. </p>\n<p>Firstly it's been renamed 'cycle_time'</p>\n<p>Also, <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/pull-requests/50/\" rel=\"nofollow\">the corresponding labscript changes create</a> a 'shot_properties' toplevel group in the HDF5 file, containing settings for the shot as a whole that don't pertain to any particular device. This plugin reads that group and looks for two attributes:\n<code>target_cycle_time</code> and <code>cycle_time_delay_after_programming</code>. The plugin no longer has any GUI, other than updating the queue status to show the delay time remaining to 0.1s accuracy. There is so far no mechanism for ensuring that BLACS has the required plugins enabled - requiring the plugin is documented in labscript's docstring for <code>stop()</code>, but that it is it.</p>\n<p>The delay is inserted before or after programming depending on the setting <code>cycle_time_delay_after_programming</code>, which defaults to <code>False</code>.</p>\n<p>It was not possible to remove all <code>inmain()</code> calls after the delay, at least, not if we want to have any visual indication that the delay is in progress. So i think we just have to accept that the cycle time will have jitter on the scale of <code>inmain()</code> calls to the GUI. I don't think there is much point optimising further - even if this plugin didn't have any GUI calls, starting the master pseudoclock has an <code>inmain()</code> call so that is still there whatever we do. More precise timing should be achieved by starting the experiment ASAP and using a periodically fired hardware trigger to resume a <code>wait()</code> early in the experiment.</p>\n<p>I will deploy this to our lab on Monday and see how it goes.</p>\n<p>Our interest in this is keeping the atom number stable over time, since the pressure in the MOT cell is related to the average duty cycle of UV that is shone for a few seconds each shot to desorb rubidium. Whilst things are pretty stable when running normally, differences in shot duration as we are optimising, or differences in programming time when we are scanning over parameters that cause the novatechs to be reprogrammed, benefit from something like this.</p>\n<p>There is presently no way to tell whether a shot ran in the requested time, other than inspecting the run_time attributes of shot files in lyse (which you could do if you wanted). So setting the target cycle time is a polite request only, as and as the plugin is now, it's totally up to you to make sure this is sufficient and to verify it's working.</p>", "type": "rendered"}, "created_on": "2019-06-28T22:32:06.883939+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-28T22:37:52.776436+00:00", "type": "pullrequest_comment", "id": 107526834}