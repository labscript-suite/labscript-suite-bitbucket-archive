{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50/comments/76037026.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/50/_/diff#comment-76037026"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 50, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/50.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/50"}}, "title": "Fixed shot interval"}, "content": {"raw": "In the interests of simplicity, I might just make it settable via labscript and not via the BLACS GUI. The appeal of having it set in BLACS is that the code is a fully self-contained BLACS plugin with no interaction between BLACS and labscript, but if it is going to be settable via labscript then there is less reason to have it settable via BLACS too. There is some argument that this flexibility is useful but I think simplicity wins.\n\nCould add an option to hook into the `\"science_starting\"` callback (added in pull request #52) instead to optionally avoid jitter from programming time. \n\nSo in light of those and Phil's other comments I propose:\n\n* Having BLACS just display the number rather than have it settable\n* Renaming this quantity to 'cycle time'\n* Adding a keyword argument `labscript.stop(..., cycle_time=None)`\n* Saving this as an attribute to a new group in the HDF5 file, proposed name `shot_properties`. I imagine future things like this will need a home in the HDF5 file and it makes sense to have a group for them so that BLACS' shot cleaning can copy over a whole group rather than having to know which attributes at the top level are present in a  clean shot file and which are not.\n* I reshuffle the code in the callback so that the timeout is calculated after all the GUI calls, preventing jitter from `inmain()` calls without having to think about the consequences of making them asynchronous.\n* Add another keyword argument `labscript.stop(..., cycle_time=None, cycle_time_delay_after_programming=False)`, which stores another attribute to the `shot_properties` group. The plugin will read this from each shot during the `\"pre_transition_to_buffered\"` callback and use that information to decide whether to do the delay then, or in the `\"science_starting\"` callback instead. I don't think there are any consequences to this that affect how aborts are handled.\n\nAll in favour?", "markup": "markdown", "html": "<p>In the interests of simplicity, I might just make it settable via labscript and not via the BLACS GUI. The appeal of having it set in BLACS is that the code is a fully self-contained BLACS plugin with no interaction between BLACS and labscript, but if it is going to be settable via labscript then there is less reason to have it settable via BLACS too. There is some argument that this flexibility is useful but I think simplicity wins.</p>\n<p>Could add an option to hook into the <code>\"science_starting\"</code> callback (added in <a href=\"#!/labscript_suite/blacs/pull-requests/52/progress-bar\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #52</a>) instead to optionally avoid jitter from programming time. </p>\n<p>So in light of those and Phil's other comments I propose:</p>\n<ul>\n<li>Having BLACS just display the number rather than have it settable</li>\n<li>Renaming this quantity to 'cycle time'</li>\n<li>Adding a keyword argument <code>labscript.stop(..., cycle_time=None)</code></li>\n<li>Saving this as an attribute to a new group in the HDF5 file, proposed name <code>shot_properties</code>. I imagine future things like this will need a home in the HDF5 file and it makes sense to have a group for them so that BLACS' shot cleaning can copy over a whole group rather than having to know which attributes at the top level are present in a  clean shot file and which are not.</li>\n<li>I reshuffle the code in the callback so that the timeout is calculated after all the GUI calls, preventing jitter from <code>inmain()</code> calls without having to think about the consequences of making them asynchronous.</li>\n<li>Add another keyword argument <code>labscript.stop(..., cycle_time=None, cycle_time_delay_after_programming=False)</code>, which stores another attribute to the <code>shot_properties</code> group. The plugin will read this from each shot during the <code>\"pre_transition_to_buffered\"</code> callback and use that information to decide whether to do the delay then, or in the <code>\"science_starting\"</code> callback instead. I don't think there are any consequences to this that affect how aborts are handled.</li>\n</ul>\n<p>All in favour?</p>", "type": "rendered"}, "created_on": "2018-09-14T14:03:55.058198+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-14T14:03:55.065468+00:00", "type": "pullrequest_comment", "id": 76037026}