{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/comments/79424081.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/56/_/diff#comment-79424081"}}, "parent": {"id": 79321179, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/comments/79321179.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/56/_/diff#comment-79321179"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/56"}}, "title": "Defer starting the worker process until _initialise_worker"}, "content": {"raw": "So that would be a backward incompatible change in BLACS, as even if we added the arguments to BLACS tabs, new BLACS with old labscript_devices would have incorrect behaviour.\n\nWhat I've done now in this PR is to replace the 'prepend' arg with a 'priority' arg. The state queue is kept sorted, and insertions retain sort order (via the \"insort\" function). By prepending to the other state data stored in the queue the priority (lower numbers = higher priority) and the order in which the state was queued up, queue sort order is equal to execution order.\n\nIt's true that this prevents you from using the queue like a stack (other than using ever higher priorities for each added state), but since we don't actually have a use case for this I don't think it's much loss. Higher priority is really what the 'prepend' argument was made for, so the only difference with using priorities as now implemented is that the order isn't backwards if you add a bunch in a row!\n\nI've made it so that `'init'` is `priority=-1`, as well as `'_quit'`, these two were the only uses of `prepend=True`.\n\nSound ok?\n\nTesting doesn't reveal any problems so far, it looks like the 'prepend' argument was not used or exposed anywhere outside of `tab_base_classes.py`.\n\nExtra advantage of these changes: BLACS starts up faster (in the sense of showing the GUI), as it's not starting loads of processes in the GUI thread. It also doesn't hang upon restart.", "markup": "markdown", "html": "<p>So that would be a backward incompatible change in BLACS, as even if we added the arguments to BLACS tabs, new BLACS with old labscript_devices would have incorrect behaviour.</p>\n<p>What I've done now in this PR is to replace the 'prepend' arg with a 'priority' arg. The state queue is kept sorted, and insertions retain sort order (via the \"insort\" function). By prepending to the other state data stored in the queue the priority (lower numbers = higher priority) and the order in which the state was queued up, queue sort order is equal to execution order.</p>\n<p>It's true that this prevents you from using the queue like a stack (other than using ever higher priorities for each added state), but since we don't actually have a use case for this I don't think it's much loss. Higher priority is really what the 'prepend' argument was made for, so the only difference with using priorities as now implemented is that the order isn't backwards if you add a bunch in a row!</p>\n<p>I've made it so that <code>'init'</code> is <code>priority=-1</code>, as well as <code>'_quit'</code>, these two were the only uses of <code>prepend=True</code>.</p>\n<p>Sound ok?</p>\n<p>Testing doesn't reveal any problems so far, it looks like the 'prepend' argument was not used or exposed anywhere outside of <code>tab_base_classes.py</code>.</p>\n<p>Extra advantage of these changes: BLACS starts up faster (in the sense of showing the GUI), as it's not starting loads of processes in the GUI thread. It also doesn't hang upon restart.</p>", "type": "rendered"}, "created_on": "2018-10-17T16:04:01.019812+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-10-17T20:19:21.704791+00:00", "type": "pullrequest_comment", "id": 79424081}