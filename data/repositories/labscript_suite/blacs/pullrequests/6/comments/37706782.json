{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6/comments/37706782.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6/_/diff#comment-37706782"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6"}}, "title": "Reduce average shot turnaround time by 0.625 seconds"}, "content": {"raw": "I think you could add `continue` after line 601 (the assignment of `experiment_finished`)? We don't need to check if a device has been restarted since the last loop because the queue this information gets put in is then checked as part of the code that calls `transition_to_static` (line 709 onwards) anyway, so the device restart would still be caught there. Doing this would speed up the cycle time by 0.5 seconds from what I can tell (by bypassing line 606 on the last iteration). Does that seem right?\n\nWe could also shorten the timeout of line 606 (but not 601) in order to make the detection of the end of experiment faster without adding too much CPU overhead (by remaining IO bound by line 606).\n\nThoughts? I know it's wandering off topic a bit, but I think some of this is still a consequence of fixing the variable names in the loop.", "markup": "markdown", "html": "<p>I think you could add <code>continue</code> after line 601 (the assignment of <code>experiment_finished</code>)? We don't need to check if a device has been restarted since the last loop because the queue this information gets put in is then checked as part of the code that calls <code>transition_to_static</code> (line 709 onwards) anyway, so the device restart would still be caught there. Doing this would speed up the cycle time by 0.5 seconds from what I can tell (by bypassing line 606 on the last iteration). Does that seem right?</p>\n<p>We could also shorten the timeout of line 606 (but not 601) in order to make the detection of the end of experiment faster without adding too much CPU overhead (by remaining IO bound by line 606).</p>\n<p>Thoughts? I know it's wandering off topic a bit, but I think some of this is still a consequence of fixing the variable names in the loop.</p>", "type": "rendered"}, "created_on": "2017-05-27T06:11:05.557609+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-05-27T06:11:05.560232+00:00", "type": "pullrequest_comment", "id": 37706782}