{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6/comments/38303278.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6/_/diff#comment-38303278"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6"}}, "title": "Reduce average shot turnaround time by 0.625 seconds"}, "content": {"raw": "Oh wow, we have 0.5 second timeouts on two different queues being read in a loop?\n\nOK, if it's fine to break out immediately upon 'done' being received, then we don't even need the `experiment_finished` variable, so I've just changed it to `break` once it sees the 'done' message.\n\nAnd it certainly does seem to speed things up by 0.5 seconds, which is very nice!\n\nI think there is the potential for more speedup though, queue readings not happening because another queue is being read with an 0.5 second timeout is unnecessary. I'll file a bug report to remove remaining potential delays like this - I think shots are probably still 0.5 seconds longer than needed because the abort-checking is blocking the end-of-experiment-checking, that is, when we're in the line:\n\n```\n#!python\n\n# Poll self.current_queue for abort signal from button or device restart\ndevice_name, result = self.current_queue.get(timeout=0.5)   \n```\n\nwe are not checking for experiment end, and so we won't notice for up to 0.5 seconds that the experiment has ended.\n\nThe two queues should be merged in some way so that the queue manager is waiting for any event that arrives regardless of the source, in the manner of the unix `select()` call.", "markup": "markdown", "html": "<p>Oh wow, we have 0.5 second timeouts on two different queues being read in a loop?</p>\n<p>OK, if it's fine to break out immediately upon 'done' being received, then we don't even need the <code>experiment_finished</code> variable, so I've just changed it to <code>break</code> once it sees the 'done' message.</p>\n<p>And it certainly does seem to speed things up by 0.5 seconds, which is very nice!</p>\n<p>I think there is the potential for more speedup though, queue readings not happening because another queue is being read with an 0.5 second timeout is unnecessary. I'll file a bug report to remove remaining potential delays like this - I think shots are probably still 0.5 seconds longer than needed because the abort-checking is blocking the end-of-experiment-checking, that is, when we're in the line:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Poll self.current_queue for abort signal from button or device restart</span>\n<span class=\"n\">device_name</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">current_queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>   \n</pre></div>\n\n\n<p>we are not checking for experiment end, and so we won't notice for up to 0.5 seconds that the experiment has ended.</p>\n<p>The two queues should be merged in some way so that the queue manager is waiting for any event that arrives regardless of the source, in the manner of the unix <code>select()</code> call.</p>", "type": "rendered"}, "created_on": "2017-06-06T18:44:53.128964+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-06T18:44:53.131248+00:00", "type": "pullrequest_comment", "id": 38303278}