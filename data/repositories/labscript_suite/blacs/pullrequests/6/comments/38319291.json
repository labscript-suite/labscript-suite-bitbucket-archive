{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6/comments/38319291.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6/_/diff#comment-38319291"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/6.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/6"}}, "title": "Reduce average shot turnaround time by 0.625 seconds"}, "content": {"raw": "Yes, that's what I was trying to say with my second paragraph in my last comment. I'm pretty sure that the speedup will be equal to the amount of time we shorten the timeout on the second queue (the abort queue) check (the one you've highlighted in your comment - line 606). This is because the current code only introduces an unnecessary delay if the experiment finished while polling the abort queue. If it finishes while polling the first/experiment finished queue, then we don't get an unnecessary delay (well, we'd get  a small delay when aborting, but I don't think we need to worry about that!)....\n\nOh, in my last comment I mistakenly said we'd still be IO bound by line 606, I meant 601! (I guess I mean comparatively, we're IO bound by the queue with the longest timeout). So the first/experiment finished queue has a 0.5 second timeout, and then the second/abort queue could have a 0.01 second timeout, which makes the total loop time 0.51 seconds. Aborting will happen in 0.51 seconds of a problem and experiment detection will happen in ~0.01 seconds (because the first queue returns the data as soon as it happens, so it can only ever be blocked for the length of the timeout for the other queue)*.\n\n* not taking into account overheads from thread switching, etc.\n\nBut yes, we should definitely refactor this part of the queue in order to make it as fast as it can be and not bound by the arbitrary numbers specified as timeouts. But the above makes it a quick fix with no immediate down-sides I think?", "markup": "markdown", "html": "<p>Yes, that's what I was trying to say with my second paragraph in my last comment. I'm pretty sure that the speedup will be equal to the amount of time we shorten the timeout on the second queue (the abort queue) check (the one you've highlighted in your comment - line 606). This is because the current code only introduces an unnecessary delay if the experiment finished while polling the abort queue. If it finishes while polling the first/experiment finished queue, then we don't get an unnecessary delay (well, we'd get  a small delay when aborting, but I don't think we need to worry about that!)....</p>\n<p>Oh, in my last comment I mistakenly said we'd still be IO bound by line 606, I meant 601! (I guess I mean comparatively, we're IO bound by the queue with the longest timeout). So the first/experiment finished queue has a 0.5 second timeout, and then the second/abort queue could have a 0.01 second timeout, which makes the total loop time 0.51 seconds. Aborting will happen in 0.51 seconds of a problem and experiment detection will happen in ~0.01 seconds (because the first queue returns the data as soon as it happens, so it can only ever be blocked for the length of the timeout for the other queue)*.</p>\n<ul>\n<li>not taking into account overheads from thread switching, etc.</li>\n</ul>\n<p>But yes, we should definitely refactor this part of the queue in order to make it as fast as it can be and not bound by the arbitrary numbers specified as timeouts. But the above makes it a quick fix with no immediate down-sides I think?</p>", "type": "rendered"}, "created_on": "2017-06-06T23:54:49.572843+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-06T23:54:49.575408+00:00", "type": "pullrequest_comment", "id": 38319291}