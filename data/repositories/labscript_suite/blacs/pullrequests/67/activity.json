{"pagelen": 50, "values": [{"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6740894fd68a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6740894fd68a"}, "html": {"href": "#!/cbillington/blacs/commits/6740894fd68a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-29T18:50:21.836470+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6740894fd68a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6740894fd68a"}, "html": {"href": "#!/cbillington/blacs/commits/6740894fd68a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-29T18:50:20.129250+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/103862405.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-103862405"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Thanks to everyone who tested and provided feedback. Merging this!\n\nDocumentation in a more appropriate place still on the todo list.", "markup": "markdown", "html": "<p>Thanks to everyone who tested and provided feedback. Merging this!</p>\n<p>Documentation in a more appropriate place still on the todo list.</p>", "type": "rendered"}, "created_on": "2019-05-29T18:50:13.037819+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-29T18:50:13.048271+00:00", "type": "pullrequest_comment", "id": 103862405}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/103682776.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-103682776"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Oh yes, damn it. That was it. Found another typo-based mistake which I could solve on my own. Now this works fine.\n\nWe have more remote devices, especially our camera\\_server and an optical\\_tweezer\\_server running in the other experiment which I haven\u2019t tested yet but this could take some time. So don\u2019t wait for that for merging. I will contact you if more questions are coming up.", "markup": "markdown", "html": "<p>Oh yes, damn it. That was it. Found another typo-based mistake which I could solve on my own. Now this works fine.</p>\n<p>We have more remote devices, especially our camera_server and an optical_tweezer_server running in the other experiment which I haven\u2019t tested yet but this could take some time. So don\u2019t wait for that for merging. I will contact you if more questions are coming up.</p>", "type": "rendered"}, "created_on": "2019-05-28T18:34:29.075347+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-05-28T18:34:29.349320+00:00", "type": "pullrequest_comment", "id": 103682776}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/103677284.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-103677284"}}, "parent": {"id": 103676490, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/103676490.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-103676490"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Hi Lars,\n\nYes, I will need to document this all properly elsewhere, though I do think that the directions above in this thread ought to be almost sufficient. You should not need to have a compiled connection table on the remote computer, it just needs to be able to run the remote process server and to be able to import the worker class.\n\nI'm not seeing why you would get that error. Did you by chance pass in the string `worker=\"GPIB_remote_worker\"` instead of the object `worker=GPIB_remote_worker`? That's all I can think of that might have gone wrong so far!", "markup": "markdown", "html": "<p>Hi Lars,</p>\n<p>Yes, I will need to document this all properly elsewhere, though I do think that the directions above in this thread ought to be almost sufficient. You should not need to have a compiled connection table on the remote computer, it just needs to be able to run the remote process server and to be able to import the worker class.</p>\n<p>I'm not seeing why you would get that error. Did you by chance pass in the string <code>worker=\"GPIB_remote_worker\"</code> instead of the object <code>worker=GPIB_remote_worker</code>? That's all I can think of that might have gone wrong so far!</p>", "type": "rendered"}, "created_on": "2019-05-28T17:47:17.630642+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-28T17:47:33.551674+00:00", "type": "pullrequest_comment", "id": 103677284}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/103676490.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-103676490"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "I managed to port all the latest mainline-labscript changes to our branch and would be able  test the remote workers. However I am not quite sure how to get it running.\n\nI want to test it with the setup we currently use: We have a GPIB-card connected to one computer where remote\\_worker is running on. I configure RemoteBLACS\\(''GPIB\\_remote\\_worker', \u2018192.168.1.41\u2019\\) in the connection table with the correct IP and specify in the device\\_instance that it uses worker=GPIB\\_remote\\_worker.  \nNow I get the error when compiling the connection table that the \u201cworker\u201d argument must be a subclass of \\_RemoteConnection and I am not sure whether the problem is with the device class or with the implementation od remote worker.  \ne.g.: Do I need a fully working connection table on the remote desktop or just at the \u201clocalhost\u201d? Maybe you can add some more instructions.", "markup": "markdown", "html": "<p>I managed to port all the latest mainline-labscript changes to our branch and would be able  test the remote workers. However I am not quite sure how to get it running.</p>\n<p>I want to test it with the setup we currently use: We have a GPIB-card connected to one computer where remote_worker is running on. I configure RemoteBLACS(''GPIB_remote_worker', \u2018192.168.1.41\u2019) in the connection table with the correct IP and specify in the device_instance that it uses worker=GPIB_remote_worker.<br />\nNow I get the error when compiling the connection table that the \u201cworker\u201d argument must be a subclass of _RemoteConnection and I am not sure whether the problem is with the device class or with the implementation od remote worker.<br />\ne.g.: Do I need a fully working connection table on the remote desktop or just at the \u201clocalhost\u201d? Maybe you can add some more instructions.</p>", "type": "rendered"}, "created_on": "2019-05-28T17:40:39.330210+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-05-28T17:40:39.472686+00:00", "type": "pullrequest_comment", "id": 103676490}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6740894fd68a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6740894fd68a"}, "html": {"href": "#!/cbillington/blacs/commits/6740894fd68a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-17T03:32:15.295617+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101988956.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101988956"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "I'll let this keep running in the two NIST labs for now, and will aim to merge Monday May 27th if there are no further comments or issues identified.", "markup": "markdown", "html": "<p>I'll let this keep running in the two NIST labs for now, and will aim to merge Monday May 27th if there are no further comments or issues identified.</p>", "type": "rendered"}, "created_on": "2019-05-14T15:30:48.450499+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-14T15:30:48.461769+00:00", "type": "pullrequest_comment", "id": 101988956}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"approval": {"date": "2019-05-13T12:14:18.494025+00:00", "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "43c17859700c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/43c17859700c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/43c17859700c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "bcfed4fa65cd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/bcfed4fa65cd"}, "html": {"href": "#!/cbillington/blacs/commits/bcfed4fa65cd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-12T23:45:12.457336+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101704053.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101704053"}}, "parent": {"id": 101703850, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101703850.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101703850"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "zprocess.utils.TimeoutError inherits ZMQError, so it should have been caught. Ah, what you're actually seeing is that in zprocess I accidentally raised python3's builtin TimeoutError instead of a zprocess.utils.TimeoutError. I will fix this in zproccess.\n\nAs for killing zlock while BLACS is running, all our programs are currently vulnerable to hangs and crashes from losing communication with zlock, so whilst there are now better tools in zprocess to deal with this, I think it's an issue for another pull request or several! ", "markup": "markdown", "html": "<p>zprocess.utils.TimeoutError inherits ZMQError, so it should have been caught. Ah, what you're actually seeing is that in zprocess I accidentally raised python3's builtin TimeoutError instead of a zprocess.utils.TimeoutError. I will fix this in zproccess.</p>\n<p>As for killing zlock while BLACS is running, all our programs are currently vulnerable to hangs and crashes from losing communication with zlock, so whilst there are now better tools in zprocess to deal with this, I think it's an issue for another pull request or several! </p>", "type": "rendered"}, "created_on": "2019-05-12T23:35:30.676874+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-12T23:35:30.687147+00:00", "type": "pullrequest_comment", "id": 101704053}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101703850.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101703850"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Cool. Two issues I noticed:\n\n1. Starting blacs without zlock server running fails. The two occurrences of `except zmq.ZMQError` in ls\\_zprocess.py of labscript\\_utils now need to be `except TimeoutError`.\n2. If communication with the zlock server is lost before closing blacs, it hangs on close with the following traceback, and `INFO BLACS: destroy called` filling the terminal.\n\n```\nTraceback (most recent call last):\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py\", line 61, in event\r\n    result = event.fn(*event.args, **event.kwargs)\r\n  File \"C:\\labscript_suite\\blacs\\__main__.py\", line 678, in on_save_exit\r\n    self.front_panel_settings.save_front_panel_to_h5(self.settings_path,data[0],data[1],data[2],data[3],{\"overwrite\":True},force_new_conn_table=True)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py\", line 228, in f\r\n    return inmain(fn, *args, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py\", line 102, in inmain\r\n    return fn(*args, **kwargs)\r\n  File \"C:\\labscript_suite\\blacs\\front_panel_settings.py\", line 284, in save_front_panel_to_h5\r\n    with h5py.File(current_file,'r+') as hdf5_file:\r\n  File \"C:\\labscript_suite\\labscript_utils\\h5_lock.py\", line 41, in __init__\r\n    self.zlock.acquire()\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zprocess\\zlock\\__init__.py\", line 243, in acquire\r\n    self._client_id = self.client.acquire(self.key, timeout, read_only)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zprocess\\zlock\\__init__.py\", line 161, in acquire\r\n    raise zmq.ZMQError('No response from zlock server: timed out')\r\nzmq.error.ZMQError: No response from zlock server: timed out\n```", "markup": "markdown", "html": "<p>Cool. Two issues I noticed:</p>\n<ol>\n<li>Starting blacs without zlock server running fails. The two occurrences of <code>except zmq.ZMQError</code> in ls_zprocess.py of labscript_utils now need to be <code>except TimeoutError</code>.</li>\n<li>If communication with the zlock server is lost before closing blacs, it hangs on close with the following traceback, and <code>INFO BLACS: destroy called</code> filling the terminal.</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>Traceback (most recent call last):\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py&quot;, line 61, in event\n    result = event.fn(*event.args, **event.kwargs)\n  File &quot;C:\\labscript_suite\\blacs\\__main__.py&quot;, line 678, in on_save_exit\n    self.front_panel_settings.save_front_panel_to_h5(self.settings_path,data[0],data[1],data[2],data[3],{&quot;overwrite&quot;:True},force_new_conn_table=True)\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py&quot;, line 228, in f\n    return inmain(fn, *args, **kwargs)\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\qtutils\\invoke_in_main.py&quot;, line 102, in inmain\n    return fn(*args, **kwargs)\n  File &quot;C:\\labscript_suite\\blacs\\front_panel_settings.py&quot;, line 284, in save_front_panel_to_h5\n    with h5py.File(current_file,&#39;r+&#39;) as hdf5_file:\n  File &quot;C:\\labscript_suite\\labscript_utils\\h5_lock.py&quot;, line 41, in __init__\n    self.zlock.acquire()\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zprocess\\zlock\\__init__.py&quot;, line 243, in acquire\n    self._client_id = self.client.acquire(self.key, timeout, read_only)\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\zprocess\\zlock\\__init__.py&quot;, line 161, in acquire\n    raise zmq.ZMQError(&#39;No response from zlock server: timed out&#39;)\nzmq.error.ZMQError: No response from zlock server: timed out\n</pre></div>", "type": "rendered"}, "created_on": "2019-05-12T23:24:08.737123+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-12T23:24:08.744541+00:00", "type": "pullrequest_comment", "id": 101703850}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "43c17859700c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/43c17859700c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/43c17859700c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "de8774c0e793", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/de8774c0e793"}, "html": {"href": "#!/cbillington/blacs/commits/de8774c0e793"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-12T23:18:31.126392+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101703554.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101703554"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "All known crashing/blocking issues are now resolved. This is mostly due to some work in zprocess that makes most blocking calls interruptible. This was somewhat invasive for zprocess, so whilst all its tests are passing, there is a higher than usual risk of bugs.\n\nSee [this commit message](#!/cbillington/blacs/commits/41bcea18bded6a4a6027a649e3a1ceb4b7da1380?at=default) for an explanation for most of what was changed in BLACS with regard to making everything interruptible and not blocking the main thread.\n\nI am pretty happy with this, but worth a stress test!", "markup": "markdown", "html": "<p>All known crashing/blocking issues are now resolved. This is mostly due to some work in zprocess that makes most blocking calls interruptible. This was somewhat invasive for zprocess, so whilst all its tests are passing, there is a higher than usual risk of bugs.</p>\n<p>See <a data-is-external-link=\"true\" href=\"#!/cbillington/blacs/commits/41bcea18bded6a4a6027a649e3a1ceb4b7da1380?at=default\" rel=\"nofollow\">this commit message</a> for an explanation for most of what was changed in BLACS with regard to making everything interruptible and not blocking the main thread.</p>\n<p>I am pretty happy with this, but worth a stress test!</p>", "type": "rendered"}, "created_on": "2019-05-12T23:08:00.080262+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-12T23:08:00.087128+00:00", "type": "pullrequest_comment", "id": 101703554}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03d31894eec0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/03d31894eec0"}, "html": {"href": "#!/cbillington/blacs/commits/03d31894eec0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-12T22:31:30.122294+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "41bcea18bded", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/41bcea18bded"}, "html": {"href": "#!/cbillington/blacs/commits/41bcea18bded"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-12T20:56:20.054553+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0ce5f10b3e01", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/0ce5f10b3e01"}, "html": {"href": "#!/cbillington/blacs/commits/0ce5f10b3e01"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-11T04:01:09.158136+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101560940.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101560940"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Agreed; the first issue is resolved \\(restarting failed tab after launching the server\\).", "markup": "markdown", "html": "<p>Agreed; the first issue is resolved (restarting failed tab after launching the server).</p>", "type": "rendered"}, "created_on": "2019-05-10T06:49:53.404519+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-10T06:49:53.418443+00:00", "type": "pullrequest_comment", "id": 101560940}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101555808.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101555808"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "OK, the issue with the bugfix2 branch interacting with remote processes is fixed in zprocess 2.13.4.", "markup": "markdown", "html": "<p>OK, the issue with the bugfix2 branch interacting with remote processes is fixed in zprocess 2.13.4.</p>", "type": "rendered"}, "created_on": "2019-05-10T05:52:18.754040+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-10T05:52:18.766931+00:00", "type": "pullrequest_comment", "id": 101555808}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101553629.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101553629"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "> I\u2019m seeing an issue where I open blacs with a tab that has a remote worker, without launching labscript_utils.remote. The tab fails to start, of course, but after starting the remote server and attempting to restart the tab, the whole GUI crashes.\n\nThanks, I can reproduce this. It doesn't happen on BLACS 2.6 + remote-workers, but it does happen once adding in bugfix2. So an issue with bugfix2 (or more likely, with the zprocess implementation enabling it). I will look into it.\n\nThe second issue, yes, I haven't resolved that yet. I still need to resolve:\n\n* terminate() is now remote and therefore a) blocking, and b) able to raise an exception and therefore is no bueno in a GUI thread.\n* BLACS hanging while sending data to subprocesses that have vanished since they started, because the zmq socket blocks when there are no connected peers.\n\nI can trivially turn the blocking parts of these issues into instant exceptions if not connected to a remote server, but I would really rather BLACS be able to weather ~1 second network glitches if at all possible, so I'm still thinking about this.", "markup": "markdown", "html": "<blockquote>\n<p>I\u2019m seeing an issue where I open blacs with a tab that has a remote worker, without launching labscript_utils.remote. The tab fails to start, of course, but after starting the remote server and attempting to restart the tab, the whole GUI crashes.</p>\n</blockquote>\n<p>Thanks, I can reproduce this. It doesn't happen on BLACS 2.6 + remote-workers, but it does happen once adding in bugfix2. So an issue with bugfix2 (or more likely, with the zprocess implementation enabling it). I will look into it.</p>\n<p>The second issue, yes, I haven't resolved that yet. I still need to resolve:</p>\n<ul>\n<li>terminate() is now remote and therefore a) blocking, and b) able to raise an exception and therefore is no bueno in a GUI thread.</li>\n<li>BLACS hanging while sending data to subprocesses that have vanished since they started, because the zmq socket blocks when there are no connected peers.</li>\n</ul>\n<p>I can trivially turn the blocking parts of these issues into instant exceptions if not connected to a remote server, but I would really rather BLACS be able to weather ~1 second network glitches if at all possible, so I'm still thinking about this.</p>", "type": "rendered"}, "created_on": "2019-05-10T05:15:12.272977+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-10T05:15:41.835194+00:00", "type": "pullrequest_comment", "id": 101553629}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101552578.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101552578"}}, "parent": {"id": 101552085, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101552085.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101552085"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "* zprocess 2.13.2\n* labscript\\_utils 2.12.4 \\+ bugfix \\+ modulewatcher-whitelist\n* blacs 2.6.0 \\+ remote-workers \\+ bugfix2\n\n", "markup": "markdown", "html": "<ul>\n<li>zprocess 2.13.2</li>\n<li>labscript_utils 2.12.4 + bugfix + modulewatcher-whitelist</li>\n<li>blacs 2.6.0 + remote-workers + bugfix2</li>\n</ul>", "type": "rendered"}, "created_on": "2019-05-10T04:53:07.465799+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-10T04:57:00.182162+00:00", "type": "pullrequest_comment", "id": 101552578}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101552285.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101552285"}}, "parent": {"id": 101552085, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101552085.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101552085"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Occasionally it does time out after ~ 1 minute. But BLACS is unresponsive until this occurs.", "markup": "markdown", "html": "<p>Occasionally it does time out after ~ 1 minute. But BLACS is unresponsive until this occurs.</p>", "type": "rendered"}, "created_on": "2019-05-10T04:46:59.404001+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-10T04:51:01.867455+00:00", "type": "pullrequest_comment", "id": 101552285}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101552085.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101552085"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "I\u2019m seeing an issue where I open blacs with a tab that has a remote worker, without launching labscript\\_utils.remote. The tab fails to start, of course, but after starting the remote server and attempting to restart the tab, the whole GUI crashes.\n\nEdit: Similarly, if I start with a working tab, then close the server, attempting to restart the tab kills the GUI.\n\nThis is tested using test.py in IMAQdxCamera.", "markup": "markdown", "html": "<p>I\u2019m seeing an issue where I open blacs with a tab that has a remote worker, without launching labscript_utils.remote. The tab fails to start, of course, but after starting the remote server and attempting to restart the tab, the whole GUI crashes.</p>\n<p>Edit: Similarly, if I start with a working tab, then close the server, attempting to restart the tab kills the GUI.</p>\n<p>This is tested using test.py in IMAQdxCamera.</p>", "type": "rendered"}, "created_on": "2019-05-10T04:43:00.842567+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-10T04:45:37.314386+00:00", "type": "pullrequest_comment", "id": 101552085}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "49cf3545d62f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/49cf3545d62f"}, "html": {"href": "#!/cbillington/blacs/commits/49cf3545d62f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-10T02:22:53.251488+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8ba0325c1cca", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/8ba0325c1cca"}, "html": {"href": "#!/cbillington/blacs/commits/8ba0325c1cca"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-10T02:21:31.392513+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101074802.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101074802"}}, "parent": {"id": 101074650, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101074650.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101074650"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Yep! I have not resolved the other issues raised in this thread though, so a bit more work to do. ", "markup": "markdown", "html": "<p>Yep! I have not resolved the other issues raised in this thread though, so a bit more work to do. </p>", "type": "rendered"}, "created_on": "2019-05-07T03:34:46.371976+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-07T03:34:46.381819+00:00", "type": "pullrequest_comment", "id": 101074802}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/101074650.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-101074650"}}, "parent": {"id": 100234172, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100234172.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100234172"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Is zprocess 2.13.1 an attempt to implement this?", "markup": "markdown", "html": "<p>Is zprocess 2.13.1 an attempt to implement this?</p>", "type": "rendered"}, "created_on": "2019-05-07T03:31:28.952375+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-07T03:31:28.962885+00:00", "type": "pullrequest_comment", "id": 101074650}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100369878.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100369878"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "The issue of BLACS blocking when sending messages to child processes that have died is a [bug in zmq](https://github.com/zeromq/libzmq/issues/179) as far as I can tell. We could work around it, but let\u2019s see if the zmq people say anything about it before doing anything.\n\nterminating the worker being a synchronous operation that runs in the GUI thread is a bad idea now that \\`.terminate\\(\\)\\` can be blocking, I will work out how to move that into the event loop so that failure can be caught properly and not block the GUI.\n\nAnd surprisingly, I think those two issues \\(plus making the server terminate its subprocesses upon exit\\) might be almost it for making remote process breakage handled about as sensibly as local ones.\n\n\u200c", "markup": "markdown", "html": "<p>The issue of BLACS blocking when sending messages to child processes that have died is a <a data-is-external-link=\"true\" href=\"https://github.com/zeromq/libzmq/issues/179\" rel=\"nofollow\">bug in zmq</a> as far as I can tell. We could work around it, but let\u2019s see if the zmq people say anything about it before doing anything.</p>\n<p>terminating the worker being a synchronous operation that runs in the GUI thread is a bad idea now that `.terminate()` can be blocking, I will work out how to move that into the event loop so that failure can be caught properly and not block the GUI.</p>\n<p>And surprisingly, I think those two issues (plus making the server terminate its subprocesses upon exit) might be almost it for making remote process breakage handled about as sensibly as local ones.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-29T20:26:41.429839+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-29T20:26:41.438938+00:00", "type": "pullrequest_comment", "id": 100369878}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238599.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238599"}}, "parent": {"id": 100238439, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238439.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238439"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Just to expand on this: strictly speaking, the server has one security key you need in order to talk to it, but in principle the processes it launches may use a different security key to talk to their parent - they will use whatever the parent tells them to use \\(that secret being communicated securely from the parent to the server, then passed to the child at startup\\). So the key being passed into the child processes is not necessarily even on that computer as a file \\(even though for labscript it will be\\). So if we passed it in by file, we would need to create a tempfile to do so. So environment variables make sense. `Popen()`  accepts an argument for environment variables - will have to modify this a little bit to be a copy of the _target_ environment plus the extra arg\\(s\\) \\(since the parent process might on a totally different OS where the environment variables don\u2019t make sense in the context of the other computer\\), but otherwise is straightforward.\n\n\u200c", "markup": "markdown", "html": "<p>Just to expand on this: strictly speaking, the server has one security key you need in order to talk to it, but in principle the processes it launches may use a different security key to talk to their parent - they will use whatever the parent tells them to use (that secret being communicated securely from the parent to the server, then passed to the child at startup). So the key being passed into the child processes is not necessarily even on that computer as a file (even though for labscript it will be). So if we passed it in by file, we would need to create a tempfile to do so. So environment variables make sense. <code>Popen()</code>  accepts an argument for environment variables - will have to modify this a little bit to be a copy of the <em>target</em> environment plus the extra arg(s) (since the parent process might on a totally different OS where the environment variables don\u2019t make sense in the context of the other computer), but otherwise is straightforward.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-29T01:37:51.277296+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-29T01:47:12.580663+00:00", "type": "pullrequest_comment", "id": 100238599}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238439.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238439"}}, "parent": {"id": 100237994, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100237994.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100237994"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "So it looks like on systems where users can\u2019t read each other\u2019s files, you could have the secret file owned by one user and not readable by others - which is how ssh secrets are generally stored in home directories on linux for example. So there is some benefit.  \nI can switch it pretty easily to being passed in as an environment variable that will be visible to only the process in question. I\u2019ll change it to do that for both local and remote processes for the shared secret. In fact, these command line arguments are pretty unwieldy - maybe we should just pass in the entire zprocess parentinfo dict as an environment variable.", "markup": "markdown", "html": "<p>So it looks like on systems where users can\u2019t read each other\u2019s files, you could have the secret file owned by one user and not readable by others - which is how ssh secrets are generally stored in home directories on linux for example. So there is some benefit.<br />\nI can switch it pretty easily to being passed in as an environment variable that will be visible to only the process in question. I\u2019ll change it to do that for both local and remote processes for the shared secret. In fact, these command line arguments are pretty unwieldy - maybe we should just pass in the entire zprocess parentinfo dict as an environment variable.</p>", "type": "rendered"}, "created_on": "2019-04-29T01:30:22.176766+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-29T01:30:22.185973+00:00", "type": "pullrequest_comment", "id": 100238439}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238372.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238372"}}, "parent": {"id": 100238176, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238176.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238176"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Presumably the file only needs to be readable by the user launching the process through. I\u2019m not sure if the same can be said for command line arguments \\(I tried to do some quick research but it wasn\u2019t clear\u2026which may be a reason to pass file paths as users likely understand the security implications of file permissions and probably won\u2019t understand the complexities of whether command line arguments are readable by other processes/users across all platforms\\). Not sure how easy it is to change to passing the filepath reference though.", "markup": "markdown", "html": "<p>Presumably the file only needs to be readable by the user launching the process through. I\u2019m not sure if the same can be said for command line arguments (I tried to do some quick research but it wasn\u2019t clear\u2026which may be a reason to pass file paths as users likely understand the security implications of file permissions and probably won\u2019t understand the complexities of whether command line arguments are readable by other processes/users across all platforms). Not sure how easy it is to change to passing the filepath reference though.</p>", "type": "rendered"}, "created_on": "2019-04-29T01:27:42.910015+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-04-29T01:27:42.919006+00:00", "type": "pullrequest_comment", "id": 100238372}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100238176.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100238176"}}, "parent": {"id": 100237994, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100237994.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100237994"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "It\u2019s a file on disk that will need to be readable without administrative permissions, so anyone logged in will be able to access it anyway, whether its as a file or a command line argument. I might read a little about whether this is considered bad practice, but  I\u2019m suspecting it\u2019s not, despite how it looks.", "markup": "markdown", "html": "<p>It\u2019s a file on disk that will need to be readable without administrative permissions, so anyone logged in will be able to access it anyway, whether its as a file or a command line argument. I might read a little about whether this is considered bad practice, but  I\u2019m suspecting it\u2019s not, despite how it looks.</p>", "type": "rendered"}, "created_on": "2019-04-29T01:19:45.120723+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-29T01:19:45.131577+00:00", "type": "pullrequest_comment", "id": 100238176}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100237994.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100237994"}}, "parent": {"id": 100230238, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100230238.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100230238"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Is it secure to pass the shared secret in as a command line argument? I thought secret information was typically shared using either files or environment variables because command line arguements can be read be other processes like `top` or task manager.", "markup": "markdown", "html": "<p>Is it secure to pass the shared secret in as a command line argument? I thought secret information was typically shared using either files or environment variables because command line arguements can be read be other processes like <code>top</code> or task manager.</p>", "type": "rendered"}, "created_on": "2019-04-29T01:12:22.542870+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-04-29T01:12:22.551765+00:00", "type": "pullrequest_comment", "id": 100237994}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100234172.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100234172"}}, "parent": {"id": 100234019, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100234019.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100234019"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Yeah, killing the processes on shutdown would probably be easier all things considered, in terms of implementation and how it would look from BLACS\u2019s perspective.  I\u2019ll aim for that then.", "markup": "markdown", "html": "<p>Yeah, killing the processes on shutdown would probably be easier all things considered, in terms of implementation and how it would look from BLACS\u2019s perspective.  I\u2019ll aim for that then.</p>", "type": "rendered"}, "created_on": "2019-04-28T21:58:55.850177+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-28T21:58:55.859319+00:00", "type": "pullrequest_comment", "id": 100234172}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100234019.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100234019"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Wouldn't it be better if all child processes get terminated when the zprocess.remote server is terminated \\(especially when it is done gracefully\\)?\n\n> I should change this to to either error right away or just queue to send later, so that it either be detected right away that the child process is dead \\(well, or the network is down\\), or so that the error becomes a timeout one instead of a hang.\n\nSounds good, and if the timeout error is raised, make it crash the tab rather than blacs.", "markup": "markdown", "html": "<p>Wouldn't it be better if all child processes get terminated when the zprocess.remote server is terminated (especially when it is done gracefully)?</p>\n<blockquote>\n<p>I should change this to to either error right away or just queue to send later, so that it either be detected right away that the child process is dead (well, or the network is down), or so that the error becomes a timeout one instead of a hang.</p>\n</blockquote>\n<p>Sounds good, and if the timeout error is raised, make it crash the tab rather than blacs.</p>", "type": "rendered"}, "created_on": "2019-04-28T21:46:55.193811+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-28T21:46:55.200369+00:00", "type": "pullrequest_comment", "id": 100234019}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100230238.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100230238"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Yes, the zprocess remote server only starts the processes, it doesn\u2019t play any role in their continued interaction with BLACS unless BLACS wants to call methods of the `Popen` object. I didn\u2019t expect the subprocesses to not be terminated when the server dies, but I guess that makes some kind of sense - it must be because their stdin and stdout/stderr are set to os.devnull, so that sort of detaches them from their parent process.\n\nIf the server dies, even if it is subsequently restarted, BLACS can\u2019t then terminate the processes normally since the newly running server doesn\u2019t know about them. However, the subprocesses are still heartbeating back to BLACS, so they will die if BLACS closes.\n\nAll this is to say that yes, BLACS is fragile to the remote process server stopping, and really needs it to be running continuously. We could make it more robust, but it\u2019s worth pointing out that this is no different to zlock - BLACS \\(and other programs\\) don\u2019t recover well if the zlock server goes down \\(though it merely restarting is fine, so that\u2019s one difference\\).\n\nSo firstly I could go through BLACS for every place it calls a method on a subprocess, and modify all the calls so that they a\\) don\u2019t block the GUI and b\\) handle the timeout error sensibly and recoverably. This should also be done for interaction with HDF5 files, to make zlock failures not take down the whole program as well.\n\nI\u2019m not sure why BLACS should get stuck in \u2018State: \\_transition\\_to\\_buffered \\(GUI\\)\u2019. That shouldn\u2019t involve waiting on the child process - will need to look into that. Perhaps the zmq sockets we\u2019re using are the kind where if they can\u2019t send, they block. If so, I should change this to to either error right away or just queue to send later, so that it either be detected right away that the child process is dead \\(well, or the network is down\\), or so that the error becomes a timeout one instead of a hang.\n\nAlso, I could make the zprocess.remote server have some disk persistence. Perhaps when it is closed cleanly by the user, it could write to disk the current process list so that its state could be restored upon restart. Though it probably won\u2019t save the command line of the processes, or if it does it will need to be encrypted with the shared secret, since they contain the shared secret, so wouldn\u2019t want to leak that. Alternately, I could make it that if the server receives a request for a process ID number it doesn\u2019t know about, it could go ahead and run the requested method anyway - using the os module functions that accept a pid, since the server wouldn\u2019t have a Popen object. If the server resumed its state in any way, it would need to do that anyway, since it would only have pids and not the Popen objects upon restarting.", "markup": "markdown", "html": "<p>Yes, the zprocess remote server only starts the processes, it doesn\u2019t play any role in their continued interaction with BLACS unless BLACS wants to call methods of the <code>Popen</code> object. I didn\u2019t expect the subprocesses to not be terminated when the server dies, but I guess that makes some kind of sense - it must be because their stdin and stdout/stderr are set to os.devnull, so that sort of detaches them from their parent process.</p>\n<p>If the server dies, even if it is subsequently restarted, BLACS can\u2019t then terminate the processes normally since the newly running server doesn\u2019t know about them. However, the subprocesses are still heartbeating back to BLACS, so they will die if BLACS closes.</p>\n<p>All this is to say that yes, BLACS is fragile to the remote process server stopping, and really needs it to be running continuously. We could make it more robust, but it\u2019s worth pointing out that this is no different to zlock - BLACS (and other programs) don\u2019t recover well if the zlock server goes down (though it merely restarting is fine, so that\u2019s one difference).</p>\n<p>So firstly I could go through BLACS for every place it calls a method on a subprocess, and modify all the calls so that they a) don\u2019t block the GUI and b) handle the timeout error sensibly and recoverably. This should also be done for interaction with HDF5 files, to make zlock failures not take down the whole program as well.</p>\n<p>I\u2019m not sure why BLACS should get stuck in \u2018State: _transition_to_buffered (GUI)\u2019. That shouldn\u2019t involve waiting on the child process - will need to look into that. Perhaps the zmq sockets we\u2019re using are the kind where if they can\u2019t send, they block. If so, I should change this to to either error right away or just queue to send later, so that it either be detected right away that the child process is dead (well, or the network is down), or so that the error becomes a timeout one instead of a hang.</p>\n<p>Also, I could make the zprocess.remote server have some disk persistence. Perhaps when it is closed cleanly by the user, it could write to disk the current process list so that its state could be restored upon restart. Though it probably won\u2019t save the command line of the processes, or if it does it will need to be encrypted with the shared secret, since they contain the shared secret, so wouldn\u2019t want to leak that. Alternately, I could make it that if the server receives a request for a process ID number it doesn\u2019t know about, it could go ahead and run the requested method anyway - using the os module functions that accept a pid, since the server wouldn\u2019t have a Popen object. If the server resumed its state in any way, it would need to do that anyway, since it would only have pids and not the Popen objects upon restarting.</p>", "type": "rendered"}, "created_on": "2019-04-28T15:51:10.041640+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-28T15:57:35.832672+00:00", "type": "pullrequest_comment", "id": 100230238}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100224954.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100224954"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "There's ill-defined behaviour when `labscript_utils.remote` is terminated \\(by pressing Ctrl \\+ C or Q in the `zprocess.remote` terminal\\):\n\n1. There\u2019s no indication in blacs that this has happened.\n2. Shots subsequently added to the queue actually run \\(!\\).\n3. Clicking on the restart icon results in:\n\n    * No change to the tab \\(including state\\) for about 5 seconds;\n    * The whole blacs GUI hanging for about 5-10 seconds;\n    * An unhandled `zprocess.utils.TimeoutError`in a pop-up rather than the tab.\n    \n\n![](data/bitbucket.org/repo/dR5qxr/images/1115376628-ruHyqp9Cst.gif)\n\u200c\n\nDismissing the exception dialogue, the tab still appears to be alive \\(green tick in corner, state: idle\\). Shots can be added to the queue and still run, i.e. item 2 above is persistent.\n\nLooking into item \\(2\\) above:\n\nWhen first starting `labscript_utils.remote`, the following Python processes begin \\(indentation denotes sub-process\\):\n\n* `python -m labscript_utils.remote`\n\n    * `C:\\ProgramData\\Anaconda3\\python.exe -m zprocess.remote --port 7341 -tui --shared_secret_file <path_to_shared_secret>`\n    \n        * `C:\\ProgramData\\Anaconda3\\python.exe -m zprocess.process_class_wrapper --zprocess-parentinfo \"{\\\"parent_host\\\": \\\"192.168.0.3\\\", \\\"to_parent_port\\\": 54791, \\\"from_parent_port\\\": 54793, \\\"heartbeat_server_host\\\": \\\"192.168.0.3\\\", \\\"heartbeat_server_port\\\": 54544, \\\"broker_host\\\": \\\"192.168.0.3\\\", \\\"broker_in_port\\\": 54502, \\\"broker_out_port\\\": 54503, \\\"output_redirection_host\\\": \\\"192.168.0.3\\\", \\\"output_redirection_port\\\": 54774, \\\"shared_secret\\\": \\\"ZDUys7s8lM22F9epAIGeD2KyoSAcygaXaJrQ5w0/k2LHVpeK6thnofXN4C287U41K/3j6TX74zbLLlBx7dx6IA==\\\", \\\"allow_insecure\\\": false, \\\"zlock_host\\\": \\\"192.168.0.3\\\", \\\"zlock_port\\\": \\\"7339\\\", \\\"zlock_process_name\\\": \\\"BLACS\\\", \\\"zlog_host\\\": \\\"192.168.0.3\\\", \\\"zlog_port\\\": 7340, \\\"log_paths\\\": {\\\"BLACS\\\": \\\"C:\\\\labscript_suite\\\\BLACS\\\\BLACS.log\\\"}}\"`\n        \n    \n\nThe final process begins only upon connection to the `zprocess.remote` server by the blacs tab, and is not terminated when the two parent processes are \\(which is why shots can still run\\).\n\nUpon killing the rogue process:\n\n1. There\u2019s no indication in blacs that this has happened.\n2. Shots added to the queue fail to run, getting stuck in \u2018State: \\_transition\\_to\\_buffered \\(GUI\\)\u2019 and halting the queue indefinitely.\n3. Attempting to restart the tab while in this state results in similar observations to \\(3\\) above, except that the tab remains in the hung state after dismissing the `zprocess.utils.TimeoutError`.\n4. If instead of \\(2\\), the tab is attempted to be restarted \\(before any shots are added\\), the tab gets stuck in the following state indefinitely:\n\n![](data/bitbucket.org/repo/dR5qxr/images/1926582354-camera0.png)\n\u200c\n\nIn any case, if the rogue process is killed and any of items \\(2\\)-\\(4\\) above are observed, blacs must be restarted entirely.", "markup": "markdown", "html": "<p>There's ill-defined behaviour when <code>labscript_utils.remote</code> is terminated (by pressing Ctrl + C or Q in the <code>zprocess.remote</code> terminal):</p>\n<ol>\n<li>There\u2019s no indication in blacs that this has happened.</li>\n<li>Shots subsequently added to the queue actually run (!).</li>\n<li>\n<p>Clicking on the restart icon results in:</p>\n<ul>\n<li>No change to the tab (including state) for about 5 seconds;</li>\n<li>The whole blacs GUI hanging for about 5-10 seconds;</li>\n<li>An unhandled <code>zprocess.utils.TimeoutError</code>in a pop-up rather than the tab.</li>\n</ul>\n</li>\n</ol>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/dR5qxr/images/1115376628-ruHyqp9Cst.gif\" />\n\u200c</p>\n<p>Dismissing the exception dialogue, the tab still appears to be alive (green tick in corner, state: idle). Shots can be added to the queue and still run, i.e. item 2 above is persistent.</p>\n<p>Looking into item (2) above:</p>\n<p>When first starting <code>labscript_utils.remote</code>, the following Python processes begin (indentation denotes sub-process):</p>\n<ul>\n<li>\n<p><code>python -m labscript_utils.remote</code></p>\n<ul>\n<li>\n<p><code>C:\\ProgramData\\Anaconda3\\python.exe -m zprocess.remote --port 7341 -tui --shared_secret_file &lt;path_to_shared_secret&gt;</code></p>\n<ul>\n<li><code>C:\\ProgramData\\Anaconda3\\python.exe -m zprocess.process_class_wrapper --zprocess-parentinfo \"{\\\"parent_host\\\": \\\"192.168.0.3\\\", \\\"to_parent_port\\\": 54791, \\\"from_parent_port\\\": 54793, \\\"heartbeat_server_host\\\": \\\"192.168.0.3\\\", \\\"heartbeat_server_port\\\": 54544, \\\"broker_host\\\": \\\"192.168.0.3\\\", \\\"broker_in_port\\\": 54502, \\\"broker_out_port\\\": 54503, \\\"output_redirection_host\\\": \\\"192.168.0.3\\\", \\\"output_redirection_port\\\": 54774, \\\"shared_secret\\\": \\\"ZDUys7s8lM22F9epAIGeD2KyoSAcygaXaJrQ5w0/k2LHVpeK6thnofXN4C287U41K/3j6TX74zbLLlBx7dx6IA==\\\", \\\"allow_insecure\\\": false, \\\"zlock_host\\\": \\\"192.168.0.3\\\", \\\"zlock_port\\\": \\\"7339\\\", \\\"zlock_process_name\\\": \\\"BLACS\\\", \\\"zlog_host\\\": \\\"192.168.0.3\\\", \\\"zlog_port\\\": 7340, \\\"log_paths\\\": {\\\"BLACS\\\": \\\"C:\\\\labscript_suite\\\\BLACS\\\\BLACS.log\\\"}}\"</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>The final process begins only upon connection to the <code>zprocess.remote</code> server by the blacs tab, and is not terminated when the two parent processes are (which is why shots can still run).</p>\n<p>Upon killing the rogue process:</p>\n<ol>\n<li>There\u2019s no indication in blacs that this has happened.</li>\n<li>Shots added to the queue fail to run, getting stuck in \u2018State: _transition_to_buffered (GUI)\u2019 and halting the queue indefinitely.</li>\n<li>Attempting to restart the tab while in this state results in similar observations to (3) above, except that the tab remains in the hung state after dismissing the <code>zprocess.utils.TimeoutError</code>.</li>\n<li>If instead of (2), the tab is attempted to be restarted (before any shots are added), the tab gets stuck in the following state indefinitely:</li>\n</ol>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/dR5qxr/images/1926582354-camera0.png\" />\n\u200c</p>\n<p>In any case, if the rogue process is killed and any of items (2)-(4) above are observed, blacs must be restarted entirely.</p>", "type": "rendered"}, "created_on": "2019-04-28T08:50:01.015384+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-28T11:44:19.395658+00:00", "type": "pullrequest_comment", "id": 100224954}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100225032.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100225032"}}, "parent": {"id": 100216145, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100216145.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100216145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Per the [associated labscript\\_utils pull request](#!/labscript_suite/labscript_utils/pull-requests/77/fixes-for-remote-workers), you have to explicitly disable insecure connections \\(prior to zprocess 3\\), in addition to specifying the `shared_secret`, i.e. this part of the pull request should read:\n\n```\n[security]\nallow_insecure = False\nshared_secret=<path to shared secret file>\n```", "markup": "markdown", "html": "<p>Per the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/77/fixes-for-remote-workers\" rel=\"nofollow\">associated labscript_utils pull request</a>, you have to explicitly disable insecure connections (prior to zprocess 3), in addition to specifying the <code>shared_secret</code>, i.e. this part of the pull request should read:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[security]</span>\n<span class=\"na\">allow_insecure</span> <span class=\"o\">=</span> <span class=\"s\">False</span>\n<span class=\"na\">shared_secret</span><span class=\"o\">=</span><span class=\"s\">&lt;path to shared secret file&gt;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2019-04-28T08:55:22.359853+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-28T08:55:22.374166+00:00", "type": "pullrequest_comment", "id": 100225032}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100221476.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100221476"}}, "parent": {"id": 100217568, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100217568.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100217568"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Confirming the change to zprocess fixes the issue with repeatedly restarting the tab \\(before the worker process has started\\).", "markup": "markdown", "html": "<p>Confirming the change to zprocess fixes the issue with repeatedly restarting the tab (before the worker process has started).</p>", "type": "rendered"}, "created_on": "2019-04-28T00:26:36.307643+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-28T00:26:48.524110+00:00", "type": "pullrequest_comment", "id": 100221476}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100217568.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100217568"}}, "parent": {"id": 100216145, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100216145.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100216145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "So it looks like the issue here is when you tap restart twice quickly in a row, such that the current worker process has not started yet before you click restart, then the subprocess gets killed, but the BLACS tab\u2019s mainloop is still waiting for the initial \u2018hello\u2019 indicating that the worker process has started. So BLACS hangs for 30 seconds waiting for that to come though it never does.\n\nThe fix is to change zprocess to break out of waiting for the startup response if the process is terminated.\n\nThis bug was present already without remote workers, I can trigger it with local workers. Nonetheless will fix in zprocess.\n\nEdit: [fixed in zprocess](https://bitbucket.org/cbillington/zprocess/commits/139dcc6a98451b335eae46554efc13b28cdbd59e)", "markup": "markdown", "html": "<p>So it looks like the issue here is when you tap restart twice quickly in a row, such that the current worker process has not started yet before you click restart, then the subprocess gets killed, but the BLACS tab\u2019s mainloop is still waiting for the initial \u2018hello\u2019 indicating that the worker process has started. So BLACS hangs for 30 seconds waiting for that to come though it never does.</p>\n<p>The fix is to change zprocess to break out of waiting for the startup response if the process is terminated.</p>\n<p>This bug was present already without remote workers, I can trigger it with local workers. Nonetheless will fix in zprocess.</p>\n<p>Edit: <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/commits/139dcc6a98451b335eae46554efc13b28cdbd59e\" rel=\"nofollow\">fixed in zprocess</a></p>", "type": "rendered"}, "created_on": "2019-04-27T14:10:27.980552+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-27T14:18:22.604253+00:00", "type": "pullrequest_comment", "id": 100217568}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100217388.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100217388"}}, "parent": {"id": 100216145, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100216145.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100216145"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Thanks for testing!\n\nI am able to reproduce the restarting bug, though it _eventually_ does restart, it just takes ~30 seconds. Here\u2019s the log I see:\n\n```\n[2019-04-27 09:40:24,832] INFO 127.0.0.1: whoami\n[2019-04-27 09:40:24,834] INFO 127.0.0.1: Popen\n[2019-04-27 09:40:25,369] INFO 127.0.0.1: terminate 30940\n[2019-04-27 09:40:25,371] INFO 127.0.0.1: wait 30940\n[2019-04-27 09:40:54,950] INFO 127.0.0.1: del 30940\n[2019-04-27 09:40:55,037] INFO 127.0.0.1: whoami\n[2019-04-27 09:40:55,040] INFO 127.0.0.1: Popen\n```\n\n`whoami` followed by `Popen` is starting a subprocess, `terminate` followed by `wait` and `del` are ending a process. So there\u2019s a very long delay between `wait` and `del` for some reason. I\u2019ll investigate. There is a 5-second communication timeout, so this makes me think the problem is on BLACS\u2019s side, since if it were the server hanging we should see a timeout error.\n\n\u200c", "markup": "markdown", "html": "<p>Thanks for testing!</p>\n<p>I am able to reproduce the restarting bug, though it <em>eventually</em> does restart, it just takes ~30 seconds. Here\u2019s the log I see:</p>\n<div class=\"codehilite\"><pre><span></span>[2019-04-27 09:40:24,832] INFO 127.0.0.1: whoami\n[2019-04-27 09:40:24,834] INFO 127.0.0.1: Popen\n[2019-04-27 09:40:25,369] INFO 127.0.0.1: terminate 30940\n[2019-04-27 09:40:25,371] INFO 127.0.0.1: wait 30940\n[2019-04-27 09:40:54,950] INFO 127.0.0.1: del 30940\n[2019-04-27 09:40:55,037] INFO 127.0.0.1: whoami\n[2019-04-27 09:40:55,040] INFO 127.0.0.1: Popen\n</pre></div>\n\n\n<p><code>whoami</code> followed by <code>Popen</code> is starting a subprocess, <code>terminate</code> followed by <code>wait</code> and <code>del</code> are ending a process. So there\u2019s a very long delay between <code>wait</code> and <code>del</code> for some reason. I\u2019ll investigate. There is a 5-second communication timeout, so this makes me think the problem is on BLACS\u2019s side, since if it were the server hanging we should see a timeout error.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-27T13:51:36.526089+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-27T13:51:36.536110+00:00", "type": "pullrequest_comment", "id": 100217388}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100216145.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100216145"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Confirming this works as advertised with both `shared_secret` and `allow_insecure`, with the remote instance running locally and on another host, using [test.py](#!/cbillington/labscript_devices/src/31043a505e342c08326648feb472c99c1526b013/IMAQdxCamera/testing/test.py?at=default&fileviewer=file-view-default) in the IMAQdxCamera branch of labscript\\_devices as the experiment script \\(and connection table\\).", "markup": "markdown", "html": "<p>Confirming this works as advertised with both <code>shared_secret</code> and <code>allow_insecure</code>, with the remote instance running locally and on another host, using <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_devices/src/31043a505e342c08326648feb472c99c1526b013/IMAQdxCamera/testing/test.py?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">test.py</a> in the IMAQdxCamera branch of labscript_devices as the experiment script (and connection table).</p>", "type": "rendered"}, "created_on": "2019-04-27T11:31:57.722582+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-27T11:32:41.816161+00:00", "type": "pullrequest_comment", "id": 100216145}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100214661.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100214661"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "When restarting a remote device, I occasionally see a bug where it fails to restart.\n\n![](data/bitbucket.org/repo/dR5qxr/images/2642137258-8VsVBI1Se4.gif)\n", "markup": "markdown", "html": "<p>When restarting a remote device, I occasionally see a bug where it fails to restart.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/dR5qxr/images/2642137258-8VsVBI1Se4.gif\" /></p>", "type": "rendered"}, "created_on": "2019-04-27T08:28:25.163250+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-27T08:28:25.169668+00:00", "type": "pullrequest_comment", "id": 100214661}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/100213604.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-100213604"}}, "parent": {"id": 99885771, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/99885771.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-99885771"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Thanks. This also requires recompiling the connection table so that the port used by the device tab gets updated.", "markup": "markdown", "html": "<p>Thanks. This also requires recompiling the connection table so that the port used by the device tab gets updated.</p>", "type": "rendered"}, "created_on": "2019-04-27T05:45:01.766244+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-27T05:45:01.775394+00:00", "type": "pullrequest_comment", "id": 100213604}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c19f9cfa9355", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/c19f9cfa9355"}, "html": {"href": "#!/cbillington/blacs/commits/c19f9cfa9355"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-25T03:29:27.619747+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.3, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c19f9cfa9355", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/c19f9cfa9355"}, "html": {"href": "#!/cbillington/blacs/commits/c19f9cfa9355"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-24T23:29:04.652002+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments/99885771.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67/_/diff#comment-99885771"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}, "content": {"raw": "Note that either [labscript pull request 46](#!/labscript_suite/labscript/pull-requests/46/) or manually setting the port number to 7341 in your RemoteBLACS\\(\\) instantiation is needed, otherwise the remote device will expect to use 7340, which is actually the zlog server port.", "markup": "markdown", "html": "<p>Note that either <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/pull-requests/46/\" rel=\"nofollow\">labscript pull request 46</a> or manually setting the port number to 7341 in your RemoteBLACS() instantiation is needed, otherwise the remote device will expect to use 7340, which is actually the zlog server port.</p>", "type": "rendered"}, "created_on": "2019-04-24T18:23:55.490816+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-24T18:23:55.503024+00:00", "type": "pullrequest_comment", "id": 99885771}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.3, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f1307f170c5a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/f1307f170c5a"}, "html": {"href": "#!/cbillington/blacs/commits/f1307f170c5a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-24T18:14:51.077899+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.3, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f1307f170c5a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/f1307f170c5a"}, "html": {"href": "#!/cbillington/blacs/commits/f1307f170c5a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-24T18:13:58.630166+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}, {"update": {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.3, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "title": "Implement remote workers in BLACS", "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f1307f170c5a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/f1307f170c5a"}, "html": {"href": "#!/cbillington/blacs/commits/f1307f170c5a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-24T18:13:30.933457+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}}, "title": "Implement remote workers in BLACS"}}], "next": "data/repositories/labscript_suite/blacs/pullrequests/67/activity_ctx=o4IXMCb.json"}