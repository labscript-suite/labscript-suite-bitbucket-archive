{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/7/comments/38935465.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/7/_/diff#comment-38935465"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 7, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/7.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/7"}}, "title": "Icons and some pixel-saving"}, "content": {"raw": "Actually I have a better solution. Let the name and connection be on separate lines (good for if they are long!), on the same row as the buttons - but shrink the buttons to have no text.\n\nBelow I've shrank the restart button and replaced the smart programming checkbox with a button. It's not a checkbutton, it's just a regular button for clearing the smart programming cache. This is how the \"refresh smart programming\" checkbox works already in essence, it does not remain checked, it gets automatically unchecked again after the next `transition_to_buffered()`.  So checking it essentially said \"please clear the smart programming cache\", the only difference being that you could uncheck it before the next `transition_to_buffered()` in order to change your mind. So I've now replaced it with a button which does the same thing except you can't change your mind - it greys out once you click it, and is re-enabled after `transition_to_buffered()` the same way as the checkbox was unchecked after `transition_to_buffered()`. This is a 4-line change in code (there are other changed lines but they are just renames of the button):\n\n\n```\n#!diff\ndiff -r 2a757fed2b41 tab_base_classes.py\n--- a/tab_base_classes.py\tThu Jun 15 12:22:45 2017 -0400\n+++ b/tab_base_classes.py\tThu Jun 15 14:58:12 2017 -0400\n@@ -257,8 +257,8 @@\n         self.BLACS_connection = self.settings['connection_table'].find_by_name(self.device_name).BLACS_connection\n         self._ui.device_name.setText(\"<b>%s</b> <br />Connection: %s\"%(str(self.device_name),str(self.BLACS_connection)))\n         # connect signals\n-        self._ui.smart_programming.toggled.connect(self.on_force_full_buffered_reprogram)\n-        self._ui.smart_programming.setEnabled(False)\n+        self._ui.button_clear_smart_programming.clicked.connect(self.on_force_full_buffered_reprogram)\n+        self._ui.button_clear_smart_programming.setEnabled(False)\n         self.force_full_buffered_reprogram = True\n         self._ui.button_close.clicked.connect(self.hide_error)\n         self._ui.button_restart.clicked.connect(self.restart)        \n@@ -288,13 +288,13 @@\n     def supports_smart_programming(self,support):\n         self._supports_smart_programming = bool(support)\n         if self._supports_smart_programming:\n-            self._ui.smart_programming.show()\n+            self._ui.button_clear_smart_programming.show()\n         else:\n-            self._ui.smart_programming.hide()\n+            self._ui.button_clear_smart_programming.hide()\n     \n-    def on_force_full_buffered_reprogram(self,toggled):\n-        self.force_full_buffered_reprogram = toggled\n-    \n+    def on_force_full_buffered_reprogram(self):\n+        self.force_full_buffered_reprogram = True\n+\n     @property\n     def force_full_buffered_reprogram(self):\n         return self._force_full_buffered_reprogram\n@@ -302,7 +302,7 @@\n     @force_full_buffered_reprogram.setter\n     def force_full_buffered_reprogram(self,value):\n         self._force_full_buffered_reprogram = bool(value)\n-        self._ui.smart_programming.setChecked(bool(value))\n+        self._ui.button_clear_smart_programming.setEnabled(not bool(value))\n     \n     @property\n     @inmain_decorator(True)\n\n```\n\nAnd it looks like this:\n\n![blacs_smart_1.png](data/bitbucket.org/repo/dR5qxr/images/2623603173-blacs_smart_1.png)\n\n![blacs_smart_2.png](data/bitbucket.org/repo/dR5qxr/images/1569926385-blacs_smart_2.png)\n\n![blacs_smart_3.png](data/bitbucket.org/repo/dR5qxr/images/1348597199-blacs_smart_3.png)\n\nAllows for things to be very compact. The icon by the way is a brain with a minus sign to represent clearing the \"smart programming\" cache.\n\nThis is pushed to the pull request if anyone wants to test if I haven't caused any regressions, since I've done what I can but my ability to test this is limited.\n\n", "markup": "markdown", "html": "<p>Actually I have a better solution. Let the name and connection be on separate lines (good for if they are long!), on the same row as the buttons - but shrink the buttons to have no text.</p>\n<p>Below I've shrank the restart button and replaced the smart programming checkbox with a button. It's not a checkbutton, it's just a regular button for clearing the smart programming cache. This is how the \"refresh smart programming\" checkbox works already in essence, it does not remain checked, it gets automatically unchecked again after the next <code>transition_to_buffered()</code>.  So checking it essentially said \"please clear the smart programming cache\", the only difference being that you could uncheck it before the next <code>transition_to_buffered()</code> in order to change your mind. So I've now replaced it with a button which does the same thing except you can't change your mind - it greys out once you click it, and is re-enabled after <code>transition_to_buffered()</code> the same way as the checkbox was unchecked after <code>transition_to_buffered()</code>. This is a 4-line change in code (there are other changed lines but they are just renames of the button):</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 2a757fed2b41 tab_base_classes.py</span>\n<span class=\"gd\">--- a/tab_base_classes.py   Thu Jun 15 12:22:45 2017 -0400</span>\n<span class=\"gi\">+++ b/tab_base_classes.py   Thu Jun 15 14:58:12 2017 -0400</span>\n<span class=\"gu\">@@ -257,8 +257,8 @@</span>\n         self.BLACS_connection = self.settings[&#39;connection_table&#39;].find_by_name(self.device_name).BLACS_connection\n         self._ui.device_name.setText(&quot;&lt;b&gt;%s&lt;/b&gt; &lt;br /&gt;Connection: %s&quot;%(str(self.device_name),str(self.BLACS_connection)))\n         # connect signals\n<span class=\"gd\">-        self._ui.smart_programming.toggled.connect(self.on_force_full_buffered_reprogram)</span>\n<span class=\"gd\">-        self._ui.smart_programming.setEnabled(False)</span>\n<span class=\"gi\">+        self._ui.button_clear_smart_programming.clicked.connect(self.on_force_full_buffered_reprogram)</span>\n<span class=\"gi\">+        self._ui.button_clear_smart_programming.setEnabled(False)</span>\n         self.force_full_buffered_reprogram = True\n         self._ui.button_close.clicked.connect(self.hide_error)\n         self._ui.button_restart.clicked.connect(self.restart)        \n<span class=\"gu\">@@ -288,13 +288,13 @@</span>\n     def supports_smart_programming(self,support):\n         self._supports_smart_programming = bool(support)\n         if self._supports_smart_programming:\n<span class=\"gd\">-            self._ui.smart_programming.show()</span>\n<span class=\"gi\">+            self._ui.button_clear_smart_programming.show()</span>\n         else:\n<span class=\"gd\">-            self._ui.smart_programming.hide()</span>\n<span class=\"gi\">+            self._ui.button_clear_smart_programming.hide()</span>\n\n<span class=\"gd\">-    def on_force_full_buffered_reprogram(self,toggled):</span>\n<span class=\"gd\">-        self.force_full_buffered_reprogram = toggled</span>\n<span class=\"gd\">-    </span>\n<span class=\"gi\">+    def on_force_full_buffered_reprogram(self):</span>\n<span class=\"gi\">+        self.force_full_buffered_reprogram = True</span>\n<span class=\"gi\">+</span>\n     @property\n     def force_full_buffered_reprogram(self):\n         return self._force_full_buffered_reprogram\n<span class=\"gu\">@@ -302,7 +302,7 @@</span>\n     @force_full_buffered_reprogram.setter\n     def force_full_buffered_reprogram(self,value):\n         self._force_full_buffered_reprogram = bool(value)\n<span class=\"gd\">-        self._ui.smart_programming.setChecked(bool(value))</span>\n<span class=\"gi\">+        self._ui.button_clear_smart_programming.setEnabled(not bool(value))</span>\n\n     @property\n     @inmain_decorator(True)\n</pre></div>\n\n\n<p>And it looks like this:</p>\n<p><img alt=\"blacs_smart_1.png\" src=\"data/bitbucket.org/repo/dR5qxr/images/2623603173-blacs_smart_1.png\" /></p>\n<p><img alt=\"blacs_smart_2.png\" src=\"data/bitbucket.org/repo/dR5qxr/images/1569926385-blacs_smart_2.png\" /></p>\n<p><img alt=\"blacs_smart_3.png\" src=\"data/bitbucket.org/repo/dR5qxr/images/1348597199-blacs_smart_3.png\" /></p>\n<p>Allows for things to be very compact. The icon by the way is a brain with a minus sign to represent clearing the \"smart programming\" cache.</p>\n<p>This is pushed to the pull request if anyone wants to test if I haven't caused any regressions, since I've done what I can but my ability to test this is limited.</p>", "type": "rendered"}, "created_on": "2017-06-15T19:11:52.989057+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-15T19:11:53.014971+00:00", "type": "pullrequest_comment", "id": 38935465}