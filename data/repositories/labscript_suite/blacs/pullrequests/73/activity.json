{"pagelen": 50, "values": [{"update": {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "title": "Deserialise transition to manual and implement start_order and stop_order", "destination": {"commit": {"hash": "f2b66b426b03", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/f2b66b426b03.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/f2b66b426b03"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "832987fd9392", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/832987fd9392"}, "html": {"href": "#!/cbillington/blacs/commits/832987fd9392"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T16:37:48.408033+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"update": {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "title": "Deserialise transition to manual and implement start_order and stop_order", "destination": {"commit": {"hash": "f2b66b426b03", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/f2b66b426b03.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/f2b66b426b03"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "832987fd9392", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/832987fd9392"}, "html": {"href": "#!/cbillington/blacs/commits/832987fd9392"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T16:37:47.634386+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/comments/104181655.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73/_/diff#comment-104181655"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}, "content": {"raw": "This is working well. Merging.", "markup": "markdown", "html": "<p>This is working well. Merging.</p>", "type": "rendered"}, "created_on": "2019-06-01T16:37:32.780850+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-01T16:37:32.787679+00:00", "type": "pullrequest_comment", "id": 104181655}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"update": {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "title": "Deserialise transition to manual and implement start_order and stop_order", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "832987fd9392", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/832987fd9392"}, "html": {"href": "#!/cbillington/blacs/commits/832987fd9392"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-17T18:05:16.071415+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/comments/102396388.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73/_/diff#comment-102396388"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}, "content": {"raw": "Another issue phil raised in the PR #47 thread is that, since the only way to break out of a hanging transition_to_manual is by restarting the device, a zombie process may write to the file after it has been 'cleaned' to be re-run. I think this is resolved. zprocess calls `terminate()` followed by `wait()` on the subprocess - this blocks until the process has exited and returned with a return code, so there are no zombies.\n\nAnother issue still exists though, and it's one that exists everywhere in labscript - that killing a child process whilst it has a HDF5 file open may a) corrupt data and b) not release the zlock, which could hang other processes for some tens of seconds I think. I think we can get around this. The 'kill lock' that prevents processes from terminating themselves when they don't get heartbeats from their parent could be extended to prevent all termination (you can just tell a process to ignore SIGTERM - or delay their response to it) while it is held. So we could make processes not die until they have closed the HDF5 file. I will think about implementing this in zprocess.", "markup": "markdown", "html": "<p>Another issue phil raised in the <a href=\"#!/labscript_suite/blacs/pull-requests/47/deserialise-transition_to_manual\" rel=\"nofollow\" class=\"ap-connect-link\">PR #47</a> thread is that, since the only way to break out of a hanging transition_to_manual is by restarting the device, a zombie process may write to the file after it has been 'cleaned' to be re-run. I think this is resolved. zprocess calls <code>terminate()</code> followed by <code>wait()</code> on the subprocess - this blocks until the process has exited and returned with a return code, so there are no zombies.</p>\n<p>Another issue still exists though, and it's one that exists everywhere in labscript - that killing a child process whilst it has a HDF5 file open may a) corrupt data and b) not release the zlock, which could hang other processes for some tens of seconds I think. I think we can get around this. The 'kill lock' that prevents processes from terminating themselves when they don't get heartbeats from their parent could be extended to prevent all termination (you can just tell a process to ignore SIGTERM - or delay their response to it) while it is held. So we could make processes not die until they have closed the HDF5 file. I will think about implementing this in zprocess.</p>", "type": "rendered"}, "created_on": "2019-05-17T04:05:50.899307+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-17T04:05:50.906588+00:00", "type": "pullrequest_comment", "id": 102396388}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"update": {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "title": "Deserialise transition to manual and implement start_order and stop_order", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b772f2ab520", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6b772f2ab520"}, "html": {"href": "#!/cbillington/blacs/commits/6b772f2ab520"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-17T03:56:38.596586+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}, {"update": {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "title": "Deserialise transition to manual and implement start_order and stop_order", "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "6b772f2ab520", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6b772f2ab520"}, "html": {"href": "#!/cbillington/blacs/commits/6b772f2ab520"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-17T03:56:38.531193+00:00"}, "pull_request": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}}]}