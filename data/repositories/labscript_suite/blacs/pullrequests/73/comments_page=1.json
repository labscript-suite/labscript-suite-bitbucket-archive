{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/comments/102396388.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73/_/diff#comment-102396388"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}, "content": {"raw": "Another issue phil raised in the PR #47 thread is that, since the only way to break out of a hanging transition_to_manual is by restarting the device, a zombie process may write to the file after it has been 'cleaned' to be re-run. I think this is resolved. zprocess calls `terminate()` followed by `wait()` on the subprocess - this blocks until the process has exited and returned with a return code, so there are no zombies.\n\nAnother issue still exists though, and it's one that exists everywhere in labscript - that killing a child process whilst it has a HDF5 file open may a) corrupt data and b) not release the zlock, which could hang other processes for some tens of seconds I think. I think we can get around this. The 'kill lock' that prevents processes from terminating themselves when they don't get heartbeats from their parent could be extended to prevent all termination (you can just tell a process to ignore SIGTERM - or delay their response to it) while it is held. So we could make processes not die until they have closed the HDF5 file. I will think about implementing this in zprocess.", "markup": "markdown", "html": "<p>Another issue phil raised in the <a href=\"#!/labscript_suite/blacs/pull-requests/47/deserialise-transition_to_manual\" rel=\"nofollow\" class=\"ap-connect-link\">PR #47</a> thread is that, since the only way to break out of a hanging transition_to_manual is by restarting the device, a zombie process may write to the file after it has been 'cleaned' to be re-run. I think this is resolved. zprocess calls <code>terminate()</code> followed by <code>wait()</code> on the subprocess - this blocks until the process has exited and returned with a return code, so there are no zombies.</p>\n<p>Another issue still exists though, and it's one that exists everywhere in labscript - that killing a child process whilst it has a HDF5 file open may a) corrupt data and b) not release the zlock, which could hang other processes for some tens of seconds I think. I think we can get around this. The 'kill lock' that prevents processes from terminating themselves when they don't get heartbeats from their parent could be extended to prevent all termination (you can just tell a process to ignore SIGTERM - or delay their response to it) while it is held. So we could make processes not die until they have closed the HDF5 file. I will think about implementing this in zprocess.</p>", "type": "rendered"}, "created_on": "2019-05-17T04:05:50.899307+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-17T04:05:50.906588+00:00", "type": "pullrequest_comment", "id": 102396388}, {"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/comments/104181655.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73/_/diff#comment-104181655"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 73, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}}, "title": "Deserialise transition to manual and implement start_order and stop_order"}, "content": {"raw": "This is working well. Merging.", "markup": "markdown", "html": "<p>This is working well. Merging.</p>", "type": "rendered"}, "created_on": "2019-06-01T16:37:32.780850+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-01T16:37:32.787679+00:00", "type": "pullrequest_comment", "id": 104181655}], "page": 1, "size": 2}