{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/comments/121146522.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75/_/diff#comment-121146522"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 75, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75"}}, "title": "Device properties"}, "content": {"raw": "1. I think UI improvements can probably come later. Maybe a more serious evaluation of the output widget UIs would help us come up with a more effective general purpose method. I don\u2019t want to get too bogged down in it though as I suspect it will be easier once we have more concrete examples!\n2. I think you can solve the default value issue by updating the `_create_device_property_object` method to populate the `self.settings` dictionary appropriately for channels that do not exist in it already. I suppose ideally such code would live in the AO/DO/EO/DDS/Image classes and they would accept a \u201cdefault\u201d value kwarg, that way the feature could be extended to all of the output channels as well via the same mechanism you are using \\(`'default'` key in the `device_properties` dictionary\\). Note that this is going to be complicated by [this line of code](#!/labscript_suite/blacs/src/1b4c69c290bddf43a5573d9e6c0e27d6cc67875b/front_panel_settings.py#lines-356). front\\_panel\\_settings.py is a horrible, horrible mess, and likely the worse piece of code I\u2019ve ever written \\(some of that is to do with trying to massage all of the output value data into a HDF5 table\u2026which was probably a bad idea!\\)\n3. If the properties are defined in the device meta class, then it can be imported into the worker process. Ensuring you only query the relevant properties becomes a device implementation issue then right?\n4. Also lean towards the former\n5. I\u2019m uncertain. Maybe it makes sense to have only one programming method/workflow? I\u2019m not sure I see any downsides to having it all in one and it aligns better with the integration into existing remote\\_values\\_check/smart\\_programming.\n6. I don\u2019t think so at this stage. I do like having as much freedom as possible when writing device code as you are less likely to run into an arbitrary limitation enforced by the framework. I suspect some similarities will appear once we do this for a few devices and we can reassess then\n\nBTW, it doesn\u2019t look like the code below allows you to instantiate an EO object as an output or a property. Is there a commit missing?", "markup": "markdown", "html": "<ol>\n<li>I think UI improvements can probably come later. Maybe a more serious evaluation of the output widget UIs would help us come up with a more effective general purpose method. I don\u2019t want to get too bogged down in it though as I suspect it will be easier once we have more concrete examples!</li>\n<li>I think you can solve the default value issue by updating the <code>_create_device_property_object</code> method to populate the <code>self.settings</code> dictionary appropriately for channels that do not exist in it already. I suppose ideally such code would live in the AO/DO/EO/DDS/Image classes and they would accept a \u201cdefault\u201d value kwarg, that way the feature could be extended to all of the output channels as well via the same mechanism you are using (<code>'default'</code> key in the <code>device_properties</code> dictionary). Note that this is going to be complicated by <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/src/1b4c69c290bddf43a5573d9e6c0e27d6cc67875b/front_panel_settings.py#lines-356\" rel=\"nofollow\">this line of code</a>. front_panel_settings.py is a horrible, horrible mess, and likely the worse piece of code I\u2019ve ever written (some of that is to do with trying to massage all of the output value data into a HDF5 table\u2026which was probably a bad idea!)</li>\n<li>If the properties are defined in the device meta class, then it can be imported into the worker process. Ensuring you only query the relevant properties becomes a device implementation issue then right?</li>\n<li>Also lean towards the former</li>\n<li>I\u2019m uncertain. Maybe it makes sense to have only one programming method/workflow? I\u2019m not sure I see any downsides to having it all in one and it aligns better with the integration into existing remote_values_check/smart_programming.</li>\n<li>I don\u2019t think so at this stage. I do like having as much freedom as possible when writing device code as you are less likely to run into an arbitrary limitation enforced by the framework. I suspect some similarities will appear once we do this for a few devices and we can reassess then</li>\n</ol>\n<p>BTW, it doesn\u2019t look like the code below allows you to instantiate an EO object as an output or a property. Is there a commit missing?</p>", "type": "rendered"}, "created_on": "2019-10-17T13:01:21.463231+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-10-17T13:01:21.471145+00:00", "type": "pullrequest_comment", "id": 121146522}