{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/comments/121331676.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75/_/diff#comment-121331676"}}, "parent": {"id": 121146522, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/comments/121146522.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75/_/diff#comment-121146522"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 75, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75"}}, "title": "Device properties"}, "content": {"raw": "1. Agree this is low priority. My working assumption at the moment is that these widgets will be best organized using custom implementations anyway much like the ddsoutput master widget already in labscript\\_utils, but rather stored with the device file.\n2. I agree the natural place is to augment all the output classes, but I\u2019m trying to be a minimally disruptive as possible to existing code. Circumventing through `_create_device_property_object` is a good idea. As for the complication, I\u2019ve already hit that line of code actually thanks to the EO output. The somewhat simple fix that I don\u2019t hate too much is to just save the enum index as the base\\_value. Assuming the enum labels are sorted and don\u2019t change in quantity this is stable. I\u2019ll need a little error checking on the default setting from saved front panel settings to actually make that stable. \n3. It all comes back to that meta class. I was really hoping to make these changes without requiring the meta class to be implemented as well. Of course, I could just move the static definitions for the general PylonCamera to a new class and solve this particular issue just as you say. I\u2019m also pondering how one could use meta classes to from the connection table to specify different device implementations for the same generalized parent device. My haziness on that point is largely why I avoiding it for the moment.\n4. Good. The latter seemed pretty complicated anyway.\n5. Certainly a unified workflow makes the programming easier, I\u2019m worried that unifying them means the timeouts and communication loads can\u2019t be distributed sensibly. Again, I\u2019m thinking ahead to other devices I have that will greatly benefit from manual property control that have a lot of potential properties. Having to read/write many 10s of values for the properties every time an output is changed seems wildly inefficient and possibly problem inducing. In fact, if it were easier I\u2019d be inclined to separate the remote values check as well. If I remember correctly, that runs afoul of front\\_panel\\_settings since it expect a complete dictionary, not a subset.\n6. Agreed that the internal structure should be as free as possible. I\u2019m just wondering how the meta classes can be used from the connection table in a sensible way. Short of doing things how they are done in NI\\_DAQmx \\(which doesn\u2019t quite work here since we don\u2019t want to bring in the whole labscript device everywhere\\), my best idea is a kwarg instantiation argument that points to the meta class. That feels a bit kludgy to me though.\n\n\u200c", "markup": "markdown", "html": "<ol>\n<li>Agree this is low priority. My working assumption at the moment is that these widgets will be best organized using custom implementations anyway much like the ddsoutput master widget already in labscript_utils, but rather stored with the device file.</li>\n<li>I agree the natural place is to augment all the output classes, but I\u2019m trying to be a minimally disruptive as possible to existing code. Circumventing through <code>_create_device_property_object</code> is a good idea. As for the complication, I\u2019ve already hit that line of code actually thanks to the EO output. The somewhat simple fix that I don\u2019t hate too much is to just save the enum index as the base_value. Assuming the enum labels are sorted and don\u2019t change in quantity this is stable. I\u2019ll need a little error checking on the default setting from saved front panel settings to actually make that stable. </li>\n<li>It all comes back to that meta class. I was really hoping to make these changes without requiring the meta class to be implemented as well. Of course, I could just move the static definitions for the general PylonCamera to a new class and solve this particular issue just as you say. I\u2019m also pondering how one could use meta classes to from the connection table to specify different device implementations for the same generalized parent device. My haziness on that point is largely why I avoiding it for the moment.</li>\n<li>Good. The latter seemed pretty complicated anyway.</li>\n<li>Certainly a unified workflow makes the programming easier, I\u2019m worried that unifying them means the timeouts and communication loads can\u2019t be distributed sensibly. Again, I\u2019m thinking ahead to other devices I have that will greatly benefit from manual property control that have a lot of potential properties. Having to read/write many 10s of values for the properties every time an output is changed seems wildly inefficient and possibly problem inducing. In fact, if it were easier I\u2019d be inclined to separate the remote values check as well. If I remember correctly, that runs afoul of front_panel_settings since it expect a complete dictionary, not a subset.</li>\n<li>Agreed that the internal structure should be as free as possible. I\u2019m just wondering how the meta classes can be used from the connection table in a sensible way. Short of doing things how they are done in NI_DAQmx (which doesn\u2019t quite work here since we don\u2019t want to bring in the whole labscript device everywhere), my best idea is a kwarg instantiation argument that points to the meta class. That feels a bit kludgy to me though.</li>\n</ol>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-10-18T13:41:17.124830+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-10-18T13:41:17.411753+00:00", "type": "pullrequest_comment", "id": 121331676}