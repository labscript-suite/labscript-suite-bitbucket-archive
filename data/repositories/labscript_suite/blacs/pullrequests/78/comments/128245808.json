{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78/comments/128245808.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/78/_/diff#comment-128245808"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/78"}}, "title": "Include all connection table properties as attributes of worker instance."}, "content": {"raw": "This is tested and doesn\u2019t break anything in our lab, so, merging.\n\nI\u2019ll release this, since it has been six months since a release anyway, but I\u2019m thinking about changes to versioning for \u2018development\u2019 versions where we need to keep track of interdependent versions, but are still testing and don\u2019t want to stamp an official release yet. Setuptools, conda and pip and everyone support appending \u2018.dev0', '.dev1' etc to version numbers with correct ordering detected by all the tools, so we should use that to track intra-release dependencies. Basically if X.Y.Z was the previous release, whilst developing we tag as X.Y.Z\\+1.devN, incrementing .devN repeatedly. Once there are new features and not just bugfixes, we bump it to X.Y\\+1.Z.dev0 and then keep bumping the number again. We get rid of the .dev suffix once released. This will be easier once dependencies are all in one place in a setup.py file as we move to standard packages.\n\n\u200c", "markup": "markdown", "html": "<p>This is tested and doesn\u2019t break anything in our lab, so, merging.</p>\n<p>I\u2019ll release this, since it has been six months since a release anyway, but I\u2019m thinking about changes to versioning for \u2018development\u2019 versions where we need to keep track of interdependent versions, but are still testing and don\u2019t want to stamp an official release yet. Setuptools, conda and pip and everyone support appending \u2018.dev0', '.dev1' etc to version numbers with correct ordering detected by all the tools, so we should use that to track intra-release dependencies. Basically if X.Y.Z was the previous release, whilst developing we tag as X.Y.Z+1.devN, incrementing .devN repeatedly. Once there are new features and not just bugfixes, we bump it to X.Y+1.Z.dev0 and then keep bumping the number again. We get rid of the .dev suffix once released. This will be easier once dependencies are all in one place in a setup.py file as we move to standard packages.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-12-10T18:29:23.841227+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-12-10T19:05:16.910658+00:00", "type": "pullrequest_comment", "id": 128245808}