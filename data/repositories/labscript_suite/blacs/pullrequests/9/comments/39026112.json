{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9/comments/39026112.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9/_/diff#comment-39026112"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9"}}, "title": "\"delete repeated shots\" functionality"}, "content": {"raw": "I am sympathetic to that - I think some plugin functionality being enablable and disablable makes sense and doesn't introduce GUI clutter if a plugin just adds a button to a toolbar or an entry to a menu. But this shot deletion functionality, since you want to be able to see what it's set to when you're running experiments, it can't be hidden away in a menu or controlled with just a tool button.\n\nI'm also sympathetic to it being core functionality. There seem to be more experiments out there that need to be kept warm than don't. However, the plugin architecture is a good way of keeping the code well separated though, so even if something is \"core\" it can still be implemented in code mostly as a plugin even if the GUI is designed to have its controls in a specific place with the assumption that they will always be there. Though BLACS' plugin interface is simple enough that this argument is not that much different from just saying that code should be separated into components in a logical way that minimises coupling, which projects ought to do whether they call the components \"plugins\" or not.", "markup": "markdown", "html": "<p>I am sympathetic to that - I think some plugin functionality being enablable and disablable makes sense and doesn't introduce GUI clutter if a plugin just adds a button to a toolbar or an entry to a menu. But this shot deletion functionality, since you want to be able to see what it's set to when you're running experiments, it can't be hidden away in a menu or controlled with just a tool button.</p>\n<p>I'm also sympathetic to it being core functionality. There seem to be more experiments out there that need to be kept warm than don't. However, the plugin architecture is a good way of keeping the code well separated though, so even if something is \"core\" it can still be implemented in code mostly as a plugin even if the GUI is designed to have its controls in a specific place with the assumption that they will always be there. Though BLACS' plugin interface is simple enough that this argument is not that much different from just saying that code should be separated into components in a logical way that minimises coupling, which projects ought to do whether they call the components \"plugins\" or not.</p>", "type": "rendered"}, "created_on": "2017-06-17T04:08:10.972373+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T04:08:10.975606+00:00", "type": "pullrequest_comment", "id": 39026112}