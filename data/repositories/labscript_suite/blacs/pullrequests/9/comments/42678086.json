{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9/comments/42678086.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9/_/diff#comment-42678086"}}, "parent": {"id": 42629650, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9/comments/42629650.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9/_/diff#comment-42629650"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9"}}, "title": "\"delete repeated shots\" functionality"}, "content": {"raw": "So far the separation I've been mentally using is that:\n\nThe app configs are for things that can be changed in the GUI while the app is running, and can be saved and loaded, and are not designed to be user-editable in a text editor (even though they are .ini files, apps are free to store settings in a format that might not be particularly conducive to a human actually looking at - like we make no effort to logically group things into categories or format things particularly nicely - runmanager's list of strings that it's saved all have `u''` prefixes on them, etc), rather they are programatically written and any human readability is a bonus. So it's fine that BLACS uses a .h5 file in this regard. Apps may want to store binary data in this files at some point - the .ini format might not be conducive to that and apps should feel free to change their saved configuration file format as they like.\n\nLabconfig is for things that are more permenent, likely require app restarts to take effect, and are human-written. It's to be formatted in a sensible way into logical sections because humans are interacting with it. It can't be saved and loaded easily, but since it's not expected to change often, putting it under version control is the intended mechanism of \"saving and loading\" different configurations - though it's unlikely you'll need to do this, in general.\n\nSo I don't think the per-app settings belong in the saved configs. If they don't belong in labconfig, they belong in separate config files for each app. But I see little difference between having multiple config files vs multiple sections in a single config file. It is also possible that certain extensions will require components in multiple programs, in which case the settings will be coupled - there will either have to be a \"general plugins\" section for turning on and off behaviour labscript-suite-wide, or both apps would have to have their corresponding part of the plugin enabled. So it's appealing to me to have it all in once place.\n\nI agree that I don't like the idea of apps editing the labconfig file - it should be human editable only. I would probably vote to just not add GUIs to the apps for editing the list of plugins. If we like we could make a general \"labconfig\" GUI specifically for editing labconfig, with a tabbled GUI for editing the different sections, and it could have sole permission to edit the labconfig file, and there could be shortcuts to it from the menus of all the programs. But I would probably argue that the best GUI for this is a text editor, and that if an \"edit labconfig\" shortcut is added to the menus it should just launch your text editor the same as when you click \"edit connection table\".\n\nI like the \"plugin=True\" syntax: True means enabled, False or absent/commented out means not enabled. I didn't think hierarchical sections were possible and so I was looking for something else, but the `[blacs/plugins]` way of making 'hierarchies' seems good to me. \n\nconfigparser ignores indentation so we can make the sections visibly hierarchical (at least in the default labconfig at install time):\n\n```\n#!ini\n[blacs]\n    [blacs/plugins]\n        delete-repeated-shots = True\n```\n\n```\n#!python\n>>> LabConfig().get('blacs/plugins', 'delete-repeated-shots')\nu'True'\n```\n\nMy experience with mercurial plugins is that you settle on what set is required for the type of work you're doing and then you never change them again. So I think that well suits using labconfig for it. If there are things about plugins that you want to change while the app is running, it should be a setting within the plugin itself that the plugin provides a GUI for changing - and which it saves to the app's saved config file the way BLACs currently saves and loads the data for its plugins.", "markup": "markdown", "html": "<p>So far the separation I've been mentally using is that:</p>\n<p>The app configs are for things that can be changed in the GUI while the app is running, and can be saved and loaded, and are not designed to be user-editable in a text editor (even though they are .ini files, apps are free to store settings in a format that might not be particularly conducive to a human actually looking at - like we make no effort to logically group things into categories or format things particularly nicely - runmanager's list of strings that it's saved all have <code>u''</code> prefixes on them, etc), rather they are programatically written and any human readability is a bonus. So it's fine that BLACS uses a .h5 file in this regard. Apps may want to store binary data in this files at some point - the .ini format might not be conducive to that and apps should feel free to change their saved configuration file format as they like.</p>\n<p>Labconfig is for things that are more permenent, likely require app restarts to take effect, and are human-written. It's to be formatted in a sensible way into logical sections because humans are interacting with it. It can't be saved and loaded easily, but since it's not expected to change often, putting it under version control is the intended mechanism of \"saving and loading\" different configurations - though it's unlikely you'll need to do this, in general.</p>\n<p>So I don't think the per-app settings belong in the saved configs. If they don't belong in labconfig, they belong in separate config files for each app. But I see little difference between having multiple config files vs multiple sections in a single config file. It is also possible that certain extensions will require components in multiple programs, in which case the settings will be coupled - there will either have to be a \"general plugins\" section for turning on and off behaviour labscript-suite-wide, or both apps would have to have their corresponding part of the plugin enabled. So it's appealing to me to have it all in once place.</p>\n<p>I agree that I don't like the idea of apps editing the labconfig file - it should be human editable only. I would probably vote to just not add GUIs to the apps for editing the list of plugins. If we like we could make a general \"labconfig\" GUI specifically for editing labconfig, with a tabbled GUI for editing the different sections, and it could have sole permission to edit the labconfig file, and there could be shortcuts to it from the menus of all the programs. But I would probably argue that the best GUI for this is a text editor, and that if an \"edit labconfig\" shortcut is added to the menus it should just launch your text editor the same as when you click \"edit connection table\".</p>\n<p>I like the \"plugin=True\" syntax: True means enabled, False or absent/commented out means not enabled. I didn't think hierarchical sections were possible and so I was looking for something else, but the <code>[blacs/plugins]</code> way of making 'hierarchies' seems good to me. </p>\n<p>configparser ignores indentation so we can make the sections visibly hierarchical (at least in the default labconfig at install time):</p>\n<div class=\"codehilite language-ini\"><pre><span></span><span class=\"k\">[blacs]</span>\n    <span class=\"k\">[blacs/plugins]</span>\n        <span class=\"na\">delete-repeated-shots</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n</pre></div>\n\n\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">LabConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;blacs/plugins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;delete-repeated-shots&#39;</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">&#39;True&#39;</span>\n</pre></div>\n\n\n<p>My experience with mercurial plugins is that you settle on what set is required for the type of work you're doing and then you never change them again. So I think that well suits using labconfig for it. If there are things about plugins that you want to change while the app is running, it should be a setting within the plugin itself that the plugin provides a GUI for changing - and which it saves to the app's saved config file the way BLACs currently saves and loads the data for its plugins.</p>", "type": "rendered"}, "created_on": "2017-08-11T16:14:48.680772+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-11T16:14:48.684088+00:00", "type": "pullrequest_comment", "id": 42678086}