{"links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9/comments/43068423.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9/_/diff#comment-43068423"}}, "parent": {"id": 43058625, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9/comments/43058625.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9/_/diff#comment-43058625"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/9"}}, "title": "\"delete repeated shots\" functionality"}, "content": {"raw": "So you could make a tab, but it wouldn't be a 'device' tab, and BLACS would not remember where it is located and might get confused if it is ever looping over tabs - which I'm not sure it does. So the only breakage if you tried to insert a tab into the GUI might be that the tab would always end up in the same place after a BLACS restart - though you could definitely make your plugin remember what tab widget it was in and move it.\n\nTo create a tab, you would have your plugin grab the BLACS instance that gets passed into it in `plugin_setup_complete()` (this is the main class of BLACS), and find a tabWidget in its GUI - I think they're at `BLACS.tab_widgets[i]` where i is 0, 1, 2, 3, and call the appropriate Qt method to insert a tab of your own into the widget. This might not be a bad way for a plugin to present a somewhat permanent interface if that's what you're going for (rather than something that only pops up when you access a menu item). There might be some undesirable interaction if BLACS is making assumptions about all the tabs being devices - I'm not sure if it is, but testing would reveal if there are any problems and any assumption-making code could be modified to allow for some tabs to not be device tabs. Probably give your tab an icon so that it is visibly not a device!\n\nAdding callbacks wherever plugins might plausibly want them is totally fine - we have so far just been adding callbacks as needed. Keep in mind that you can interact with other parts of the code directly too - you could access the TreeView for the queue (again via the BLACS instance - everything in the whole app is ultimately in there somewhere) and connect to some signal of it to detect when a shot was added, or something like that too. Sticking to our callbacks is clean, and is to be preferred though, whereas interacting directly with other stuff makes your plugin liable to break if those things change.", "markup": "markdown", "html": "<p>So you could make a tab, but it wouldn't be a 'device' tab, and BLACS would not remember where it is located and might get confused if it is ever looping over tabs - which I'm not sure it does. So the only breakage if you tried to insert a tab into the GUI might be that the tab would always end up in the same place after a BLACS restart - though you could definitely make your plugin remember what tab widget it was in and move it.</p>\n<p>To create a tab, you would have your plugin grab the BLACS instance that gets passed into it in <code>plugin_setup_complete()</code> (this is the main class of BLACS), and find a tabWidget in its GUI - I think they're at <code>BLACS.tab_widgets[i]</code> where i is 0, 1, 2, 3, and call the appropriate Qt method to insert a tab of your own into the widget. This might not be a bad way for a plugin to present a somewhat permanent interface if that's what you're going for (rather than something that only pops up when you access a menu item). There might be some undesirable interaction if BLACS is making assumptions about all the tabs being devices - I'm not sure if it is, but testing would reveal if there are any problems and any assumption-making code could be modified to allow for some tabs to not be device tabs. Probably give your tab an icon so that it is visibly not a device!</p>\n<p>Adding callbacks wherever plugins might plausibly want them is totally fine - we have so far just been adding callbacks as needed. Keep in mind that you can interact with other parts of the code directly too - you could access the TreeView for the queue (again via the BLACS instance - everything in the whole app is ultimately in there somewhere) and connect to some signal of it to detect when a shot was added, or something like that too. Sticking to our callbacks is clean, and is to be preferred though, whereas interacting directly with other stuff makes your plugin liable to break if those things change.</p>", "type": "rendered"}, "created_on": "2017-08-18T04:24:08.901875+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-18T04:24:08.905280+00:00", "type": "pullrequest_comment", "id": 43068423}