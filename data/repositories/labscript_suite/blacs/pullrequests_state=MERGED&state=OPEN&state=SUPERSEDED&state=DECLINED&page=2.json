{"pagelen": 50, "previous": "data/repositories/labscript_suite/blacs/pullrequests_state=MERGED&state=OPEN&state=SUPERSEDED&state=DECLINED&page=1.json", "values": [{"description": "Fix bug: time markers not copied into cleaned h5 files", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/51/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:c960e1d86794%0Dadee644a72e1?from_pullrequest_id=51"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/51/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/51.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/51/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/51/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/51"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/51/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:c960e1d86794%0Dadee644a72e1?from_pullrequest_id=51"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/51/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/51/statuses_page=1.json"}}, "title": "Fix bug: time markers not copied into cleaned h5 files", "close_source_branch": true, "type": "pullrequest", "id": 51, "destination": {"commit": {"hash": "adee644a72e1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/adee644a72e1.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/adee644a72e1"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-09-11T17:45:25.129413+00:00", "summary": {"raw": "Fix bug: time markers not copied into cleaned h5 files", "markup": "markdown", "html": "<p>Fix bug: time markers not copied into cleaned h5 files</p>", "type": "rendered"}, "source": {"commit": {"hash": "322cc65bcafe", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/322cc65bcafe"}, "html": {"href": "#!/cbillington/blacs/commits/322cc65bcafe"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-12T18:23:57.729066+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "c960e1d86794", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/c960e1d86794.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/c960e1d86794"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Added a progress bar plugin to BLACS.\r\n\r\nThe plugin inspects the stop_time device property of the master pseudoclock to check how long the shot is, and updates the progress bar whilst the shot is running. It hooks into two new callbacks 'science_starting' and 'science_over'. 'science_over' is distinct from 'shot_complete', as it runs regardless of whether a shot was completed successfully, i.e. even if there is an abort or device restart.\r\n\r\nThe progress bar shows the name of the current marker, if any, and changes colour to match the colour defined by that marker.\r\n\r\nThe progress pauses during a wait, and the plugin waits for an event from the WaitMonitor to know when the wait is over. This depends on labscript_utils 2.2.0, [yet to be merged](#!/labscript_suite/labscript_devices/pull-requests/47/wait-completed-events/).\r\n\r\nThe time and percentages shown on the progress bar are 'labscript time', i.e. excluding the time spent waiting, since there is no way to know how long the waits will be in advance.\r\n\r\nHere is a gif:\r\n\r\n![progress_bar.gif](data/bitbucket.org/repo/9pKE7ad/images/2571406705-progress_bar.gif)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/52/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:614e0d214ea0%0D1c17f6c907c7?from_pullrequest_id=52"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/52/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/52.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/52/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/52/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/52"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/52/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:614e0d214ea0%0D1c17f6c907c7?from_pullrequest_id=52"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/52/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/52/statuses_page=1.json"}}, "title": "Progress bar", "close_source_branch": true, "type": "pullrequest", "id": 52, "destination": {"commit": {"hash": "1c17f6c907c7", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/1c17f6c907c7.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/1c17f6c907c7"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-09-12T16:15:53.427155+00:00", "summary": {"raw": "Added a progress bar plugin to BLACS.\r\n\r\nThe plugin inspects the stop_time device property of the master pseudoclock to check how long the shot is, and updates the progress bar whilst the shot is running. It hooks into two new callbacks 'science_starting' and 'science_over'. 'science_over' is distinct from 'shot_complete', as it runs regardless of whether a shot was completed successfully, i.e. even if there is an abort or device restart.\r\n\r\nThe progress bar shows the name of the current marker, if any, and changes colour to match the colour defined by that marker.\r\n\r\nThe progress pauses during a wait, and the plugin waits for an event from the WaitMonitor to know when the wait is over. This depends on labscript_utils 2.2.0, [yet to be merged](#!/labscript_suite/labscript_devices/pull-requests/47/wait-completed-events/).\r\n\r\nThe time and percentages shown on the progress bar are 'labscript time', i.e. excluding the time spent waiting, since there is no way to know how long the waits will be in advance.\r\n\r\nHere is a gif:\r\n\r\n![progress_bar.gif](data/bitbucket.org/repo/9pKE7ad/images/2571406705-progress_bar.gif)", "markup": "markdown", "html": "<p>Added a progress bar plugin to BLACS.</p>\n<p>The plugin inspects the stop_time device property of the master pseudoclock to check how long the shot is, and updates the progress bar whilst the shot is running. It hooks into two new callbacks 'science_starting' and 'science_over'. 'science_over' is distinct from 'shot_complete', as it runs regardless of whether a shot was completed successfully, i.e. even if there is an abort or device restart.</p>\n<p>The progress bar shows the name of the current marker, if any, and changes colour to match the colour defined by that marker.</p>\n<p>The progress pauses during a wait, and the plugin waits for an event from the WaitMonitor to know when the wait is over. This depends on labscript_utils 2.2.0, <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/47/wait-completed-events/\" rel=\"nofollow\">yet to be merged</a>.</p>\n<p>The time and percentages shown on the progress bar are 'labscript time', i.e. excluding the time spent waiting, since there is no way to know how long the waits will be in advance.</p>\n<p>Here is a gif:</p>\n<p><img alt=\"progress_bar.gif\" src=\"data/bitbucket.org/repo/9pKE7ad/images/2571406705-progress_bar.gif\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "790f8cefc380", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/790f8cefc380"}, "html": {"href": "#!/cbillington/blacs/commits/790f8cefc380"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "progress_bar"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-22T17:47:09.281774+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "614e0d214ea0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/614e0d214ea0.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/614e0d214ea0"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Move the excepthook import earlier so that it sees import and version errors.\r\n\r\nWe intentionally raise errors when versions are not sufficient at import time, and these are invisible when programs are run from normal graphical launchers unless the excepthook is set up. Therefore it should be moved as early as possible.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/53/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:b41afcffa5e8%0Df6faf14e9f62?from_pullrequest_id=53"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/53/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/53.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/53/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/53/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/53"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/53/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:b41afcffa5e8%0Df6faf14e9f62?from_pullrequest_id=53"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/53/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/53/statuses_page=1.json"}}, "title": "Move the excepthook import earlier", "close_source_branch": true, "type": "pullrequest", "id": 53, "destination": {"commit": {"hash": "f6faf14e9f62", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/f6faf14e9f62.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/f6faf14e9f62"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-09-26T14:26:31.690334+00:00", "summary": {"raw": "Move the excepthook import earlier so that it sees import and version errors.\r\n\r\nWe intentionally raise errors when versions are not sufficient at import time, and these are invisible when programs are run from normal graphical launchers unless the excepthook is set up. Therefore it should be moved as early as possible.", "markup": "markdown", "html": "<p>Move the excepthook import earlier so that it sees import and version errors.</p>\n<p>We intentionally raise errors when versions are not sufficient at import time, and these are invisible when programs are run from normal graphical launchers unless the excepthook is set up. Therefore it should be moved as early as possible.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f17253f6ac61", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/f17253f6ac61"}, "html": {"href": "#!/cbillington/blacs/commits/f17253f6ac61"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "earlier_excepthook"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-26T17:12:00.536542+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "b41afcffa5e8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/b41afcffa5e8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/b41afcffa5e8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add functionality for passing in import paths to worker classes instead of the worker classes themselves, so that the parent process can avoid running unnecessary imports.\r\n\r\nThis is a step in refactoring labscript_devices to allow more flexible code structuring, such as having worker classes in separate files. If in separate files that are not imported until the worker process actually starts, then we can avoid having to put all the worker imports in its `init()` method in `exec()` calls, which is ugly, whilst avoiding having to import device-specific libraries that might not exist on the computer running labscript, and once we have remote devices, might not even exist on the computer running BLACS.\r\n\r\nThis change allows BLACS tabs to change the way they define workers in the following way: \r\n\r\n```diff\r\n+++ b/DummyPseudoclock.py\tThu Sep 27 09:55:08 2018 -0400\r\n@@ -52,7 +52,11 @@\r\n class DummyPseudoclockTab(DeviceTab):\r\n     def initialise_workers(self):\r\n         worker_initialisation_kwargs = {}\r\n-        self.create_worker(\"main_worker\", DummyPseudoclockWorker, worker_initialisation_kwargs)\r\n+        self.create_worker(\r\n+            \"main_worker\",\r\n+            \"labscript_devices.DummyPseudoclock.DummyPseudoclockWorker\",\r\n+            worker_initialisation_kwargs,\r\n+        )\r\n         self.primary_worker = \"main_worker\"\r\n \r\n     @define_state(MODE_BUFFERED, True)\r\n```\r\n\r\nAn absolute import path to the worker class is required.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/54/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:db36a0fa2bfb%0Db41afcffa5e8?from_pullrequest_id=54"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/54/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/54.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/54/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/54/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/54"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/54/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:db36a0fa2bfb%0Db41afcffa5e8?from_pullrequest_id=54"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/54/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/54/statuses_page=1.json"}}, "title": "Defer worker imports", "close_source_branch": true, "type": "pullrequest", "id": 54, "destination": {"commit": {"hash": "b41afcffa5e8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/b41afcffa5e8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/b41afcffa5e8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-09-27T13:57:16.428072+00:00", "summary": {"raw": "Add functionality for passing in import paths to worker classes instead of the worker classes themselves, so that the parent process can avoid running unnecessary imports.\r\n\r\nThis is a step in refactoring labscript_devices to allow more flexible code structuring, such as having worker classes in separate files. If in separate files that are not imported until the worker process actually starts, then we can avoid having to put all the worker imports in its `init()` method in `exec()` calls, which is ugly, whilst avoiding having to import device-specific libraries that might not exist on the computer running labscript, and once we have remote devices, might not even exist on the computer running BLACS.\r\n\r\nThis change allows BLACS tabs to change the way they define workers in the following way: \r\n\r\n```diff\r\n+++ b/DummyPseudoclock.py\tThu Sep 27 09:55:08 2018 -0400\r\n@@ -52,7 +52,11 @@\r\n class DummyPseudoclockTab(DeviceTab):\r\n     def initialise_workers(self):\r\n         worker_initialisation_kwargs = {}\r\n-        self.create_worker(\"main_worker\", DummyPseudoclockWorker, worker_initialisation_kwargs)\r\n+        self.create_worker(\r\n+            \"main_worker\",\r\n+            \"labscript_devices.DummyPseudoclock.DummyPseudoclockWorker\",\r\n+            worker_initialisation_kwargs,\r\n+        )\r\n         self.primary_worker = \"main_worker\"\r\n \r\n     @define_state(MODE_BUFFERED, True)\r\n```\r\n\r\nAn absolute import path to the worker class is required.", "markup": "markdown", "html": "<p>Add functionality for passing in import paths to worker classes instead of the worker classes themselves, so that the parent process can avoid running unnecessary imports.</p>\n<p>This is a step in refactoring labscript_devices to allow more flexible code structuring, such as having worker classes in separate files. If in separate files that are not imported until the worker process actually starts, then we can avoid having to put all the worker imports in its <code>init()</code> method in <code>exec()</code> calls, which is ugly, whilst avoiding having to import device-specific libraries that might not exist on the computer running labscript, and once we have remote devices, might not even exist on the computer running BLACS.</p>\n<p>This change allows BLACS tabs to change the way they define workers in the following way: </p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gi\">+++ b/DummyPseudoclock.py   Thu Sep 27 09:55:08 2018 -0400</span>\n<span class=\"gu\">@@ -52,7 +52,11 @@</span>\n class DummyPseudoclockTab(DeviceTab):\n     def initialise_workers(self):\n         worker_initialisation_kwargs = {}\n<span class=\"gd\">-        self.create_worker(&quot;main_worker&quot;, DummyPseudoclockWorker, worker_initialisation_kwargs)</span>\n<span class=\"gi\">+        self.create_worker(</span>\n<span class=\"gi\">+            &quot;main_worker&quot;,</span>\n<span class=\"gi\">+            &quot;labscript_devices.DummyPseudoclock.DummyPseudoclockWorker&quot;,</span>\n<span class=\"gi\">+            worker_initialisation_kwargs,</span>\n<span class=\"gi\">+        )</span>\n         self.primary_worker = &quot;main_worker&quot;\n\n     @define_state(MODE_BUFFERED, True)\n</pre></div>\n\n\n<p>An absolute import path to the worker class is required.</p>", "type": "rendered"}, "source": {"commit": {"hash": "076c719f8715", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/076c719f8715"}, "html": {"href": "#!/cbillington/blacs/commits/076c719f8715"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "defer_worker_imports"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T19:10:24.981702+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "db36a0fa2bfb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/db36a0fa2bfb.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/db36a0fa2bfb"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/55/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:1c17f6c907c7%0D0efa1fc3dc5e?from_pullrequest_id=55"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/55/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/55.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/55/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/55/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/55"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/55/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:1c17f6c907c7%0D0efa1fc3dc5e?from_pullrequest_id=55"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/55/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/55/statuses_page=1.json"}}, "title": "Fix issue #48", "close_source_branch": true, "type": "pullrequest", "id": 55, "destination": {"commit": {"hash": "0efa1fc3dc5e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/0efa1fc3dc5e.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/0efa1fc3dc5e"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-01T20:08:02.406282+00:00", "summary": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "source": {"commit": {"hash": "a490f363ac7a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/a490f363ac7a"}, "html": {"href": "#!/cbillington/blacs/commits/a490f363ac7a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T20:11:28.214871+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "1c17f6c907c7", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/1c17f6c907c7.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/1c17f6c907c7"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Defer starting the worker process until _initialise_worker. This way,\r\nimport errors/syntax errors etc in deferred worker class imports can be handled\r\nwith the normal state machine machinery and seen by the user.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/56/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:41f89c2e291d%0D4e00ba0129b8?from_pullrequest_id=56"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/56/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/56"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:41f89c2e291d%0D4e00ba0129b8?from_pullrequest_id=56"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/56/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/56/statuses_page=1.json"}}, "title": "Defer starting the worker process until _initialise_worker", "close_source_branch": true, "type": "pullrequest", "id": 56, "destination": {"commit": {"hash": "4e00ba0129b8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/4e00ba0129b8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/4e00ba0129b8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-03T20:00:04.795672+00:00", "summary": {"raw": "Defer starting the worker process until _initialise_worker. This way,\r\nimport errors/syntax errors etc in deferred worker class imports can be handled\r\nwith the normal state machine machinery and seen by the user.", "markup": "markdown", "html": "<p>Defer starting the worker process until _initialise_worker. This way,\nimport errors/syntax errors etc in deferred worker class imports can be handled\nwith the normal state machine machinery and seen by the user.</p>", "type": "rendered"}, "source": {"commit": {"hash": "42979ba1b669", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/42979ba1b669"}, "html": {"href": "#!/cbillington/blacs/commits/42979ba1b669"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "defer_worker_start"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-26T15:57:01.869313+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "41f89c2e291d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/41f89c2e291d.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/41f89c2e291d"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fix bug in which an error was raised at startup if there was no wait monitor acquisition device in the connection table.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/57/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:4e00ba0129b8%0D614e0d214ea0?from_pullrequest_id=57"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/57/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/57.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/57/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/57/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/57"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/57/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:4e00ba0129b8%0D614e0d214ea0?from_pullrequest_id=57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/57/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/57/statuses_page=1.json"}}, "title": "Bugfix for progress bar", "close_source_branch": true, "type": "pullrequest", "id": 57, "destination": {"commit": {"hash": "614e0d214ea0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/614e0d214ea0.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/614e0d214ea0"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-22T17:46:34.170990+00:00", "summary": {"raw": "Fix bug in which an error was raised at startup if there was no wait monitor acquisition device in the connection table.", "markup": "markdown", "html": "<p>Fix bug in which an error was raised at startup if there was no wait monitor acquisition device in the connection table.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a9a15fe7f877", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/a9a15fe7f877"}, "html": {"href": "#!/cbillington/blacs/commits/a9a15fe7f877"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "progress_bar"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-23T14:53:08.309893+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "4e00ba0129b8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/4e00ba0129b8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/4e00ba0129b8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Fix incorrect path for icon in winshell config. This fixes the \"BLACS has no icon when launched with `python -m blacs`\" bug.\r\n\r\n* Remove `--delay` from restarting. It is no longer needed as the server is now\r\n    cleanly shut down and does not rely on the process ending for the port\r\n    to be freed. Removing  `--delay` makes the restart arguments identical to\r\n    the arguments that initially started the program, which makes Windows recognise\r\n    BLACS as BLACS, rather than displaying the wrong icon in the taskbar.  Windows is silly, since we most certainly tell it that BLACS is BLACS, but it won't believe us if the command line arguments aren't right.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/58/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:9982a61c826e%0D0bdbc1468e04?from_pullrequest_id=58"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/58/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/58.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/58/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/58/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/58"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/58/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:9982a61c826e%0D0bdbc1468e04?from_pullrequest_id=58"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/58/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/58/statuses_page=1.json"}}, "title": "Winshell bugfixes", "close_source_branch": true, "type": "pullrequest", "id": 58, "destination": {"commit": {"hash": "0bdbc1468e04", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/0bdbc1468e04.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/0bdbc1468e04"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-25T20:45:58.462926+00:00", "summary": {"raw": "* Fix incorrect path for icon in winshell config. This fixes the \"BLACS has no icon when launched with `python -m blacs`\" bug.\r\n\r\n* Remove `--delay` from restarting. It is no longer needed as the server is now\r\n    cleanly shut down and does not rely on the process ending for the port\r\n    to be freed. Removing  `--delay` makes the restart arguments identical to\r\n    the arguments that initially started the program, which makes Windows recognise\r\n    BLACS as BLACS, rather than displaying the wrong icon in the taskbar.  Windows is silly, since we most certainly tell it that BLACS is BLACS, but it won't believe us if the command line arguments aren't right.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Fix incorrect path for icon in winshell config. This fixes the \"BLACS has no icon when launched with <code>python -m blacs</code>\" bug.</p>\n</li>\n<li>\n<p>Remove <code>--delay</code> from restarting. It is no longer needed as the server is now\n    cleanly shut down and does not rely on the process ending for the port\n    to be freed. Removing  <code>--delay</code> makes the restart arguments identical to\n    the arguments that initially started the program, which makes Windows recognise\n    BLACS as BLACS, rather than displaying the wrong icon in the taskbar.  Windows is silly, since we most certainly tell it that BLACS is BLACS, but it won't believe us if the command line arguments aren't right.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "ffc64529f6cb", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/ffc64529f6cb"}, "html": {"href": "#!/cbillington/blacs/commits/ffc64529f6cb"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-05T20:22:04.647911+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "9982a61c826e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/9982a61c826e.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/9982a61c826e"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Remove tab icon and colour setting timer. This timer was intended to ensure that icons and colours were set eventually even if the tab was in mid-drag and thus not in a notebook (and thus not having a tab handle). This is no longer needed as the new dragdroptabs implementation has the tab\r\nalways in a notebook, even in mid-drag.\r\n\r\n* Remove some commented out code.\r\n\r\nBLACS already relies on a new enough version of labscript_utils that no version requirement is needed to ensure the new dragdroptabs are in use.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/59/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:ac92316b5a1d%0D9982a61c826e?from_pullrequest_id=59"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/59/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/59.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/59/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/59/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/59"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/59/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:ac92316b5a1d%0D9982a61c826e?from_pullrequest_id=59"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/59/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/59/statuses_page=1.json"}}, "title": "Removal of unneeded tab settings timeouts.", "close_source_branch": true, "type": "pullrequest", "id": 59, "destination": {"commit": {"hash": "9982a61c826e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/9982a61c826e.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/9982a61c826e"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-25T20:48:55.816324+00:00", "summary": {"raw": "* Remove tab icon and colour setting timer. This timer was intended to ensure that icons and colours were set eventually even if the tab was in mid-drag and thus not in a notebook (and thus not having a tab handle). This is no longer needed as the new dragdroptabs implementation has the tab\r\nalways in a notebook, even in mid-drag.\r\n\r\n* Remove some commented out code.\r\n\r\nBLACS already relies on a new enough version of labscript_utils that no version requirement is needed to ensure the new dragdroptabs are in use.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Remove tab icon and colour setting timer. This timer was intended to ensure that icons and colours were set eventually even if the tab was in mid-drag and thus not in a notebook (and thus not having a tab handle). This is no longer needed as the new dragdroptabs implementation has the tab\nalways in a notebook, even in mid-drag.</p>\n</li>\n<li>\n<p>Remove some commented out code.</p>\n</li>\n</ul>\n<p>BLACS already relies on a new enough version of labscript_utils that no version requirement is needed to ensure the new dragdroptabs are in use.</p>", "type": "rendered"}, "source": {"commit": {"hash": "361022a09abe", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/361022a09abe"}, "html": {"href": "#!/cbillington/blacs/commits/361022a09abe"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "cleanups"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-05T18:30:05.168236+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ac92316b5a1d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/ac92316b5a1d.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/ac92316b5a1d"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Increase worker process startup timeout to 30 seconds.\r\nRely on zprocess 2.9.3 which exposes this parameter.\r\nLikely resolves the issue raised [here](#!/labscript_suite/blacs/pull-requests/56/defer-starting-the-worker-process-until/diff#comment-80472918) of worker startup timing out.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/60/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:0bdbc1468e04%0D41f89c2e291d?from_pullrequest_id=60"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/60/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/60.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/60/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/60/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/60"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/60/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:0bdbc1468e04%0D41f89c2e291d?from_pullrequest_id=60"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/60/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/60/statuses_page=1.json"}}, "title": "Increase worker process startup timeout", "close_source_branch": true, "type": "pullrequest", "id": 60, "destination": {"commit": {"hash": "41f89c2e291d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/41f89c2e291d.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/41f89c2e291d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-10-26T15:35:51.901129+00:00", "summary": {"raw": "Increase worker process startup timeout to 30 seconds.\r\nRely on zprocess 2.9.3 which exposes this parameter.\r\nLikely resolves the issue raised [here](#!/labscript_suite/blacs/pull-requests/56/defer-starting-the-worker-process-until/diff#comment-80472918) of worker startup timing out.", "markup": "markdown", "html": "<p>Increase worker process startup timeout to 30 seconds.\nRely on zprocess 2.9.3 which exposes this parameter.\nLikely resolves the issue raised <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/56/defer-starting-the-worker-process-until/diff#comment-80472918\" rel=\"nofollow\">here</a> of worker startup timing out.</p>", "type": "rendered"}, "source": {"commit": {"hash": "745b863d946d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/745b863d946d"}, "html": {"href": "#!/cbillington/blacs/commits/745b863d946d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix2"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-26T15:57:52.158903+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "0bdbc1468e04", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/0bdbc1468e04.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/0bdbc1468e04"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Any modification to the connection table Python script or associated globals files presently elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._\r\n\r\nThis feature makes use of a revised`labscript_utils.FileWatcher` \\([pull request #61](#!/labscript_suite/labscript_utils/pull-requests/61)\\), permitting the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nA list of hashable\\_types is attained from the BLACS/plugins section of labconfig. This must return a list of strings upon raw evaluation, of the form '.py', etc. The polling interval for hashable and non hashable types can now also be set using the value of polling\\_interval \\(in seconds\\) in BLACS/plugins \\(default 1s\\).\r\n\r\nTODO: Bump labscript\\_utils version requirement upon the associated PR of labscript\\_utils being merged.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/61/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:1c240654e522%0Dd7920b03ff95?from_pullrequest_id=61"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/61/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/61.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/61/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/61/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/61"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/61/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:1c240654e522%0Dd7920b03ff95?from_pullrequest_id=61"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/61/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/61/statuses_page=1.json"}}, "title": "Use hashable FileWatcher to detect changes to connection table and associated files", "close_source_branch": true, "type": "pullrequest", "id": 61, "destination": {"commit": {"hash": "d7920b03ff95", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/d7920b03ff95.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/d7920b03ff95"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-11-26T04:56:11.648191+00:00", "summary": {"raw": "Any modification to the connection table Python script or associated globals files presently elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._\r\n\r\nThis feature makes use of a revised`labscript_utils.FileWatcher` \\([pull request #61](#!/labscript_suite/labscript_utils/pull-requests/61)\\), permitting the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nA list of hashable\\_types is attained from the BLACS/plugins section of labconfig. This must return a list of strings upon raw evaluation, of the form '.py', etc. The polling interval for hashable and non hashable types can now also be set using the value of polling\\_interval \\(in seconds\\) in BLACS/plugins \\(default 1s\\).\r\n\r\nTODO: Bump labscript\\_utils version requirement upon the associated PR of labscript\\_utils being merged.", "markup": "markdown", "html": "<p>Any modification to the connection table Python script or associated globals files presently elicits a prompt:</p>\n<p><em>Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect.</em></p>\n<p>This feature makes use of a revised<code>labscript_utils.FileWatcher</code> (<a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/61\" rel=\"nofollow\">pull request #61</a>), permitting the prompt to disappear should watched files be restored to their earlier state.</p>\n<p>A list of hashable_types is attained from the BLACS/plugins section of labconfig. This must return a list of strings upon raw evaluation, of the form '.py', etc. The polling interval for hashable and non hashable types can now also be set using the value of polling_interval (in seconds) in BLACS/plugins (default 1s).</p>\n<p>TODO: Bump labscript_utils version requirement upon the associated PR of labscript_utils being merged.</p>", "type": "rendered"}, "source": {"commit": {"hash": "58597f018207", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/blacs/commit/58597f018207"}, "html": {"href": "#!/monashspinor/blacs/commits/58597f018207"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/blacs"}, "html": {"href": "#!/monashspinor/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d3957a30-b3e6-498f-8b0f-78689402ec54}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "monashspinor/blacs", "uuid": "{d3957a30-b3e6-498f-8b0f-78689402ec54}"}, "branch": {"name": "hashable_filewatcher"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T02:51:05.245445+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "1c240654e522", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/1c240654e522.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/1c240654e522"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Bundle Measure Ball as an easter egg with a hidden button in the toolbar of a random tab.\r\n\r\nAlex Tritt has agreed to allow binary redistribution of MeasureBall under the license included in the directory. This license is just the simplified BSD license, with bits about allowing source redistribution or modification of the binary removed, leaving only the right to redistribute an unmodified binary.\r\n\r\nThe game runs fine on Windows, and on Linux via wine, though Alex has indicated he ought to be able to compile natively for linux and MacOS, in which case we can bundle two more binaries.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/62/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:8f6277eb4681%0D396f734eb399?from_pullrequest_id=62"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/62/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/62.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/62/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/62/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/62"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/62/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:8f6277eb4681%0D396f734eb399?from_pullrequest_id=62"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/62/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/62/statuses_page=1.json"}}, "title": "Easter egg", "close_source_branch": true, "type": "pullrequest", "id": 62, "destination": {"commit": {"hash": "396f734eb399", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/396f734eb399.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/396f734eb399"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2018-12-03T15:30:02.035606+00:00", "summary": {"raw": "Bundle Measure Ball as an easter egg with a hidden button in the toolbar of a random tab.\r\n\r\nAlex Tritt has agreed to allow binary redistribution of MeasureBall under the license included in the directory. This license is just the simplified BSD license, with bits about allowing source redistribution or modification of the binary removed, leaving only the right to redistribute an unmodified binary.\r\n\r\nThe game runs fine on Windows, and on Linux via wine, though Alex has indicated he ought to be able to compile natively for linux and MacOS, in which case we can bundle two more binaries.", "markup": "markdown", "html": "<p>Bundle Measure Ball as an easter egg with a hidden button in the toolbar of a random tab.</p>\n<p>Alex Tritt has agreed to allow binary redistribution of MeasureBall under the license included in the directory. This license is just the simplified BSD license, with bits about allowing source redistribution or modification of the binary removed, leaving only the right to redistribute an unmodified binary.</p>\n<p>The game runs fine on Windows, and on Linux via wine, though Alex has indicated he ought to be able to compile natively for linux and MacOS, in which case we can bundle two more binaries.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ef169e5a05a7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/ef169e5a05a7"}, "html": {"href": "#!/cbillington/blacs/commits/ef169e5a05a7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "easter-egg"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-05T16:05:53.908412+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "8f6277eb4681", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/8f6277eb4681.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/8f6277eb4681"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Use new labscript_utils submodule to display a splash screen during startup.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/63/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:396f734eb399%0D025dc026bf65?from_pullrequest_id=63"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/63/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/63.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/63/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/63/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/63"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/63/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:396f734eb399%0D025dc026bf65?from_pullrequest_id=63"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/63/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/63/statuses_page=1.json"}}, "title": "Splash screen", "close_source_branch": true, "type": "pullrequest", "id": 63, "destination": {"commit": {"hash": "025dc026bf65", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/025dc026bf65.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/025dc026bf65"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-01-29T00:35:29.196057+00:00", "summary": {"raw": "Use new labscript_utils submodule to display a splash screen during startup.", "markup": "markdown", "html": "<p>Use new labscript_utils submodule to display a splash screen during startup.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c133412848b4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/c133412848b4"}, "html": {"href": "#!/cbillington/blacs/commits/c133412848b4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "splash"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-04T20:01:18.234141+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "396f734eb399", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/396f734eb399.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/396f734eb399"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Do not start progress bar mainloop until plugin_setup_complete is called.\r\nThe mainloop requires the GUI, which has not been loaded yet at that point.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/64/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:025dc026bf65%0Dac92316b5a1d?from_pullrequest_id=64"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/64/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/64.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/64/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/64/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/64"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/64/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:025dc026bf65%0Dac92316b5a1d?from_pullrequest_id=64"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/64/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/64/statuses_page=1.json"}}, "title": "Progress bar race condition fix", "close_source_branch": true, "type": "pullrequest", "id": 64, "destination": {"commit": {"hash": "ac92316b5a1d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/ac92316b5a1d.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/ac92316b5a1d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-01-30T23:33:37.612482+00:00", "summary": {"raw": "Do not start progress bar mainloop until plugin_setup_complete is called.\r\nThe mainloop requires the GUI, which has not been loaded yet at that point.", "markup": "markdown", "html": "<p>Do not start progress bar mainloop until plugin_setup_complete is called.\nThe mainloop requires the GUI, which has not been loaded yet at that point.</p>", "type": "rendered"}, "source": {"commit": {"hash": "53dbf26344ae", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/53dbf26344ae"}, "html": {"href": "#!/cbillington/blacs/commits/53dbf26344ae"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-04T18:30:08.733894+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "025dc026bf65", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/025dc026bf65.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/025dc026bf65"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Delete unused submodules from the gtk days.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/65/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:ab917014ddcf%0D8f6277eb4681?from_pullrequest_id=65"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/65/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/65.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/65/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/65/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/65"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/65/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:ab917014ddcf%0D8f6277eb4681?from_pullrequest_id=65"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/65/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/65/statuses_page=1.json"}}, "title": "Delete unused submodules.", "close_source_branch": true, "type": "pullrequest", "id": 65, "destination": {"commit": {"hash": "8f6277eb4681", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/8f6277eb4681.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/8f6277eb4681"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-02-05T23:13:47.350373+00:00", "summary": {"raw": "Delete unused submodules from the gtk days.", "markup": "markdown", "html": "<p>Delete unused submodules from the gtk days.</p>", "type": "rendered"}, "source": {"commit": {"hash": "34efce040340", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/34efce040340"}, "html": {"href": "#!/cbillington/blacs/commits/34efce040340"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remove_cruft"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T16:19:18.409294+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ab917014ddcf", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/ab917014ddcf.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/ab917014ddcf"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Update BLACS to use new zprocess functionality as wrapped by labscipt_utils.ls_zprocess in [labscript_utils PR #66](#!/labscript_suite/labscript_utils/pull-requests/66/beginning-the-great-zprocess-migration-for/diff).\r\n\r\nBLACS without this pull request should work with the labscript-utils pull request already - this is not a backwards incompatible break. But this PR will pave the way for BLACS to use new zprocess functionality for remote workers.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/66/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:ed368fea0ea9%0Dab917014ddcf?from_pullrequest_id=66"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/66/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/66.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/66/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/66/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/66"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/66/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:ed368fea0ea9%0Dab917014ddcf?from_pullrequest_id=66"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/66/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/66/statuses_page=1.json"}}, "title": "Use labconfig-configured zprocess wrappers.", "close_source_branch": true, "type": "pullrequest", "id": 66, "destination": {"commit": {"hash": "ab917014ddcf", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/ab917014ddcf.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/ab917014ddcf"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-02-06T23:40:20.837582+00:00", "summary": {"raw": "Update BLACS to use new zprocess functionality as wrapped by labscipt_utils.ls_zprocess in [labscript_utils PR #66](#!/labscript_suite/labscript_utils/pull-requests/66/beginning-the-great-zprocess-migration-for/diff).\r\n\r\nBLACS without this pull request should work with the labscript-utils pull request already - this is not a backwards incompatible break. But this PR will pave the way for BLACS to use new zprocess functionality for remote workers.", "markup": "markdown", "html": "<p>Update BLACS to use new zprocess functionality as wrapped by labscipt_utils.ls_zprocess in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/66/beginning-the-great-zprocess-migration-for/diff\" rel=\"nofollow\">labscript_utils PR #66</a>.</p>\n<p>BLACS without this pull request should work with the labscript-utils pull request already - this is not a backwards incompatible break. But this PR will pave the way for BLACS to use new zprocess functionality for remote workers.</p>", "type": "rendered"}, "source": {"commit": {"hash": "8a996289a4c2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/8a996289a4c2"}, "html": {"href": "#!/cbillington/blacs/commits/8a996289a4c2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "zprocess_changes"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-22T15:59:57.995681+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ed368fea0ea9", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/ed368fea0ea9.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/ed368fea0ea9"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/67/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:f2b66b426b03%0D5cde3d142ed8?from_pullrequest_id=67"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/67/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/67"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:f2b66b426b03%0D5cde3d142ed8?from_pullrequest_id=67"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/67/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/67/statuses_page=1.json"}}, "title": "Implement remote workers in BLACS", "close_source_branch": true, "type": "pullrequest", "id": 67, "destination": {"commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-04-24T18:13:30.841322+00:00", "summary": {"raw": "* Add support for remote workers.\r\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\r\n    workers, neither of which are supported quite yet.\r\n    Require labscript_utils 2.12.4, which has fixes for remote workers\r\n    and which in turn relies on a zprocess version with other required fixes.\r\n\r\n* Convert h5 filepaths to network agnostic before sending them to worker\r\n    processes for transition_to_buffered.\r\n\r\n    Only do this if the device is actually a remote device. This way, it is backward\r\n    compatible with device not expecting remote paths. Workers that are updated to\r\n    support being remote workers will need to check `self.is_remote` before calling\r\n    `path_to_local`, since if running locally the path with continue to be a local one.\r\n\r\n    Bump patch version so that labscript devices can depend on this new behaviour.\r\n\r\nThis PR requires labscript_utils [pull request 77](#!/labscript_suite/labscript_utils/pull-requests/77/), and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.\r\n\r\nIt is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.\r\n\r\nFor now, if anyone wants to test, this is my test script:\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.IMAQdxCamera.labscript_devices import IMAQdxCamera\r\n\r\nPulseBlaster('pulseblaster')\r\nTrigger('camera_trigger', pulseblaster.direct_outputs, 'flag 0')\r\nRemoteBLACS('test_remote', 'localhost')\r\nIMAQdxCamera(\r\n    'camera', camera_trigger, 'trigger', serial_number=0xDEADBEEF, worker=test_remote\r\n)\r\nIMAQdxCamera('camera2', camera_trigger, 'trigger', serial_number=0xDEADBEEF)\r\nstart()\r\n\r\ncamera.expose(1, 'test', trigger_duration=0.2)\r\ncamera2.expose(1, 'test', trigger_duration=0.2)\r\n\r\nstop(2)\r\n```\r\n\r\nAnd to start a zprocess remote server, you will need to run `python -m labscript_utils.remote` on the remote computer.\r\n\r\nYou will want to configure security - I think the remote server refuses to run presently unless you have either set\r\n```\r\n[security]\r\nshared_secret=<path to shared secret file>\r\n```\r\nor\r\n```\r\n[security]\r\nallow_insecure = True\r\n```\r\n\r\nin your labconfig.\r\n\r\nA new shared secret file can be generated with `python -m zprocess.makesecret`. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.\r\n\r\nOne complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as `python -m labscript_utils.zlock` instead of `python -m zprocess.locking` or `python -m zprocess.zlock` (the former is an alias for the latter nowadays). However, if you look at `labscript_utils.zlock` you can see that all it is doing is reading labconfig and calling `python -m zprocess.zlock <command line args>`, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  `python -m zprocess.zlock -h` will list command line options for running a zlock server.\r\n\r\nSo you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.\r\n\r\nThe reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.\r\n\r\nSo I'm undecided about how to resolve this. Two options are:\r\n\r\n1. Add a setting to labconfig to leave zlock, specifically, unencrypted\r\n2. Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.\r\n\r\nThis is exluding the third option where people with programs like BIAS just run with `allow_insecure = True` all the time - that strikes me as not a good plan.\r\n\r\nBoth of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like `python -m labscript_utils.zlockproxy`. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.\r\n\r\nThere is no particular reason for *logging* to be encrypted either given what it is, but I find it unappealing to have *some* connections encrypted and some not - this strikes me as more bug-prone than having *everything* encrypted. This is the main point against having zlock be an exception.\r\n\r\nInterested in people's thoughts, including @lincolndturner if you have any opinion here.\r\n\r\nA final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Add support for remote workers.\n    Raise NotImplementedError on request for remote GUI, or multi-hop remote\n    workers, neither of which are supported quite yet.\n    Require labscript_utils 2.12.4, which has fixes for remote workers\n    and which in turn relies on a zprocess version with other required fixes.</p>\n</li>\n<li>\n<p>Convert h5 filepaths to network agnostic before sending them to worker\n    processes for transition_to_buffered.</p>\n<p>Only do this if the device is actually a remote device. This way, it is backward\ncompatible with device not expecting remote paths. Workers that are updated to\nsupport being remote workers will need to check <code>self.is_remote</code> before calling\n<code>path_to_local</code>, since if running locally the path with continue to be a local one.</p>\n<p>Bump patch version so that labscript devices can depend on this new behaviour.</p>\n</li>\n</ul>\n<p>This PR requires labscript_utils <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/77/\" rel=\"nofollow\">pull request 77</a>, and so should be merged after it, with the version check updated to reflect whatever version number that PR ends up being tagged as.</p>\n<p>It is not currently obvious how to setup and run remote workers. I will need to document how to start the remote process server, including configuring a security key.</p>\n<p>For now, if anyone wants to test, this is my test script:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.IMAQdxCamera.labscript_devices</span> <span class=\"kn\">import</span> <span class=\"n\">IMAQdxCamera</span>\n\n<span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">Trigger</span><span class=\"p\">(</span><span class=\"s1\">&#39;camera_trigger&#39;</span><span class=\"p\">,</span> <span class=\"n\">pulseblaster</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">RemoteBLACS</span><span class=\"p\">(</span><span class=\"s1\">&#39;test_remote&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">IMAQdxCamera</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;camera&#39;</span><span class=\"p\">,</span> <span class=\"n\">camera_trigger</span><span class=\"p\">,</span> <span class=\"s1\">&#39;trigger&#39;</span><span class=\"p\">,</span> <span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"mh\">0xDEADBEEF</span><span class=\"p\">,</span> <span class=\"n\">worker</span><span class=\"o\">=</span><span class=\"n\">test_remote</span>\n<span class=\"p\">)</span>\n<span class=\"n\">IMAQdxCamera</span><span class=\"p\">(</span><span class=\"s1\">&#39;camera2&#39;</span><span class=\"p\">,</span> <span class=\"n\">camera_trigger</span><span class=\"p\">,</span> <span class=\"s1\">&#39;trigger&#39;</span><span class=\"p\">,</span> <span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"mh\">0xDEADBEEF</span><span class=\"p\">)</span>\n<span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">expose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span> <span class=\"n\">trigger_duration</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">camera2</span><span class=\"o\">.</span><span class=\"n\">expose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span> <span class=\"n\">trigger_duration</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>And to start a zprocess remote server, you will need to run <code>python -m labscript_utils.remote</code> on the remote computer.</p>\n<p>You will want to configure security - I think the remote server refuses to run presently unless you have either set</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[security]</span>\n<span class=\"na\">shared_secret</span><span class=\"o\">=</span><span class=\"s\">&lt;path to shared secret file&gt;</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[security]</span>\n<span class=\"na\">allow_insecure</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n</pre></div>\n\n\n<p>in your labconfig.</p>\n<p>A new shared secret file can be generated with <code>python -m zprocess.makesecret</code>. Obviously all labconfigs on the computers that need to communicate with each other will need to have the same shared secret file.</p>\n<p>One complication of enabling encryption is that it is enabled for all zmq communication in the labscript suite. This includes zlock. To start zlock with labscript-suite security settings, it needs to be started as <code>python -m labscript_utils.zlock</code> instead of <code>python -m zprocess.locking</code> or <code>python -m zprocess.zlock</code> (the former is an alias for the latter nowadays). However, if you look at <code>labscript_utils.zlock</code> you can see that all it is doing is reading labconfig and calling <code>python -m zprocess.zlock &lt;command line args&gt;</code>, so if running zlock on a separate computer without the labscript suite, it is easy enough to pass in the required shared secret on the command line.  <code>python -m zprocess.zlock -h</code> will list command line options for running a zlock server.</p>\n<p>So you will need to restart zlock servers with encryption enabled, furthermore, you will need to kill zlog servers that may still be running after turning encryption on, as they will need to be started again with encryption.</p>\n<p>The reason zlock is a complication is that non-python programs may need to talk to zlock still (such as BIAS), and it will be a pain in the neck for them to require encryption to do so. And unlike the arbitrary code execution allowed by the remote process server, the threat model of \"someone can temporarily ask politely for other programs not to open a HDF5 file if they know its exact name\" doesn't exactly have me shaking in my boots.</p>\n<p>So I'm undecided about how to resolve this. Two options are:</p>\n<ol>\n<li>Add a setting to labconfig to leave zlock, specifically, unencrypted</li>\n<li>Make a proxy script that can run locally that forwards an unencrypted zmq REQ socket to a remote encrypted zmq REP socket. This could be used to allow programs like BIAS to talk to an encrypted zlock server.</li>\n</ol>\n<p>This is exluding the third option where people with programs like BIAS just run with <code>allow_insecure = True</code> all the time - that strikes me as not a good plan.</p>\n<p>Both of these options are easy to implement. The latter would likely mean adding another port number in labconfig for the local zlock proxy, and then the proxy would be started with something like <code>python -m labscript_utils.zlockproxy</code>. BIAS would then need to be modified to talk to localhost and that port number instead of a remote zlock server.</p>\n<p>There is no particular reason for <em>logging</em> to be encrypted either given what it is, but I find it unappealing to have <em>some</em> connections encrypted and some not - this strikes me as more bug-prone than having <em>everything</em> encrypted. This is the main point against having zlock be an exception.</p>\n<p>Interested in people's thoughts, including @lincolndturner if you have any opinion here.</p>\n<p>A final option is that it might be possible to configure zlock to accept both encrypted and unencrypted traffic. This would be fairly ideal (so long as it optional so that people thinking they're using secure communication aren't misled), but zmq authentication is hard so it will be some effort to figure out if this is possible and implement it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "6740894fd68a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/6740894fd68a"}, "html": {"href": "#!/cbillington/blacs/commits/6740894fd68a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote-workers"}}, "comment_count": 34, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-29T18:50:21.805196+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "f2b66b426b03", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/f2b66b426b03.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/f2b66b426b03"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Have analysis submission catch authentication errors and add them to the tooltip.\r\nThis way incorrect auth setup between BLACS and lyse can be better diagnosed\r\nand doesn't take down the analysis submission loop.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/68/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:cdf82043d5ef%0D5d54c0612c8c?from_pullrequest_id=68"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/68/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/68.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/68/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/68/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/68"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/68/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:cdf82043d5ef%0D5d54c0612c8c?from_pullrequest_id=68"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/68/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/68/statuses_page=1.json"}}, "title": "Handle authentication error connecting to lyse", "close_source_branch": true, "type": "pullrequest", "id": 68, "destination": {"commit": {"hash": "5d54c0612c8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d54c0612c8c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d54c0612c8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-04-26T21:15:08.281439+00:00", "summary": {"raw": "Have analysis submission catch authentication errors and add them to the tooltip.\r\nThis way incorrect auth setup between BLACS and lyse can be better diagnosed\r\nand doesn't take down the analysis submission loop.", "markup": "markdown", "html": "<p>Have analysis submission catch authentication errors and add them to the tooltip.\nThis way incorrect auth setup between BLACS and lyse can be better diagnosed\nand doesn't take down the analysis submission loop.</p>", "type": "rendered"}, "source": {"commit": {"hash": "0633bec01c3c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/0633bec01c3c"}, "html": {"href": "#!/cbillington/blacs/commits/0633bec01c3c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "catch-auth-error"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-30T15:11:15.384810+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "cdf82043d5ef", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/cdf82043d5ef.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/cdf82043d5ef"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "The incorrect style was being used as the default before modifying the progress\r\nbar's colours. Use a widget-specific style instead. Otherwise, if there is a marker for the current time, but with no colour set, the background colour of the progress bar would depend on whether the window was active, and would turn white when unfocused.\r\n\r\nThis is a pretty trivial fix, I will merge it on Monday if there are no comments.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/69/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:43c17859700c%0Db1526e256470?from_pullrequest_id=69"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/69/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/69.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/69/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/69/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/69"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/69/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:43c17859700c%0Db1526e256470?from_pullrequest_id=69"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/69/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/69/statuses_page=1.json"}}, "title": "Fix progress bar turning white when BLACS is not the active window.", "close_source_branch": true, "type": "pullrequest", "id": 69, "destination": {"commit": {"hash": "b1526e256470", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/b1526e256470.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/b1526e256470"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-05-08T15:36:32.457771+00:00", "summary": {"raw": "The incorrect style was being used as the default before modifying the progress\r\nbar's colours. Use a widget-specific style instead. Otherwise, if there is a marker for the current time, but with no colour set, the background colour of the progress bar would depend on whether the window was active, and would turn white when unfocused.\r\n\r\nThis is a pretty trivial fix, I will merge it on Monday if there are no comments.", "markup": "markdown", "html": "<p>The incorrect style was being used as the default before modifying the progress\nbar's colours. Use a widget-specific style instead. Otherwise, if there is a marker for the current time, but with no colour set, the background colour of the progress bar would depend on whether the window was active, and would turn white when unfocused.</p>\n<p>This is a pretty trivial fix, I will merge it on Monday if there are no comments.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f70fd0746f66", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/f70fd0746f66"}, "html": {"href": "#!/cbillington/blacs/commits/f70fd0746f66"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-12T22:56:36.414839+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "43c17859700c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/43c17859700c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/43c17859700c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Have the progress bar treat (-1, -1, -1) as implying that no colour was set\r\nfor a marker, as per [labscript PR 48](#!/labscript_suite/labscript/pull-requests/48/marker-colour-enhancements). If (0, 0, 0) is encountered, actually treat it as black, unless\r\nthe dtype of the colour array implies the shot was compiled with a version\r\nof labscript from before this distinction was made, in which case treat\r\n(0, 0, 0) as implying the colour was not set, as before. As such this change is\r\nbackward compatible.\r\n\r\nWill merge on Monday if no comments", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/70/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:b1526e256470%0D5f7319cf6036?from_pullrequest_id=70"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/70/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/70.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/70/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/70/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/70"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/70/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:b1526e256470%0D5f7319cf6036?from_pullrequest_id=70"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/70/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/70/statuses_page=1.json"}}, "title": "Compatibility with 'null' marker colours", "close_source_branch": true, "type": "pullrequest", "id": 70, "destination": {"commit": {"hash": "5f7319cf6036", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5f7319cf6036.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5f7319cf6036"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-05-08T18:20:57.732639+00:00", "summary": {"raw": "Have the progress bar treat (-1, -1, -1) as implying that no colour was set\r\nfor a marker, as per [labscript PR 48](#!/labscript_suite/labscript/pull-requests/48/marker-colour-enhancements). If (0, 0, 0) is encountered, actually treat it as black, unless\r\nthe dtype of the colour array implies the shot was compiled with a version\r\nof labscript from before this distinction was made, in which case treat\r\n(0, 0, 0) as implying the colour was not set, as before. As such this change is\r\nbackward compatible.\r\n\r\nWill merge on Monday if no comments", "markup": "markdown", "html": "<p>Have the progress bar treat (-1, -1, -1) as implying that no colour was set\nfor a marker, as per <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/pull-requests/48/marker-colour-enhancements\" rel=\"nofollow\">labscript PR 48</a>. If (0, 0, 0) is encountered, actually treat it as black, unless\nthe dtype of the colour array implies the shot was compiled with a version\nof labscript from before this distinction was made, in which case treat\n(0, 0, 0) as implying the colour was not set, as before. As such this change is\nbackward compatible.</p>\n<p>Will merge on Monday if no comments</p>", "type": "rendered"}, "source": {"commit": {"hash": "3c3cab607bd2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/3c3cab607bd2"}, "html": {"href": "#!/cbillington/blacs/commits/3c3cab607bd2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "marker-colours"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-12T22:55:28.810239+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "b1526e256470", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/b1526e256470.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/b1526e256470"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "On close tab, call `worker.terminate()` unconditionally, even if the worker has apparently not started yet. Otherwise the worker may yet start.\r\n\r\nRely on zprocess 2.13.3 which makes terminate() race-free such that this\r\nactually works.\r\n\r\nPreviously, one could still hang BLACS for some seconds by clicking restart very\r\nquickly, and worse, leave child processes running.\r\n\r\nRelying on a newer zprocess also resolves a regression due to a bug in zprocess,\r\nreported here (though the symptoms appear to be specific to that lab, the same\r\nissue could crash BLACS in other ways):\r\n\r\nhttps://bitbucket.org/cbillington/zprocess/issues/11/error-being-thrown-when-updating-from", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/71/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:5f7319cf6036%0D73d3ef0fde33?from_pullrequest_id=71"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/71/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/71.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/71/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/71/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/71"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/71/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:5f7319cf6036%0D73d3ef0fde33?from_pullrequest_id=71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/71/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/71/statuses_page=1.json"}}, "title": "Race-free worker termination, rely on new zprocess that fixes a regression", "close_source_branch": true, "type": "pullrequest", "id": 71, "destination": {"commit": {"hash": "73d3ef0fde33", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/73d3ef0fde33.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/73d3ef0fde33"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-05-09T21:05:55.246166+00:00", "summary": {"raw": "On close tab, call `worker.terminate()` unconditionally, even if the worker has apparently not started yet. Otherwise the worker may yet start.\r\n\r\nRely on zprocess 2.13.3 which makes terminate() race-free such that this\r\nactually works.\r\n\r\nPreviously, one could still hang BLACS for some seconds by clicking restart very\r\nquickly, and worse, leave child processes running.\r\n\r\nRelying on a newer zprocess also resolves a regression due to a bug in zprocess,\r\nreported here (though the symptoms appear to be specific to that lab, the same\r\nissue could crash BLACS in other ways):\r\n\r\nhttps://bitbucket.org/cbillington/zprocess/issues/11/error-being-thrown-when-updating-from", "markup": "markdown", "html": "<p>On close tab, call <code>worker.terminate()</code> unconditionally, even if the worker has apparently not started yet. Otherwise the worker may yet start.</p>\n<p>Rely on zprocess 2.13.3 which makes terminate() race-free such that this\nactually works.</p>\n<p>Previously, one could still hang BLACS for some seconds by clicking restart very\nquickly, and worse, leave child processes running.</p>\n<p>Relying on a newer zprocess also resolves a regression due to a bug in zprocess,\nreported here (though the symptoms appear to be specific to that lab, the same\nissue could crash BLACS in other ways):</p>\n<p><a href=\"https://bitbucket.org/cbillington/zprocess/issues/11/error-being-thrown-when-updating-from\" rel=\"nofollow\" class=\"ap-connect-link\">https://bitbucket.org/cbillington/zprocess/issues/11/error-being-thrown-when-updating-from</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "a633dccb8822", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/a633dccb8822"}, "html": {"href": "#!/cbillington/blacs/commits/a633dccb8822"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix2"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-12T22:52:49.981452+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "5f7319cf6036", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5f7319cf6036.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5f7319cf6036"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Resolves issue #51. \r\n\r\nDo not assert that progress bar is running upon 'science\\_over' callback, which can be issued at abort or restarted or timed\\_out or error\\_condition from the experiment queue \\(during transition\\_to\\_buffered or mid-shot\\).\r\n\r\nI tried using a different callback for abort or restart in experiment\\_queue.py, which resolved the issue for mid-shot abort or device restarts, but it persisted for the other cases. I see no problem with calling the `_stop` or `clear_bar` functions if `running=False` so removing the assertion is the easiest fix.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/72/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:5cde3d142ed8%0D43c17859700c?from_pullrequest_id=72"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/72/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/72.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/72/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/72/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/72"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/72/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:5cde3d142ed8%0D43c17859700c?from_pullrequest_id=72"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/72/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/72/statuses_page=1.json"}}, "title": "Bugfix for progress bar plugin", "close_source_branch": true, "type": "pullrequest", "id": 72, "destination": {"commit": {"hash": "43c17859700c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/43c17859700c.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/43c17859700c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-05-11T14:30:25.167860+00:00", "summary": {"raw": "Resolves issue #51. \r\n\r\nDo not assert that progress bar is running upon 'science\\_over' callback, which can be issued at abort or restarted or timed\\_out or error\\_condition from the experiment queue \\(during transition\\_to\\_buffered or mid-shot\\).\r\n\r\nI tried using a different callback for abort or restart in experiment\\_queue.py, which resolved the issue for mid-shot abort or device restarts, but it persisted for the other cases. I see no problem with calling the `_stop` or `clear_bar` functions if `running=False` so removing the assertion is the easiest fix.", "markup": "markdown", "html": "<p>Resolves issue <a href=\"#!/labscript_suite/blacs/issues/51/progress-bar-fails-for-failed-aborted\" rel=\"nofollow\" title=\"Progress bar fails for failed/aborted shots\" class=\"ap-connect-link\"><s>#51</s></a>. </p>\n<p>Do not assert that progress bar is running upon 'science_over' callback, which can be issued at abort or restarted or timed_out or error_condition from the experiment queue (during transition_to_buffered or mid-shot).</p>\n<p>I tried using a different callback for abort or restart in experiment_queue.py, which resolved the issue for mid-shot abort or device restarts, but it persisted for the other cases. I see no problem with calling the <code>_stop</code> or <code>clear_bar</code> functions if <code>running=False</code> so removing the assertion is the easiest fix.</p>", "type": "rendered"}, "source": {"commit": {"hash": "b63fd8713e1c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/blacs/commit/b63fd8713e1c"}, "html": {"href": "#!/rpanderson/blacs/commits/b63fd8713e1c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/blacs"}, "html": {"href": "#!/rpanderson/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4821d2a9-d352-4126-866a-0af82f2ba7e4}ts=2203675"}}, "type": "repository", "name": "blacs", "full_name": "rpanderson/blacs", "uuid": "{4821d2a9-d352-4126-866a-0af82f2ba7e4}"}, "branch": {"name": "progressbar-bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-13T17:38:14.427163+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "5cde3d142ed8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5cde3d142ed8.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5cde3d142ed8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/73/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:b99aec349c6b%0Df2b66b426b03?from_pullrequest_id=73"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/73/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/73"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:b99aec349c6b%0Df2b66b426b03?from_pullrequest_id=73"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/73/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/73/statuses_page=1.json"}}, "title": "Deserialise transition to manual and implement start_order and stop_order", "close_source_branch": true, "type": "pullrequest", "id": 73, "destination": {"commit": {"hash": "f2b66b426b03", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/f2b66b426b03.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/f2b66b426b03"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-05-17T03:56:38.513345+00:00", "summary": {"raw": "This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue #34.\r\n\r\nThis PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in [labscript PR 37](#!/labscript_suite/labscript/pull-requests/37/). This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers `start_order` and `stop_order` respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have `start_order = stop_order = 0` and so are all transitioned in parallel).\r\n\r\nThe remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.", "markup": "markdown", "html": "<p>This PR makes transitioning devices back to manual mode at the end of a shot parallel, as was already the case with transitioning them to buffered mode at the start of a shot.  This fixes issue <a href=\"#!/labscript_suite/blacs/issues/34/calls-to-transition_to_manual-are\" rel=\"nofollow\" title=\"calls to transition_to_manual are serialised by the queue manager\" class=\"ap-connect-link\"><s>#34</s></a>.</p>\n<p>This PR also implements the BLACS side of 'start order' and 'stop order', which were introduced in labscript in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/pull-requests/37/\" rel=\"nofollow\">labscript PR 37</a>. This allows users to optionally deserialise transitioning of specific devices to buffered or manual mode by specifying integers <code>start_order</code> and <code>stop_order</code> respectively as keyword arguments to the labscript device class. Devices will be transitioned in order from lowest to highest, with devices having equal orders transitioned simultaneously (by default all devices have <code>start_order = stop_order = 0</code> and so are all transitioned in parallel).</p>\n<p>The remaining issue Phil raised with my previous attempt at deserialising transition_to_manual has been resolved, this is that the queue manager now continues transitioning all devices into manual mode even if one of them has an error.</p>", "type": "rendered"}, "source": {"commit": {"hash": "832987fd9392", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/832987fd9392"}, "html": {"href": "#!/cbillington/blacs/commits/832987fd9392"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "deserialise-transition-to-manual"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-01T16:37:48.396556+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "b99aec349c6b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/b99aec349c6b.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/b99aec349c6b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This issue was raised on bitbucket:\r\n#!/labscript_suite/labscript_devices/pull-requests/71/\r\n\r\nBLACS' use of hard-coded paths for tempfiles caused problems, since\r\nthey are relative paths and so are in whichever directory BLACS is running in,\r\nwhich it might not have write permissions for.\r\n\r\nThis change uses full path to a random filename in the platform's proper\r\ntemporary folder instead, avoiding permissions and name collision issues.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/74/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:1b4c69c290bd%0D7bf9bf6c40fa?from_pullrequest_id=74"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/74/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/74.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/74/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/74/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/74"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/74/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:1b4c69c290bd%0D7bf9bf6c40fa?from_pullrequest_id=74"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/74/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/74/statuses_page=1.json"}}, "title": "Fix use of hard-coded relative paths for temporary files.", "close_source_branch": true, "type": "pullrequest", "id": 74, "destination": {"commit": {"hash": "7bf9bf6c40fa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/7bf9bf6c40fa.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/7bf9bf6c40fa"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-06-20T23:25:04.704880+00:00", "summary": {"raw": "This issue was raised on bitbucket:\r\n#!/labscript_suite/labscript_devices/pull-requests/71/\r\n\r\nBLACS' use of hard-coded paths for tempfiles caused problems, since\r\nthey are relative paths and so are in whichever directory BLACS is running in,\r\nwhich it might not have write permissions for.\r\n\r\nThis change uses full path to a random filename in the platform's proper\r\ntemporary folder instead, avoiding permissions and name collision issues.", "markup": "markdown", "html": "<p>This issue was raised on bitbucket:\n<a href=\"#!/labscript_suite/labscript_devices/pull-requests/71/\" rel=\"nofollow\" class=\"ap-connect-link\">#!/labscript_suite/labscript_devices/pull-requests/71/</a></p>\n<p>BLACS' use of hard-coded paths for tempfiles caused problems, since\nthey are relative paths and so are in whichever directory BLACS is running in,\nwhich it might not have write permissions for.</p>\n<p>This change uses full path to a random filename in the platform's proper\ntemporary folder instead, avoiding permissions and name collision issues.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cbd56eeb3ac0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/cbd56eeb3ac0"}, "html": {"href": "#!/cbillington/blacs/commits/cbd56eeb3ac0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "bugfix"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-21T22:22:49.732925+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "1b4c69c290bd", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/1b4c69c290bd.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/1b4c69c290bd"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR addresses the more general discussion about how to incorporate manual control of device settings from BLACS is [labscript\\_utils issue 26](#!/labscript_suite/labscript_utils/issues/26/add-enum-control-widget). This PR aspires to add the framework for device\\_properties widgets in a device BLACS tab in much the same way AO, DO, DDS, and Image outputs are handled now.\r\n\r\nConfiguration is done using a new style of property dictionary that uses either an AO, DO, or new EO output for each property.\r\n\r\n> `device_properties = {'device_property':{'default':value, 'type':'num', 'min':0, 'max':1, 'base_unit':'V', 'step':0.1, 'decimals':1}, `\r\n>\r\n> `                     'device_property2'}:{'default':value, 'type':'bool'},`\r\n>\r\n> `                     'device_property3'}:{'default':'value','type':'enum','options':['option 1','option 2']}}`\r\n\r\nIt also establishes the `program_device_properties` state machine method which works in parallel to the `program_devices` method. In order to program these properties, the BLACS\\_worker must define a `program_properties` method in order to control any specified device properties. \r\n\r\nThis requires [PR #93 from labscript\\_utils](#!/labscript_suite/labscript_utils/pull-requests/93/add-enumoutput-widget-type/diff). The enum controls have only been tested for basic functionality. That said, most of the functionality is lifted from the AO and DO devices so I suspect it will be fairly robust.\r\n\r\nKnown Issues remaining:\r\n\r\n* Currently, automatic layout is done either by hand or using `auto_place_widgets` method with a custom group name defined by the user. When mixing types of outputs, it isn't particularly pretty. A separate method for property widgets with more refined layout control is likely necessary. In particular, `auto_place_widgets` does not play nice with the camera tab layouts at the moment. \r\n* Default values are not respected. For the AO and DO properties this isn\u2019t a big issue. For the EO output this is a pretty big problem. Right now it selects the output based on alphabetical sorting \\(necessitated by laziness while also wanting to allow list, dict, and tuple inputs for the \u2018options\u2019\\) which often will place the device in an unusable state at initial startup. This is particularly true when many interacting settings are being controlled at once.\r\n* Remote value checking is still up in the air. I initially thought that the `check_remote_values` method of the worker should populate the properties values as well as the output values. In getting my camera up and running with some test widgets, I found this to be problematic since all properties are read at once, which causes needless slowdowns. I need to work out how to limit the properties read during `check_remote_values` to only those in the device\\_properties definition.\r\n\r\nI\u2019ve gotten a test case working for the Pylon camera which I\u2019ll put up as a third PR to labscript\\_devices. Usage is still pretty rough but I wanted to get feedback on the approach before sinking more time in. Beyond the above issues, I\u2019d like some input on:\r\n\r\n* How best to integrate all of this with the labscript device itself? Should device properties still be configured from device instantiation args or should we move to controlled properties being used more like standard Outputs? I lean towards the former.\r\n* Right now I am working towards having the controlled device properties be largely incorporated into the standard outputs workflow of the device with regards to smart programming and checking remote values, while having a separate programming workflow. Is that a good idea?\r\n* The meta-class is ultimately going to make this all easier. Is there any special conventions we\u2019d like to incorporate beyond moving already statically defined things to it?\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/75/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/dihm/blacs:8b5909f70bbf%0D5d3b0134453f?from_pullrequest_id=75"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/75/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/75"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/dihm/blacs:8b5909f70bbf%0D5d3b0134453f?from_pullrequest_id=75"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/75/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/75/statuses_page=1.json"}}, "title": "Device properties", "close_source_branch": true, "type": "pullrequest", "id": 75, "destination": {"commit": {"hash": "5d3b0134453f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/5d3b0134453f.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/5d3b0134453f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-10-09T00:02:03.574064+00:00", "summary": {"raw": "This PR addresses the more general discussion about how to incorporate manual control of device settings from BLACS is [labscript\\_utils issue 26](#!/labscript_suite/labscript_utils/issues/26/add-enum-control-widget). This PR aspires to add the framework for device\\_properties widgets in a device BLACS tab in much the same way AO, DO, DDS, and Image outputs are handled now.\r\n\r\nConfiguration is done using a new style of property dictionary that uses either an AO, DO, or new EO output for each property.\r\n\r\n> `device_properties = {'device_property':{'default':value, 'type':'num', 'min':0, 'max':1, 'base_unit':'V', 'step':0.1, 'decimals':1}, `\r\n>\r\n> `                     'device_property2'}:{'default':value, 'type':'bool'},`\r\n>\r\n> `                     'device_property3'}:{'default':'value','type':'enum','options':['option 1','option 2']}}`\r\n\r\nIt also establishes the `program_device_properties` state machine method which works in parallel to the `program_devices` method. In order to program these properties, the BLACS\\_worker must define a `program_properties` method in order to control any specified device properties. \r\n\r\nThis requires [PR #93 from labscript\\_utils](#!/labscript_suite/labscript_utils/pull-requests/93/add-enumoutput-widget-type/diff). The enum controls have only been tested for basic functionality. That said, most of the functionality is lifted from the AO and DO devices so I suspect it will be fairly robust.\r\n\r\nKnown Issues remaining:\r\n\r\n* Currently, automatic layout is done either by hand or using `auto_place_widgets` method with a custom group name defined by the user. When mixing types of outputs, it isn't particularly pretty. A separate method for property widgets with more refined layout control is likely necessary. In particular, `auto_place_widgets` does not play nice with the camera tab layouts at the moment. \r\n* Default values are not respected. For the AO and DO properties this isn\u2019t a big issue. For the EO output this is a pretty big problem. Right now it selects the output based on alphabetical sorting \\(necessitated by laziness while also wanting to allow list, dict, and tuple inputs for the \u2018options\u2019\\) which often will place the device in an unusable state at initial startup. This is particularly true when many interacting settings are being controlled at once.\r\n* Remote value checking is still up in the air. I initially thought that the `check_remote_values` method of the worker should populate the properties values as well as the output values. In getting my camera up and running with some test widgets, I found this to be problematic since all properties are read at once, which causes needless slowdowns. I need to work out how to limit the properties read during `check_remote_values` to only those in the device\\_properties definition.\r\n\r\nI\u2019ve gotten a test case working for the Pylon camera which I\u2019ll put up as a third PR to labscript\\_devices. Usage is still pretty rough but I wanted to get feedback on the approach before sinking more time in. Beyond the above issues, I\u2019d like some input on:\r\n\r\n* How best to integrate all of this with the labscript device itself? Should device properties still be configured from device instantiation args or should we move to controlled properties being used more like standard Outputs? I lean towards the former.\r\n* Right now I am working towards having the controlled device properties be largely incorporated into the standard outputs workflow of the device with regards to smart programming and checking remote values, while having a separate programming workflow. Is that a good idea?\r\n* The meta-class is ultimately going to make this all easier. Is there any special conventions we\u2019d like to incorporate beyond moving already statically defined things to it?\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This PR addresses the more general discussion about how to incorporate manual control of device settings from BLACS is <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/issues/26/add-enum-control-widget\" rel=\"nofollow\">labscript_utils issue 26</a>. This PR aspires to add the framework for device_properties widgets in a device BLACS tab in much the same way AO, DO, DDS, and Image outputs are handled now.</p>\n<p>Configuration is done using a new style of property dictionary that uses either an AO, DO, or new EO output for each property.</p>\n<blockquote>\n<p><code>device_properties = {'device_property':{'default':value, 'type':'num', 'min':0, 'max':1, 'base_unit':'V', 'step':0.1, 'decimals':1},</code></p>\n<p><code>'device_property2'}:{'default':value, 'type':'bool'},</code></p>\n<p><code>'device_property3'}:{'default':'value','type':'enum','options':['option 1','option 2']}}</code></p>\n</blockquote>\n<p>It also establishes the <code>program_device_properties</code> state machine method which works in parallel to the <code>program_devices</code> method. In order to program these properties, the BLACS_worker must define a <code>program_properties</code> method in order to control any specified device properties. </p>\n<p>This requires <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/93/add-enumoutput-widget-type/diff\" rel=\"nofollow\">PR #93 from labscript_utils</a>. The enum controls have only been tested for basic functionality. That said, most of the functionality is lifted from the AO and DO devices so I suspect it will be fairly robust.</p>\n<p>Known Issues remaining:</p>\n<ul>\n<li>Currently, automatic layout is done either by hand or using <code>auto_place_widgets</code> method with a custom group name defined by the user. When mixing types of outputs, it isn't particularly pretty. A separate method for property widgets with more refined layout control is likely necessary. In particular, <code>auto_place_widgets</code> does not play nice with the camera tab layouts at the moment. </li>\n<li>Default values are not respected. For the AO and DO properties this isn\u2019t a big issue. For the EO output this is a pretty big problem. Right now it selects the output based on alphabetical sorting (necessitated by laziness while also wanting to allow list, dict, and tuple inputs for the \u2018options\u2019) which often will place the device in an unusable state at initial startup. This is particularly true when many interacting settings are being controlled at once.</li>\n<li>Remote value checking is still up in the air. I initially thought that the <code>check_remote_values</code> method of the worker should populate the properties values as well as the output values. In getting my camera up and running with some test widgets, I found this to be problematic since all properties are read at once, which causes needless slowdowns. I need to work out how to limit the properties read during <code>check_remote_values</code> to only those in the device_properties definition.</li>\n</ul>\n<p>I\u2019ve gotten a test case working for the Pylon camera which I\u2019ll put up as a third PR to labscript_devices. Usage is still pretty rough but I wanted to get feedback on the approach before sinking more time in. Beyond the above issues, I\u2019d like some input on:</p>\n<ul>\n<li>How best to integrate all of this with the labscript device itself? Should device properties still be configured from device instantiation args or should we move to controlled properties being used more like standard Outputs? I lean towards the former.</li>\n<li>Right now I am working towards having the controlled device properties be largely incorporated into the standard outputs workflow of the device with regards to smart programming and checking remote values, while having a separate programming workflow. Is that a good idea?</li>\n<li>The meta-class is ultimately going to make this all easier. Is there any special conventions we\u2019d like to incorporate beyond moving already statically defined things to it?</li>\n</ul>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "8b5909f70bbf", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs/commit/8b5909f70bbf"}, "html": {"href": "#!/dihm/blacs/commits/8b5909f70bbf"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/blacs"}, "html": {"href": "#!/dihm/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "dihm/blacs", "uuid": "{5d6c277c-4faa-4fa2-af9f-e3e49c4673b3}"}, "branch": {"name": "device_properties"}}, "comment_count": 6, "state": "OPEN", "task_count": 0, "reason": "", "updated_on": "2020-01-16T09:01:33.160481+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": null, "closed_by": null}, {"description": "Use html.escape instead of cgi.escape, which has been removed in Python 3.8.\r\n\r\nContinue to use cgi.escape if html.escape cannot be imported, as the latter\r\ndoes not exist on Python < 3.2", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/76/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:74c64d07062e%0D1b4c69c290bd?from_pullrequest_id=76"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/76/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/76.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/76/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/76/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/76"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/76/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:74c64d07062e%0D1b4c69c290bd?from_pullrequest_id=76"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/76/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/76/statuses_page=1.json"}}, "title": "Use html.escape instead of cgi.escape, which has been removed in Python 3.8.", "close_source_branch": true, "type": "pullrequest", "id": 76, "destination": {"commit": {"hash": "1b4c69c290bd", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/1b4c69c290bd.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/1b4c69c290bd"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-11-15T03:35:58.041137+00:00", "summary": {"raw": "Use html.escape instead of cgi.escape, which has been removed in Python 3.8.\r\n\r\nContinue to use cgi.escape if html.escape cannot be imported, as the latter\r\ndoes not exist on Python < 3.2", "markup": "markdown", "html": "<p>Use html.escape instead of cgi.escape, which has been removed in Python 3.8.</p>\n<p>Continue to use cgi.escape if html.escape cannot be imported, as the latter\ndoes not exist on Python &lt; 3.2</p>", "type": "rendered"}, "source": {"commit": {"hash": "ed200f5ce59f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/ed200f5ce59f"}, "html": {"href": "#!/cbillington/blacs/commits/ed200f5ce59f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "py38fix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-11-25T16:54:32.832254+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "74c64d07062e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/74c64d07062e.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/74c64d07062e"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Otherwise a thread keeps running and Qt widgets referenced by the thread are not garbage collected.\r\nRely on the Qtutils version implementing this (not yet released)\r\n\r\nThis shouldn't be merged until [qtutils PR #7](https://github.com/philipstarkey/qtutils/pull/7) is merged and released.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/77/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:d7920b03ff95%0D74c64d07062e?from_pullrequest_id=77"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/77/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/77.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/77/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/77/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/77"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/77/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:d7920b03ff95%0D74c64d07062e?from_pullrequest_id=77"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/77/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/77/statuses_page=1.json"}}, "title": "Shutdown tab's OutputBox when a tab is closed.", "close_source_branch": true, "type": "pullrequest", "id": 77, "destination": {"commit": {"hash": "74c64d07062e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/74c64d07062e.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/74c64d07062e"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-11-21T20:40:03.794736+00:00", "summary": {"raw": "Otherwise a thread keeps running and Qt widgets referenced by the thread are not garbage collected.\r\nRely on the Qtutils version implementing this (not yet released)\r\n\r\nThis shouldn't be merged until [qtutils PR #7](https://github.com/philipstarkey/qtutils/pull/7) is merged and released.", "markup": "markdown", "html": "<p>Otherwise a thread keeps running and Qt widgets referenced by the thread are not garbage collected.\nRely on the Qtutils version implementing this (not yet released)</p>\n<p>This shouldn't be merged until <a data-is-external-link=\"true\" href=\"https://github.com/philipstarkey/qtutils/pull/7\" rel=\"nofollow\">qtutils PR #7</a> is merged and released.</p>", "type": "rendered"}, "source": {"commit": {"hash": "d66869c047b2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/d66869c047b2"}, "html": {"href": "#!/cbillington/blacs/commits/d66869c047b2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "fix-memory-leak"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T02:47:49.375242+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d7920b03ff95", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/d7920b03ff95.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/d7920b03ff95"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This removes the need to manually get connection table properties in the\r\nBLACS GUI, decreasing the need to sync different parts of the codebase with\r\neach other.\r\n\r\nA warning is printed if the name shadows a name of the parent class.\r\n\r\nThis allows a modest amount of code to be deleted from BLACS tab classes.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/78/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:520b9cc998da%0D7137843d0803?from_pullrequest_id=78"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/78/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/78"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:520b9cc998da%0D7137843d0803?from_pullrequest_id=78"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/78/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/78/statuses_page=1.json"}}, "title": "Include all connection table properties as attributes of worker instance.", "close_source_branch": true, "type": "pullrequest", "id": 78, "destination": {"commit": {"hash": "7137843d0803", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/7137843d0803.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/7137843d0803"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-12-05T18:45:35.609469+00:00", "summary": {"raw": "This removes the need to manually get connection table properties in the\r\nBLACS GUI, decreasing the need to sync different parts of the codebase with\r\neach other.\r\n\r\nA warning is printed if the name shadows a name of the parent class.\r\n\r\nThis allows a modest amount of code to be deleted from BLACS tab classes.", "markup": "markdown", "html": "<p>This removes the need to manually get connection table properties in the\nBLACS GUI, decreasing the need to sync different parts of the codebase with\neach other.</p>\n<p>A warning is printed if the name shadows a name of the parent class.</p>\n<p>This allows a modest amount of code to be deleted from BLACS tab classes.</p>", "type": "rendered"}, "source": {"commit": {"hash": "01c4c78f8a96", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/01c4c78f8a96"}, "html": {"href": "#!/cbillington/blacs/commits/01c4c78f8a96"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "connection_table_properties"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-10T19:05:16.910658+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "520b9cc998da", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/520b9cc998da.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/520b9cc998da"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Unconditionally convert `h5_file` to network agnostic when sending to workers. Have a method in the worker convert them to local before calling the worker's `transition_to_buffered()`.\r\n\r\nSince `shared_drive.path_to_local` is idempotent, this is backward compatible\r\nwith devices that convert the path to local manually.\r\n\r\nThis means all devices will work as remote devices now without having to be updated to convert the path to local themselves. Devices that already do that will not be broken by this change, but they can remove those lines and depend on this version of BLACS instead.\r\n\r\nWe still have the issue whereby the different sides of remote connections don't check the versions on the other side, so you get obtuse error messages instead of version errors when things don't match. That's a work in progress, but this PR makes things at least work when the versions are right!\r\n\r\nI don't know why I didn't make this change earlier - I think I thought I would need a metaclass or something a bit too magical for my tastes, but of course just defining an extra method as in the PR is the obvious solution.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/79/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diffstat/labscript_suite/blacs:634d076ccf54%0D9dd6d90723eb?from_pullrequest_id=79"}, "commits": {"href": "data/repositories/labscript_suite/blacs/pullrequests/79/commits.json"}, "self": {"href": "data/repositories/labscript_suite/blacs/pullrequests/79.json"}, "comments": {"href": "data/repositories/labscript_suite/blacs/pullrequests/79/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/79/merge"}, "html": {"href": "#!/labscript_suite/blacs/pull-requests/79"}, "activity": {"href": "data/repositories/labscript_suite/blacs/pullrequests/79/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/diff/labscript_suite/blacs:634d076ccf54%0D9dd6d90723eb?from_pullrequest_id=79"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/blacs/pullrequests/79/approve"}, "statuses": {"href": "data/repositories/labscript_suite/blacs/pullrequests/79/statuses_page=1.json"}}, "title": "Convert filepaths to network format unconditionally", "close_source_branch": true, "type": "pullrequest", "id": 79, "destination": {"commit": {"hash": "9dd6d90723eb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/9dd6d90723eb.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/9dd6d90723eb"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/blacs.json"}, "html": {"href": "#!/labscript_suite/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}ts=249915"}}, "type": "repository", "name": "BLACS", "full_name": "labscript_suite/blacs", "uuid": "{50ed1eb9-8c1b-4afe-a8b8-8e0a33b39a05}"}, "branch": {"name": "default"}}, "created_on": "2019-12-12T14:43:46.883342+00:00", "summary": {"raw": "Unconditionally convert `h5_file` to network agnostic when sending to workers. Have a method in the worker convert them to local before calling the worker's `transition_to_buffered()`.\r\n\r\nSince `shared_drive.path_to_local` is idempotent, this is backward compatible\r\nwith devices that convert the path to local manually.\r\n\r\nThis means all devices will work as remote devices now without having to be updated to convert the path to local themselves. Devices that already do that will not be broken by this change, but they can remove those lines and depend on this version of BLACS instead.\r\n\r\nWe still have the issue whereby the different sides of remote connections don't check the versions on the other side, so you get obtuse error messages instead of version errors when things don't match. That's a work in progress, but this PR makes things at least work when the versions are right!\r\n\r\nI don't know why I didn't make this change earlier - I think I thought I would need a metaclass or something a bit too magical for my tastes, but of course just defining an extra method as in the PR is the obvious solution.", "markup": "markdown", "html": "<p>Unconditionally convert <code>h5_file</code> to network agnostic when sending to workers. Have a method in the worker convert them to local before calling the worker's <code>transition_to_buffered()</code>.</p>\n<p>Since <code>shared_drive.path_to_local</code> is idempotent, this is backward compatible\nwith devices that convert the path to local manually.</p>\n<p>This means all devices will work as remote devices now without having to be updated to convert the path to local themselves. Devices that already do that will not be broken by this change, but they can remove those lines and depend on this version of BLACS instead.</p>\n<p>We still have the issue whereby the different sides of remote connections don't check the versions on the other side, so you get obtuse error messages instead of version errors when things don't match. That's a work in progress, but this PR makes things at least work when the versions are right!</p>\n<p>I don't know why I didn't make this change earlier - I think I thought I would need a metaclass or something a bit too magical for my tastes, but of course just defining an extra method as in the PR is the obvious solution.</p>", "type": "rendered"}, "source": {"commit": {"hash": "413498c6364f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs/commit/413498c6364f"}, "html": {"href": "#!/cbillington/blacs/commits/413498c6364f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/blacs"}, "html": {"href": "#!/cbillington/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "cbillington/blacs", "uuid": "{1ffc697c-0cdc-43c3-b124-343fa9d9cc95}"}, "branch": {"name": "remote_filepaths"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-28T20:44:53.046263+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "634d076ccf54", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/blacs/commit/634d076ccf54.json"}, "html": {"href": "#!/labscript_suite/blacs/commits/634d076ccf54"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}], "page": 2, "size": 79}