{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/installer.json"}, "html": {"href": "#!/labscript_suite/installer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{65cd9685-3e8c-4275-9b89-1a7873b341d0}ts=python"}}, "type": "repository", "name": "installer", "full_name": "labscript_suite/installer", "uuid": "{65cd9685-3e8c-4275-9b89-1a7873b341d0}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/installer/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/installer/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/installer/issues/18/watch"}, "comments": {"href": "data/repositories/labscript_suite/installer/issues/18/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/installer/issues/18/install-wrapper-for-pip"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/installer/issues/18/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Install wrapper for pip", "component": null, "votes": 0, "watches": 1, "content": {"raw": "From discussion in the mailing list:\r\n\r\n\r\nOn Fri, Apr 20, 2018 at 1:49 AM, Fred Jendrzejewski <fred.jendrzejewski@gmail.com> wrote:\r\n> Hi,\r\n> \r\n> we are using these days lyse in a very efficient way in the lab, but none of the other parts of lab script suite. One thing that I would love to try/see is to use the lyse package independently from the qt GUI. Namely here is what I mean:\r\n\r\n> 1.) You typically fire up a jupyter notebook. You play around with lyse. You never need the gui for that.\r\n> 2.) You might even try to use a web interface like flask for the gui of lyse.\r\n> 3.) You might want to get rid of the Labview interface in BIAS, where again it would be cool to have something simple, which leaves you a choice on the gui part.\r\n\r\n> In all cases it would be nice to have lyse and other parts of the labscriptsuite to be installable through pip and then build your gui on top of it. So, I wanted to gauge interest, opinions etc by others on this before I spend time on this part and maybe even open a bug report.\r\n\r\n> Cheers,\r\n\r\n> Fred\r\n\r\nHi Fred,\r\n\r\nGood to hear lyse continues to be useful!\r\n\r\nAn optional pip-install for some components is certainly possible, but it is hard to switch that as the default install mechanism, without tricks (that is, with the packages being actual normal Python packages), because of the level of control we have over the install process. For example, we would need to stop during install to ask the user where their labconfig folder, userlib, analysislib etc are, or create them, which is tricky to coordinate among the various programs since they need to share these details. We will also have encryption keys being set up at install time in the near future, and it's hard to coordinate among multiple programs to use the same one if you just install one of them.\r\n\r\nI can imagine making one or more pip packages that are simply a wrapper around the installer, such that 'pip install lyse' would just download the installer and run it, but with additional arguments to the installer telling it to only install lyse. Upon installing a second package, the installer could see that a 'labscript suite' installation already exists and only add the necessary additional components. I think this is possible and probably desirable. The libraries would still live in a custom directory and not within dist_packages. I think this is also desirable, I've not yet seen a labscript suite installation where people aren't hacking on the code in some way, and so it seems like an unnecessary impediment to this hacking to draw a distinction between a development repository and a deployed installation. So keeping them as mercurial repos in a custom install location rather than ordinary packages still seems like the right balance to me.\r\n\r\nSo that might be a good way to go in the future - I believe other projects out there do similar things, where they look like a pip package but actually install in a non-standard way. There is usefulness in providing a uniform method of installing things even if it just the interface and the underlying implementation looks nothing like usual. For example, our installer has a setup.py, but the whole thing is actually custom, there is no use of setuptools or distutils in that script.\r\n\r\nStripping out the GUIs so they are actually absent, but the programs still running, is a bit trickier. I know everyone in the web world are very used to having backends and frontends separate, but from what I can tell, the complexity of doing so is fairly enormous, and could impact performance quite a bit for apps as simple as ours. What we could more easily do in the future is still have all the Qt code running but not showing any windows, once we have sufficient remote control and scriptability of the various programs. This would not be so hard and would enable the code to run headless - but still with Qt as a dependency. I would need to modify the installer such that if you did not have Qt, it would allow you to proceed with the installation after a warning that the GUI stuff wouldn't work.\r\n\r\nI don't have the time to work on any of this quite yet, but I don't believe it would be that difficult. I'll file it as a feature request in the installer for the time being.", "markup": "markdown", "html": "<p>From discussion in the mailing list:</p>\n<p>On Fri, Apr 20, 2018 at 1:49 AM, Fred Jendrzejewski <a href=\"mailto:fred.jendrzejewski@gmail.com\">&#102;&#114;&#101;&#100;&#46;&#106;&#101;&#110;&#100;&#114;&#122;&#101;&#106;&#101;&#119;&#115;&#107;&#105;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<blockquote>\n<p>Hi,</p>\n<p>we are using these days lyse in a very efficient way in the lab, but none of the other parts of lab script suite. One thing that I would love to try/see is to use the lyse package independently from the qt GUI. Namely here is what I mean:</p>\n<p>1.) You typically fire up a jupyter notebook. You play around with lyse. You never need the gui for that.\n2.) You might even try to use a web interface like flask for the gui of lyse.\n3.) You might want to get rid of the Labview interface in BIAS, where again it would be cool to have something simple, which leaves you a choice on the gui part.</p>\n<p>In all cases it would be nice to have lyse and other parts of the labscriptsuite to be installable through pip and then build your gui on top of it. So, I wanted to gauge interest, opinions etc by others on this before I spend time on this part and maybe even open a bug report.</p>\n<p>Cheers,</p>\n<p>Fred</p>\n</blockquote>\n<p>Hi Fred,</p>\n<p>Good to hear lyse continues to be useful!</p>\n<p>An optional pip-install for some components is certainly possible, but it is hard to switch that as the default install mechanism, without tricks (that is, with the packages being actual normal Python packages), because of the level of control we have over the install process. For example, we would need to stop during install to ask the user where their labconfig folder, userlib, analysislib etc are, or create them, which is tricky to coordinate among the various programs since they need to share these details. We will also have encryption keys being set up at install time in the near future, and it's hard to coordinate among multiple programs to use the same one if you just install one of them.</p>\n<p>I can imagine making one or more pip packages that are simply a wrapper around the installer, such that 'pip install lyse' would just download the installer and run it, but with additional arguments to the installer telling it to only install lyse. Upon installing a second package, the installer could see that a 'labscript suite' installation already exists and only add the necessary additional components. I think this is possible and probably desirable. The libraries would still live in a custom directory and not within dist_packages. I think this is also desirable, I've not yet seen a labscript suite installation where people aren't hacking on the code in some way, and so it seems like an unnecessary impediment to this hacking to draw a distinction between a development repository and a deployed installation. So keeping them as mercurial repos in a custom install location rather than ordinary packages still seems like the right balance to me.</p>\n<p>So that might be a good way to go in the future - I believe other projects out there do similar things, where they look like a pip package but actually install in a non-standard way. There is usefulness in providing a uniform method of installing things even if it just the interface and the underlying implementation looks nothing like usual. For example, our installer has a setup.py, but the whole thing is actually custom, there is no use of setuptools or distutils in that script.</p>\n<p>Stripping out the GUIs so they are actually absent, but the programs still running, is a bit trickier. I know everyone in the web world are very used to having backends and frontends separate, but from what I can tell, the complexity of doing so is fairly enormous, and could impact performance quite a bit for apps as simple as ours. What we could more easily do in the future is still have all the Qt code running but not showing any windows, once we have sufficient remote control and scriptability of the various programs. This would not be so hard and would enable the code to run headless - but still with Qt as a dependency. I would need to modify the installer such that if you did not have Qt, it would allow you to proceed with the installation after a warning that the GUI stuff wouldn't work.</p>\n<p>I don't have the time to work on any of this quite yet, but I don't believe it would be that difficult. I'll file it as a feature request in the installer for the time being.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-23T02:20:42.258094+00:00", "milestone": null, "updated_on": "2018-04-23T02:20:42.258094+00:00", "type": "issue", "id": 18}