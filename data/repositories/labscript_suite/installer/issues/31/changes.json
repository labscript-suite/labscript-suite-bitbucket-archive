{"pagelen": 100, "values": [{"changes": {"content": {"new": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* ~~Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them~~ (done, [labscript_utils PR #81](#!/labscript_suite/labscript_devices/pull-requests/81))\r\n* Create log files within a 'logs' directory under the labscript suite install directory (pending, [labscript_utils #PR 95](#!/labscript_suite/labscript_utils/pull-requests/95))\r\n* Finish the changes to BLACS that would allow it to import unit calibration classes from anywhere, and not just from within labscript_utils.\r\n* Convert each project into the standard repo layout with a setup.py and a requirements.txt\r\n* Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable.\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily.", "old": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them\r\n* Create log files within a 'logs' directory under the labscript suite install directory\r\n* Convert each project into the standard repo layout with a setup.py and a requirements.txt\r\n* Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable.\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily."}}, "links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31/changes/54910752.json"}, "html": {"href": "#!/labscript_suite/installer/issues/31#comment-54910752"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/installer.json"}, "html": {"href": "#!/labscript_suite/installer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{65cd9685-3e8c-4275-9b89-1a7873b341d0}ts=python"}}, "type": "repository", "name": "installer", "full_name": "labscript_suite/installer", "uuid": "{65cd9685-3e8c-4275-9b89-1a7873b341d0}"}, "title": "Tasks required before moving to standard Python packages"}, "created_on": "2019-11-21T20:49:52.688464+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 54910752}, {"changes": {"content": {"new": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* ~~Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them~~ (done, [labscript_utils PR #81](#!/labscript_suite/labscript_devices/pull-requests/81))\r\n* Create log files within a 'logs' directory under the labscript suite install directory (pending, [labscript_utils #PR 95](#!/labscript_suite/labscript_utils/pull-requests/95))\r\n* Finish the changes to BLACS that would allow it to import unit calibration classes from anywhere, and not just from within labscript_utils.\r\n* Convert each project into the standard repo layout with a setup.py and a requirements.txt\r\n* ~~Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable~~. Brainstorming done, see comment below. Yet to do: implement this\r\n* Modify `labscript_utils.winshell` functions that refer to packages' `__main__.py` files and icon files to find them according to the import path of the package instead of assuming they are within the labscript suite install directory.\r\n* Modify BLACS and possibly others to look up their file resources based on the `__file__` attribute of their modules rather than assuming a fixed location within the labscript suite install directory (we actually switched BLACS to *not* use `__file__` at one point because it was error-prone in the presence of `os.chdir()` calls. But in Python 3 this is less of an issue since `__file__` is absolute unless the main script was run with a relative path. Even then, a single `__file__` lookup in `__init__.py` should be unproblematic).\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily.", "old": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* ~~Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them~~ (done, [labscript_utils PR #81](#!/labscript_suite/labscript_devices/pull-requests/81))\r\n* Create log files within a 'logs' directory under the labscript suite install directory (pending, [labscript_utils #PR 95](#!/labscript_suite/labscript_utils/pull-requests/95))\r\n* Finish the changes to BLACS that would allow it to import unit calibration classes from anywhere, and not just from within labscript_utils.\r\n* Convert each project into the standard repo layout with a setup.py and a requirements.txt\r\n* Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable.\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily."}}, "links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31/changes/55032945.json"}, "html": {"href": "#!/labscript_suite/installer/issues/31#comment-55032945"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/installer.json"}, "html": {"href": "#!/labscript_suite/installer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{65cd9685-3e8c-4275-9b89-1a7873b341d0}ts=python"}}, "type": "repository", "name": "installer", "full_name": "labscript_suite/installer", "uuid": "{65cd9685-3e8c-4275-9b89-1a7873b341d0}"}, "title": "Tasks required before moving to standard Python packages"}, "created_on": "2019-11-29T22:27:33.809535+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 55032945}, {"changes": {"content": {"new": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* ~~Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them~~ (done, [labscript_utils PR #81](#!/labscript_suite/labscript_devices/pull-requests/81))\r\n* ~~Create log files within a 'logs' directory under the labscript suite install directory~~ (done, [labscript_utils #PR 95](#!/labscript_suite/labscript_utils/pull-requests/95))\r\n* Finish the changes to BLACS that would allow it to import unit calibration classes from anywhere, and not just from within labscript_utils.\r\n* Convert each project into the standard repo layout with a setup.py\r\n* ~~Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable~~. Brainstorming done, see comment below. Yet to do: implement this\r\n* ~~Modify `labscript_utils.winshell` functions that refer to packages' `__main__.py` files and icon files to find them according to the import path of the package instead of assuming they are within the labscript suite install directory.~~(done, labscript_utils [PR #96](#!/labscript_suite/labscript_utils/pull-requests/96))\r\n* Modify BLACS and possibly others to look up their file resources based on the `__file__` attribute of their modules rather than assuming a fixed location within the labscript suite install directory (we actually switched BLACS to *not* use `__file__` at one point because it was error-prone in the presence of `os.chdir()` calls. But in Python 3 this is less of an issue since `__file__` is absolute unless the main script was run with a relative path. Even then, a single `__file__` lookup in `__init__.py` should be unproblematic).\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily.", "old": "This is a list of the things we will need to do before we can move to having standard Python packages for labscript suite components. We can check things off as they are done\r\n\r\n* ~~Implement a 'user_devices' folder so that users can add devices outside of labscript_devices whilst hacking on them~~ (done, [labscript_utils PR #81](#!/labscript_suite/labscript_devices/pull-requests/81))\r\n* Create log files within a 'logs' directory under the labscript suite install directory (pending, [labscript_utils #PR 95](#!/labscript_suite/labscript_utils/pull-requests/95))\r\n* Finish the changes to BLACS that would allow it to import unit calibration classes from anywhere, and not just from within labscript_utils.\r\n* Convert each project into the standard repo layout with a setup.py and a requirements.txt\r\n* ~~Brainstorm what the installer should be and do. Should there even be an installer? Perhaps the installer can simply be the setup.py of a 'labscript_suite' package that pulls in the latest versions of all the other packages and sets up the directories. Can we install the labscript suite components into the labscript suite install directory? Should we? We will still need to do path manipulation with a .pth file, since userlib and its subdirectories will still exist and need to be importable~~. Brainstorming done, see comment below. Yet to do: implement this\r\n* Modify `labscript_utils.winshell` functions that refer to packages' `__main__.py` files and icon files to find them according to the import path of the package instead of assuming they are within the labscript suite install directory.\r\n* Modify BLACS and possibly others to look up their file resources based on the `__file__` attribute of their modules rather than assuming a fixed location within the labscript suite install directory (we actually switched BLACS to *not* use `__file__` at one point because it was error-prone in the presence of `os.chdir()` calls. But in Python 3 this is less of an issue since `__file__` is absolute unless the main script was run with a relative path. Even then, a single `__file__` lookup in `__init__.py` should be unproblematic).\r\n\r\nPhil mentioned implementing our planned backward-incompatible changes to communication between programs when we make this change. I don't think that is super important, since although the changes are backward incompatible, they are detectable at run time as being incompatible and users will be prompted to upgrade. So I don't think we need to roll this out at the same time necessarily."}}, "links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31/changes/55117147.json"}, "html": {"href": "#!/labscript_suite/installer/issues/31#comment-55117147"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/installer/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/installer.json"}, "html": {"href": "#!/labscript_suite/installer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{65cd9685-3e8c-4275-9b89-1a7873b341d0}ts=python"}}, "type": "repository", "name": "installer", "full_name": "labscript_suite/installer", "uuid": "{65cd9685-3e8c-4275-9b89-1a7873b341d0}"}, "title": "Tasks required before moving to standard Python packages"}, "created_on": "2019-12-05T03:29:36.942025+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "message": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "type": "issue_change", "id": 55117147}], "page": 1, "size": 3}