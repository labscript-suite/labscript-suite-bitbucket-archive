{"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912482.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912482"}}, "parent": {"id": 99911772, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911772"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Perhaps we could use the [windows API for special folders](https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.8) get the \u201cStartMenu\u201d and \u201cCommonStartMenu\u201d folders, then we look in them for all .lnk files, we read the target of each .lnk file and look for ones ending in `sublime_text.exe`, `hdfview.bat`, etc. That way we would find anything that is in the start menu, and we would only need to know the name of the executable. Looking at the name of the .lnk file itself might be ok too, but we might risk matching on like, uninstallation scripts, unless we know the full name of the shortcut. Less reliable than the executable name I think because they sometimes have version numbers in them and other random things.", "markup": "markdown", "html": "<p>Perhaps we could use the <a data-is-external-link=\"true\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.8\" rel=\"nofollow\">windows API for special folders</a> get the \u201cStartMenu\u201d and \u201cCommonStartMenu\u201d folders, then we look in them for all .lnk files, we read the target of each .lnk file and look for ones ending in <code>sublime_text.exe</code>, <code>hdfview.bat</code>, etc. That way we would find anything that is in the start menu, and we would only need to know the name of the executable. Looking at the name of the .lnk file itself might be ok too, but we might risk matching on like, uninstallation scripts, unless we know the full name of the shortcut. Less reliable than the executable name I think because they sometimes have version numbers in them and other random things.</p>", "type": "rendered"}, "created_on": "2019-04-25T00:22:23.497500+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-25T00:22:30.736166+00:00", "type": "pullrequest_comment", "id": 99912482}