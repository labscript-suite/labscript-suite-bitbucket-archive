{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99879808.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99879808"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "I\u2019ve also modified the default text editor and HDF5 viewer to be default install paths of sublime and HDFView as of today \\(HDFview installs to local appdata folder nowadays\\) using environment variables as in the labscript\\_utils pull request. As such, this shouldn\u2019t be merged before that pull request is merged and labscript\\_utils stamped with a version number.", "markup": "markdown", "html": "<p>I\u2019ve also modified the default text editor and HDF5 viewer to be default install paths of sublime and HDFView as of today (HDFview installs to local appdata folder nowadays) using environment variables as in the labscript_utils pull request. As such, this shouldn\u2019t be merged before that pull request is merged and labscript_utils stamped with a version number.</p>", "type": "rendered"}, "created_on": "2019-04-24T17:33:12.862483+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-24T17:33:12.872615+00:00", "type": "pullrequest_comment", "id": 99879808}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910523.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910523"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Can we also add options for blacs plugins and lyse settings, using default values, and put labscript programs in alphabetical order? i.e. change the bottom of example.ini to:\n\n```\n[BLACS/plugins]\nconnection_table = True\ndelete_repeated_shots = False\ngeneral = True\nmemory = False\nprogress_bar = False\ntheme = True\n\n[lyse]\nautoload_config_file = %(app_saved_configs)s\\lyse\\lyse.ini\ninteger_indexing = False\n\n[runmanager]\nautoload_config_file = %(app_saved_configs)s\\runmanager\\runmanager.ini\noutput_folder_format = %%Y\\%%m\\%%d\\{sequence_index:04d}\nfilename_prefix_format = %%Y-%%m-%%d_{sequence_index:04d}\n```\n\nThis way users can expeditiously see which plugins/options are available to turn on.", "markup": "markdown", "html": "<p>Can we also add options for blacs plugins and lyse settings, using default values, and put labscript programs in alphabetical order? i.e. change the bottom of example.ini to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[BLACS/plugins]</span>\n<span class=\"na\">connection_table</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n<span class=\"na\">delete_repeated_shots</span> <span class=\"o\">=</span> <span class=\"s\">False</span>\n<span class=\"na\">general</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n<span class=\"na\">memory</span> <span class=\"o\">=</span> <span class=\"s\">False</span>\n<span class=\"na\">progress_bar</span> <span class=\"o\">=</span> <span class=\"s\">False</span>\n<span class=\"na\">theme</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n\n<span class=\"k\">[lyse]</span>\n<span class=\"na\">autoload_config_file</span> <span class=\"o\">=</span> <span class=\"s\">%(app_saved_configs)s\\lyse\\lyse.ini</span>\n<span class=\"na\">integer_indexing</span> <span class=\"o\">=</span> <span class=\"s\">False</span>\n\n<span class=\"k\">[runmanager]</span>\n<span class=\"na\">autoload_config_file</span> <span class=\"o\">=</span> <span class=\"s\">%(app_saved_configs)s\\runmanager\\runmanager.ini</span>\n<span class=\"na\">output_folder_format</span> <span class=\"o\">=</span> <span class=\"s\">%%Y\\%%m\\%%d\\{sequence_index:04d}</span>\n<span class=\"na\">filename_prefix_format</span> <span class=\"o\">=</span> <span class=\"s\">%%Y-%%m-%%d_{sequence_index:04d}</span>\n</pre></div>\n\n\n<p>This way users can expeditiously see which plugins/options are available to turn on.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:29:03.685913+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-24T23:29:23.054047+00:00", "type": "pullrequest_comment", "id": 99910523}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910570.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910570"}}, "parent": {"id": 99910523, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910523.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910523"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Sounds good, will do.", "markup": "markdown", "html": "<p>Sounds good, will do.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:30:09.203901+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-24T23:30:09.212750+00:00", "type": "pullrequest_comment", "id": 99910570}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910653.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910653"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Another option would be to make example.ini platform specific, so that the estimates of program paths and `labscript_suite` , etc. are more accurate.", "markup": "markdown", "html": "<p>Another option would be to make example.ini platform specific, so that the estimates of program paths and <code>labscript_suite</code> , etc. are more accurate.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:32:20.537362+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-24T23:32:20.549853+00:00", "type": "pullrequest_comment", "id": 99910653}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910772"}}, "parent": {"id": 99910653, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910653.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910653"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "The installer [modifies them at install time](#!/labscript_suite/installer/src/893ecbfaf5498498448f2816abbf95c209f5cdcd/setup.py#lines-347), so they end up being platform-appropriate.", "markup": "markdown", "html": "<p>The installer <a data-is-external-link=\"true\" href=\"#!/labscript_suite/installer/src/893ecbfaf5498498448f2816abbf95c209f5cdcd/setup.py#lines-347\" rel=\"nofollow\">modifies them at install time</a>, so they end up being platform-appropriate.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:35:04.899387+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-24T23:35:04.909277+00:00", "type": "pullrequest_comment", "id": 99910772}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911692.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911692"}}, "parent": {"id": 99910772, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99910772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99910772"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Ah, of course. I was thinking of using linux environment/shell variables where appropriate but the command aliases make this unnecessary.", "markup": "markdown", "html": "<p>Ah, of course. I was thinking of using linux environment/shell variables where appropriate but the command aliases make this unnecessary.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:59:59.683784+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-24T23:59:59.694160+00:00", "type": "pullrequest_comment", "id": 99911692}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911167.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911167"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "I\u2019m not a particular fan of changing the default text editor to Sublime \\(I\u2019m not really a fan of having the default editor be Notepad\\+\\+ either\\).\n\nPerhaps we could have the installer detect some of the common text editors and present options for the user to select \\(and/or type in a custom path at installation time\\). We could do something similar for HDFView too \\(so that people with old versions of HDFView installed don\u2019t have to revert the labconfig of new labscript suite installs to the old path\\)", "markup": "markdown", "html": "<p>I\u2019m not a particular fan of changing the default text editor to Sublime (I\u2019m not really a fan of having the default editor be Notepad++ either).</p>\n<p>Perhaps we could have the installer detect some of the common text editors and present options for the user to select (and/or type in a custom path at installation time). We could do something similar for HDFView too (so that people with old versions of HDFView installed don\u2019t have to revert the labconfig of new labscript suite installs to the old path)</p>", "type": "rendered"}, "created_on": "2019-04-24T23:45:41.798884+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-04-24T23:45:41.811841+00:00", "type": "pullrequest_comment", "id": 99911167}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911546.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911546"}}, "parent": {"id": 99911167, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911167.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911167"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "I\u2019m not really seeing it being too suggestive of a default - the installation instructions say to choose a text editor and configure it here. So I\u2019m seeing it as an example of how to configure it and not suggestive of the text editor itself. I don\u2019t care which text editor it is, but since we had on-hand a valid installation path for sublime on Windows 10 as of recently, that seemed slightly better than a possibly-not-true-anymore path for notepad\\+\\+ \\(perhaps it is still where it gets installed to, but installation paths seem to be changing a lot in Windows lately, so less of a sure thing than the sublime one\\). But I\u2019m happy for it to be whatever.\n\nI had a think about how to have a default corresponding to something actually installed, but it looks like it is pretty hard to guess or programmatically get at installation paths. So my thinking has just been to direct the user that they need to explicitly configure this.\n\nEven if we have a list of text editors and what we think their install paths are, I think it\u2019s too likely to be wrong or to become wrong - like, the user can often choose whether to install to their user directory or to program files, and we can\u2019t know which one they did.\n\nPlus, they might install the text editor after installing the labscript suite, so even if we can programmatically check, it\u2019s still not the best.\n\nSo I\u2019m happy to change it to whatever, but I think this will probably be one of the things requiring human attention most of the time whatever we do.", "markup": "markdown", "html": "<p>I\u2019m not really seeing it being too suggestive of a default - the installation instructions say to choose a text editor and configure it here. So I\u2019m seeing it as an example of how to configure it and not suggestive of the text editor itself. I don\u2019t care which text editor it is, but since we had on-hand a valid installation path for sublime on Windows 10 as of recently, that seemed slightly better than a possibly-not-true-anymore path for notepad++ (perhaps it is still where it gets installed to, but installation paths seem to be changing a lot in Windows lately, so less of a sure thing than the sublime one). But I\u2019m happy for it to be whatever.</p>\n<p>I had a think about how to have a default corresponding to something actually installed, but it looks like it is pretty hard to guess or programmatically get at installation paths. So my thinking has just been to direct the user that they need to explicitly configure this.</p>\n<p>Even if we have a list of text editors and what we think their install paths are, I think it\u2019s too likely to be wrong or to become wrong - like, the user can often choose whether to install to their user directory or to program files, and we can\u2019t know which one they did.</p>\n<p>Plus, they might install the text editor after installing the labscript suite, so even if we can programmatically check, it\u2019s still not the best.</p>\n<p>So I\u2019m happy to change it to whatever, but I think this will probably be one of the things requiring human attention most of the time whatever we do.</p>", "type": "rendered"}, "created_on": "2019-04-24T23:56:26.014359+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-24T23:56:26.024304+00:00", "type": "pullrequest_comment", "id": 99911546}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911772"}}, "parent": {"id": 99911546, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911546.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911546"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "My thought was we could have a list of known installation paths for certain text editors that we know of, and just quickly check to see if the executable exists at that path for each one, then present the list to the user and ask them to choose one. That way if paths change, we don\u2019t present broken options, but if they don\u2019t, then the \u201cEdit\u201d buttons in runmanager/blacs/lyse work without having to dive into the labconfig file/windows filesystem.", "markup": "markdown", "html": "<p>My thought was we could have a list of known installation paths for certain text editors that we know of, and just quickly check to see if the executable exists at that path for each one, then present the list to the user and ask them to choose one. That way if paths change, we don\u2019t present broken options, but if they don\u2019t, then the \u201cEdit\u201d buttons in runmanager/blacs/lyse work without having to dive into the labconfig file/windows filesystem.</p>", "type": "rendered"}, "created_on": "2019-04-25T00:01:45.817044+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-04-25T00:01:45.827248+00:00", "type": "pullrequest_comment", "id": 99911772}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912117.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912117"}}, "parent": {"id": 99911772, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911772"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Oh, that would be pretty good then. I hadn\u2019t thought of hard-coding a list but then checking whether the paths actually exist. That means we can check multiple paths for each app even. Maintaining the list won\u2019t be much work since they don\u2019t change _that_ often, and we can just bruteforce checking all of the program files/program files x86/local appdata/whatever the other appdata one is folders.  \nI wonder if there\u2019s a way to just get a list of \u201call applications that can open a file\u201d and scan them for keywords. When I said getting this info programatically was hard, I had been looking at \u201chow to get the default text editor\u201d, i.e. asking windows about file association. But perhaps a list of all apps might be more available. Might see what I can find.", "markup": "markdown", "html": "<p>Oh, that would be pretty good then. I hadn\u2019t thought of hard-coding a list but then checking whether the paths actually exist. That means we can check multiple paths for each app even. Maintaining the list won\u2019t be much work since they don\u2019t change <em>that</em> often, and we can just bruteforce checking all of the program files/program files x86/local appdata/whatever the other appdata one is folders.<br />\nI wonder if there\u2019s a way to just get a list of \u201call applications that can open a file\u201d and scan them for keywords. When I said getting this info programatically was hard, I had been looking at \u201chow to get the default text editor\u201d, i.e. asking windows about file association. But perhaps a list of all apps might be more available. Might see what I can find.</p>", "type": "rendered"}, "created_on": "2019-04-25T00:12:20.187339+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-25T00:12:20.201510+00:00", "type": "pullrequest_comment", "id": 99912117}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912433.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912433"}}, "parent": {"id": 99912117, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912117.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912117"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "`ftype` and `assoc` on Windows might be useful here. Actually no, file associations and the \u2018Open with\u2019 menu [changed in Windows 10](https://blogs.technet.microsoft.com/windowsinternals/2017/10/25/windows-10-how-to-configure-file-associations-for-it-pros/). Hard-coded list much easier.", "markup": "markdown", "html": "<p><code>ftype</code> and <code>assoc</code> on Windows might be useful here. Actually no, file associations and the \u2018Open with\u2019 menu <a data-is-external-link=\"true\" href=\"https://blogs.technet.microsoft.com/windowsinternals/2017/10/25/windows-10-how-to-configure-file-associations-for-it-pros/\" rel=\"nofollow\">changed in Windows 10</a>. Hard-coded list much easier.</p>", "type": "rendered"}, "created_on": "2019-04-25T00:20:54.818674+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-25T00:20:54.826815+00:00", "type": "pullrequest_comment", "id": 99912433}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912482.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912482"}}, "parent": {"id": 99911772, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99911772.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99911772"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Perhaps we could use the [windows API for special folders](https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.8) get the \u201cStartMenu\u201d and \u201cCommonStartMenu\u201d folders, then we look in them for all .lnk files, we read the target of each .lnk file and look for ones ending in `sublime_text.exe`, `hdfview.bat`, etc. That way we would find anything that is in the start menu, and we would only need to know the name of the executable. Looking at the name of the .lnk file itself might be ok too, but we might risk matching on like, uninstallation scripts, unless we know the full name of the shortcut. Less reliable than the executable name I think because they sometimes have version numbers in them and other random things.", "markup": "markdown", "html": "<p>Perhaps we could use the <a data-is-external-link=\"true\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.8\" rel=\"nofollow\">windows API for special folders</a> get the \u201cStartMenu\u201d and \u201cCommonStartMenu\u201d folders, then we look in them for all .lnk files, we read the target of each .lnk file and look for ones ending in <code>sublime_text.exe</code>, <code>hdfview.bat</code>, etc. That way we would find anything that is in the start menu, and we would only need to know the name of the executable. Looking at the name of the .lnk file itself might be ok too, but we might risk matching on like, uninstallation scripts, unless we know the full name of the shortcut. Less reliable than the executable name I think because they sometimes have version numbers in them and other random things.</p>", "type": "rendered"}, "created_on": "2019-04-25T00:22:23.497500+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-25T00:22:30.736166+00:00", "type": "pullrequest_comment", "id": 99912482}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99916454.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99916454"}}, "parent": {"id": 99912482, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99912482.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99912482"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "We could look for [registered applications](https://docs.microsoft.com/en-us/windows/desktop/shell/app-registration#registering-applications) in standard registry locations:\n\n* `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths`\n* `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths`\n* `HKEY_CLASSES_ROOT\\Applications\\ApplicationName.exe`\n\nHere\u2019s how:\n\n```python\nimport winreg, errno\r\n\r\nlocations = [\r\n    [winreg.HKEY_LOCAL_MACHINE, r\"Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\"],\r\n    [winreg.HKEY_CURRENT_USER,  r\"Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\"],\r\n    [winreg.HKEY_CLASSES_ROOT,  r\"Applications\", r\"shell\\open\\command\"]\r\n    ]\r\n\r\napplications = {}\r\n\r\nfor location in locations:\r\n    key = winreg.OpenKey(*location[:2])\r\n    for i in range(winreg.QueryInfoKey(key)[0]):\r\n        executable = winreg.EnumKey(key, i)\r\n        skey_name = '\\\\'.join([executable] + location[2:])\r\n        try:\r\n            skey = winreg.OpenKey(key, skey_name)\r\n            path = winreg.EnumValue(skey, 0)[1]\r\n            if isinstance(path, str) and len(path):\r\n                applications[executable] = path\r\n                print('Found path to {}'.format(executable))\r\n        except FileNotFoundError as e:\r\n            if e.errno == errno.ENOENT:\r\n                pass\r\n        finally:\r\n            skey.Close()\r\n\r\n    key.Close()\n```", "markup": "markdown", "html": "<p>We could look for <a data-is-external-link=\"true\" href=\"https://docs.microsoft.com/en-us/windows/desktop/shell/app-registration#registering-applications\" rel=\"nofollow\">registered applications</a> in standard registry locations:</p>\n<ul>\n<li><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths</code></li>\n<li><code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths</code></li>\n<li><code>HKEY_CLASSES_ROOT\\Applications\\ApplicationName.exe</code></li>\n</ul>\n<p>Here\u2019s how:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">winreg</span><span class=\"o\">,</span> <span class=\"nn\">errno</span>\n\n<span class=\"n\">locations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">HKEY_LOCAL_MACHINE</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\App Paths&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">HKEY_CURRENT_USER</span><span class=\"p\">,</span>  <span class=\"sa\">r</span><span class=\"s2\">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\App Paths&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">HKEY_CLASSES_ROOT</span><span class=\"p\">,</span>  <span class=\"sa\">r</span><span class=\"s2\">&quot;Applications&quot;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;shell\\open\\command&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">applications</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">location</span> <span class=\"ow\">in</span> <span class=\"n\">locations</span><span class=\"p\">:</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">OpenKey</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">location</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">QueryInfoKey</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"n\">executable</span> <span class=\"o\">=</span> <span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">EnumKey</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">skey_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">executable</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">location</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">skey</span> <span class=\"o\">=</span> <span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">OpenKey</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">skey_name</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">winreg</span><span class=\"o\">.</span><span class=\"n\">EnumValue</span><span class=\"p\">(</span><span class=\"n\">skey</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n                <span class=\"n\">applications</span><span class=\"p\">[</span><span class=\"n\">executable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Found path to {}&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">executable</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"n\">FileNotFoundError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">errno</span> <span class=\"o\">==</span> <span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOENT</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">skey</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n\n    <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n</pre></div>", "type": "rendered"}, "created_on": "2019-04-25T02:39:48.396389+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-25T02:39:48.407846+00:00", "type": "pullrequest_comment", "id": 99916454}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99918426.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99918426"}}, "parent": {"id": 99916454, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99916454.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99916454"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Not bad - that gets sublime\\_text.exe for me, but it doesn\u2019t get HDFview, despite HDFview being in the start menu and opening .h5 files from windows explorer with double-click.", "markup": "markdown", "html": "<p>Not bad - that gets sublime_text.exe for me, but it doesn\u2019t get HDFview, despite HDFview being in the start menu and opening .h5 files from windows explorer with double-click.</p>", "type": "rendered"}, "created_on": "2019-04-25T03:41:10.145212+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-25T03:41:10.159209+00:00", "type": "pullrequest_comment", "id": 99918426}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99919855.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99919855"}}, "parent": {"id": 99918426, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99918426.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99918426"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Yep, it gets all the text editors \\(Notepad\\+\\+, Sublime, VS Code, etc.\\), but HDFView is a Java app launched from a batchfile that doesn\u2019t get registered in the registry. Perhaps your start-menu idea would work for that.", "markup": "markdown", "html": "<p>Yep, it gets all the text editors (Notepad++, Sublime, VS Code, etc.), but HDFView is a Java app launched from a batchfile that doesn\u2019t get registered in the registry. Perhaps your start-menu idea would work for that.</p>", "type": "rendered"}, "created_on": "2019-04-25T04:21:59.504412+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-25T04:21:59.515919+00:00", "type": "pullrequest_comment", "id": 99919855}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99920119.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99920119"}}, "parent": {"id": 99919855, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99919855.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99919855"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "Seems to work:\n\n```python\ndef executable_paths():\n    \"\"\"Return the targets of all shortcuts in the start menu that point to an .exe or\n    .bat file, as a dictionary such as {\"some_program.exe\": <full_path>}. \"\"\"\n    from win32com.shell import shell, shellcon\n    import os\n    import win32com.client \n    wscript_shell = win32com.client.Dispatch(\"WScript.Shell\")\n    START = shell.SHGetFolderPath(0, shellcon.CSIDL_STARTMENU, None, 0)\n    COMMON_START = shell.SHGetFolderPath(0, shellcon.CSIDL_COMMON_STARTMENU, None, 0)\n    paths = {}\n    for folder in [START, COMMON_START]:\n        for root, _, files in os.walk(folder):\n            for name in files:\n                if name.lower().endswith('.lnk'):\n                    shortcut = wscript_shell.CreateShortCut(os.path.join(root, name))\n                    target = shortcut.Targetpath\n                    if os.path.splitext(target)[1].lower() in ['.exe', '.bat']:\n                        paths[os.path.basename(target)] = target\n    return paths\n\n\npaths = executable_paths()\nprint(paths['sublime_text.exe'])\nprint(paths['hdfview.bat'])\n```\n\nprints:\n\n\u200c\n\n```\nC:\\Program Files\\Sublime Text 3\\sublime_text.exe\nC:\\Users\\bilbo\\AppData\\Local\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\n```\n\n\u200c", "markup": "markdown", "html": "<p>Seems to work:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">executable_paths</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the targets of all shortcuts in the start menu that point to an .exe or</span>\n<span class=\"sd\">    .bat file, as a dictionary such as {&quot;some_program.exe&quot;: &lt;full_path&gt;}. &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">win32com.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span><span class=\"p\">,</span> <span class=\"n\">shellcon</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">win32com.client</span> \n    <span class=\"n\">wscript_shell</span> <span class=\"o\">=</span> <span class=\"n\">win32com</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Dispatch</span><span class=\"p\">(</span><span class=\"s2\">&quot;WScript.Shell&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">START</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">SHGetFolderPath</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">shellcon</span><span class=\"o\">.</span><span class=\"n\">CSIDL_STARTMENU</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">COMMON_START</span> <span class=\"o\">=</span> <span class=\"n\">shell</span><span class=\"o\">.</span><span class=\"n\">SHGetFolderPath</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">shellcon</span><span class=\"o\">.</span><span class=\"n\">CSIDL_COMMON_STARTMENU</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">folder</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">START</span><span class=\"p\">,</span> <span class=\"n\">COMMON_START</span><span class=\"p\">]:</span>\n        <span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;.lnk&#39;</span><span class=\"p\">):</span>\n                    <span class=\"n\">shortcut</span> <span class=\"o\">=</span> <span class=\"n\">wscript_shell</span><span class=\"o\">.</span><span class=\"n\">CreateShortCut</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">))</span>\n                    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">shortcut</span><span class=\"o\">.</span><span class=\"n\">Targetpath</span>\n                    <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;.exe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.bat&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n    <span class=\"k\">return</span> <span class=\"n\">paths</span>\n\n\n<span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"n\">executable_paths</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;sublime_text.exe&#39;</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;hdfview.bat&#39;</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>prints:</p>\n<p>\u200c</p>\n<div class=\"codehilite\"><pre><span></span>C:\\Program Files\\Sublime Text 3\\sublime_text.exe\nC:\\Users\\bilbo\\AppData\\Local\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-25T04:29:19.439469+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-25T04:29:19.454526+00:00", "type": "pullrequest_comment", "id": 99920119}, {"links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99923686.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99923686"}}, "parent": {"id": 99920119, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10/comments/99920119.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10/_/diff#comment-99920119"}}, "depth": 8}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/installer/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/installer/pull-requests/10"}}, "title": "configparser dependency, and dependency cleanups."}, "content": {"raw": "FYI: If a program has already been configured to open a specific file type, you can use `win32api.FindExecutable('path_to_a_file_that_exists.h5')` to find the default executable. I would probably still suggest prompting the user to choose \\(particularly for text editors\\) since this may be their first time using Python and the default/existing program may be a poor choice.", "markup": "markdown", "html": "<p>FYI: If a program has already been configured to open a specific file type, you can use <code>win32api.FindExecutable('path_to_a_file_that_exists.h5')</code> to find the default executable. I would probably still suggest prompting the user to choose (particularly for text editors) since this may be their first time using Python and the default/existing program may be a poor choice.</p>", "type": "rendered"}, "created_on": "2019-04-25T05:47:44.580814+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-04-25T05:47:44.591095+00:00", "type": "pullrequest_comment", "id": 99923686}], "page": 1, "size": 17}