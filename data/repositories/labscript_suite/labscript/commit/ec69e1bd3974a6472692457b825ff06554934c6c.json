{"rendered": {"message": {"raw": "On the basis of converesations with the Monash team, I have revised the\nproperties decorator to be much more general.  Currently device is setup to\nexpect properties set by the instantian attribute:\n\n    valid_property_destinations = {\"con_table_properties\", \"device_properties\"}\n\nso a viable function call might look like (from Camera):\n\n    @set_passed_properties(\n        property_names = {\n            \"con_table_properties\": [\"BIAS_port\"],\n            \"device_properties\": [\"serial_number\", \"SDK\", \"effective_pixel_size\", \"exposuretime\", \"orientation\", \"trigger_edge_type\", \"minimum_recovery_time\", \"added_properties\"]}\n        )\n    def __init__(self, name, parent_device, connection,\n                 BIAS_port = 1027, serial_number = 0x0, SDK='', effective_pixel_size=0.0,\n                 exposuretime=None, orientation='side', trigger_edge_type='rising', minimum_recovery_time=0,\n                 **kwargs):\n\nWe see several things here:\n(1) the destination of any property is limited by the options defined in\n        valid_property_destinations. This can be altered in child objects, but\n        it would lead to problems if we do not create a superset of what is in\n        Device.\n\n(2) We have two destinations by default: information that is sent to the\n        properties entry of the connection table, and information that is sent\n        to the device.  !!! I have not written code that actually writes this!!!\n\n(3) Digging into the code you will find that Device.__init__ now takes the\n        named argument \"added_properties\" which can be absolutly anything the\n        user wants in the \"device_properties\" propties.  These are assumed\n        to have no special meaning within labscript proper, but is there\n        to provide extra information.  For example, to configure the camera\n        in labview, where different cameras want quite different information.", "markup": "markdown", "html": "<p>On the basis of converesations with the Monash team, I have revised the<br />\nproperties decorator to be much more general.  Currently device is setup to<br />\nexpect properties set by the instantian attribute:</p>\n<div class=\"codehilite\"><pre><span></span>valid_property_destinations = {&quot;con_table_properties&quot;, &quot;device_properties&quot;}\n</pre></div>\n\n\n<p>so a viable function call might look like (from Camera):</p>\n<div class=\"codehilite\"><pre><span></span>@set_passed_properties(\n    property_names = {\n        &quot;con_table_properties&quot;: [&quot;BIAS_port&quot;],\n        &quot;device_properties&quot;: [&quot;serial_number&quot;, &quot;SDK&quot;, &quot;effective_pixel_size&quot;, &quot;exposuretime&quot;, &quot;orientation&quot;, &quot;trigger_edge_type&quot;, &quot;minimum_recovery_time&quot;, &quot;added_properties&quot;]}\n    )\ndef __init__(self, name, parent_device, connection,\n             BIAS_port = 1027, serial_number = 0x0, SDK=&#39;&#39;, effective_pixel_size=0.0,\n             exposuretime=None, orientation=&#39;side&#39;, trigger_edge_type=&#39;rising&#39;, minimum_recovery_time=0,\n             **kwargs):\n</pre></div>\n\n\n<p>We see several things here:<br />\n(1) the destination of any property is limited by the options defined in<br />\n        valid_property_destinations. This can be altered in child objects, but<br />\n        it would lead to problems if we do not create a superset of what is in<br />\n        Device.</p>\n<p>(2) We have two destinations by default: information that is sent to the<br />\n        properties entry of the connection table, and information that is sent<br />\n        to the device.  !!! I have not written code that actually writes this!!!</p>\n<p>(3) Digging into the code you will find that Device.<strong>init</strong> now takes the<br />\n        named argument \"added_properties\" which can be absolutly anything the<br />\n        user wants in the \"device_properties\" propties.  These are assumed<br />\n        to have no special meaning within labscript proper, but is there<br />\n        to provide extra information.  For example, to configure the camera<br />\n        in labview, where different cameras want quite different information.</p>", "type": "rendered"}}, "hash": "ec69e1bd3974a6472692457b825ff06554934c6c", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/ec69e1bd3974a6472692457b825ff06554934c6c.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript/commit/ec69e1bd3974a6472692457b825ff06554934c6c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/patch/ec69e1bd3974a6472692457b825ff06554934c6c"}, "html": {"href": "#!/labscript_suite/labscript/commits/ec69e1bd3974a6472692457b825ff06554934c6c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/diff/ec69e1bd3974a6472692457b825ff06554934c6c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/commit/ec69e1bd3974a6472692457b825ff06554934c6c/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript/commit/ec69e1bd3974a6472692457b825ff06554934c6c/statuses_page=1.json"}}, "author": {"raw": "Ian Spielman <spielman@umd.edu>", "type": "author", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}}, "summary": {"raw": "On the basis of converesations with the Monash team, I have revised the\nproperties decorator to be much more general.  Currently device is setup to\nexpect properties set by the instantian attribute:\n\n    valid_property_destinations = {\"con_table_properties\", \"device_properties\"}\n\nso a viable function call might look like (from Camera):\n\n    @set_passed_properties(\n        property_names = {\n            \"con_table_properties\": [\"BIAS_port\"],\n            \"device_properties\": [\"serial_number\", \"SDK\", \"effective_pixel_size\", \"exposuretime\", \"orientation\", \"trigger_edge_type\", \"minimum_recovery_time\", \"added_properties\"]}\n        )\n    def __init__(self, name, parent_device, connection,\n                 BIAS_port = 1027, serial_number = 0x0, SDK='', effective_pixel_size=0.0,\n                 exposuretime=None, orientation='side', trigger_edge_type='rising', minimum_recovery_time=0,\n                 **kwargs):\n\nWe see several things here:\n(1) the destination of any property is limited by the options defined in\n        valid_property_destinations. This can be altered in child objects, but\n        it would lead to problems if we do not create a superset of what is in\n        Device.\n\n(2) We have two destinations by default: information that is sent to the\n        properties entry of the connection table, and information that is sent\n        to the device.  !!! I have not written code that actually writes this!!!\n\n(3) Digging into the code you will find that Device.__init__ now takes the\n        named argument \"added_properties\" which can be absolutly anything the\n        user wants in the \"device_properties\" propties.  These are assumed\n        to have no special meaning within labscript proper, but is there\n        to provide extra information.  For example, to configure the camera\n        in labview, where different cameras want quite different information.", "markup": "markdown", "html": "<p>On the basis of converesations with the Monash team, I have revised the<br />\nproperties decorator to be much more general.  Currently device is setup to<br />\nexpect properties set by the instantian attribute:</p>\n<div class=\"codehilite\"><pre><span></span>valid_property_destinations = {&quot;con_table_properties&quot;, &quot;device_properties&quot;}\n</pre></div>\n\n\n<p>so a viable function call might look like (from Camera):</p>\n<div class=\"codehilite\"><pre><span></span>@set_passed_properties(\n    property_names = {\n        &quot;con_table_properties&quot;: [&quot;BIAS_port&quot;],\n        &quot;device_properties&quot;: [&quot;serial_number&quot;, &quot;SDK&quot;, &quot;effective_pixel_size&quot;, &quot;exposuretime&quot;, &quot;orientation&quot;, &quot;trigger_edge_type&quot;, &quot;minimum_recovery_time&quot;, &quot;added_properties&quot;]}\n    )\ndef __init__(self, name, parent_device, connection,\n             BIAS_port = 1027, serial_number = 0x0, SDK=&#39;&#39;, effective_pixel_size=0.0,\n             exposuretime=None, orientation=&#39;side&#39;, trigger_edge_type=&#39;rising&#39;, minimum_recovery_time=0,\n             **kwargs):\n</pre></div>\n\n\n<p>We see several things here:<br />\n(1) the destination of any property is limited by the options defined in<br />\n        valid_property_destinations. This can be altered in child objects, but<br />\n        it would lead to problems if we do not create a superset of what is in<br />\n        Device.</p>\n<p>(2) We have two destinations by default: information that is sent to the<br />\n        properties entry of the connection table, and information that is sent<br />\n        to the device.  !!! I have not written code that actually writes this!!!</p>\n<p>(3) Digging into the code you will find that Device.<strong>init</strong> now takes the<br />\n        named argument \"added_properties\" which can be absolutly anything the<br />\n        user wants in the \"device_properties\" propties.  These are assumed<br />\n        to have no special meaning within labscript proper, but is there<br />\n        to provide extra information.  For example, to configure the camera<br />\n        in labview, where different cameras want quite different information.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "9239106d9815aa4a90fa51fbebcb61d56569ad1e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/9239106d9815aa4a90fa51fbebcb61d56569ad1e.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/9239106d9815aa4a90fa51fbebcb61d56569ad1e"}}}], "date": "2014-12-16T13:58:39+00:00", "message": "On the basis of converesations with the Monash team, I have revised the\nproperties decorator to be much more general.  Currently device is setup to\nexpect properties set by the instantian attribute:\n\n    valid_property_destinations = {\"con_table_properties\", \"device_properties\"}\n\nso a viable function call might look like (from Camera):\n\n    @set_passed_properties(\n        property_names = {\n            \"con_table_properties\": [\"BIAS_port\"],\n            \"device_properties\": [\"serial_number\", \"SDK\", \"effective_pixel_size\", \"exposuretime\", \"orientation\", \"trigger_edge_type\", \"minimum_recovery_time\", \"added_properties\"]}\n        )\n    def __init__(self, name, parent_device, connection,\n                 BIAS_port = 1027, serial_number = 0x0, SDK='', effective_pixel_size=0.0,\n                 exposuretime=None, orientation='side', trigger_edge_type='rising', minimum_recovery_time=0,\n                 **kwargs):\n\nWe see several things here:\n(1) the destination of any property is limited by the options defined in\n        valid_property_destinations. This can be altered in child objects, but\n        it would lead to problems if we do not create a superset of what is in\n        Device.\n\n(2) We have two destinations by default: information that is sent to the\n        properties entry of the connection table, and information that is sent\n        to the device.  !!! I have not written code that actually writes this!!!\n\n(3) Digging into the code you will find that Device.__init__ now takes the\n        named argument \"added_properties\" which can be absolutly anything the\n        user wants in the \"device_properties\" propties.  These are assumed\n        to have no special meaning within labscript proper, but is there\n        to provide extra information.  For example, to configure the camera\n        in labview, where different cameras want quite different information.", "type": "commit", "git_hash": "4c1f38d078aa09161975e055279df3de546392b9", "tags": null, "branches": "default"}