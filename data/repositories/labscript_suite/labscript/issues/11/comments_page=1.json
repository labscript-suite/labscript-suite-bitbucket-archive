{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11/comments/12767978.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/11#comment-12767978"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`"}, "content": {"raw": "I'm a little against not putting devices in the namespace, because I think specifying parent devices as strings is going to be messy. It isn't necessarily just the device name that is the parent any more. In the gated-clocks branch, a DDS attached to a PulseBlaster now has parent <parent_device_name>.direct_outputs (for example).\n\nIf we move to strings, then we effectively enforce a convention for how to refer to internally created child devices. Right now, someone could set the parent of a child device as <parent_device>.get_clockline(7) or other complex  I can't see an easy way to maintain that freedom with strings that is both intuitive and not doing something like exec'ing a string.\n\nNot sure if there is an ideal solution...", "markup": "markdown", "html": "<p>I'm a little against not putting devices in the namespace, because I think specifying parent devices as strings is going to be messy. It isn't necessarily just the device name that is the parent any more. In the gated-clocks branch, a DDS attached to a PulseBlaster now has parent &lt;parent_device_name&gt;.direct_outputs (for example).</p>\n<p>If we move to strings, then we effectively enforce a convention for how to refer to internally created child devices. Right now, someone could set the parent of a child device as &lt;parent_device&gt;.get_clockline(7) or other complex  I can't see an easy way to maintain that freedom with strings that is both intuitive and not doing something like exec'ing a string.</p>\n<p>Not sure if there is an ideal solution...</p>", "type": "rendered"}, "created_on": "2014-10-04T03:03:29.478362+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 12767978}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11/comments/12768097.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/11#comment-12768097"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`"}, "content": {"raw": "Oh, I hadn't thought of that. That's a decent objection, I wonder if there's any other non-magical way to give the user access to the devices themselves, rather than using strings, without putting them in the namespace, or anything else like that. Hm. I meant they can always do `import shot_devices as d` and do `d.<parent_device>.get_clockline(7)`, but then they'll probably want to do `from shot_devices import *` too later, and it is getting pretty bizarre.\n\nWe could demand they assign their devices to names `pulseblaster_1 = PulseBlaster('pulseblaster_1')...`, but that is awful too.\n\nYeah, I think putting them in the namespace is looking like the best solution.\n\nIt will actually have to be the *global* namespace, even if the user is defining their connection table in a function (as I suggest in issue #10 they should do if the connection table is not in their main file). It can't be put in the function namespace because in Python you actually cannot modify an enclosing namespace, only local or global ones (in Python 2, anyway, unsure whether this changed with the introduction of the `nonlocal` keyword in Python 3).\n\nFor consistency should we make shot globals global to the main labscript file too? They are called 'globals', after all. And then we're just telling people that if they need shot globals outside the main file, they can import them, and if they need devices outside the module that defined them, they can import them.", "markup": "markdown", "html": "<p>Oh, I hadn't thought of that. That's a decent objection, I wonder if there's any other non-magical way to give the user access to the devices themselves, rather than using strings, without putting them in the namespace, or anything else like that. Hm. I meant they can always do <code>import shot_devices as d</code> and do <code>d.&lt;parent_device&gt;.get_clockline(7)</code>, but then they'll probably want to do <code>from shot_devices import *</code> too later, and it is getting pretty bizarre.</p>\n<p>We could demand they assign their devices to names <code>pulseblaster_1 = PulseBlaster('pulseblaster_1')...</code>, but that is awful too.</p>\n<p>Yeah, I think putting them in the namespace is looking like the best solution.</p>\n<p>It will actually have to be the <em>global</em> namespace, even if the user is defining their connection table in a function (as I suggest in issue <a href=\"#!/labscript_suite/labscript/issues/10/unexpected-results-when-importing\" rel=\"nofollow\" title=\"Unexpected results when importing connection table\" class=\"ap-connect-link\">#10</a> they should do if the connection table is not in their main file). It can't be put in the function namespace because in Python you actually cannot modify an enclosing namespace, only local or global ones (in Python 2, anyway, unsure whether this changed with the introduction of the <code>nonlocal</code> keyword in Python 3).</p>\n<p>For consistency should we make shot globals global to the main labscript file too? They are called 'globals', after all. And then we're just telling people that if they need shot globals outside the main file, they can import them, and if they need devices outside the module that defined them, they can import them.</p>", "type": "rendered"}, "created_on": "2014-10-04T03:39:01.324257+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2014-10-04T03:44:06.059124+00:00", "type": "issue_comment", "id": 12768097}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11/comments/12768140.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/11#comment-12768140"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/11.json"}}, "type": "issue", "id": 11, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`"}, "content": {"raw": "I've been wondering whether we should have the user explicitly call `labscript_init(h5_file)` in labscript code, and have the only magical thing runmanger does be inserting that h5_file varialble into the namespace, kinda like how lyse does it.\n\nThis would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals: instantiating a device puts it into your global namespace, calling `labscript_init()` puts globals in your global namespace. I'll report this as another issue, it has advantages of its own.", "markup": "markdown", "html": "<p>I've been wondering whether we should have the user explicitly call <code>labscript_init(h5_file)</code> in labscript code, and have the only magical thing runmanger does be inserting that h5_file varialble into the namespace, kinda like how lyse does it.</p>\n<p>This would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals: instantiating a device puts it into your global namespace, calling <code>labscript_init()</code> puts globals in your global namespace. I'll report this as another issue, it has advantages of its own.</p>", "type": "rendered"}, "created_on": "2014-10-04T03:52:38.825205+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2014-10-04T03:53:20.037283+00:00", "type": "issue_comment", "id": 12768140}], "page": 1, "size": 3}