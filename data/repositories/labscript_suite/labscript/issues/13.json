{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/13/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/13/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/13/have-user-explicitly-call-labscript_init"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/13/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Have user explicitly call `labscript_init`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I've been wondering whether we should have the user explicitly call `labscript_init(shot_file)` in labscript code, and have the only magical thing runmanger does be inserting that `shot_file` varialble into the namespace, kinda like how lyse does it.\r\n\r\nThis would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals if we do this in Issue #11 - calling `labscript_init()` puts globals in your global namespace.\r\n\r\nThe advantage of this is that it gives us more power to do things independently of runmanager if we want to. It is also less magical - even though we're still populating the namespace with globals, the user knows what line that happens on, and the only magic is us giving them a filepath which they can check for the existence of and do something different if it doesn't exist. This is precisely the same as lyse, and I like that consistency.\r\n\r\nAs an example, one could import runmanager, programatically create a shot file by making runmanager API calls (`runmanger.make_run_file_from_globals_files()` comes to mind), and then call `labscript_init()` on the resulting file. Connection table code could then follow, and thus you've compiled a connection table without the GUI programs.\r\n\r\nI mean, that's not the way we should do that - I'll file another issue to BLACS about making that easier, but still.\r\n\r\nThis would be backward incompatible, but if a `Device` was instantiated without calling `labscript_init()` it would throw an exception saying \"please call `labscript_init()`\" ", "markup": "markdown", "html": "<p>I've been wondering whether we should have the user explicitly call <code>labscript_init(shot_file)</code> in labscript code, and have the only magical thing runmanger does be inserting that <code>shot_file</code> varialble into the namespace, kinda like how lyse does it.</p>\n<p>This would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals if we do this in Issue <a href=\"#!/labscript_suite/labscript/issues/11/globals-and-devices-should-be-in-modules\" rel=\"nofollow\" title=\"Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`\" class=\"ap-connect-link\">#11</a> - calling <code>labscript_init()</code> puts globals in your global namespace.</p>\n<p>The advantage of this is that it gives us more power to do things independently of runmanager if we want to. It is also less magical - even though we're still populating the namespace with globals, the user knows what line that happens on, and the only magic is us giving them a filepath which they can check for the existence of and do something different if it doesn't exist. This is precisely the same as lyse, and I like that consistency.</p>\n<p>As an example, one could import runmanager, programatically create a shot file by making runmanager API calls (<code>runmanger.make_run_file_from_globals_files()</code> comes to mind), and then call <code>labscript_init()</code> on the resulting file. Connection table code could then follow, and thus you've compiled a connection table without the GUI programs.</p>\n<p>I mean, that's not the way we should do that - I'll file another issue to BLACS about making that easier, but still.</p>\n<p>This would be backward incompatible, but if a <code>Device</code> was instantiated without calling <code>labscript_init()</code> it would throw an exception saying \"please call <code>labscript_init()</code>\" </p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T04:03:24.728275+00:00", "milestone": null, "updated_on": "2014-10-04T04:03:24.728275+00:00", "type": "issue", "id": 13}