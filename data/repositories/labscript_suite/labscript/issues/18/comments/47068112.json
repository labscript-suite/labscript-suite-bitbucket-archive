{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/18/comments/47068112.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/18#comment-47068112"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/18.json"}}, "type": "issue", "id": 18, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Execution of small or time-critical analysis scripts as part of running shot"}, "content": {"raw": "Great, but lets follow up on\n\n\"\"\"\nPerhaps the h5 file provided should be not open already - that way you can instantiate a lyse.Run(h5_filename) object, or call lyse.data(h5_filename) on it, which would be how you could get shot globals and save analysis results. If this interface is unsatisfactory (Phil has recently been pointing out the obtuseness of some of the interface and proposed that the globals be an attribute of the Run() object instead of requiring a separate call to lyse.data(), that sort of thing), then I would prefer to fix it there rather than introduce another interface.\n\"\"\"\n\nI would suggest two things: \n\n1. Lyse should be able to deal with open references to the h5file, which is an easy check anyway\n2. I am totally happy with the option to allow people to use the lyse infrastructure, but I think that labscript might benefit for a more streamlined interface to pick out globals that does not involve instantiating a large object.  Such as:\n```\n#!python\n\none_global = ShotGlobals(h5file, global_name) # for a global\nglobals = ShotGlobals(h5file, [global1, global2, ...]) # for some globals\nglobals = ShotGlobals(h5file) # for all globals\n\n```\nthe idea is that these would just be fast function calls that get data from an h5 file or a reference\n\nOne more thought comes to mind that one would want to define somehow: in labscript, devices generally store data to places in the h5 file related to the name of the device.  Since the same script might be run by several different \"devices\" (why, I don't know, but it could).  As a result, the device should be involved in informing the script where its data \"should\" go.  It could be as simple as having a call signature that provides two references, one read-only reference (is this even possible?) to the whole h5 file (so you can access the images you want to analyze, for example) and a second to r/w reference to the data storage location.", "markup": "markdown", "html": "<p>Great, but lets follow up on</p>\n<p>\"\"\"\nPerhaps the h5 file provided should be not open already - that way you can instantiate a lyse.Run(h5_filename) object, or call lyse.data(h5_filename) on it, which would be how you could get shot globals and save analysis results. If this interface is unsatisfactory (Phil has recently been pointing out the obtuseness of some of the interface and proposed that the globals be an attribute of the Run() object instead of requiring a separate call to lyse.data(), that sort of thing), then I would prefer to fix it there rather than introduce another interface.\n\"\"\"</p>\n<p>I would suggest two things: </p>\n<ol>\n<li>Lyse should be able to deal with open references to the h5file, which is an easy check anyway</li>\n<li>I am totally happy with the option to allow people to use the lyse infrastructure, but I think that labscript might benefit for a more streamlined interface to pick out globals that does not involve instantiating a large object.  Such as:</li>\n</ol>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">one_global</span> <span class=\"o\">=</span> <span class=\"n\">ShotGlobals</span><span class=\"p\">(</span><span class=\"n\">h5file</span><span class=\"p\">,</span> <span class=\"n\">global_name</span><span class=\"p\">)</span> <span class=\"c1\"># for a global</span>\n<span class=\"nb\">globals</span> <span class=\"o\">=</span> <span class=\"n\">ShotGlobals</span><span class=\"p\">(</span><span class=\"n\">h5file</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">global1</span><span class=\"p\">,</span> <span class=\"n\">global2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">])</span> <span class=\"c1\"># for some globals</span>\n<span class=\"nb\">globals</span> <span class=\"o\">=</span> <span class=\"n\">ShotGlobals</span><span class=\"p\">(</span><span class=\"n\">h5file</span><span class=\"p\">)</span> <span class=\"c1\"># for all globals</span>\n</pre></div>\n\n\n<p>the idea is that these would just be fast function calls that get data from an h5 file or a reference</p>\n<p>One more thought comes to mind that one would want to define somehow: in labscript, devices generally store data to places in the h5 file related to the name of the device.  Since the same script might be run by several different \"devices\" (why, I don't know, but it could).  As a result, the device should be involved in informing the script where its data \"should\" go.  It could be as simple as having a call signature that provides two references, one read-only reference (is this even possible?) to the whole h5 file (so you can access the images you want to analyze, for example) and a second to r/w reference to the data storage location.</p>", "type": "rendered"}, "created_on": "2018-08-01T18:30:17.751535+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 47068112}