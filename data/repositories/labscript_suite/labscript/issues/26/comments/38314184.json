{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38314184.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38314184"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "This would be extremely welcome!\n\nPhil can comment as well but I think qtutils should support PyQt5 without too much effort. The differences between PyQt4 and PyQt5 are relatively minor. There are some low level things in qtutils, but I don't think they pertain to differences between PyQt4 and PyQt5 though something might surprise us.\n\nZprocess was always the hardest part about porting to Python 3 because of the strings/bytes distinction, but yes, it now fully supports Python 3 - though of course it is less tested with Python 3 and so bugs may become apparent with more testing. I actually imagine that porting other components to Python 3 and PyQt5 should not be that difficult. A strategy I might suggest is:\n\n1. First port GUI components to use the \"version 2\" APIs of Pyqt4, which lyse and runmanager already do, but BLACS and runviewer would need to be changed for. You can see it being enabled at the top of lyse and runmanager's `__main__.py` files\n\n2. Then port to PyQt5 in a backward compatible way (if you're already using the version 2 API this should be mostly a matter of one or two if statements and module name aliasing in the imports, depending on which Python version).\n\n3. Then port to Python 3. This should also be able to be done in a backward compatible way so that things work on Python 2 as well as Python 3 (using `__future__` imports and modules like `six`). As of the more recent versions of Python 3, this is not so difficult. Zero effort should be made to support Python 3 versions less than 3.6 (the latest version and what anaconda currently distributes). I think it was 3.5 or so when they reintroduced the `u'string'` prefix to Python 3 to allow backward compatibility with Python 2 - you should go ahead and use these features to make it easier to support both Python versions.\n\nThis order of doing things minimises the complexity of porting since:\n\n* PyQt5 only supports the \"version 2\" PyQt API regardless of Python version\n* PyQt4 on Python 3 only supports the \"version 2\" API, but PyQt4 on Python 2 supports either API version\n\nKeeping backward compatibility is nice to allow people to stay on Python 2 and still get updates until support is dropped in the future rather than right now. We should try to maintain the labscript suite working on both Python 2 and Python 3 for at least a short time (\"short\" here might still mean 2 years :p ). Imposing PyQt5 on people though is pretty harmless - it should be a matter of updating with conda.\n\nDoing it in steps allows for regression testing in between. Porting to API version 2 and thoroughly testing before moving to PyQt5 I think is a good idea. Then moving to PyQt5 and testing before moving to Python 3 is similarly reassuring. That way if there is breakage it is easier to know what caused it rather than not knowing if it was the API change, other Qt4 vs Qt5 changes, or Python3  changes.\n\nSplitting the porting into multiple steps like that also makes it more plausible that other features could be worked on simultaneously and still actually be successfully mergable. Or, at the least, that the task of manually merging would be simpler.", "markup": "markdown", "html": "<p>This would be extremely welcome!</p>\n<p>Phil can comment as well but I think qtutils should support PyQt5 without too much effort. The differences between PyQt4 and PyQt5 are relatively minor. There are some low level things in qtutils, but I don't think they pertain to differences between PyQt4 and PyQt5 though something might surprise us.</p>\n<p>Zprocess was always the hardest part about porting to Python 3 because of the strings/bytes distinction, but yes, it now fully supports Python 3 - though of course it is less tested with Python 3 and so bugs may become apparent with more testing. I actually imagine that porting other components to Python 3 and PyQt5 should not be that difficult. A strategy I might suggest is:</p>\n<ol>\n<li>\n<p>First port GUI components to use the \"version 2\" APIs of Pyqt4, which lyse and runmanager already do, but BLACS and runviewer would need to be changed for. You can see it being enabled at the top of lyse and runmanager's <code>__main__.py</code> files</p>\n</li>\n<li>\n<p>Then port to PyQt5 in a backward compatible way (if you're already using the version 2 API this should be mostly a matter of one or two if statements and module name aliasing in the imports, depending on which Python version).</p>\n</li>\n<li>\n<p>Then port to Python 3. This should also be able to be done in a backward compatible way so that things work on Python 2 as well as Python 3 (using <code>__future__</code> imports and modules like <code>six</code>). As of the more recent versions of Python 3, this is not so difficult. Zero effort should be made to support Python 3 versions less than 3.6 (the latest version and what anaconda currently distributes). I think it was 3.5 or so when they reintroduced the <code>u'string'</code> prefix to Python 3 to allow backward compatibility with Python 2 - you should go ahead and use these features to make it easier to support both Python versions.</p>\n</li>\n</ol>\n<p>This order of doing things minimises the complexity of porting since:</p>\n<ul>\n<li>PyQt5 only supports the \"version 2\" PyQt API regardless of Python version</li>\n<li>PyQt4 on Python 3 only supports the \"version 2\" API, but PyQt4 on Python 2 supports either API version</li>\n</ul>\n<p>Keeping backward compatibility is nice to allow people to stay on Python 2 and still get updates until support is dropped in the future rather than right now. We should try to maintain the labscript suite working on both Python 2 and Python 3 for at least a short time (\"short\" here might still mean 2 years :p ). Imposing PyQt5 on people though is pretty harmless - it should be a matter of updating with conda.</p>\n<p>Doing it in steps allows for regression testing in between. Porting to API version 2 and thoroughly testing before moving to PyQt5 I think is a good idea. Then moving to PyQt5 and testing before moving to Python 3 is similarly reassuring. That way if there is breakage it is easier to know what caused it rather than not knowing if it was the API change, other Qt4 vs Qt5 changes, or Python3  changes.</p>\n<p>Splitting the porting into multiple steps like that also makes it more plausible that other features could be worked on simultaneously and still actually be successfully mergable. Or, at the least, that the task of manually merging would be simpler.</p>", "type": "rendered"}, "created_on": "2017-07-18T20:53:15.853262+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-18T21:10:31.747671+00:00", "type": "issue_comment", "id": 38314184}