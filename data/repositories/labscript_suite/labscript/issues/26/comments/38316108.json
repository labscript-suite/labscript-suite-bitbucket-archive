{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38316108.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38316108"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "No I don't have a timeline for qtutils. You're welcome to make pull requests!\n\nPython 3 support for qtutils shouldn't be too hard (it's already partially done; for instance invoke_in_main is python 3 compatible). PyQt5 could be harder. Will need testing thoroughly especially with widget promotion and signal blocking (probably creating tests would be a good idea!). We should probably consider moving some of the Qt toolkit (PyQt4/PySide/PyQt5) selection code into qtutils and out of the programs that currently support more than just PyQt4. We would then import qt from qtutils, and qtutils could do any toolkit abstraction necessary. I'm not sure which version we should try and abstract to. My preference would be to make everything (PySide/PyQt4) look like PyQt5 for future compatibility. That shouldn't break current qtutils compatibility with our software since we won't start using the qtutils abstracted \"Qt\" until we port the labscript suite to PyQt5 (so it will just lay dormant).\n\nOther than that, I agree with @cbillington's suggested process for porting.", "markup": "markdown", "html": "<p>No I don't have a timeline for qtutils. You're welcome to make pull requests!</p>\n<p>Python 3 support for qtutils shouldn't be too hard (it's already partially done; for instance invoke_in_main is python 3 compatible). PyQt5 could be harder. Will need testing thoroughly especially with widget promotion and signal blocking (probably creating tests would be a good idea!). We should probably consider moving some of the Qt toolkit (PyQt4/PySide/PyQt5) selection code into qtutils and out of the programs that currently support more than just PyQt4. We would then import qt from qtutils, and qtutils could do any toolkit abstraction necessary. I'm not sure which version we should try and abstract to. My preference would be to make everything (PySide/PyQt4) look like PyQt5 for future compatibility. That shouldn't break current qtutils compatibility with our software since we won't start using the qtutils abstracted \"Qt\" until we port the labscript suite to PyQt5 (so it will just lay dormant).</p>\n<p>Other than that, I agree with @cbillington's suggested process for porting.</p>", "type": "rendered"}, "created_on": "2017-07-18T23:35:43.764211+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38316108}