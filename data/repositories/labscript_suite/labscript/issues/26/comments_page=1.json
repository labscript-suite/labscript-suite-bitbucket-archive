{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38313943.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38313943"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I started porting to python3 & PyQt5 and quickly stumbled upon qtutils not supporting pyqt5. @philipstarkey do you have a timeline on when qtutils will support PyQt5? \nI think it should mainly be the imports that need adjusting. Am I right in that regard? If this should be the case I might just do it myself and create a pull request over at the qtutils repo.\n\nAnd more generally have there already been efforts to port? If so are there any more packages that cause(d) problems?\n@cbillington does zprocess fully support python3?", "markup": "markdown", "html": "<p>I started porting to python3 &amp; PyQt5 and quickly stumbled upon qtutils not supporting pyqt5. @philipstarkey do you have a timeline on when qtutils will support PyQt5? \nI think it should mainly be the imports that need adjusting. Am I right in that regard? If this should be the case I might just do it myself and create a pull request over at the qtutils repo.</p>\n<p>And more generally have there already been efforts to port? If so are there any more packages that cause(d) problems?\n@cbillington does zprocess fully support python3?</p>", "type": "rendered"}, "created_on": "2017-07-18T20:37:29.950644+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38313943}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38314184.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38314184"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "This would be extremely welcome!\n\nPhil can comment as well but I think qtutils should support PyQt5 without too much effort. The differences between PyQt4 and PyQt5 are relatively minor. There are some low level things in qtutils, but I don't think they pertain to differences between PyQt4 and PyQt5 though something might surprise us.\n\nZprocess was always the hardest part about porting to Python 3 because of the strings/bytes distinction, but yes, it now fully supports Python 3 - though of course it is less tested with Python 3 and so bugs may become apparent with more testing. I actually imagine that porting other components to Python 3 and PyQt5 should not be that difficult. A strategy I might suggest is:\n\n1. First port GUI components to use the \"version 2\" APIs of Pyqt4, which lyse and runmanager already do, but BLACS and runviewer would need to be changed for. You can see it being enabled at the top of lyse and runmanager's `__main__.py` files\n\n2. Then port to PyQt5 in a backward compatible way (if you're already using the version 2 API this should be mostly a matter of one or two if statements and module name aliasing in the imports, depending on which Python version).\n\n3. Then port to Python 3. This should also be able to be done in a backward compatible way so that things work on Python 2 as well as Python 3 (using `__future__` imports and modules like `six`). As of the more recent versions of Python 3, this is not so difficult. Zero effort should be made to support Python 3 versions less than 3.6 (the latest version and what anaconda currently distributes). I think it was 3.5 or so when they reintroduced the `u'string'` prefix to Python 3 to allow backward compatibility with Python 2 - you should go ahead and use these features to make it easier to support both Python versions.\n\nThis order of doing things minimises the complexity of porting since:\n\n* PyQt5 only supports the \"version 2\" PyQt API regardless of Python version\n* PyQt4 on Python 3 only supports the \"version 2\" API, but PyQt4 on Python 2 supports either API version\n\nKeeping backward compatibility is nice to allow people to stay on Python 2 and still get updates until support is dropped in the future rather than right now. We should try to maintain the labscript suite working on both Python 2 and Python 3 for at least a short time (\"short\" here might still mean 2 years :p ). Imposing PyQt5 on people though is pretty harmless - it should be a matter of updating with conda.\n\nDoing it in steps allows for regression testing in between. Porting to API version 2 and thoroughly testing before moving to PyQt5 I think is a good idea. Then moving to PyQt5 and testing before moving to Python 3 is similarly reassuring. That way if there is breakage it is easier to know what caused it rather than not knowing if it was the API change, other Qt4 vs Qt5 changes, or Python3  changes.\n\nSplitting the porting into multiple steps like that also makes it more plausible that other features could be worked on simultaneously and still actually be successfully mergable. Or, at the least, that the task of manually merging would be simpler.", "markup": "markdown", "html": "<p>This would be extremely welcome!</p>\n<p>Phil can comment as well but I think qtutils should support PyQt5 without too much effort. The differences between PyQt4 and PyQt5 are relatively minor. There are some low level things in qtutils, but I don't think they pertain to differences between PyQt4 and PyQt5 though something might surprise us.</p>\n<p>Zprocess was always the hardest part about porting to Python 3 because of the strings/bytes distinction, but yes, it now fully supports Python 3 - though of course it is less tested with Python 3 and so bugs may become apparent with more testing. I actually imagine that porting other components to Python 3 and PyQt5 should not be that difficult. A strategy I might suggest is:</p>\n<ol>\n<li>\n<p>First port GUI components to use the \"version 2\" APIs of Pyqt4, which lyse and runmanager already do, but BLACS and runviewer would need to be changed for. You can see it being enabled at the top of lyse and runmanager's <code>__main__.py</code> files</p>\n</li>\n<li>\n<p>Then port to PyQt5 in a backward compatible way (if you're already using the version 2 API this should be mostly a matter of one or two if statements and module name aliasing in the imports, depending on which Python version).</p>\n</li>\n<li>\n<p>Then port to Python 3. This should also be able to be done in a backward compatible way so that things work on Python 2 as well as Python 3 (using <code>__future__</code> imports and modules like <code>six</code>). As of the more recent versions of Python 3, this is not so difficult. Zero effort should be made to support Python 3 versions less than 3.6 (the latest version and what anaconda currently distributes). I think it was 3.5 or so when they reintroduced the <code>u'string'</code> prefix to Python 3 to allow backward compatibility with Python 2 - you should go ahead and use these features to make it easier to support both Python versions.</p>\n</li>\n</ol>\n<p>This order of doing things minimises the complexity of porting since:</p>\n<ul>\n<li>PyQt5 only supports the \"version 2\" PyQt API regardless of Python version</li>\n<li>PyQt4 on Python 3 only supports the \"version 2\" API, but PyQt4 on Python 2 supports either API version</li>\n</ul>\n<p>Keeping backward compatibility is nice to allow people to stay on Python 2 and still get updates until support is dropped in the future rather than right now. We should try to maintain the labscript suite working on both Python 2 and Python 3 for at least a short time (\"short\" here might still mean 2 years :p ). Imposing PyQt5 on people though is pretty harmless - it should be a matter of updating with conda.</p>\n<p>Doing it in steps allows for regression testing in between. Porting to API version 2 and thoroughly testing before moving to PyQt5 I think is a good idea. Then moving to PyQt5 and testing before moving to Python 3 is similarly reassuring. That way if there is breakage it is easier to know what caused it rather than not knowing if it was the API change, other Qt4 vs Qt5 changes, or Python3  changes.</p>\n<p>Splitting the porting into multiple steps like that also makes it more plausible that other features could be worked on simultaneously and still actually be successfully mergable. Or, at the least, that the task of manually merging would be simpler.</p>", "type": "rendered"}, "created_on": "2017-07-18T20:53:15.853262+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-18T21:10:31.747671+00:00", "type": "issue_comment", "id": 38314184}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38316108.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38316108"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "No I don't have a timeline for qtutils. You're welcome to make pull requests!\n\nPython 3 support for qtutils shouldn't be too hard (it's already partially done; for instance invoke_in_main is python 3 compatible). PyQt5 could be harder. Will need testing thoroughly especially with widget promotion and signal blocking (probably creating tests would be a good idea!). We should probably consider moving some of the Qt toolkit (PyQt4/PySide/PyQt5) selection code into qtutils and out of the programs that currently support more than just PyQt4. We would then import qt from qtutils, and qtutils could do any toolkit abstraction necessary. I'm not sure which version we should try and abstract to. My preference would be to make everything (PySide/PyQt4) look like PyQt5 for future compatibility. That shouldn't break current qtutils compatibility with our software since we won't start using the qtutils abstracted \"Qt\" until we port the labscript suite to PyQt5 (so it will just lay dormant).\n\nOther than that, I agree with @cbillington's suggested process for porting.", "markup": "markdown", "html": "<p>No I don't have a timeline for qtutils. You're welcome to make pull requests!</p>\n<p>Python 3 support for qtutils shouldn't be too hard (it's already partially done; for instance invoke_in_main is python 3 compatible). PyQt5 could be harder. Will need testing thoroughly especially with widget promotion and signal blocking (probably creating tests would be a good idea!). We should probably consider moving some of the Qt toolkit (PyQt4/PySide/PyQt5) selection code into qtutils and out of the programs that currently support more than just PyQt4. We would then import qt from qtutils, and qtutils could do any toolkit abstraction necessary. I'm not sure which version we should try and abstract to. My preference would be to make everything (PySide/PyQt4) look like PyQt5 for future compatibility. That shouldn't break current qtutils compatibility with our software since we won't start using the qtutils abstracted \"Qt\" until we port the labscript suite to PyQt5 (so it will just lay dormant).</p>\n<p>Other than that, I agree with @cbillington's suggested process for porting.</p>", "type": "rendered"}, "created_on": "2017-07-18T23:35:43.764211+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38316108}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38318919.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38318919"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "As for the abstraction we could just go ahead and use a lot of the abstraction code that pyqtgraph provides  [pyqtgraph.qt](https://github.com/pyqtgraph/pyqtgraph-core/blob/core/Qt.py). This would however need adjustment if we say PyQt5 is the thing that we want everything to look like.\n\nThe porting process seems reasonable.", "markup": "markdown", "html": "<p>As for the abstraction we could just go ahead and use a lot of the abstraction code that pyqtgraph provides  <a data-is-external-link=\"true\" href=\"https://github.com/pyqtgraph/pyqtgraph-core/blob/core/Qt.py\" rel=\"nofollow\">pyqtgraph.qt</a>. This would however need adjustment if we say PyQt5 is the thing that we want everything to look like.</p>\n<p>The porting process seems reasonable.</p>", "type": "rendered"}, "created_on": "2017-07-19T05:17:18.589505+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-19T06:08:07.815426+00:00", "type": "issue_comment", "id": 38318919}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38319731.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38319731"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I'd rather not just use the pyqtgraph abstraction. Mainly because of the licensing mess we might get ourselves into (I think the MIT license is compatible with the BSD license, but borrowing other people's code always gets messy), but also because most of what is in that file is not really all that helpful for what we do. qtutils already has cross-toolkit ui loading (and done better than pyqtgraph does it) and the rest was either trivial or related to graphics scene transformations which we don't really need.\n\nI think the cleaner approach would be to build up the abstraction from scratch based on matching the PyQt5 structure", "markup": "markdown", "html": "<p>I'd rather not just use the pyqtgraph abstraction. Mainly because of the licensing mess we might get ourselves into (I think the MIT license is compatible with the BSD license, but borrowing other people's code always gets messy), but also because most of what is in that file is not really all that helpful for what we do. qtutils already has cross-toolkit ui loading (and done better than pyqtgraph does it) and the rest was either trivial or related to graphics scene transformations which we don't really need.</p>\n<p>I think the cleaner approach would be to build up the abstraction from scratch based on matching the PyQt5 structure</p>", "type": "rendered"}, "created_on": "2017-07-19T06:20:15.064192+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38319731}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38320232.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38320232"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Makes sense!\n\nIn runviewer and BLACS we still have some code to account for pyside I would remove that code in the act of switching to API 2 as that code is also missing in lyse and runmanager. \n\nOr is support for PySide important in some way? It would comeback in step 2 anyway if we choose to also include it in the qtutils wrapper. I would however prefer to first write the wrapper for PyQt4 and PyQt5 only.", "markup": "markdown", "html": "<p>Makes sense!</p>\n<p>In runviewer and BLACS we still have some code to account for pyside I would remove that code in the act of switching to API 2 as that code is also missing in lyse and runmanager. </p>\n<p>Or is support for PySide important in some way? It would comeback in step 2 anyway if we choose to also include it in the qtutils wrapper. I would however prefer to first write the wrapper for PyQt4 and PyQt5 only.</p>", "type": "rendered"}, "created_on": "2017-07-19T06:47:51.577049+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38320232}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38325696.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38325696"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "There is a lot of code in BLACS for PySide, I think it would be a pain to remove and then re-add. Although there is then the consideration of supporting PySide v2 (which I think supports Python 3 but is still in beta?) which potentially complicates things\n\nqtutils should definitely keep PySide support since it is a standalone project to the labscript suite and may be used by other software (I use it in a few private projects, and it's on PyPi and I've spruiked it a few times on stackoverflow, so who knows who else might be using it).\n\nI guess it's an open question as to whether we maintain PySide support (the license is nicer but it has more bugs)\n\nI think, given this, that the best solution might be to ensure that the qtutils update can abstract away all of the PySide things we currently do in our software. That should come first. Then port the labscript suite to use the new qtutils, during which we remove all the toolkit specific hacks (since they should now live in qtutils).\n\n--------\nUPDATE\n\nI forgot to include the change to API v2 for PyQt in the suggested timeline. Since PyQt API v2 is closer to PySide than PyQt API v1, I think you'll actually find it easier to leave the PySide code in. Most of the hacks are actually probably working around the fact that we initially built for PySide, and then moved to PyQt API v1, so you'll probably find a lot of code ends up matching the PySide version and then you can remove the check in that part of the code that swaps between PySide/PyQt (hopefully that makes sense?)", "markup": "markdown", "html": "<p>There is a lot of code in BLACS for PySide, I think it would be a pain to remove and then re-add. Although there is then the consideration of supporting PySide v2 (which I think supports Python 3 but is still in beta?) which potentially complicates things</p>\n<p>qtutils should definitely keep PySide support since it is a standalone project to the labscript suite and may be used by other software (I use it in a few private projects, and it's on PyPi and I've spruiked it a few times on stackoverflow, so who knows who else might be using it).</p>\n<p>I guess it's an open question as to whether we maintain PySide support (the license is nicer but it has more bugs)</p>\n<p>I think, given this, that the best solution might be to ensure that the qtutils update can abstract away all of the PySide things we currently do in our software. That should come first. Then port the labscript suite to use the new qtutils, during which we remove all the toolkit specific hacks (since they should now live in qtutils).</p>\n<hr />\n<p>UPDATE</p>\n<p>I forgot to include the change to API v2 for PyQt in the suggested timeline. Since PyQt API v2 is closer to PySide than PyQt API v1, I think you'll actually find it easier to leave the PySide code in. Most of the hacks are actually probably working around the fact that we initially built for PySide, and then moved to PyQt API v1, so you'll probably find a lot of code ends up matching the PySide version and then you can remove the check in that part of the code that swaps between PySide/PyQt (hopefully that makes sense?)</p>", "type": "rendered"}, "created_on": "2017-07-19T10:37:04.749460+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-07-19T10:40:08.668302+00:00", "type": "issue_comment", "id": 38325696}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38339172.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38339172"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I wasn't planing on doing a total revamp of qtutils I was thinking of adding PyQt5 in a appropriate way in all the existing files. As this is minimal effort and can later be replaced by the Qt wrapper.\n\nBut the new abstraction layer that you proposed would then just be PyQt4 & PyQt5 for the start as thats was I have running on my machines and what I can test against.\n\nBut you're most probably right that all of this should be done before even touching labscript code. As I would first introduce API2 lines just to remove them at a later time and replace them with the new wrapper.\n\nAs for removing PySide I was talking about the imports as they are currently not consistent in lyse, runmanager vs blacs, runviewer. We should decide on whats the way to go here as someone using PySide currently can only use half of the labscript suite. Either we drop support as a whole or reinstate it.\nOk so here is my plan:\n\n1. make existing qtutils files PyQt5 compatible.\n\n2. Qt wrapper for PyQt4 and PyQt5 that behaves like PyQt5\n\n3. Add all of that code into Labscript by replacing the PyQt imports with the import of the wrapper (It would be best to do this with lyse, runmanager, runviewer first as they have they have less Ui code)\n\n4. Lots of testing and dissucssing\n\n5. Do adjustment for Python 3\n\nOne last thing though should we maybe try to import the __future__ package in labscripts files at some point prior to the python3 port to see if something breaks?", "markup": "markdown", "html": "<p>I wasn't planing on doing a total revamp of qtutils I was thinking of adding PyQt5 in a appropriate way in all the existing files. As this is minimal effort and can later be replaced by the Qt wrapper.</p>\n<p>But the new abstraction layer that you proposed would then just be PyQt4 &amp; PyQt5 for the start as thats was I have running on my machines and what I can test against.</p>\n<p>But you're most probably right that all of this should be done before even touching labscript code. As I would first introduce API2 lines just to remove them at a later time and replace them with the new wrapper.</p>\n<p>As for removing PySide I was talking about the imports as they are currently not consistent in lyse, runmanager vs blacs, runviewer. We should decide on whats the way to go here as someone using PySide currently can only use half of the labscript suite. Either we drop support as a whole or reinstate it.\nOk so here is my plan:</p>\n<ol>\n<li>\n<p>make existing qtutils files PyQt5 compatible.</p>\n</li>\n<li>\n<p>Qt wrapper for PyQt4 and PyQt5 that behaves like PyQt5</p>\n</li>\n<li>\n<p>Add all of that code into Labscript by replacing the PyQt imports with the import of the wrapper (It would be best to do this with lyse, runmanager, runviewer first as they have they have less Ui code)</p>\n</li>\n<li>\n<p>Lots of testing and dissucssing</p>\n</li>\n<li>\n<p>Do adjustment for Python 3</p>\n</li>\n</ol>\n<p>One last thing though should we maybe try to import the <strong>future</strong> package in labscripts files at some point prior to the python3 port to see if something breaks?</p>", "type": "rendered"}, "created_on": "2017-07-19T19:48:54.170000+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-19T20:07:01.413810+00:00", "type": "issue_comment", "id": 38339172}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38342830.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38342830"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "future imports will almost certainly break things, or worse introduce bugs that go undetected (especially with division - we already import future division in labscript, but I don't think we necessarily do in the others so we'll need to do a search for `/` and verify that we aren't relying on implicit conversion to integers in those programs).", "markup": "markdown", "html": "<p>future imports will almost certainly break things, or worse introduce bugs that go undetected (especially with division - we already import future division in labscript, but I don't think we necessarily do in the others so we'll need to do a search for <code>/</code> and verify that we aren't relying on implicit conversion to integers in those programs).</p>", "type": "rendered"}, "created_on": "2017-07-20T01:06:45.553703+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38342830}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38342950.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38342950"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "importing `__future__` things will be a necessary part of porting to Python 3 whilst supporting Python 2 still. Whilst I agree with Phil that it will break things, they are things that will break in a port to Python 3 anyway, so there's not much way around it. Turning on each `__future__` import one by one and testing I think is a good idea as a first step toward Python 3  porting, but yes I definitely expect things to break.  I suspect `division` to probably be alright, `unicode_literals` could possibly be trickier but I'm not sure. But considering them one by one could be a good way to get these aspects of the Python 3 port done in a regression-testing friendly way.", "markup": "markdown", "html": "<p>importing <code>__future__</code> things will be a necessary part of porting to Python 3 whilst supporting Python 2 still. Whilst I agree with Phil that it will break things, they are things that will break in a port to Python 3 anyway, so there's not much way around it. Turning on each <code>__future__</code> import one by one and testing I think is a good idea as a first step toward Python 3  porting, but yes I definitely expect things to break.  I suspect <code>division</code> to probably be alright, <code>unicode_literals</code> could possibly be trickier but I'm not sure. But considering them one by one could be a good way to get these aspects of the Python 3 port done in a regression-testing friendly way.</p>", "type": "rendered"}, "created_on": "2017-07-20T01:20:07.397409+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38342950}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38432612.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38432612"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Ok so steps 1 and 2 are done. Step 3 is also done at least on my machine. When the qtutils pull request goes through there will be lots of pull requests.\nThe best order in my opinion is:\n\n1. labscript_utils\n\n2. lyse\n\n3. runmanager\n\n3. BLACS\n\n4. runviewer\n\n\nThis order arises from the dependencies. As lyse uses labscript_utils/qtwidgets/headerview_with_widgets.py this has to happen first. Then lyse can be ported. The next easies thing is runmanager so thats third. Next I would want to do runviewer but that depends on some BLACS code so I would do BLACS  before.\n\nDoing things in this order should allow for testing in between pull requests.", "markup": "markdown", "html": "<p>Ok so steps 1 and 2 are done. Step 3 is also done at least on my machine. When the qtutils pull request goes through there will be lots of pull requests.\nThe best order in my opinion is:</p>\n<ol>\n<li>\n<p>labscript_utils</p>\n</li>\n<li>\n<p>lyse</p>\n</li>\n<li>\n<p>runmanager</p>\n</li>\n<li>\n<p>BLACS</p>\n</li>\n<li>\n<p>runviewer</p>\n</li>\n</ol>\n<p>This order arises from the dependencies. As lyse uses labscript_utils/qtwidgets/headerview_with_widgets.py this has to happen first. Then lyse can be ported. The next easies thing is runmanager so thats third. Next I would want to do runviewer but that depends on some BLACS code so I would do BLACS  before.</p>\n<p>Doing things in this order should allow for testing in between pull requests.</p>", "type": "rendered"}, "created_on": "2017-07-22T10:34:44.539085+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-22T10:34:59.256078+00:00", "type": "issue_comment", "id": 38432612}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38439388.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38439388"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "We should maybe also talk about namespacing. In the act of porting to PyQt5 we could replace all the \"from QtGui import \\*\" and add in QtGui.Class at the appropriate places instead. Where QtGui stands in for any Qt Module. This is a bunch of work (that I happened to have already done once) and has little benefit except for decluttering the global namespace. So should we do that or do we want to keep the convenience of import *?", "markup": "markdown", "html": "<p>We should maybe also talk about namespacing. In the act of porting to PyQt5 we could replace all the \"from QtGui import *\" and add in QtGui.Class at the appropriate places instead. Where QtGui stands in for any Qt Module. This is a bunch of work (that I happened to have already done once) and has little benefit except for decluttering the global namespace. So should we do that or do we want to keep the convenience of import *?</p>", "type": "rendered"}, "created_on": "2017-07-23T09:02:46.507767+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-23T09:03:16.130745+00:00", "type": "issue_comment", "id": 38439388}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38442325.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38442325"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "My mind has gone back and forth about Qt namespacing. I originally was a sloppy coder importing `*` all over the place, then I tightened up and started importing explicitly. But now, I realise that because Qt comes from C++ where namespacing is less of a thing (is it even a thing at all?), the Qt names basically never clash with anything, they all start with 'Q', and I never remember which submodule they're from anyway, so importing `*` has saved a lot of having to look up which module things are in.\n\nSo I really don't mind if we're importing `*` or not - I think the only downside is that static analysis tools like linters are less able to detect errors in your code if you `import *`. This is a pretty good reason, and I'd like to use tools like that more often, so if someone made a pull request to get rid of the `*` imports I would vote to accept it. But it's otherwise not that big a deal for Qt specifically whereas I would consider it much worse form to be importing `*` from most other modules.", "markup": "markdown", "html": "<p>My mind has gone back and forth about Qt namespacing. I originally was a sloppy coder importing <code>*</code> all over the place, then I tightened up and started importing explicitly. But now, I realise that because Qt comes from C++ where namespacing is less of a thing (is it even a thing at all?), the Qt names basically never clash with anything, they all start with 'Q', and I never remember which submodule they're from anyway, so importing <code>*</code> has saved a lot of having to look up which module things are in.</p>\n<p>So I really don't mind if we're importing <code>*</code> or not - I think the only downside is that static analysis tools like linters are less able to detect errors in your code if you <code>import *</code>. This is a pretty good reason, and I'd like to use tools like that more often, so if someone made a pull request to get rid of the <code>*</code> imports I would vote to accept it. But it's otherwise not that big a deal for Qt specifically whereas I would consider it much worse form to be importing <code>*</code> from most other modules.</p>", "type": "rendered"}, "created_on": "2017-07-23T15:54:38.634780+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38442325}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38442836.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38442836"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Ok then we should stick to the import * as this is also a bit more futureproof. Considering that PyQt5 decided to split QtGui in QtWidgets, QtGui and QtCore and I've by now managed to get the Qt wrappers modules to do 'import \\*'", "markup": "markdown", "html": "<p>Ok then we should stick to the import * as this is also a bit more futureproof. Considering that PyQt5 decided to split QtGui in QtWidgets, QtGui and QtCore and I've by now managed to get the Qt wrappers modules to do 'import *'</p>", "type": "rendered"}, "created_on": "2017-07-23T16:57:16.357339+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38442836}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38443109.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38443109"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Sounds good!", "markup": "markdown", "html": "<p>Sounds good!</p>", "type": "rendered"}, "created_on": "2017-07-23T17:40:13.180856+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38443109}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38443944.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38443944"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I'm publishing my PyQt5 port branches one after the other. As I'm reconstructing them from a very messy local repo of mine this takes a bit of time.\n\nThey can be found at:\n\n[Labscript_utils](#!/PhyNerd/labscript_utils/branch/Qt5)\n\n[Lyse](#!/PhyNerd/lyse/branch/Qt5)\n\n[BLACS](#!/PhyNerd/blacs/branch/Qt5)\n\n[runmanager](#!/PhyNerd/runmanager/branch/Qt5)\n\n[labscript_devices](#!/PhyNerd/labscript_devices/branch/Qt5)\n\n[runviewer](#!/PhyNerd/runviewer/branch/Qt5)\n\nThere are most certainly still unfound bugs in the code. If someone wants to hunt them down that would be very much appreciated.", "markup": "markdown", "html": "<p>I'm publishing my PyQt5 port branches one after the other. As I'm reconstructing them from a very messy local repo of mine this takes a bit of time.</p>\n<p>They can be found at:</p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript_utils/branch/Qt5\" rel=\"nofollow\">Labscript_utils</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/lyse/branch/Qt5\" rel=\"nofollow\">Lyse</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/blacs/branch/Qt5\" rel=\"nofollow\">BLACS</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/runmanager/branch/Qt5\" rel=\"nofollow\">runmanager</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript_devices/branch/Qt5\" rel=\"nofollow\">labscript_devices</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/runviewer/branch/Qt5\" rel=\"nofollow\">runviewer</a></p>\n<p>There are most certainly still unfound bugs in the code. If someone wants to hunt them down that would be very much appreciated.</p>", "type": "rendered"}, "created_on": "2017-07-23T19:43:30.002531+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-23T21:16:44.446066+00:00", "type": "issue_comment", "id": 38443944}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444112.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444112"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Be aware that since your lyse qt5 changes include pep8 formatting, it won't merge with your other pending lyse pull requests - might be worth avoiding doing too much work on it until the other pull requests are merged. I'll take a look at the other pull requests tomorrow to see where they're at and see if we can get them merged soon.", "markup": "markdown", "html": "<p>Be aware that since your lyse qt5 changes include pep8 formatting, it won't merge with your other pending lyse pull requests - might be worth avoiding doing too much work on it until the other pull requests are merged. I'll take a look at the other pull requests tomorrow to see where they're at and see if we can get them merged soon.</p>", "type": "rendered"}, "created_on": "2017-07-23T20:14:26.704875+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38444112}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444142.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444142"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Yeah I know this is one of my sublime plugins that does all of this on it's own (if the file is not too long) usually this is really handy. I can create a new branch and just do the diffs without the whitespace anytime so there should be no problem there. Just creating the branches so that development happens out in the open and everyone can go bug hunting or comment. In the BLACS/main.ui I had to remove some lines that broke everything in Qt5 were they important?", "markup": "markdown", "html": "<p>Yeah I know this is one of my sublime plugins that does all of this on it's own (if the file is not too long) usually this is really handy. I can create a new branch and just do the diffs without the whitespace anytime so there should be no problem there. Just creating the branches so that development happens out in the open and everyone can go bug hunting or comment. In the BLACS/main.ui I had to remove some lines that broke everything in Qt5 were they important?</p>", "type": "rendered"}, "created_on": "2017-07-23T20:20:15.137770+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38444142}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444184.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444184"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I'm not sure - looks like some kind of automatic signal connections, which I didn't think we were using. Could you verify that both the window close button and the file/exit menu item still work? if so, then it was probably something redundant.", "markup": "markdown", "html": "<p>I'm not sure - looks like some kind of automatic signal connections, which I didn't think we were using. Could you verify that both the window close button and the file/exit menu item still work? if so, then it was probably something redundant.</p>", "type": "rendered"}, "created_on": "2017-07-23T20:25:09.703492+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38444184}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444237.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444237"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Close button works menu not so much. I'll do the connection in code and hope that that works.", "markup": "markdown", "html": "<p>Close button works menu not so much. I'll do the connection in code and hope that that works.</p>", "type": "rendered"}, "created_on": "2017-07-23T20:33:18.124529+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38444237}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444255.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444255"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Hm, that's unfortunate. Yes, I see now that it was telling the menu item to do the same as the window close event. Does Qt5 not support that? If not it's a shame - we use it in other places too I think (not in BLACS).", "markup": "markdown", "html": "<p>Hm, that's unfortunate. Yes, I see now that it was telling the menu item to do the same as the window close event. Does Qt5 not support that? If not it's a shame - we use it in other places too I think (not in BLACS).</p>", "type": "rendered"}, "created_on": "2017-07-23T20:36:43.451592+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38444255}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444271.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444271"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Qt5 does support connecting signals in Qt designer in this way. What exactly goes wrong when you leave the lines in? It looks like it should be ok, so it would be nice to work out how to do this correctly rather than just working around it, if possible.", "markup": "markdown", "html": "<p>Qt5 does support connecting signals in Qt designer in this way. What exactly goes wrong when you leave the lines in? It looks like it should be ok, so it would be nice to work out how to do this correctly rather than just working around it, if possible.</p>", "type": "rendered"}, "created_on": "2017-07-23T20:39:03.341210+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38444271}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444274.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444274"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "At least it doesn't have QAction.activated\n\n```\n#!python\n\nTraceback (most recent call last):\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/runpy.py\", line 174, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"/Users/janwerkmann/labscript_suite/BLACS/__main__.py\", line 728, in <module>\n    app = BLACS(qapplication)\n  File \"/Users/janwerkmann/labscript_suite/BLACS/__main__.py\", line 250, in __init__\n    self.ui = loader.load(os.path.join(os.path.dirname(os.path.realpath(__file__)),'main.ui'), BLACSWindow())\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/UiLoader.py\", line 117, in load\n    return uic.loadUi(*args, **kwargs)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/__init__.py\", line 226, in loadUi\n    return DynamicUILoader(package).loadUi(uifile, baseinstance, resource_suffix)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/Loader/loader.py\", line 72, in loadUi\n    return self.parse(filename, resource_suffix, basedir)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/uiparser.py\", line 1000, in parse\n    actor(elem)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/uiparser.py\", line 906, in createConnections\n    bound_signal = getattr(sender, signal_name)\nAttributeError: 'QAction' object has no attribute 'activated'\n```", "markup": "markdown", "html": "<p>At least it doesn't have QAction.activated</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">174</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_module_as_main</span>\n    <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"n\">pkg_name</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_code</span>\n    <span class=\"k\">exec</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"n\">run_globals</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/BLACS/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">728</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">BLACS</span><span class=\"p\">(</span><span class=\"n\">qapplication</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/BLACS/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ui</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)),</span><span class=\"s1\">&#39;main.ui&#39;</span><span class=\"p\">),</span> <span class=\"n\">BLACSWindow</span><span class=\"p\">())</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/UiLoader.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">117</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">load</span>\n    <span class=\"k\">return</span> <span class=\"n\">uic</span><span class=\"o\">.</span><span class=\"n\">loadUi</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">226</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">loadUi</span>\n    <span class=\"k\">return</span> <span class=\"n\">DynamicUILoader</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">loadUi</span><span class=\"p\">(</span><span class=\"n\">uifile</span><span class=\"p\">,</span> <span class=\"n\">baseinstance</span><span class=\"p\">,</span> <span class=\"n\">resource_suffix</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/Loader/loader.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">loadUi</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">resource_suffix</span><span class=\"p\">,</span> <span class=\"n\">basedir</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/uiparser.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">parse</span>\n    <span class=\"n\">actor</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/PyQt5/uic/uiparser.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">906</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">createConnections</span>\n    <span class=\"n\">bound_signal</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">signal_name</span><span class=\"p\">)</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;QAction&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;activated&#39;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-23T20:39:34.549853+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38444274}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444316.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444316"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Aha. It appears that in Qt5 it's called 'triggered'. So you could probably change the signal name in the ui file to 'triggered' instead, then things would work on pyqt5.\n\nBut they wouldn't work on Pyqt4 anymore. And in this case it's the same problem as a comment you made over in Qtutils about UILoader not getting monkey-patched objects. Even if qtutils' abstraction layer monkey patches QActioh.triggered to map to QAction.activated in PyQt4, the abstraction layer won't get the monkey patched version.\n\nIt's probably worth investigating if we can have the uiloader use monkey-patched widgets in some way or another. There might be a way to do it cleanly, otherwise the brute-force approach is to actually mess with the PyQt5 namespace and insert the monkey patched objects there so that the UI loader imports them.", "markup": "markdown", "html": "<p>Aha. It appears that in Qt5 it's called 'triggered'. So you could probably change the signal name in the ui file to 'triggered' instead, then things would work on pyqt5.</p>\n<p>But they wouldn't work on Pyqt4 anymore. And in this case it's the same problem as a comment you made over in Qtutils about UILoader not getting monkey-patched objects. Even if qtutils' abstraction layer monkey patches QActioh.triggered to map to QAction.activated in PyQt4, the abstraction layer won't get the monkey patched version.</p>\n<p>It's probably worth investigating if we can have the uiloader use monkey-patched widgets in some way or another. There might be a way to do it cleanly, otherwise the brute-force approach is to actually mess with the PyQt5 namespace and insert the monkey patched objects there so that the UI loader imports them.</p>", "type": "rendered"}, "created_on": "2017-07-23T20:46:22.952328+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38444316}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444340.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444340"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I think I spoke wrong - it looks like 'triggered' exists in Qt4 and Qt5, and that 'activated' only exists in Qt4 for backward compatibility with Qt3. So you should be able to replace 'activated' with 'triggered' in the .ui file and otherwise leave it as-is.\n\n(still probably worth solving the monkey-patching UI loader issue, but not for this reason anymore)", "markup": "markdown", "html": "<p>I think I spoke wrong - it looks like 'triggered' exists in Qt4 and Qt5, and that 'activated' only exists in Qt4 for backward compatibility with Qt3. So you should be able to replace 'activated' with 'triggered' in the .ui file and otherwise leave it as-is.</p>\n<p>(still probably worth solving the monkey-patching UI loader issue, but not for this reason anymore)</p>", "type": "rendered"}, "created_on": "2017-07-23T20:49:09.789271+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T20:50:04.500143+00:00", "type": "issue_comment", "id": 38444340}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38444359.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38444359"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Triggered works under both PyQt4 and PyQt5 for me so I'll replace activated with triggered :) thanks", "markup": "markdown", "html": "<p>Triggered works under both PyQt4 and PyQt5 for me so I'll replace activated with triggered :) thanks</p>", "type": "rendered"}, "created_on": "2017-07-23T20:52:06.098974+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38444359}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38445251.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38445251"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Just more comments about PEP8, there are active pull requests in labscript_devices as well as code in a fork of labscript_deivces yet to be merged that would be fairly severely inconvenienced by having to merge after PEP8 whitespace changes, so it might be a good idea to turn off the PEP8 autoformatting for at least labscript_utils.\n\nWe can slot in a PEP8 formatting of labscript_devices later when it has no unmerged code. \n\nAlso, whilst it's nice to have a one-off PEP8 reformatting for all the projects, unless we enforce and automate compliance with PEP8, there is going to be a lot of commit noise if say, person a) makes a non-pep8-compliant change and then say you make a change which makes their code PEP8 compliant. One-off autoformatting is fine because it shows up clearly in the commit history and you can just keep navigating back to see who wrote some line or whatever, but if it keeps happening it starts to be pretty detrimental to the mergability of unrelated pull requests and to inspecting history.\n\nSo once each project has had a round of PEP8 formatting, further auto PEP8 formatting might not be such a great idea, unless we start requiring all pull requests to respect PEP8. We might start doing that, but until we do, it might be a good idea to disable the sublime plugins's auto-pep8 formatting (I know it's an option to disable it).\n\nWhat I would really like to see is a plugin that auto-pep8-formats only the lines you've *modified*. That would be great - wouldn't interfere with existing code but would ensure all *new* code was formatted correctly. This is basically sublime's default behaviour when it comes to whitespace at the end of lines, would be nice to automatically apply it to other automatic formatting.\n\nAlso, beware of creating diffs that ignore whitespace changes, in order to create commits that lack the auto-pep8 formatting. Since some Python whitespace changes are actually syntactically significant, modifying your commits via a whitespace-ignoring diff can result in wrong code! I've been very confused by this before.\n\nBasically all this auto formatting stuff is a royal pain in the neck for collaborative projects, so even though I'm in favour of a unified code style and I use plugins like this myself in personal projects, I'd like to be pragmatic about it rather than too idealistic, at least until the idealism can be enforced automatically for everyone.", "markup": "markdown", "html": "<p>Just more comments about PEP8, there are active pull requests in labscript_devices as well as code in a fork of labscript_deivces yet to be merged that would be fairly severely inconvenienced by having to merge after PEP8 whitespace changes, so it might be a good idea to turn off the PEP8 autoformatting for at least labscript_utils.</p>\n<p>We can slot in a PEP8 formatting of labscript_devices later when it has no unmerged code. </p>\n<p>Also, whilst it's nice to have a one-off PEP8 reformatting for all the projects, unless we enforce and automate compliance with PEP8, there is going to be a lot of commit noise if say, person a) makes a non-pep8-compliant change and then say you make a change which makes their code PEP8 compliant. One-off autoformatting is fine because it shows up clearly in the commit history and you can just keep navigating back to see who wrote some line or whatever, but if it keeps happening it starts to be pretty detrimental to the mergability of unrelated pull requests and to inspecting history.</p>\n<p>So once each project has had a round of PEP8 formatting, further auto PEP8 formatting might not be such a great idea, unless we start requiring all pull requests to respect PEP8. We might start doing that, but until we do, it might be a good idea to disable the sublime plugins's auto-pep8 formatting (I know it's an option to disable it).</p>\n<p>What I would really like to see is a plugin that auto-pep8-formats only the lines you've <em>modified</em>. That would be great - wouldn't interfere with existing code but would ensure all <em>new</em> code was formatted correctly. This is basically sublime's default behaviour when it comes to whitespace at the end of lines, would be nice to automatically apply it to other automatic formatting.</p>\n<p>Also, beware of creating diffs that ignore whitespace changes, in order to create commits that lack the auto-pep8 formatting. Since some Python whitespace changes are actually syntactically significant, modifying your commits via a whitespace-ignoring diff can result in wrong code! I've been very confused by this before.</p>\n<p>Basically all this auto formatting stuff is a royal pain in the neck for collaborative projects, so even though I'm in favour of a unified code style and I use plugins like this myself in personal projects, I'd like to be pragmatic about it rather than too idealistic, at least until the idealism can be enforced automatically for everyone.</p>", "type": "rendered"}, "created_on": "2017-07-23T22:21:13.457731+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T22:23:01.126737+00:00", "type": "issue_comment", "id": 38445251}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38445337.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38445337"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "As allready mentioned I'll create a second branch when pull request time comes around and that one won't have PEP8 active. But for now this will have to do. I've done the same thing for the lyse and runviewer pull requests way back when I created them.\n\nBut I'll look into deactivating the auto formatting anyway.", "markup": "markdown", "html": "<p>As allready mentioned I'll create a second branch when pull request time comes around and that one won't have PEP8 active. But for now this will have to do. I've done the same thing for the lyse and runviewer pull requests way back when I created them.</p>\n<p>But I'll look into deactivating the auto formatting anyway.</p>", "type": "rendered"}, "created_on": "2017-07-23T22:37:48.724441+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38445337}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38445349.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38445349"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Cool, sounds great - whatever works best for your wokflow!", "markup": "markdown", "html": "<p>Cool, sounds great - whatever works best for your wokflow!</p>", "type": "rendered"}, "created_on": "2017-07-23T22:39:50.334726+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38445349}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38448554.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38448554"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "So I just want to clarify here....\n\nAre we aiming for everything to work with both PyQt4 and PyQt5 or are we porting to just PyQt5 and dropping PyQt4 support?", "markup": "markdown", "html": "<p>So I just want to clarify here....</p>\n<p>Are we aiming for everything to work with both PyQt4 and PyQt5 or are we porting to just PyQt5 and dropping PyQt4 support?</p>", "type": "rendered"}, "created_on": "2017-07-24T05:40:51.878496+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38448554}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38448691.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38448691"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "We want both to work (at least for some time) and thats what my code does.", "markup": "markdown", "html": "<p>We want both to work (at least for some time) and thats what my code does.</p>", "type": "rendered"}, "created_on": "2017-07-24T05:52:52.864985+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38448691}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38448711.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38448711"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "That's my preference too! Just wanted to make sure no one was talking at cross purposes!", "markup": "markdown", "html": "<p>That's my preference too! Just wanted to make sure no one was talking at cross purposes!</p>", "type": "rendered"}, "created_on": "2017-07-24T05:53:49.136867+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38448711}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/38462118.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-38462118"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "I undid all the PEP 8 in all places but lyse. Lyse will follow later today.", "markup": "markdown", "html": "<p>I undid all the PEP 8 in all places but lyse. Lyse will follow later today.</p>", "type": "rendered"}, "created_on": "2017-07-24T14:55:43.599054+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38462118}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/39129654.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-39129654"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Ok so just to update this issue:\n\nExperimental PyQt5 support is here and it's backwards compatible(Yeahy!!! :D). \nThis is achieved through a abstraction layer in qtutils2 that makes the parts of PyQt4 we use look like PyQt5. \n\nI'll start PyQt5 testing next week if there are no issues with the abstraction layer under PyQt4.\n\nOnce testing for PyQt5 has started we can start investing some (more) time into the python 3 port. Lyse should already be fully Python 3 compatible after merging @cbillington s unicode Python 3 pull request.", "markup": "markdown", "html": "<p>Ok so just to update this issue:</p>\n<p>Experimental PyQt5 support is here and it's backwards compatible(Yeahy!!! :D). \nThis is achieved through a abstraction layer in qtutils2 that makes the parts of PyQt4 we use look like PyQt5. </p>\n<p>I'll start PyQt5 testing next week if there are no issues with the abstraction layer under PyQt4.</p>\n<p>Once testing for PyQt5 has started we can start investing some (more) time into the python 3 port. Lyse should already be fully Python 3 compatible after merging @cbillington s unicode Python 3 pull request.</p>", "type": "rendered"}, "created_on": "2017-08-16T20:45:30.550295+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 39129654}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/39196483.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-39196483"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Ok so I played with Python 3 compatibility a bit: \n\nRunmanager works and compiles (my connection table) under python 3 now.\n\nLabscript still needs to switch the numpy array types to store unicode instead of bytes but that caused problems for me so I stuck to byte strings for now. Also there might be more problems when actually compiling scripts. I need to finish up labscript_devices to be sure.\n\nBLACS still needs a lot of work with all the unicode it doesn't even fully start up. Most of the unicode incompatibility is currently in connections.py but who knows what more there might be.\n\n~~labscript_devices is still a mess with all the ```print '.....'``` and ```exec '......' in globals()``` but I might go in there later today and at least fix up all of those and add future imports.~~\n\n\nHere are my branches:\n[runmanager](#!/PhyNerd/runmanager/branch/Python3#diff)\n\n[labscript](#!/PhyNerd/labscript/branch/Python3#diff)\n\n[labscript_utils](#!/PhyNerd/labscript_utils/branch/Python3#diff)\n\n[BLACS](#!/PhyNerd/blacs/branch/Python3#diff)\n\n[labscript_devices](#!/PhyNerd/labscript_devices/branch/Python3#diff)\n\n[runviewer](#!/PhyNerd/runviewer/branch/Python3#diff)\n\nI could really need some help with the BLACS (and maybe labscript) stuff as it's a real pain once one thing is fixed another breaks. I'd also be happy to grant anyone write access to these branches if they want to help make python 3 for labscript happen.\n\nAlso runviewer's resampler needs to be  ~~modified and~~ recompiled for python3 since [Py_InitModule3](http://python3porting.com/cextensions.html#module-initialization) doesn't exist in python3.", "markup": "markdown", "html": "<p>Ok so I played with Python 3 compatibility a bit: </p>\n<p>Runmanager works and compiles (my connection table) under python 3 now.</p>\n<p>Labscript still needs to switch the numpy array types to store unicode instead of bytes but that caused problems for me so I stuck to byte strings for now. Also there might be more problems when actually compiling scripts. I need to finish up labscript_devices to be sure.</p>\n<p>BLACS still needs a lot of work with all the unicode it doesn't even fully start up. Most of the unicode incompatibility is currently in connections.py but who knows what more there might be.</p>\n<p><del>labscript_devices is still a mess with all the <code>print '.....'</code> and <code>exec '......' in globals()</code> but I might go in there later today and at least fix up all of those and add future imports.</del></p>\n<p>Here are my branches:\n<a data-is-external-link=\"true\" href=\"#!/PhyNerd/runmanager/branch/Python3#diff\" rel=\"nofollow\">runmanager</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript/branch/Python3#diff\" rel=\"nofollow\">labscript</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript_utils/branch/Python3#diff\" rel=\"nofollow\">labscript_utils</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/blacs/branch/Python3#diff\" rel=\"nofollow\">BLACS</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript_devices/branch/Python3#diff\" rel=\"nofollow\">labscript_devices</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/runviewer/branch/Python3#diff\" rel=\"nofollow\">runviewer</a></p>\n<p>I could really need some help with the BLACS (and maybe labscript) stuff as it's a real pain once one thing is fixed another breaks. I'd also be happy to grant anyone write access to these branches if they want to help make python 3 for labscript happen.</p>\n<p>Also runviewer's resampler needs to be  <del>modified and</del> recompiled for python3 since <a data-is-external-link=\"true\" href=\"http://python3porting.com/cextensions.html#module-initialization\" rel=\"nofollow\">Py_InitModule3</a> doesn't exist in python3.</p>", "type": "rendered"}, "created_on": "2017-08-20T09:58:21.099654+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-20T14:54:09.443087+00:00", "type": "issue_comment", "id": 39196483}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/39199954.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-39199954"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Ok so connections is such a pain because all numpy arrays have byte strings as type but we need unicode strings in the most places(module names etc.). As we want old files to still work and since hdf5 [doesn't support numpys unicode](http://docs.h5py.org/en/latest/strings.html#exceptions-for-python-3) dtype we will need to add lots of decoding in connections.py I guess", "markup": "markdown", "html": "<p>Ok so connections is such a pain because all numpy arrays have byte strings as type but we need unicode strings in the most places(module names etc.). As we want old files to still work and since hdf5 <a data-is-external-link=\"true\" href=\"http://docs.h5py.org/en/latest/strings.html#exceptions-for-python-3\" rel=\"nofollow\">doesn't support numpys unicode</a> dtype we will need to add lots of decoding in connections.py I guess</p>", "type": "rendered"}, "created_on": "2017-08-20T17:52:24.109227+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 39199954}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments/39503636.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26#comment-39503636"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Port to pyqt5 and python3."}, "content": {"raw": "Speaking of numpy Unicode problems, labscript_devices is going to have a bunch of issues since [dtype field names must match the native python string type](https://github.com/numpy/numpy/issues/2407). Looks like there are two approachs to support both python2 and 3. First is to wrap all the field names in str(), which won't work for us if we are going to overload str() to Unicode() for python2. The second is to specify dtypes with field names using dictionaries instead of lists when specifying dtypes. For whatever reason the dictionary accepts Unicode or bytes for field names regardless of the python used, i.e. \n\n```\n#!python\n\ndtype({'names':['label','time','state'],'formats':['a256',float,np.uint8]})\n```\n\n For whatever reason the type string can be Unicode or bytes using the dictionary or the list method.", "markup": "markdown", "html": "<p>Speaking of numpy Unicode problems, labscript_devices is going to have a bunch of issues since <a data-is-external-link=\"true\" href=\"https://github.com/numpy/numpy/issues/2407\" rel=\"nofollow\">dtype field names must match the native python string type</a>. Looks like there are two approachs to support both python2 and 3. First is to wrap all the field names in str(), which won't work for us if we are going to overload str() to Unicode() for python2. The second is to specify dtypes with field names using dictionaries instead of lists when specifying dtypes. For whatever reason the dictionary accepts Unicode or bytes for field names regardless of the python used, i.e. </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">dtype</span><span class=\"p\">({</span><span class=\"s1\">&#39;names&#39;</span><span class=\"p\">:[</span><span class=\"s1\">&#39;label&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;state&#39;</span><span class=\"p\">],</span><span class=\"s1\">&#39;formats&#39;</span><span class=\"p\">:[</span><span class=\"s1\">&#39;a256&#39;</span><span class=\"p\">,</span><span class=\"nb\">float</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">]})</span>\n</pre></div>\n\n\n<p>For whatever reason the type string can be Unicode or bytes using the dictionary or the list method.</p>", "type": "rendered"}, "created_on": "2017-08-30T14:03:11.501270+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 39503636}], "page": 1, "size": 37}