{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/49715701.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-49715701"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Hi Chris, \n\nI am glad to contribute! We (Lev lab at Stanford) have recently deployed labscript on one of our machines and we are quite happy about it. So I thought we should also contribute.\n\nRegarding the proxy socket, the zeromq router socket is magical! Basically if you have client sockets connect to it and declare their identities (which is just a bytestring you get to pick), then on the proxy server side, if you send a multipart message to the router socket with the first part being a bytestring matching the identity of one of the connected clients, this message will automatically get routed to that client. Similarly, if you receive a message from the router socket (coming from one of the clients), the router socket will prepend it with the client identity and deliver it to you. You can then look up which local sockets correspond to this client and relay the message. This is how you keep track of multiple clients on the remote process server. \n\nAlthough I claimed that this should work with NAT, I have not actually tested the use case. I guess I'll test it and report back.\n\nRegarding file IO, I did not know the bit about drive prefix. Seems like a decent solution, if this h5_lock is in place to serialize read / write (which I did not know either).\n\nI'll submit a pull request soon.", "markup": "markdown", "html": "<p>Hi Chris, </p>\n<p>I am glad to contribute! We (Lev lab at Stanford) have recently deployed labscript on one of our machines and we are quite happy about it. So I thought we should also contribute.</p>\n<p>Regarding the proxy socket, the zeromq router socket is magical! Basically if you have client sockets connect to it and declare their identities (which is just a bytestring you get to pick), then on the proxy server side, if you send a multipart message to the router socket with the first part being a bytestring matching the identity of one of the connected clients, this message will automatically get routed to that client. Similarly, if you receive a message from the router socket (coming from one of the clients), the router socket will prepend it with the client identity and deliver it to you. You can then look up which local sockets correspond to this client and relay the message. This is how you keep track of multiple clients on the remote process server. </p>\n<p>Although I claimed that this should work with NAT, I have not actually tested the use case. I guess I'll test it and report back.</p>\n<p>Regarding file IO, I did not know the bit about drive prefix. Seems like a decent solution, if this h5_lock is in place to serialize read / write (which I did not know either).</p>\n<p>I'll submit a pull request soon.</p>", "type": "rendered"}, "created_on": "2019-01-03T04:48:05.958331+00:00", "user": {"display_name": "Fan Yang", "uuid": "{84e9513b-672d-44f3-97a0-3c988cb8bd6f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D"}, "html": {"href": "https://bitbucket.org/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ce3c9c93ff364578bf09813bd854f924d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFY-1.png"}}, "nickname": "fanyangphy", "type": "user", "account_id": "5c1b1564f9cb4734ae1bc982"}, "updated_on": null, "type": "issue_comment", "id": 49715701}