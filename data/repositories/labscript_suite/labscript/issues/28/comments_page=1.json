{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/36112825.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-36112825"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Is this to launch just the worker process on another PC, or the whole BLACS tab?", "markup": "markdown", "html": "<p>Is this to launch just the worker process on another PC, or the whole BLACS tab?</p>", "type": "rendered"}, "created_on": "2017-04-21T02:29:45.296694+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 36112825}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/36112888.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-36112888"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "This is to allow worker processes to reside on an arbitrary computer so that the camera, or the NI cards, or what have you can be on different physical machines, but the blacs front end will still live on a master computer (that might have no actual hardware attached at all)", "markup": "markdown", "html": "<p>This is to allow worker processes to reside on an arbitrary computer so that the camera, or the NI cards, or what have you can be on different physical machines, but the blacs front end will still live on a master computer (that might have no actual hardware attached at all)</p>", "type": "rendered"}, "created_on": "2017-04-21T02:35:35.288763+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 36112888}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/36113735.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-36113735"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Sounds good. I'd like to request that the kwarg is called something other than `host` so that it can be easily differentiated from whatever we standardise for secondary instances of BLACS. Something like `worker_host` or similar?", "markup": "markdown", "html": "<p>Sounds good. I'd like to request that the kwarg is called something other than <code>host</code> so that it can be easily differentiated from whatever we standardise for secondary instances of BLACS. Something like <code>worker_host</code> or similar?</p>", "type": "rendered"}, "created_on": "2017-04-21T04:00:42.914931+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 36113735}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/36114017.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-36114017"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Related proposal: #!/labscript_suite/blacs/issues/13/launch-blacs-as-a-secondary-control-system", "markup": "markdown", "html": "<p>Related proposal: <a href=\"#!/labscript_suite/blacs/issues/13/launch-blacs-as-a-secondary-control-system\" rel=\"nofollow\" class=\"ap-connect-link\">#!/labscript_suite/blacs/issues/13/launch-blacs-as-a-secondary-control-system</a></p>", "type": "rendered"}, "created_on": "2017-04-21T04:28:10.091367+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 36114017}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/36124899.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-36124899"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "I looked at this second proposal, and while related, it attempts to solve a different problem where one wants a GUI on a different machine.  The proposal here is different that the worker processes of one blacs instance should be spawned on a different computer and the interprocess communication will take place using the current model (ZMQ + h5 files).  So really the only \"new\" feature is launching the processes on a different network accessible computer and initializing the communication.", "markup": "markdown", "html": "<p>I looked at this second proposal, and while related, it attempts to solve a different problem where one wants a GUI on a different machine.  The proposal here is different that the worker processes of one blacs instance should be spawned on a different computer and the interprocess communication will take place using the current model (ZMQ + h5 files).  So really the only \"new\" feature is launching the processes on a different network accessible computer and initializing the communication.</p>", "type": "rendered"}, "created_on": "2017-04-21T12:20:15.861628+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 36124899}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/37984007.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-37984007"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Ok so I gave this a try and here is what I came up with:\n\n[Blacs Branch](#!/PhyNerd/blacs/branch/Remote-Worker)\n[Labscript Branch](#!/PhyNerd/labscript/branch/Remote-Workers)\n\nThe Code is tested and works, but there are still a few problems though, that I could need help with before creating a Pull Request:\n\n1. I was not able to extract the ports from zprocess without modifying it so I relay all messages over the WorkerServer. This might slow things down. Does anyone know how to solve this in a better way?\n\n2. BLACS loads for a long time if the WorkerServer is not running as it waits the timeout for each device. If you however chose the timeout to low BLACS will not wait until the Worker and relay Threads are created.\n\n3. Transition to buffered passes the local file path in relation to the BLACS system and the remote Worker expects a local path in relation to it's system. This is a problem if the shared drive has a different Path on both systems.\n\n4. Is there a better place than the ConnectionTable Properties to store worker_host?\n\n5. The Port is currently hardcoded should this move to the Connection Table(editable for each device) or LabConfig(one port for all devices and servers)?", "markup": "markdown", "html": "<p>Ok so I gave this a try and here is what I came up with:</p>\n<p><a data-is-external-link=\"true\" href=\"#!/PhyNerd/blacs/branch/Remote-Worker\" rel=\"nofollow\">Blacs Branch</a>\n<a data-is-external-link=\"true\" href=\"#!/PhyNerd/labscript/branch/Remote-Workers\" rel=\"nofollow\">Labscript Branch</a></p>\n<p>The Code is tested and works, but there are still a few problems though, that I could need help with before creating a Pull Request:</p>\n<ol>\n<li>\n<p>I was not able to extract the ports from zprocess without modifying it so I relay all messages over the WorkerServer. This might slow things down. Does anyone know how to solve this in a better way?</p>\n</li>\n<li>\n<p>BLACS loads for a long time if the WorkerServer is not running as it waits the timeout for each device. If you however chose the timeout to low BLACS will not wait until the Worker and relay Threads are created.</p>\n</li>\n<li>\n<p>Transition to buffered passes the local file path in relation to the BLACS system and the remote Worker expects a local path in relation to it's system. This is a problem if the shared drive has a different Path on both systems.</p>\n</li>\n<li>\n<p>Is there a better place than the ConnectionTable Properties to store worker_host?</p>\n</li>\n<li>\n<p>The Port is currently hardcoded should this move to the Connection Table(editable for each device) or LabConfig(one port for all devices and servers)?</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2017-07-03T09:18:51.255902+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-05T19:51:44.349523+00:00", "type": "issue_comment", "id": 37984007}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/38104500.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-38104500"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Update: \nI solved by Problem number 3 by modifying the message at the relay so problem number 1 is crucial to this working now.\nThe port is also not hardcoded anymore it can be passed in worker_host with the syntax \"host:port\".", "markup": "markdown", "html": "<p>Update: \nI solved by Problem number 3 by modifying the message at the relay so problem number 1 is crucial to this working now.\nThe port is also not hardcoded anymore it can be passed in worker_host with the syntax \"host:port\".</p>", "type": "rendered"}, "created_on": "2017-07-08T18:18:24.328362+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38104500}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/38288318.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-38288318"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "@cbillington could you take a look at this when you have time? I think you're obviously way more experienced when it comes to zmq/zprocess and I'd love to hear your opinion.", "markup": "markdown", "html": "<p>@cbillington could you take a look at this when you have time? I think you're obviously way more experienced when it comes to zmq/zprocess and I'd love to hear your opinion.</p>", "type": "rendered"}, "created_on": "2017-07-17T20:29:05.409849+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38288318}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/38288532.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-38288532"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Thanks for the work! Yep, I will take a look soon.", "markup": "markdown", "html": "<p>Thanks for the work! Yep, I will take a look soon.</p>", "type": "rendered"}, "created_on": "2017-07-17T20:43:41.503095+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 38288532}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/49714202.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-49714202"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Hello,\n\nNot sure if I'm reinventing the wheel, but here's how I implemented remote device worker launch / control:\n\nIn `zprocess` there's already `RemoteProcessClient` and `RemoteProcessServer` classes half-implemented. What seems to be missing is that in the function `Process.subprocess()`, if there's a remote process client specified, some sort of proxy tunnel between the client and the server should be established and the parent / heartbeat / broker host and port info being passed to the worker should be replaced by the proxy port established by the remote process server. I took liberty to implement the proxy server / client as a pair of zeromq dealer-router. I also have the proxy server and client listen for heartbeats from the workers so unused proxy tunnels will be closed if the worker terminated. See [zprocess:proxy-support](https://bitbucket.org/fanyangphy/zprocess/branch/proxy-support). The Server can be started by executing `python __main__.py <tui>` under `zprocess/remote/`, where the option `tui` will give you a curses-based ui for monitoring connected remote process clients, associated processes and proxy tunnels.\n\nWhile the remote process server is running on the remote computer where devices are physically present, I made the following changes in `BLACS/__main__.py` and `labscript.py`:\n\n1. In `Device.__init__()`, a kwarg `remote_device` is expected to be a dictionary containing host and port info of the `RemoteProcessServer` and saved to the connection table.\n2. Then `Tab.__init__()` will take this information to instantiate `RemoteProcessClient`.\n3. `DeviceTab.create_worker()` instantiates the worker class with the remote process client passed, which basically calls Process.subprocess() to start the connection with the remote process server.\n\n[blacs:remote-process](#!/fanyangphy/blacs/branch/remote-process)\n\n[labscript:remote-process](#!/fanyangphy/labscript/branch/remote-process)\n\nTo set up a remote device, supply kwarg of the form `remote_device={'host': <host>, 'port': <port>, 'proxy_port': <port>}` to the device entry in `connectiontable.py`, start the remote process server on the remote computer, open the ports (7340 and 7440 are the defaults) in the firewall, and it should be ready to go.\n\nThe rationale behind having a zeromq proxy server is that it simplifies the network setup: only two ports need to be configured in the firewall of the remote process server: the \"control port\" which is the good old ZMQServer port, and the \"proxy port\" that is the port of the zeromq router-dealer pair. It seems tricky to get the ip address of the client connecting to a zeromq socket as they don't expose that information in the API, and even if we could it won't be of much use if the client lives behind NAT. So a zeromq proxy seems like the best bet.\n\nOne problem that I have't fixed is that the worker would need to have read (and write, if it's an acquisition device) access to the h5 file during transition to buffer and transition to manual. My idea would be to replace the filename with a [python file-like object](http://docs.h5py.org/en/stable/high/file.html#python-file-like-objects). This file-like object can be a custom class made to access the file through the zeromq proxy tunnel. \n\nBasically the client end would look like:\n\n```\n#!python\nclass RemoteBytesIO(object):\n    def __init__(self, socket):\n        self.socket = socket\n\n    def __getattr__(self, name):\n        if name not in ['read', 'write', 'seek', 'tell', 'truncate', 'flush']:\n            raise AttributeError\n        def func(*args, **kwargs):\n            if name == 'write':\n                args = (bytearray(args[0]),)\n            self.socket.send_pyobj([name, args, kwargs])\n            if self.socket.poll(timeout=1000) == 0:\n                raise TimeoutError\n            retval = self.socket.recv_pyobj()\n            return retval\n```\nand the server end would look like:\n```\n#!python\nwith io.open(fname, 'r+b') as f:\n\n    while True:\n        try:\n            cmd, args, kwargs = socket.recv_pyobj()\n            print(cmd, args, kwargs)\n            result = getattr(f, cmd)(*args, **kwargs)\n            print(result)\n            socket.send_pyobj(result)\n        except KeyboardInterrupt:\n            break\n\n```\nThis approach does not require copying the whole file back and forth, which can be a problem if there are more than a couple remote devices.\n\nThe code has been tested but may need to be cleaned up a bit.", "markup": "markdown", "html": "<p>Hello,</p>\n<p>Not sure if I'm reinventing the wheel, but here's how I implemented remote device worker launch / control:</p>\n<p>In <code>zprocess</code> there's already <code>RemoteProcessClient</code> and <code>RemoteProcessServer</code> classes half-implemented. What seems to be missing is that in the function <code>Process.subprocess()</code>, if there's a remote process client specified, some sort of proxy tunnel between the client and the server should be established and the parent / heartbeat / broker host and port info being passed to the worker should be replaced by the proxy port established by the remote process server. I took liberty to implement the proxy server / client as a pair of zeromq dealer-router. I also have the proxy server and client listen for heartbeats from the workers so unused proxy tunnels will be closed if the worker terminated. See <a data-is-external-link=\"true\" href=\"https://bitbucket.org/fanyangphy/zprocess/branch/proxy-support\" rel=\"nofollow\">zprocess:proxy-support</a>. The Server can be started by executing <code>python __main__.py &lt;tui&gt;</code> under <code>zprocess/remote/</code>, where the option <code>tui</code> will give you a curses-based ui for monitoring connected remote process clients, associated processes and proxy tunnels.</p>\n<p>While the remote process server is running on the remote computer where devices are physically present, I made the following changes in <code>BLACS/__main__.py</code> and <code>labscript.py</code>:</p>\n<ol>\n<li>In <code>Device.__init__()</code>, a kwarg <code>remote_device</code> is expected to be a dictionary containing host and port info of the <code>RemoteProcessServer</code> and saved to the connection table.</li>\n<li>Then <code>Tab.__init__()</code> will take this information to instantiate <code>RemoteProcessClient</code>.</li>\n<li><code>DeviceTab.create_worker()</code> instantiates the worker class with the remote process client passed, which basically calls Process.subprocess() to start the connection with the remote process server.</li>\n</ol>\n<p><a data-is-external-link=\"true\" href=\"#!/fanyangphy/blacs/branch/remote-process\" rel=\"nofollow\">blacs:remote-process</a></p>\n<p><a data-is-external-link=\"true\" href=\"#!/fanyangphy/labscript/branch/remote-process\" rel=\"nofollow\">labscript:remote-process</a></p>\n<p>To set up a remote device, supply kwarg of the form <code>remote_device={'host': &lt;host&gt;, 'port': &lt;port&gt;, 'proxy_port': &lt;port&gt;}</code> to the device entry in <code>connectiontable.py</code>, start the remote process server on the remote computer, open the ports (7340 and 7440 are the defaults) in the firewall, and it should be ready to go.</p>\n<p>The rationale behind having a zeromq proxy server is that it simplifies the network setup: only two ports need to be configured in the firewall of the remote process server: the \"control port\" which is the good old ZMQServer port, and the \"proxy port\" that is the port of the zeromq router-dealer pair. It seems tricky to get the ip address of the client connecting to a zeromq socket as they don't expose that information in the API, and even if we could it won't be of much use if the client lives behind NAT. So a zeromq proxy seems like the best bet.</p>\n<p>One problem that I have't fixed is that the worker would need to have read (and write, if it's an acquisition device) access to the h5 file during transition to buffer and transition to manual. My idea would be to replace the filename with a <a data-is-external-link=\"true\" href=\"http://docs.h5py.org/en/stable/high/file.html#python-file-like-objects\" rel=\"nofollow\">python file-like object</a>. This file-like object can be a custom class made to access the file through the zeromq proxy tunnel. </p>\n<p>Basically the client end would look like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">RemoteBytesIO</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">socket</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">&#39;read&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;write&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;seek&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tell&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;truncate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flush&#39;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span>\n        <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;write&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_pyobj</span><span class=\"p\">([</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">TimeoutError</span>\n            <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv_pyobj</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">retval</span>\n</pre></div>\n\n\n<p>and the server end would look like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r+b&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv_pyobj</span><span class=\"p\">()</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_pyobj</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n</pre></div>\n\n\n<p>This approach does not require copying the whole file back and forth, which can be a problem if there are more than a couple remote devices.</p>\n<p>The code has been tested but may need to be cleaned up a bit.</p>", "type": "rendered"}, "created_on": "2019-01-03T00:57:48.349800+00:00", "user": {"display_name": "Fan Yang", "uuid": "{84e9513b-672d-44f3-97a0-3c988cb8bd6f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D"}, "html": {"href": "https://bitbucket.org/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ce3c9c93ff364578bf09813bd854f924d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFY-1.png"}}, "nickname": "fanyangphy", "type": "user", "account_id": "5c1b1564f9cb4734ae1bc982"}, "updated_on": null, "type": "issue_comment", "id": 49714202}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/49715198.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-49715198"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Hi Fan,\n\nThanks for all the work! I'll have to look over how what you've done works, or at least the zprocess side of things. You've clearly understood what I was going for there, so it looks like this ought to be compatible with our expectations/plans.\n\nThe use of proxy sockets is interesting - I had thought long and hard about how to route all the traffic for a remote process through a single zmq socket and decided it was basically impossible to do what we wanted in that way, even though it would be preferable for e.g. NAT usage. So I will read over your implementation and see if I was wrong about that, or if there is some crucial functionality I was wanting that can't be done if using a proxy. I forget my reasoning, or why I thought it was impossible, but I'm sure reading your code will remind me.\n\nThe curses interface is a nice touch! I should do that for the other servers like the locking server...\n\nRegarding file I/O, the labscript programs already can run on separate computers, and only exchange filepaths rather than files. The files are expected to be on a network drive, and the filepaths are stripped of the network drive prefix (i.e. drive letter) before sending, with the prefix added by the recipient upon receiving (see labscript_utils.shared_drive). We ensure no two clients have the file open in write mode simultaneously using a network locking server (see labscript_utils.h5_lock and zprocess.locking).\n\nIf configuring all computers to use a shared drive (which may be located on one of them) has any major drawbacks, I might be in favour of including network file I/O in the labscript suite, but so far the shared-drive approach has worked well for us, so I think I don't see a great need for this at the moment. \n\nI can't promise when I'll get a chance to look over this, though I might in the next few days (especially since the US government shutdown means I can't go to the lab). Feel free to make a pull request for the zprocess changes, and we can discuss it further there.  We should get the zprocess implementation solid first since it is the underlying layer for the other bits.\n\nThanks again for contributing!", "markup": "markdown", "html": "<p>Hi Fan,</p>\n<p>Thanks for all the work! I'll have to look over how what you've done works, or at least the zprocess side of things. You've clearly understood what I was going for there, so it looks like this ought to be compatible with our expectations/plans.</p>\n<p>The use of proxy sockets is interesting - I had thought long and hard about how to route all the traffic for a remote process through a single zmq socket and decided it was basically impossible to do what we wanted in that way, even though it would be preferable for e.g. NAT usage. So I will read over your implementation and see if I was wrong about that, or if there is some crucial functionality I was wanting that can't be done if using a proxy. I forget my reasoning, or why I thought it was impossible, but I'm sure reading your code will remind me.</p>\n<p>The curses interface is a nice touch! I should do that for the other servers like the locking server...</p>\n<p>Regarding file I/O, the labscript programs already can run on separate computers, and only exchange filepaths rather than files. The files are expected to be on a network drive, and the filepaths are stripped of the network drive prefix (i.e. drive letter) before sending, with the prefix added by the recipient upon receiving (see labscript_utils.shared_drive). We ensure no two clients have the file open in write mode simultaneously using a network locking server (see labscript_utils.h5_lock and zprocess.locking).</p>\n<p>If configuring all computers to use a shared drive (which may be located on one of them) has any major drawbacks, I might be in favour of including network file I/O in the labscript suite, but so far the shared-drive approach has worked well for us, so I think I don't see a great need for this at the moment. </p>\n<p>I can't promise when I'll get a chance to look over this, though I might in the next few days (especially since the US government shutdown means I can't go to the lab). Feel free to make a pull request for the zprocess changes, and we can discuss it further there.  We should get the zprocess implementation solid first since it is the underlying layer for the other bits.</p>\n<p>Thanks again for contributing!</p>", "type": "rendered"}, "created_on": "2019-01-03T03:16:25.581464+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 49715198}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments/49715701.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28#comment-49715701"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}}, "type": "issue", "id": 28, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Remote launching of all Blacs devices"}, "content": {"raw": "Hi Chris, \n\nI am glad to contribute! We (Lev lab at Stanford) have recently deployed labscript on one of our machines and we are quite happy about it. So I thought we should also contribute.\n\nRegarding the proxy socket, the zeromq router socket is magical! Basically if you have client sockets connect to it and declare their identities (which is just a bytestring you get to pick), then on the proxy server side, if you send a multipart message to the router socket with the first part being a bytestring matching the identity of one of the connected clients, this message will automatically get routed to that client. Similarly, if you receive a message from the router socket (coming from one of the clients), the router socket will prepend it with the client identity and deliver it to you. You can then look up which local sockets correspond to this client and relay the message. This is how you keep track of multiple clients on the remote process server. \n\nAlthough I claimed that this should work with NAT, I have not actually tested the use case. I guess I'll test it and report back.\n\nRegarding file IO, I did not know the bit about drive prefix. Seems like a decent solution, if this h5_lock is in place to serialize read / write (which I did not know either).\n\nI'll submit a pull request soon.", "markup": "markdown", "html": "<p>Hi Chris, </p>\n<p>I am glad to contribute! We (Lev lab at Stanford) have recently deployed labscript on one of our machines and we are quite happy about it. So I thought we should also contribute.</p>\n<p>Regarding the proxy socket, the zeromq router socket is magical! Basically if you have client sockets connect to it and declare their identities (which is just a bytestring you get to pick), then on the proxy server side, if you send a multipart message to the router socket with the first part being a bytestring matching the identity of one of the connected clients, this message will automatically get routed to that client. Similarly, if you receive a message from the router socket (coming from one of the clients), the router socket will prepend it with the client identity and deliver it to you. You can then look up which local sockets correspond to this client and relay the message. This is how you keep track of multiple clients on the remote process server. </p>\n<p>Although I claimed that this should work with NAT, I have not actually tested the use case. I guess I'll test it and report back.</p>\n<p>Regarding file IO, I did not know the bit about drive prefix. Seems like a decent solution, if this h5_lock is in place to serialize read / write (which I did not know either).</p>\n<p>I'll submit a pull request soon.</p>", "type": "rendered"}, "created_on": "2019-01-03T04:48:05.958331+00:00", "user": {"display_name": "Fan Yang", "uuid": "{84e9513b-672d-44f3-97a0-3c988cb8bd6f}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D"}, "html": {"href": "https://bitbucket.org/%7B84e9513b-672d-44f3-97a0-3c988cb8bd6f%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ce3c9c93ff364578bf09813bd854f924d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsFY-1.png"}}, "nickname": "fanyangphy", "type": "user", "account_id": "5c1b1564f9cb4734ae1bc982"}, "updated_on": null, "type": "issue_comment", "id": 49715701}], "page": 1, "size": 12}