{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37657019.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37657019"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Thanks! The fundamental problem is that each call to mercurial takes a non-negligible amount of time, about 0.1 seconds on my computer. That times three commands per file, times however many files you have imported from your lascriptlib, adds up quick.\n\nTesting your script, it compiles for me in 0.6 seconds with the mercurial stuff disabled, and 13.7 seconds with it enabled, but with the search path replaced with labscript_suite rather than labscriptlib, because I don't have anything in my labscriptlib (your script had a few dependencies on monash krb modules in labscriptlib that I don't have, I commented them out). This resulted in it looking at 42 files.\n\nThis is mostly, as far as I can tell, Python interpreter startup time and imports and stuff that mercurial is doing, since each of these calls is a separate Python subprocess (mercurial being written in Python). Now, you *can* make mercurial calls directly with the mercurial's API, like so:\n\n\n```\n#!python\n\nimport mercurial.dispatch\n# should os.chdir() into the folder that the file is in and then back after\nrequest = mercurial.dispatch.request(['log', '--limit', '1', 'some_file.py'] , fout=open('/dev/null', 'w'), ferr=open('/dev/null', 'w'))\nmercurial.dispatch.dispatch(request)\n```\ninstead of:\n\n\n```\n#!python\n\nprocess = subprocess.Popen([['hg', 'log', '--limit', '1', 'some_file.py'], cwd=folder,\n                                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)\ninfo, err = process.communicate()\n```\n\nExcept you would replace `fin` and `fout` with `StringIO` objects or something to capture the output (I put /dev/null there just so I wouldn't be measuring how slow runmanager's outputbox might be coughing out all that text. Turns out the outputbox is pretty fast though).\n\nWhen I do this, the compilation takes 1.9 seconds. Much faster, but still a factor of three on the compilation without saving hg data. For you though, looking at how it approximately scales, it would probably only add 0.1 to 0.2 seconds to your shot compilation times, because you must not be using that many files in labscriptlib (definitely not 42).\n\nSo. Do we want to do this? One issue is that mercurial as installed on the system might not be mercurial as importable from Python, since if you install tortoisehg it probably ships with its own bundled Python I would guess. Nevertheless mercurial is conda installable, so labscript doesn't have to use system mercurial, it could use conda mercurial. It could try to \"import mercurial\", which would give conda mercurial if it exists, and if that fails it could just give up even though the system might have mercurial installed elsewhere.\n\nSo that's where it's at I think. Mercurial is too slow, we can speed it up but only if the mercurial library is importable from the running Python interpreter, which system mercurial on Windows is almost certainly not (on linux it is if you're using system python, and isn't if you're using anaconda).\n\nAnother option would be to do \"hg status\" on each *repo* in labscriptlib instead of on each file. Repos can be identified because they contain a .hg folder. So you could look at what modules are imported from labscriptlib, then do a bit of a filesystem walk covering all their ancestor directories up to labscriptlib looking for .hg folders, then call `hg status` etc on those repos exactly once each, and save that data to the h5 file on a per-repo basis instead of per-file.", "markup": "markdown", "html": "<p>Thanks! The fundamental problem is that each call to mercurial takes a non-negligible amount of time, about 0.1 seconds on my computer. That times three commands per file, times however many files you have imported from your lascriptlib, adds up quick.</p>\n<p>Testing your script, it compiles for me in 0.6 seconds with the mercurial stuff disabled, and 13.7 seconds with it enabled, but with the search path replaced with labscript_suite rather than labscriptlib, because I don't have anything in my labscriptlib (your script had a few dependencies on monash krb modules in labscriptlib that I don't have, I commented them out). This resulted in it looking at 42 files.</p>\n<p>This is mostly, as far as I can tell, Python interpreter startup time and imports and stuff that mercurial is doing, since each of these calls is a separate Python subprocess (mercurial being written in Python). Now, you <em>can</em> make mercurial calls directly with the mercurial's API, like so:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">mercurial.dispatch</span>\n<span class=\"c1\"># should os.chdir() into the folder that the file is in and then back after</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">mercurial</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">([</span><span class=\"s1\">&#39;log&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--limit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some_file.py&#39;</span><span class=\"p\">]</span> <span class=\"p\">,</span> <span class=\"n\">fout</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/null&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">),</span> <span class=\"n\">ferr</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/null&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">mercurial</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>instead of:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">([[</span><span class=\"s1\">&#39;hg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--limit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some_file.py&#39;</span><span class=\"p\">],</span> <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">startupinfo</span><span class=\"o\">=</span><span class=\"n\">startupinfo</span><span class=\"p\">)</span>\n<span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Except you would replace <code>fin</code> and <code>fout</code> with <code>StringIO</code> objects or something to capture the output (I put /dev/null there just so I wouldn't be measuring how slow runmanager's outputbox might be coughing out all that text. Turns out the outputbox is pretty fast though).</p>\n<p>When I do this, the compilation takes 1.9 seconds. Much faster, but still a factor of three on the compilation without saving hg data. For you though, looking at how it approximately scales, it would probably only add 0.1 to 0.2 seconds to your shot compilation times, because you must not be using that many files in labscriptlib (definitely not 42).</p>\n<p>So. Do we want to do this? One issue is that mercurial as installed on the system might not be mercurial as importable from Python, since if you install tortoisehg it probably ships with its own bundled Python I would guess. Nevertheless mercurial is conda installable, so labscript doesn't have to use system mercurial, it could use conda mercurial. It could try to \"import mercurial\", which would give conda mercurial if it exists, and if that fails it could just give up even though the system might have mercurial installed elsewhere.</p>\n<p>So that's where it's at I think. Mercurial is too slow, we can speed it up but only if the mercurial library is importable from the running Python interpreter, which system mercurial on Windows is almost certainly not (on linux it is if you're using system python, and isn't if you're using anaconda).</p>\n<p>Another option would be to do \"hg status\" on each <em>repo</em> in labscriptlib instead of on each file. Repos can be identified because they contain a .hg folder. So you could look at what modules are imported from labscriptlib, then do a bit of a filesystem walk covering all their ancestor directories up to labscriptlib looking for .hg folders, then call <code>hg status</code> etc on those repos exactly once each, and save that data to the h5 file on a per-repo basis instead of per-file.</p>", "type": "rendered"}, "created_on": "2017-06-17T07:03:17.161067+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T07:05:04.813954+00:00", "type": "issue_comment", "id": 37657019}