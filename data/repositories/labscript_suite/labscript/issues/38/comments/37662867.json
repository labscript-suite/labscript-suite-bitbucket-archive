{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37662867.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37662867"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "The file contents themselves are saved, but often a diff is more informative - you're interested in asking \"what changed about this code compared to other code we were running around that time?\" I know for example that diffing globals of shot files against the globals in runmanager has been invaluable at Monash -- I believe that there is a poster on the wall of Lincoln's lab warning of the terrible fate that awaits the poor soul who forgets to diff their globals.\n\nGiven that the files themselves are saved though, the diffs and version control log is just icing on the cake, and shouldn't replace documenting what you're doing in a lab logbook. So I don't mind ditching it for the sake of speed, but it is still nice, so I'm interested in how it can be done without the time cost of calling mercurial at compile-time (and I'm not sold on using the mercurial API at compile-time, it's less robust than using system mercurial executables, and clearly doesn't scale to large number of files in any case).\n\nI think rumanager or batch_compiler maintaining a cache might be workable. It's a shame [INotify](https://en.wikipedia.org/wiki/Inotify) isn't a thing on Windows, if it were we could be sure to be notified of changes in a race-free way and not have to resort to periodic polling of the filesystem. But FileWatcher and ModuleWatcher have proved to be performant, and they watch large numbers of files, so I think watching labscriptlib with FileWatcher is probably fine (the cache should be saved to disk too so that you don't pay a 14 second startup time in runmanager for 42 files!). When done with a cache, the number of hg calls can be reduced considerably, so that you won't pay 14 seconds even if you do a \"hg clone\" of a new repo in labscriptlib or something. You only need to call `hg log` once per repo, not once per file, and you can call `hg status` once per repo as well to get a list of files and their statuses, rather than once per file. Then, calling `hg diff` per file is still useful, but you can use the results of `hg status` to know in advance which files will have no diff, which means you won't have to call it in that case. All the data can be obtained with a small number of mercurial calls, ensuring that if the user clicks \"engage\" 2 seconds after a mercurial clone, they will still get up-to-date data (runmanager should make a final call telling FileWatcher to check timestamps at that time to be sure though).\n\nI have [some experience](https://github.com/chrisjbillington/git_nautilus_icons) with doing things similar to this, so I could use that code as a starting point, I think it wouldn't be very hard to get what we want.\n\nSo think I like this. I propose we disable the hg info (still saving the file contents for now) and leave this bug report open pending a solution like that, which I'm happy to keep assigned to me though I can't promise when I'll get around to it (perhaps after the current round of more science-related changes I'm aiming to get done).", "markup": "markdown", "html": "<p>The file contents themselves are saved, but often a diff is more informative - you're interested in asking \"what changed about this code compared to other code we were running around that time?\" I know for example that diffing globals of shot files against the globals in runmanager has been invaluable at Monash -- I believe that there is a poster on the wall of Lincoln's lab warning of the terrible fate that awaits the poor soul who forgets to diff their globals.</p>\n<p>Given that the files themselves are saved though, the diffs and version control log is just icing on the cake, and shouldn't replace documenting what you're doing in a lab logbook. So I don't mind ditching it for the sake of speed, but it is still nice, so I'm interested in how it can be done without the time cost of calling mercurial at compile-time (and I'm not sold on using the mercurial API at compile-time, it's less robust than using system mercurial executables, and clearly doesn't scale to large number of files in any case).</p>\n<p>I think rumanager or batch_compiler maintaining a cache might be workable. It's a shame <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Inotify\" rel=\"nofollow\">INotify</a> isn't a thing on Windows, if it were we could be sure to be notified of changes in a race-free way and not have to resort to periodic polling of the filesystem. But FileWatcher and ModuleWatcher have proved to be performant, and they watch large numbers of files, so I think watching labscriptlib with FileWatcher is probably fine (the cache should be saved to disk too so that you don't pay a 14 second startup time in runmanager for 42 files!). When done with a cache, the number of hg calls can be reduced considerably, so that you won't pay 14 seconds even if you do a \"hg clone\" of a new repo in labscriptlib or something. You only need to call <code>hg log</code> once per repo, not once per file, and you can call <code>hg status</code> once per repo as well to get a list of files and their statuses, rather than once per file. Then, calling <code>hg diff</code> per file is still useful, but you can use the results of <code>hg status</code> to know in advance which files will have no diff, which means you won't have to call it in that case. All the data can be obtained with a small number of mercurial calls, ensuring that if the user clicks \"engage\" 2 seconds after a mercurial clone, they will still get up-to-date data (runmanager should make a final call telling FileWatcher to check timestamps at that time to be sure though).</p>\n<p>I have <a data-is-external-link=\"true\" href=\"https://github.com/chrisjbillington/git_nautilus_icons\" rel=\"nofollow\">some experience</a> with doing things similar to this, so I could use that code as a starting point, I think it wouldn't be very hard to get what we want.</p>\n<p>So think I like this. I propose we disable the hg info (still saving the file contents for now) and leave this bug report open pending a solution like that, which I'm happy to keep assigned to me though I can't promise when I'll get around to it (perhaps after the current round of more science-related changes I'm aiming to get done).</p>", "type": "rendered"}, "created_on": "2017-06-17T19:07:58.190363+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T19:12:05.780775+00:00", "type": "issue_comment", "id": 37662867}