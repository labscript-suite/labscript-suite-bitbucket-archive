{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37655820.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37655820"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Could you attach or send me a labscript file and globals file(s) I could profile this with?", "markup": "markdown", "html": "<p>Could you attach or send me a labscript file and globals file(s) I could profile this with?</p>", "type": "rendered"}, "created_on": "2017-06-17T01:57:08.696288+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37655820}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37656171.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37656171"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "I've emailed them to you as I don't think we want to be sharing our current globals and labscript logic publicly :)", "markup": "markdown", "html": "<p>I've emailed them to you as I don't think we want to be sharing our current globals and labscript logic publicly :)</p>", "type": "rendered"}, "created_on": "2017-06-17T03:19:10.752815+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37656171}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37657019.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37657019"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Thanks! The fundamental problem is that each call to mercurial takes a non-negligible amount of time, about 0.1 seconds on my computer. That times three commands per file, times however many files you have imported from your lascriptlib, adds up quick.\n\nTesting your script, it compiles for me in 0.6 seconds with the mercurial stuff disabled, and 13.7 seconds with it enabled, but with the search path replaced with labscript_suite rather than labscriptlib, because I don't have anything in my labscriptlib (your script had a few dependencies on monash krb modules in labscriptlib that I don't have, I commented them out). This resulted in it looking at 42 files.\n\nThis is mostly, as far as I can tell, Python interpreter startup time and imports and stuff that mercurial is doing, since each of these calls is a separate Python subprocess (mercurial being written in Python). Now, you *can* make mercurial calls directly with the mercurial's API, like so:\n\n\n```\n#!python\n\nimport mercurial.dispatch\n# should os.chdir() into the folder that the file is in and then back after\nrequest = mercurial.dispatch.request(['log', '--limit', '1', 'some_file.py'] , fout=open('/dev/null', 'w'), ferr=open('/dev/null', 'w'))\nmercurial.dispatch.dispatch(request)\n```\ninstead of:\n\n\n```\n#!python\n\nprocess = subprocess.Popen([['hg', 'log', '--limit', '1', 'some_file.py'], cwd=folder,\n                                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)\ninfo, err = process.communicate()\n```\n\nExcept you would replace `fin` and `fout` with `StringIO` objects or something to capture the output (I put /dev/null there just so I wouldn't be measuring how slow runmanager's outputbox might be coughing out all that text. Turns out the outputbox is pretty fast though).\n\nWhen I do this, the compilation takes 1.9 seconds. Much faster, but still a factor of three on the compilation without saving hg data. For you though, looking at how it approximately scales, it would probably only add 0.1 to 0.2 seconds to your shot compilation times, because you must not be using that many files in labscriptlib (definitely not 42).\n\nSo. Do we want to do this? One issue is that mercurial as installed on the system might not be mercurial as importable from Python, since if you install tortoisehg it probably ships with its own bundled Python I would guess. Nevertheless mercurial is conda installable, so labscript doesn't have to use system mercurial, it could use conda mercurial. It could try to \"import mercurial\", which would give conda mercurial if it exists, and if that fails it could just give up even though the system might have mercurial installed elsewhere.\n\nSo that's where it's at I think. Mercurial is too slow, we can speed it up but only if the mercurial library is importable from the running Python interpreter, which system mercurial on Windows is almost certainly not (on linux it is if you're using system python, and isn't if you're using anaconda).\n\nAnother option would be to do \"hg status\" on each *repo* in labscriptlib instead of on each file. Repos can be identified because they contain a .hg folder. So you could look at what modules are imported from labscriptlib, then do a bit of a filesystem walk covering all their ancestor directories up to labscriptlib looking for .hg folders, then call `hg status` etc on those repos exactly once each, and save that data to the h5 file on a per-repo basis instead of per-file.", "markup": "markdown", "html": "<p>Thanks! The fundamental problem is that each call to mercurial takes a non-negligible amount of time, about 0.1 seconds on my computer. That times three commands per file, times however many files you have imported from your lascriptlib, adds up quick.</p>\n<p>Testing your script, it compiles for me in 0.6 seconds with the mercurial stuff disabled, and 13.7 seconds with it enabled, but with the search path replaced with labscript_suite rather than labscriptlib, because I don't have anything in my labscriptlib (your script had a few dependencies on monash krb modules in labscriptlib that I don't have, I commented them out). This resulted in it looking at 42 files.</p>\n<p>This is mostly, as far as I can tell, Python interpreter startup time and imports and stuff that mercurial is doing, since each of these calls is a separate Python subprocess (mercurial being written in Python). Now, you <em>can</em> make mercurial calls directly with the mercurial's API, like so:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">mercurial.dispatch</span>\n<span class=\"c1\"># should os.chdir() into the folder that the file is in and then back after</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">mercurial</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">([</span><span class=\"s1\">&#39;log&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--limit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some_file.py&#39;</span><span class=\"p\">]</span> <span class=\"p\">,</span> <span class=\"n\">fout</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/null&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">),</span> <span class=\"n\">ferr</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;/dev/null&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">))</span>\n<span class=\"n\">mercurial</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>instead of:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">([[</span><span class=\"s1\">&#39;hg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;--limit&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some_file.py&#39;</span><span class=\"p\">],</span> <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"n\">folder</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">startupinfo</span><span class=\"o\">=</span><span class=\"n\">startupinfo</span><span class=\"p\">)</span>\n<span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Except you would replace <code>fin</code> and <code>fout</code> with <code>StringIO</code> objects or something to capture the output (I put /dev/null there just so I wouldn't be measuring how slow runmanager's outputbox might be coughing out all that text. Turns out the outputbox is pretty fast though).</p>\n<p>When I do this, the compilation takes 1.9 seconds. Much faster, but still a factor of three on the compilation without saving hg data. For you though, looking at how it approximately scales, it would probably only add 0.1 to 0.2 seconds to your shot compilation times, because you must not be using that many files in labscriptlib (definitely not 42).</p>\n<p>So. Do we want to do this? One issue is that mercurial as installed on the system might not be mercurial as importable from Python, since if you install tortoisehg it probably ships with its own bundled Python I would guess. Nevertheless mercurial is conda installable, so labscript doesn't have to use system mercurial, it could use conda mercurial. It could try to \"import mercurial\", which would give conda mercurial if it exists, and if that fails it could just give up even though the system might have mercurial installed elsewhere.</p>\n<p>So that's where it's at I think. Mercurial is too slow, we can speed it up but only if the mercurial library is importable from the running Python interpreter, which system mercurial on Windows is almost certainly not (on linux it is if you're using system python, and isn't if you're using anaconda).</p>\n<p>Another option would be to do \"hg status\" on each <em>repo</em> in labscriptlib instead of on each file. Repos can be identified because they contain a .hg folder. So you could look at what modules are imported from labscriptlib, then do a bit of a filesystem walk covering all their ancestor directories up to labscriptlib looking for .hg folders, then call <code>hg status</code> etc on those repos exactly once each, and save that data to the h5 file on a per-repo basis instead of per-file.</p>", "type": "rendered"}, "created_on": "2017-06-17T07:03:17.161067+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T07:05:04.813954+00:00", "type": "issue_comment", "id": 37657019}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37657267.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37657267"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Thanks for looking into this!\n\nI'm trying to think of other solutions to this. In some ways, I'd like to see the code come out into runmanager so that we can turn it into a plugin and support other version control systems (like git) which people might be using for their labscriptlib/analysislib code. However, I don't see any nice way to know what modules are in use prior to running the script, and so there is no way to save time.\n\nAnother hacky solution could be to spawn a process whose job it is to asynchronously get the hg status information and write it to the h5 file. This could be done while BLACS is using the shot file, since h5lock will protect everything. But a bit hacky since the user wouldn't know when it had actually finished writing the information...\n\nI suppose the batch_compiler process could cache all of this information for labscriptlib and pass it to labscript so that labscript can pull out the information it needs for the modules in use? the batch_compiler could watch the folder and update the information when files changed (this assumes that labscript can't be run without the runmanager batch_compiler which I think is correct?). Or maybe runmanager should be doing the monitoring and passing the information to the batch_compiler so that it can display the hg repo status to you in the GUI to remind you to commit?\n\nNot sure, trying to think outside the box!\n\nMaybe we should just try the python hg library approach (with a fallback to command line hg) for now and see how that goes? Maybe add a flag in runmanager to turn it off completely for those who need fast compilation speed?", "markup": "markdown", "html": "<p>Thanks for looking into this!</p>\n<p>I'm trying to think of other solutions to this. In some ways, I'd like to see the code come out into runmanager so that we can turn it into a plugin and support other version control systems (like git) which people might be using for their labscriptlib/analysislib code. However, I don't see any nice way to know what modules are in use prior to running the script, and so there is no way to save time.</p>\n<p>Another hacky solution could be to spawn a process whose job it is to asynchronously get the hg status information and write it to the h5 file. This could be done while BLACS is using the shot file, since h5lock will protect everything. But a bit hacky since the user wouldn't know when it had actually finished writing the information...</p>\n<p>I suppose the batch_compiler process could cache all of this information for labscriptlib and pass it to labscript so that labscript can pull out the information it needs for the modules in use? the batch_compiler could watch the folder and update the information when files changed (this assumes that labscript can't be run without the runmanager batch_compiler which I think is correct?). Or maybe runmanager should be doing the monitoring and passing the information to the batch_compiler so that it can display the hg repo status to you in the GUI to remind you to commit?</p>\n<p>Not sure, trying to think outside the box!</p>\n<p>Maybe we should just try the python hg library approach (with a fallback to command line hg) for now and see how that goes? Maybe add a flag in runmanager to turn it off completely for those who need fast compilation speed?</p>", "type": "rendered"}, "created_on": "2017-06-17T07:39:53.620252+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37657267}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37659399.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37659399"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "I really think that software driven slowdowns are not ok.  So maybe this is a good time to think about organizing what is written into the h5 file into to groups: things that must be done to compile the shot so blacs can use it, and things that must be done before the file is archived.  Anything in the latter camp can still be in progress after the shot is submitted.", "markup": "markdown", "html": "<p>I really think that software driven slowdowns are not ok.  So maybe this is a good time to think about organizing what is written into the h5 file into to groups: things that must be done to compile the shot so blacs can use it, and things that must be done before the file is archived.  Anything in the latter camp can still be in progress after the shot is submitted.</p>", "type": "rendered"}, "created_on": "2017-06-17T12:37:29.580982+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 37659399}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37659451.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37659451"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Second and unrelated to first comment.  Why are we using revision control to solve this problem? Why not save the full text files?  In a compressed h5 file this will be quite compact and will allow for offline consideration on machines that do not have the files that are referenced by the revision control system.  Ian's point: bits are cheap, and dependencies come with a price.\n\nMaybe this is in support of the give choices suggestion where store it all, hg and git are all options.", "markup": "markdown", "html": "<p>Second and unrelated to first comment.  Why are we using revision control to solve this problem? Why not save the full text files?  In a compressed h5 file this will be quite compact and will allow for offline consideration on machines that do not have the files that are referenced by the revision control system.  Ian's point: bits are cheap, and dependencies come with a price.</p>\n<p>Maybe this is in support of the give choices suggestion where store it all, hg and git are all options.</p>", "type": "rendered"}, "created_on": "2017-06-17T12:41:45.832054+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 37659451}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37662867.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37662867"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "The file contents themselves are saved, but often a diff is more informative - you're interested in asking \"what changed about this code compared to other code we were running around that time?\" I know for example that diffing globals of shot files against the globals in runmanager has been invaluable at Monash -- I believe that there is a poster on the wall of Lincoln's lab warning of the terrible fate that awaits the poor soul who forgets to diff their globals.\n\nGiven that the files themselves are saved though, the diffs and version control log is just icing on the cake, and shouldn't replace documenting what you're doing in a lab logbook. So I don't mind ditching it for the sake of speed, but it is still nice, so I'm interested in how it can be done without the time cost of calling mercurial at compile-time (and I'm not sold on using the mercurial API at compile-time, it's less robust than using system mercurial executables, and clearly doesn't scale to large number of files in any case).\n\nI think rumanager or batch_compiler maintaining a cache might be workable. It's a shame [INotify](https://en.wikipedia.org/wiki/Inotify) isn't a thing on Windows, if it were we could be sure to be notified of changes in a race-free way and not have to resort to periodic polling of the filesystem. But FileWatcher and ModuleWatcher have proved to be performant, and they watch large numbers of files, so I think watching labscriptlib with FileWatcher is probably fine (the cache should be saved to disk too so that you don't pay a 14 second startup time in runmanager for 42 files!). When done with a cache, the number of hg calls can be reduced considerably, so that you won't pay 14 seconds even if you do a \"hg clone\" of a new repo in labscriptlib or something. You only need to call `hg log` once per repo, not once per file, and you can call `hg status` once per repo as well to get a list of files and their statuses, rather than once per file. Then, calling `hg diff` per file is still useful, but you can use the results of `hg status` to know in advance which files will have no diff, which means you won't have to call it in that case. All the data can be obtained with a small number of mercurial calls, ensuring that if the user clicks \"engage\" 2 seconds after a mercurial clone, they will still get up-to-date data (runmanager should make a final call telling FileWatcher to check timestamps at that time to be sure though).\n\nI have [some experience](https://github.com/chrisjbillington/git_nautilus_icons) with doing things similar to this, so I could use that code as a starting point, I think it wouldn't be very hard to get what we want.\n\nSo think I like this. I propose we disable the hg info (still saving the file contents for now) and leave this bug report open pending a solution like that, which I'm happy to keep assigned to me though I can't promise when I'll get around to it (perhaps after the current round of more science-related changes I'm aiming to get done).", "markup": "markdown", "html": "<p>The file contents themselves are saved, but often a diff is more informative - you're interested in asking \"what changed about this code compared to other code we were running around that time?\" I know for example that diffing globals of shot files against the globals in runmanager has been invaluable at Monash -- I believe that there is a poster on the wall of Lincoln's lab warning of the terrible fate that awaits the poor soul who forgets to diff their globals.</p>\n<p>Given that the files themselves are saved though, the diffs and version control log is just icing on the cake, and shouldn't replace documenting what you're doing in a lab logbook. So I don't mind ditching it for the sake of speed, but it is still nice, so I'm interested in how it can be done without the time cost of calling mercurial at compile-time (and I'm not sold on using the mercurial API at compile-time, it's less robust than using system mercurial executables, and clearly doesn't scale to large number of files in any case).</p>\n<p>I think rumanager or batch_compiler maintaining a cache might be workable. It's a shame <a data-is-external-link=\"true\" href=\"https://en.wikipedia.org/wiki/Inotify\" rel=\"nofollow\">INotify</a> isn't a thing on Windows, if it were we could be sure to be notified of changes in a race-free way and not have to resort to periodic polling of the filesystem. But FileWatcher and ModuleWatcher have proved to be performant, and they watch large numbers of files, so I think watching labscriptlib with FileWatcher is probably fine (the cache should be saved to disk too so that you don't pay a 14 second startup time in runmanager for 42 files!). When done with a cache, the number of hg calls can be reduced considerably, so that you won't pay 14 seconds even if you do a \"hg clone\" of a new repo in labscriptlib or something. You only need to call <code>hg log</code> once per repo, not once per file, and you can call <code>hg status</code> once per repo as well to get a list of files and their statuses, rather than once per file. Then, calling <code>hg diff</code> per file is still useful, but you can use the results of <code>hg status</code> to know in advance which files will have no diff, which means you won't have to call it in that case. All the data can be obtained with a small number of mercurial calls, ensuring that if the user clicks \"engage\" 2 seconds after a mercurial clone, they will still get up-to-date data (runmanager should make a final call telling FileWatcher to check timestamps at that time to be sure though).</p>\n<p>I have <a data-is-external-link=\"true\" href=\"https://github.com/chrisjbillington/git_nautilus_icons\" rel=\"nofollow\">some experience</a> with doing things similar to this, so I could use that code as a starting point, I think it wouldn't be very hard to get what we want.</p>\n<p>So think I like this. I propose we disable the hg info (still saving the file contents for now) and leave this bug report open pending a solution like that, which I'm happy to keep assigned to me though I can't promise when I'll get around to it (perhaps after the current round of more science-related changes I'm aiming to get done).</p>", "type": "rendered"}, "created_on": "2017-06-17T19:07:58.190363+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T19:12:05.780775+00:00", "type": "issue_comment", "id": 37662867}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37665411.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37665411"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Can we disable it in a way that allows someone to re-enable it from their labscript file. For instance, disabled by default, but then you could do something like:\n\n```\n#!python\n\nimport labscript\nlabscript.compiler.save_hg_info = True\n```\nor similar at the top of your experiment script?\n\nI'm only suggesting this because I don't know how much the Monash spinor lab want this functionality enabled. @rpanderson was the one who made the pull request (pull request #7) in the first place to update the code from supporting SVN to mercurial, so I'm guessing there was a reason for that, in which case a method to enable this for critical cases (with the knowledge it slows down compile time) seems like the optimal, temporary solution.\n\nI'm also happy to unassign this and leave it to be picked up by whoever wants it when they have time.", "markup": "markdown", "html": "<p>Can we disable it in a way that allows someone to re-enable it from their labscript file. For instance, disabled by default, but then you could do something like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">labscript</span>\n<span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">save_hg_info</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</pre></div>\n\n\n<p>or similar at the top of your experiment script?</p>\n<p>I'm only suggesting this because I don't know how much the Monash spinor lab want this functionality enabled. @rpanderson was the one who made the pull request (<a href=\"#!/labscript_suite/labscript/pull-requests/7/save-mercurial-instead-of-subversion\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #7</a>) in the first place to update the code from supporting SVN to mercurial, so I'm guessing there was a reason for that, in which case a method to enable this for critical cases (with the knowledge it slows down compile time) seems like the optimal, temporary solution.</p>\n<p>I'm also happy to unassign this and leave it to be picked up by whoever wants it when they have time.</p>", "type": "rendered"}, "created_on": "2017-06-18T04:59:25.030603+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37665411}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37665413.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37665413"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-06-18T05:00:09.489480+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37665413}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37665422.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37665422"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Ah that sounds like a good way of turning it off, yep. And not remove the existing code until there's something to replace it.", "markup": "markdown", "html": "<p>Ah that sounds like a good way of turning it off, yep. And not remove the existing code until there's something to replace it.</p>", "type": "rendered"}, "created_on": "2017-06-18T05:01:37.332637+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37665422}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37665446.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37665446"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "FYI: We could maybe look at using [`QFileSystemWatcher`](http://doc.qt.io/qt-4.8/qfilesystemwatcher.html) for a better platform agnostic way of monitoring files. It uses `INotify` on linux, and I believe that windows has something similar that presumably Qt is using. I think I propsed using the windows API many years ago but there was only a dodgy 3rd party library available to interface with it which we decided to avoid. But this was way before we were using Qt, so maybe we could revisit it sometime.", "markup": "markdown", "html": "<p>FYI: We could maybe look at using <a data-is-external-link=\"true\" href=\"http://doc.qt.io/qt-4.8/qfilesystemwatcher.html\" rel=\"nofollow\"><code>QFileSystemWatcher</code></a> for a better platform agnostic way of monitoring files. It uses <code>INotify</code> on linux, and I believe that windows has something similar that presumably Qt is using. I think I propsed using the windows API many years ago but there was only a dodgy 3rd party library available to interface with it which we decided to avoid. But this was way before we were using Qt, so maybe we could revisit it sometime.</p>", "type": "rendered"}, "created_on": "2017-06-18T05:09:40.089759+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37665446}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37669894.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37669894"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "I really like the idea of having a script-level way of turning this on and off.  I'm not in love with the idea of introducing dependancies on QT at the core level, however.  One of the dreams some of our postdocs (one postdoc in particular...) have is of fully separating \"core functionality\" with \"UI\" where everything could be done at the command-line if so desired with exactly zero GUI.  I agree with the utility of such a logical separation even if I would want a GUI personally.", "markup": "markdown", "html": "<p>I really like the idea of having a script-level way of turning this on and off.  I'm not in love with the idea of introducing dependancies on QT at the core level, however.  One of the dreams some of our postdocs (one postdoc in particular...) have is of fully separating \"core functionality\" with \"UI\" where everything could be done at the command-line if so desired with exactly zero GUI.  I agree with the utility of such a logical separation even if I would want a GUI personally.</p>", "type": "rendered"}, "created_on": "2017-06-18T14:59:14.649214+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": null, "type": "issue_comment", "id": 37669894}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37673708.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37673708"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Oh yes, definitely. I was only suggesting using `QFileSystemWatcher` for the GUI applications that actively monitor filesystem changes (like the BLACS GUI does to prompt about connection table recompilation and the proposal to have runmanager do it for repository status if we decide to go in that direction). \n\nThat said, a lot of Qt (everything in QtCore) is designed to run in command line applications as well as GUI applications. Qt have a `QCoreApplication` class specifically for starting up the Qt event loop in command line software that doesn't have a GUI. But I think it's a pain to compile Qt on headless systems if they are truly headless (aka don't have a graphics card at all), so I'm still keen to avoid adding Qt as a dependency to anything that isn't going to always be tightly coupled to a GUI.", "markup": "markdown", "html": "<p>Oh yes, definitely. I was only suggesting using <code>QFileSystemWatcher</code> for the GUI applications that actively monitor filesystem changes (like the BLACS GUI does to prompt about connection table recompilation and the proposal to have runmanager do it for repository status if we decide to go in that direction). </p>\n<p>That said, a lot of Qt (everything in QtCore) is designed to run in command line applications as well as GUI applications. Qt have a <code>QCoreApplication</code> class specifically for starting up the Qt event loop in command line software that doesn't have a GUI. But I think it's a pain to compile Qt on headless systems if they are truly headless (aka don't have a graphics card at all), so I'm still keen to avoid adding Qt as a dependency to anything that isn't going to always be tightly coupled to a GUI.</p>", "type": "rendered"}, "created_on": "2017-06-19T00:34:16.061066+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37673708}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37673745.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37673745"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "I also would not have a problem continuing to use FileWatcher, but having Filewatcher (perhaps optionally) wrap QFileSystemWatcher. A single, contained dependency like that is flexible, you can strip it out later easily and all programs that depend on that code will change their behaviour accordingly. I'm not saying that's what we should do, just that I wouldn't have a problem with it since it would be a single-point of change to revert it.\n\nI'm skeptical though, that QFileSystemWatcher is sufficiently general for us. For example, most of these things don't work on network drives (FileWatcher does). I was also unaware that Windows had an INotify equaivant, and the docs for QFileSystemWatcher don't specify what mechanism they use on Windows.\n\nBottom line I think is that sticking with FIleWatcher and its polling is a good idea unless we see a performance reason not to. But, I'm interested to know how QFileSystemWatcher works, so that we can make an informed decision. And depending on Qt without a GUI is also fine by me, but it is admittedly one of the more complicated dependencies to make sure you have (conda manages to hide this pretty well though!), so that does count against it.", "markup": "markdown", "html": "<p>I also would not have a problem continuing to use FileWatcher, but having Filewatcher (perhaps optionally) wrap QFileSystemWatcher. A single, contained dependency like that is flexible, you can strip it out later easily and all programs that depend on that code will change their behaviour accordingly. I'm not saying that's what we should do, just that I wouldn't have a problem with it since it would be a single-point of change to revert it.</p>\n<p>I'm skeptical though, that QFileSystemWatcher is sufficiently general for us. For example, most of these things don't work on network drives (FileWatcher does). I was also unaware that Windows had an INotify equaivant, and the docs for QFileSystemWatcher don't specify what mechanism they use on Windows.</p>\n<p>Bottom line I think is that sticking with FIleWatcher and its polling is a good idea unless we see a performance reason not to. But, I'm interested to know how QFileSystemWatcher works, so that we can make an informed decision. And depending on Qt without a GUI is also fine by me, but it is admittedly one of the more complicated dependencies to make sure you have (conda manages to hide this pretty well though!), so that does count against it.</p>", "type": "rendered"}, "created_on": "2017-06-19T00:41:12.781429+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37673745}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments/37673817.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38#comment-37673817"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}}, "type": "issue", "id": 38, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Saving of hg info slows down compilation"}, "content": {"raw": "Continuing the offtopic conversation: It looks like QFileSystemWatcher uses [this](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365261(v=vs.85).aspx) on windows ([and also a lot of `QThread`s](http://code.qt.io/cgit/qt/qt.git/tree/src/corelib/io/qfilesystemwatcher_win.cpp)).", "markup": "markdown", "html": "<p>Continuing the offtopic conversation: It looks like QFileSystemWatcher uses <a data-is-external-link=\"true\" href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365261(v=vs.85).aspx\" rel=\"nofollow\">this</a> on windows (<a data-is-external-link=\"true\" href=\"http://code.qt.io/cgit/qt/qt.git/tree/src/corelib/io/qfilesystemwatcher_win.cpp\" rel=\"nofollow\">and also a lot of <code>QThread</code>s</a>).</p>", "type": "rendered"}, "created_on": "2017-06-19T00:52:41.993807+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37673817}], "page": 1, "size": 15}