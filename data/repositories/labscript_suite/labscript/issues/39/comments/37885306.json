{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/39/comments/37885306.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/39#comment-37885306"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/39.json"}}, "type": "issue", "id": 39, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Non-looping clock ticks may be too short if they happen during a ramp"}, "content": {"raw": "My comment above about the asymmetric clock tick on non-looping clocks, while accurate, is a bogus concern.\n\nCurrently any clock tick may be asymmetric due to gating (the low of the clock tick is regularly longer than the high because it stays low while other clocks tick). The current implementation for ticking non-looping clocks at the start of a ramp is also very asymmetric. My proposal actually makes it more symmetric (although not perfectly symmetric for the reasons previously outlined).\n\nThus, the only down side to this are:\n\n* that you lose an extra two instructions per ramp (or per ramp segment if your ramp is broken by an update on another output mid-ramp) in the PulseBlaster.\n* that those using other clocks (like a PineBlaster or custom pseudoclock) may find their experiments don't compile because they are technically violating the currently defined clock_limit (that we fail to enforce correctly), but it hasn't actually affected the running of their experiments (for instance NovaTech DDS9m boards have asymmetric clocking requirements that happen to be typically maintained by the combination of hardware we have in our lab. The new scheme would enforce the symmetric requirements written in to labscript, even though these are excessive (because labscript doesn't currently support asymmetric clock limits).", "markup": "markdown", "html": "<p>My comment above about the asymmetric clock tick on non-looping clocks, while accurate, is a bogus concern.</p>\n<p>Currently any clock tick may be asymmetric due to gating (the low of the clock tick is regularly longer than the high because it stays low while other clocks tick). The current implementation for ticking non-looping clocks at the start of a ramp is also very asymmetric. My proposal actually makes it more symmetric (although not perfectly symmetric for the reasons previously outlined).</p>\n<p>Thus, the only down side to this are:</p>\n<ul>\n<li>that you lose an extra two instructions per ramp (or per ramp segment if your ramp is broken by an update on another output mid-ramp) in the PulseBlaster.</li>\n<li>that those using other clocks (like a PineBlaster or custom pseudoclock) may find their experiments don't compile because they are technically violating the currently defined clock_limit (that we fail to enforce correctly), but it hasn't actually affected the running of their experiments (for instance NovaTech DDS9m boards have asymmetric clocking requirements that happen to be typically maintained by the combination of hardware we have in our lab. The new scheme would enforce the symmetric requirements written in to labscript, even though these are excessive (because labscript doesn't currently support asymmetric clock limits).</li>\n</ul>", "type": "rendered"}, "created_on": "2017-06-28T08:10:24.668076+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37885306}