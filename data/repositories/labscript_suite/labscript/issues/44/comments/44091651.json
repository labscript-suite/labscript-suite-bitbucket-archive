{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/44/comments/44091651.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/44#comment-44091651"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/44.json"}}, "type": "issue", "id": 44, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "limits should be stored in the connection table"}, "content": {"raw": "Another idea I have is that we could encode the method of comparison inside the key of the JSON dictionary. This is similar to the way you define [SQL clauses using Pythonic syntax in Django](https://docs.djangoproject.com/en/2.0/ref/models/querysets/#field-lookups). For example, instead of saving it as `'limits': [0, 10]` we could save it as `'limits__allow_interval_subset': [0,10]` to indicate the values that are a subset are allowed during connection table comparisons.\n\nNot sure if I like this a 100%, but could be preferable to hardcoding a special case for `limits` since it's a) more general (we update the connection table comparison to handle `__allow_interval_subset` for any parameter in the connection table properties) and b) contains information about the need to do a special comparison in the connection table itself (so it is self-documenting, which is a key principle of the labscript suite).\n\nNote: I realise `__allow_interval_subset` is an awful suffix, it was just a descriptive example and not necessarily what I would want it to be!", "markup": "markdown", "html": "<p>Another idea I have is that we could encode the method of comparison inside the key of the JSON dictionary. This is similar to the way you define <a data-is-external-link=\"true\" href=\"https://docs.djangoproject.com/en/2.0/ref/models/querysets/#field-lookups\" rel=\"nofollow\">SQL clauses using Pythonic syntax in Django</a>. For example, instead of saving it as <code>'limits': [0, 10]</code> we could save it as <code>'limits__allow_interval_subset': [0,10]</code> to indicate the values that are a subset are allowed during connection table comparisons.</p>\n<p>Not sure if I like this a 100%, but could be preferable to hardcoding a special case for <code>limits</code> since it's a) more general (we update the connection table comparison to handle <code>__allow_interval_subset</code> for any parameter in the connection table properties) and b) contains information about the need to do a special comparison in the connection table itself (so it is self-documenting, which is a key principle of the labscript suite).</p>\n<p>Note: I realise <code>__allow_interval_subset</code> is an awful suffix, it was just a descriptive example and not necessarily what I would want it to be!</p>", "type": "rendered"}, "created_on": "2018-03-22T02:30:43.205837+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 44091651}