{"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/45/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/45.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/45/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/45/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/45/restructure-properties-and-blacs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/45/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Restructure properties and BLACS connections", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Perhaps we should move device properties to the connection table dataset rather than attributes of device groups (with backward compatibility - property reading code can look for the device group if the column of the connection table doesn't exist). This would a) unify connection table properties and device properties, b) make the connection table dataset contain more of the information that is in a connection table .py file, c) allow saving device_properties on devices that do not have a BLACS tab.\r\n\r\nWe had a problem in the past where we added a device_property to all devices, and BLACS broke because it saw there was a device group for devices and tried to find a tab for them at shot run time and failed. Even though in that case the property was only really applicable for devices with BLACS tabs, you can imagine we might want to save more info for individual outputs, things that don't invalidate the connection table.\r\n\r\nThe device_properties column could be ignored by connection table code for the purposes of determining whether a connection table is a subset of/compatible with another.\r\n\r\nDevices could still have free reign over their device group, but some of the things that are currently stored as attributes there could instead go in the device_properties column of the connection table group. A guide could be: if it's a user-set configuration, it goes in the connection table column, if it's programmatically generated by labscript compilation then it goes in the device group. To continue to take advantage of the serialisation and deserialisation in properties.py, we could rename the types of data that are saved in the device group from device_properties to something that emphasises that they are things programatically generated during compilation - like 'hardware_instruction_attributes'.\r\n\r\nThis would help things like [labscript_devices pull request 27](#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/) not invalidate connection tables unnecessarily. That pull request could be modified to use device_properties already, but again, you can imagine wanting to separate user configuration and compilation results, as well as adding these properties for devices that do not have their own device group.\r\n\r\nAnother thing is BLACS_connection. This is superseded somewhat by the fact that devices can have many bits of data that tell BLACS how to connect to it, and these are increasingly going into connection_table_properties. I propose we get rid of the BLACS_connection column, replace it with a bool is_blacs_device or has_blacs_tab or similar - that way BLACS can still tell which devices it need to make tabs for - and move the actual connection information into connection_table_properties.\r\n\r\nI think this can all be done in a backward compatible way.", "markup": "markdown", "html": "<p>Perhaps we should move device properties to the connection table dataset rather than attributes of device groups (with backward compatibility - property reading code can look for the device group if the column of the connection table doesn't exist). This would a) unify connection table properties and device properties, b) make the connection table dataset contain more of the information that is in a connection table .py file, c) allow saving device_properties on devices that do not have a BLACS tab.</p>\n<p>We had a problem in the past where we added a device_property to all devices, and BLACS broke because it saw there was a device group for devices and tried to find a tab for them at shot run time and failed. Even though in that case the property was only really applicable for devices with BLACS tabs, you can imagine we might want to save more info for individual outputs, things that don't invalidate the connection table.</p>\n<p>The device_properties column could be ignored by connection table code for the purposes of determining whether a connection table is a subset of/compatible with another.</p>\n<p>Devices could still have free reign over their device group, but some of the things that are currently stored as attributes there could instead go in the device_properties column of the connection table group. A guide could be: if it's a user-set configuration, it goes in the connection table column, if it's programmatically generated by labscript compilation then it goes in the device group. To continue to take advantage of the serialisation and deserialisation in properties.py, we could rename the types of data that are saved in the device group from device_properties to something that emphasises that they are things programatically generated during compilation - like 'hardware_instruction_attributes'.</p>\n<p>This would help things like <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/\" rel=\"nofollow\">labscript_devices pull request 27</a> not invalidate connection tables unnecessarily. That pull request could be modified to use device_properties already, but again, you can imagine wanting to separate user configuration and compilation results, as well as adding these properties for devices that do not have their own device group.</p>\n<p>Another thing is BLACS_connection. This is superseded somewhat by the fact that devices can have many bits of data that tell BLACS how to connect to it, and these are increasingly going into connection_table_properties. I propose we get rid of the BLACS_connection column, replace it with a bool is_blacs_device or has_blacs_tab or similar - that way BLACS can still tell which devices it need to make tabs for - and move the actual connection information into connection_table_properties.</p>\n<p>I think this can all be done in a backward compatible way.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-12T23:13:48.590265+00:00", "milestone": null, "updated_on": "2018-03-12T23:38:56.831273+00:00", "type": "issue", "id": 45}