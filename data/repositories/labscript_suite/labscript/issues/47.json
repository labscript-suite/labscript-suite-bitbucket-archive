{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/47/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/47.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/47/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/47/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/47/missing-wait-instruction-s"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/47/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Missing WAIT instruction(s)", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The quantisation of change times via `quantise_to_pseudoclock` (pull request #14) has introduced a bug to waits. Wait instructions are not always appended to the clock instructions, as:\r\n\r\n* [`clock.append('WAIT')`](#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&fileviewer=file-view-default#labscript.py-704) being run is contingent on the equality of two floats, an element of `all_change_times` and an element of `self.parent_device.trigger_times[1:]`.\r\n* `all_change_times` has had `quantise_to_psuedoclock` applied, whereas `self.parent_device.trigger_times` has not.\r\n\r\nThis bug arises in the following (using c7fd004) for various values of `t_wait`:\r\n\r\n```\r\n#!python\r\n\r\nfrom __future__ import division\r\nfrom labscript import ClockLine, DigitalOut, WaitMonitor, AnalogIn, start, stop, wait\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.NI_PCIe_6363 import NI_PCIe_6363\r\n\r\nPulseBlaster(name='pulseblaster_0', board_number=0)\r\nClockLine(name='pulseblaster_0_ni_clock',\r\n          pseudoclock=pulseblaster_0.pseudoclock, connection='flag 0')\r\nNI_PCIe_6363(name='ni_pcie_6363_0', parent_device=pulseblaster_0_ni_clock,\r\n             clock_terminal='/ni_pcie_6363_0/PFI0', acquisition_rate=1e4, \r\n             MAX_name='ni_pcie_6363_0')\r\nWaitMonitor(name='wait_monitor', parent_device=ni_pcie_6363_0, connection='port0/line3',\r\n            acquisition_device=ni_pcie_6363_0, acquisition_connection='ctr0',\r\n            timeout_device=ni_pcie_6363_0, timeout_connection='port1/line1')\r\n\r\nstart()\r\nt = 0\r\nt_wait = 4.5/ni_pcie_6363_0.clock_limit\r\nt_wait_quantised = ni_pcie_6363_0.quantise_to_pseudoclock([t_wait])[0]\r\nprint('t_wait  = {:.10f} s'.format(t_wait))\r\nprint('quantised = {:.10f} s'.format(t_wait_quantised))\r\nprint('difference = {:.3e} s'.format(t_wait_quantised - t_wait))\r\nt += t_wait\r\nt += wait(label='wait_test', t=t, timeout=0.1)\r\nt += 1e-3\r\nstop(t)\r\n\r\n```\r\nThe bug can be detected by adding a print statement before/after `clock.append('WAIT')` in labscript.py, or by appending the following to the above labscript (after `stop(t)`):\r\n\r\n```\r\n#!python\r\n\r\nif t_wait_quantised in pulseblaster_0.trigger_times[1:]:\r\n    print('WAIT instruction added')\r\nelse:\r\n    print('WAIT instruction missed')\r\n```\r\nIt seems to be that non-integer multiples of `1/ni_pcie_6363_0.clock_limit` reliably result in the missing `WAIT` instruction. A potential solution is to quantise the trigger times before [checking each element](#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&fileviewer=file-view-default#labscript.py-702) of `all_change_times` for membership of `self.parent_device.trigger_times[1:]`:\r\n\r\n```\r\n#!python\r\nquantised_trigger_times = self.quantise_to_pseudoclock(self.parent_device.trigger_times)\r\nfor i, time in enumerate(all_change_times):\r\n    if time in quantised_trigger_times[1:]:\r\n       clock.append('WAIT')\r\n```\r\n... or check for proximity of the differently conditioned times rather than equality.\r\n\r\n```\r\n#!python\r\nfor i, time in enumerate(all_change_times):\r\n    if min(abs(time - self.parent_device.trigger_times[1:])) <= self.pseudoclock_device.clock_resolution/2:\r\n       clock.append('WAIT')\r\n```", "markup": "markdown", "html": "<p>The quantisation of change times via <code>quantise_to_pseudoclock</code> (<a href=\"#!/labscript_suite/labscript/pull-requests/14/fixed-bug-with-timing-in-labscript\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #14</a>) has introduced a bug to waits. Wait instructions are not always appended to the clock instructions, as:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-704\" rel=\"nofollow\"><code>clock.append('WAIT')</code></a> being run is contingent on the equality of two floats, an element of <code>all_change_times</code> and an element of <code>self.parent_device.trigger_times[1:]</code>.</li>\n<li><code>all_change_times</code> has had <code>quantise_to_psuedoclock</code> applied, whereas <code>self.parent_device.trigger_times</code> has not.</li>\n</ul>\n<p>This bug arises in the following (using <a href=\"#!/labscript_suite/labscript/commits/c7fd004\" rel=\"nofollow\" class=\"ap-connect-link\">c7fd004</a>) for various values of <code>t_wait</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">division</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"n\">ClockLine</span><span class=\"p\">,</span> <span class=\"n\">DigitalOut</span><span class=\"p\">,</span> <span class=\"n\">WaitMonitor</span><span class=\"p\">,</span> <span class=\"n\">AnalogIn</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">wait</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NI_PCIe_6363</span> <span class=\"kn\">import</span> <span class=\"n\">NI_PCIe_6363</span>\n\n<span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pulseblaster_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">board_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pulseblaster_0_ni_clock&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NI_PCIe_6363</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pcie_6363_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0_ni_clock</span><span class=\"p\">,</span>\n             <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s1\">&#39;/ni_pcie_6363_0/PFI0&#39;</span><span class=\"p\">,</span> <span class=\"n\">acquisition_rate</span><span class=\"o\">=</span><span class=\"mf\">1e4</span><span class=\"p\">,</span> \n             <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pcie_6363_0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">WaitMonitor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;wait_monitor&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;port0/line3&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">acquisition_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">acquisition_connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;ctr0&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">timeout_connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;port1/line1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">t_wait</span> <span class=\"o\">=</span> <span class=\"mf\">4.5</span><span class=\"o\">/</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"o\">.</span><span class=\"n\">clock_limit</span>\n<span class=\"n\">t_wait_quantised</span> <span class=\"o\">=</span> <span class=\"n\">ni_pcie_6363_0</span><span class=\"o\">.</span><span class=\"n\">quantise_to_pseudoclock</span><span class=\"p\">([</span><span class=\"n\">t_wait</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;t_wait  = {:.10f} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;quantised = {:.10f} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait_quantised</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;difference = {:.3e} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait_quantised</span> <span class=\"o\">-</span> <span class=\"n\">t_wait</span><span class=\"p\">))</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">t_wait</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;wait_test&#39;</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">1e-3</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The bug can be detected by adding a print statement before/after <code>clock.append('WAIT')</code> in labscript.py, or by appending the following to the above labscript (after <code>stop(t)</code>):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">t_wait_quantised</span> <span class=\"ow\">in</span> <span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT instruction added&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT instruction missed&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>It seems to be that non-integer multiples of <code>1/ni_pcie_6363_0.clock_limit</code> reliably result in the missing <code>WAIT</code> instruction. A potential solution is to quantise the trigger times before <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-702\" rel=\"nofollow\">checking each element</a> of <code>all_change_times</code> for membership of <code>self.parent_device.trigger_times[1:]</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">quantised_trigger_times</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantise_to_pseudoclock</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_device</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_change_times</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">quantised_trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n       <span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>... or check for proximity of the differently conditioned times rather than equality.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_change_times</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">time</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_device</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]))</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pseudoclock_device</span><span class=\"o\">.</span><span class=\"n\">clock_resolution</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n       <span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT&#39;</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-05-30T02:06:19.565223+00:00", "milestone": null, "updated_on": "2018-05-30T07:09:26.982657+00:00", "type": "issue", "id": 47}