{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/53/comments/53253600.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/53#comment-53253600"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/53.json"}}, "type": "issue", "id": 53, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Pseudoclock/clockline collision"}, "content": {"raw": "@{557058:411f7712-e1fa-438c-b578-0359da2d9f06} Yes, in theory you could have the falling pulse happen in a later pseudoclock instruction, provided the pseudoclock uses 2 hardware instructions per change in clock frequency. But not all devices do this \\(however currently those that do not do this also only have one output, so don't use gated clocks anyway\\). The underlying labscript algorithm doesn't know anything about this sort of capability though, so we'd have to add that in so that `PseudoclockDevice` subclasses to indicate if they support the proposed behaviour. You might also find it's difficult to do if the subsequent instruction is a ramp \\(because you would have to break that ramp up into two or three instructions in order to insert the falling transition of the slower clock\\). It seems like it would be quite complicated, and personally I would just advocate for people adding more \\(10 MHz referenced\\) pseudoclock devices to their experiment rather than trying to clock multiple devices from one pseudoclock.\n\nBut I\u2019m not opposed to someone trying to do this, although such a complicated change would benefit from having some test cases to test against to make sure we don\u2019t introduce more regressions \\(I kind of hope we might be able to use runviewer to compare output signals to see if things are generated the same?\\). An attempt to fix #39 should probably be made at the same time, as it is sort of related.\n\n\u200c\n\nEdit: The alternative of course is to allow intermediate devices to specify the minimum high time for a clock tick as well as the clock frequency, thus adding information regarding support for asymmetric clock pulses. My recent commit could then be update to check if the time between adjacent instructions is longer than the minimum high time and also if the time between instructions with the clockline enabled is longer than that derived from the maximum clock rate \\(I think this was suggested as an option in #51\\)", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:411f7712-e1fa-438c-b578-0359da2d9f06\">@David Meyer</span> Yes, in theory you could have the falling pulse happen in a later pseudoclock instruction, provided the pseudoclock uses 2 hardware instructions per change in clock frequency. But not all devices do this (however currently those that do not do this also only have one output, so don't use gated clocks anyway). The underlying labscript algorithm doesn't know anything about this sort of capability though, so we'd have to add that in so that <code>PseudoclockDevice</code> subclasses to indicate if they support the proposed behaviour. You might also find it's difficult to do if the subsequent instruction is a ramp (because you would have to break that ramp up into two or three instructions in order to insert the falling transition of the slower clock). It seems like it would be quite complicated, and personally I would just advocate for people adding more (10 MHz referenced) pseudoclock devices to their experiment rather than trying to clock multiple devices from one pseudoclock.</p>\n<p>But I\u2019m not opposed to someone trying to do this, although such a complicated change would benefit from having some test cases to test against to make sure we don\u2019t introduce more regressions (I kind of hope we might be able to use runviewer to compare output signals to see if things are generated the same?). An attempt to fix <a href=\"#!/labscript_suite/labscript/issues/39/non-looping-clock-ticks-may-be-too-short\" rel=\"nofollow\" title=\"Non-looping clock ticks may be too short if they happen during a ramp\" class=\"ap-connect-link\">#39</a> should probably be made at the same time, as it is sort of related.</p>\n<p>\u200c</p>\n<p>Edit: The alternative of course is to allow intermediate devices to specify the minimum high time for a clock tick as well as the clock frequency, thus adding information regarding support for asymmetric clock pulses. My recent commit could then be update to check if the time between adjacent instructions is longer than the minimum high time and also if the time between instructions with the clockline enabled is longer than that derived from the maximum clock rate (I think this was suggested as an option in <a href=\"#!/labscript_suite/labscript/issues/51/recent-gatedclocks-bugfix-merge-breaks-at\" rel=\"nofollow\" title=\"Recent GatedClocks-bugfix merge breaks (at least) Novatech DDS9m timing\" class=\"ap-connect-link\">#51</a>)</p>", "type": "rendered"}, "created_on": "2019-08-02T05:48:12.963451+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-08-02T05:51:21.396533+00:00", "type": "issue_comment", "id": 53253600}