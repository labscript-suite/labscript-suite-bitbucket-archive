{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/54/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/54.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/54/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/54/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/54/ability-to-define-duration-of-a-constant"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/54/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Ability to define duration of a constant instruction", "component": null, "votes": 0, "watches": 1, "content": {"raw": "An issue that wasted a lot of time for someone here is that they intended to set an output to a value for some amount of time, but it turned out that a function being called later in the script was setting the same output to some other value \"in advance\", something like:\r\n\r\n```python\r\ndef stage_1(t, duration):\r\n    output.constant(t, value)\r\n    return duration\r\n\r\ndef stage_2(t, duration):\r\n    output.constant(t - offset, some_other_value)\r\n    return duration\r\n\r\nstart()\r\nt = 0\r\nt += stage_1(t, duration_1)\r\nt += stage_2(t, duration_2)\r\nstop(t)\r\n```\r\n\r\nIdeally one would be able to specify a duration to the `.constant()` method in `stage_1()` so that any instructions to the same output within some duration will result in a compile time error.\r\n\r\nAlso, a ramp instruction should be able to have a duration provided that exceeds the actual ramping duration, so that the final value being held as a constant can also be guaranteed by the compiler not be be cut short of some desired length of time.\r\n\r\nNot sure how easy this will be to add to labscript as is, so whilst anyone should feel free to hack it in if they want, I'll try to include it in labscript 3.", "markup": "markdown", "html": "<p>An issue that wasted a lot of time for someone here is that they intended to set an output to a value for some amount of time, but it turned out that a function being called later in the script was setting the same output to some other value \"in advance\", something like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">stage_1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">duration</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">stage_2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">some_other_value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">duration</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">stage_1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration_1</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">stage_2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration_2</span><span class=\"p\">)</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Ideally one would be able to specify a duration to the <code>.constant()</code> method in <code>stage_1()</code> so that any instructions to the same output within some duration will result in a compile time error.</p>\n<p>Also, a ramp instruction should be able to have a duration provided that exceeds the actual ramping duration, so that the final value being held as a constant can also be guaranteed by the compiler not be be cut short of some desired length of time.</p>\n<p>Not sure how easy this will be to add to labscript as is, so whilst anyone should feel free to hack it in if they want, I'll try to include it in labscript 3.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-10-25T17:01:05.930979+00:00", "milestone": null, "updated_on": "2019-10-25T17:08:34.649059+00:00", "type": "issue", "id": 54}