{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9/comments/12579800.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/9#comment-12579800"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9.json"}}, "type": "issue", "id": 9, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Additional column in the connection table"}, "content": {"raw": "Further thoughts,\n\nWe add some methods to the Device class of labscript which allow you to set arbitrary key/value pairs for \"Device Properties\" that will be stored in the connection table and compared as part of the usual connection table comparisons. This dict is put through repr and stored in a new \"device_properties\" column of the connection table. \n\nAlternatively, we could just have an attribute containing a dictionary that people directly access, but I'm growing fond of explicit methods to set information like this (so that we can build in type checking, overwriting checking, etc, into those functions)", "markup": "markdown", "html": "<p>Further thoughts,</p>\n<p>We add some methods to the Device class of labscript which allow you to set arbitrary key/value pairs for \"Device Properties\" that will be stored in the connection table and compared as part of the usual connection table comparisons. This dict is put through repr and stored in a new \"device_properties\" column of the connection table. </p>\n<p>Alternatively, we could just have an attribute containing a dictionary that people directly access, but I'm growing fond of explicit methods to set information like this (so that we can build in type checking, overwriting checking, etc, into those functions)</p>", "type": "rendered"}, "created_on": "2014-09-26T04:13:59.286914+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 12579800}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9/comments/12579976.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/9#comment-12579976"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9.json"}}, "type": "issue", "id": 9, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Additional column in the connection table"}, "content": {"raw": "Copying from the email thread for the record:\r\n\r\nThis seems totally fine to me, it makes sense that we want a spot to put arbitrary data that if changed should invalidate the connection table.\r\nAnd a generic getter and setter and the device class seems like a good way to implement it.\r\n\r\nYou could define `__setitem__` and `__getitem__` to make the device objects behave like a dictionary with the getting and setting of these properties, but that's a bit magical, an explicit `get_property(name)` and `set_property(name, value)` would be more obvious and non-magical as to what was going on.", "markup": "markdown", "html": "<p>Copying from the email thread for the record:</p>\n<p>This seems totally fine to me, it makes sense that we want a spot to put arbitrary data that if changed should invalidate the connection table.\nAnd a generic getter and setter and the device class seems like a good way to implement it.</p>\n<p>You could define <code>__setitem__</code> and <code>__getitem__</code> to make the device objects behave like a dictionary with the getting and setting of these properties, but that's a bit magical, an explicit <code>get_property(name)</code> and <code>set_property(name, value)</code> would be more obvious and non-magical as to what was going on.</p>", "type": "rendered"}, "created_on": "2014-09-26T04:34:05.880929+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 12579976}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9/comments/14112907.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/9#comment-14112907"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9.json"}}, "type": "issue", "id": 9, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Additional column in the connection table"}, "content": {"raw": "This was implemented in changeset: ebbd7edd7ff3\n\nThe `Device` class now has `get_property(name, [default])` and `set_property(name, value, overwrite = False)` methods.\n\n`set_property` is fairly self explanatory. If a property with identifier `name` is already set, you must explicitly specify the `overwrite` flag as True.\n\nThe implementation of `get_property` is a little more complex (to allow teh default value to be specified as `None`). However, the API interface is simple. If you don't specify a default value, and the property you request has not been set, an exception will be raised. If you do specify a default value, that will be returned if the property has not been set.\n\nProperties can be accessed in BLACS through the connection table objects. These objects have a `properties` attribute which contains a dictionary keyed by the identifiers (`name`) specified in the labscript calls.", "markup": "markdown", "html": "<p>This was implemented in changeset: <a href=\"#!/labscript_suite/labscript/commits/ebbd7edd7ff3\" rel=\"nofollow\" class=\"ap-connect-link\">ebbd7edd7ff3</a></p>\n<p>The <code>Device</code> class now has <code>get_property(name, [default])</code> and <code>set_property(name, value, overwrite = False)</code> methods.</p>\n<p><code>set_property</code> is fairly self explanatory. If a property with identifier <code>name</code> is already set, you must explicitly specify the <code>overwrite</code> flag as True.</p>\n<p>The implementation of <code>get_property</code> is a little more complex (to allow teh default value to be specified as <code>None</code>). However, the API interface is simple. If you don't specify a default value, and the property you request has not been set, an exception will be raised. If you do specify a default value, that will be returned if the property has not been set.</p>\n<p>Properties can be accessed in BLACS through the connection table objects. These objects have a <code>properties</code> attribute which contains a dictionary keyed by the identifiers (<code>name</code>) specified in the labscript calls.</p>", "type": "rendered"}, "created_on": "2014-12-05T23:48:11.064816+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 14112907}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9/comments/14112911.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/9#comment-14112911"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/issues/9.json"}}, "type": "issue", "id": 9, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "title": "Additional column in the connection table"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2014-12-05T23:48:24.249652+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 14112911}], "page": 1, "size": 4}