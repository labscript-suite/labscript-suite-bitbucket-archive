{"pagelen": 100, "values": [{"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/1/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/1/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/1/devicestop_time-does-not-take-into-account"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/1/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Device.stop_time does not take into account initial_trigger_time", "component": null, "votes": 0, "watches": 2, "content": {"raw": "If a device has it's initial trigger at some point after t=0 (for instance the PineBlaster in example.py is triggered at t=1), then it should only run for stop_time-initial_trigger_time.\r\n\r\nAt the moment, each device has instructions for \"stop_time\" length of time, regardless of it's initial trigger point, which is wrong.\r\n\r\nFortunately, this shouldn't effect anything as the extra instructions just hold the final value, and the device is forced into manual mode at the end of an experiment by BLACS anyway. It does however produce strange plots in runviewer!", "markup": "markdown", "html": "<p>If a device has it's initial trigger at some point after t=0 (for instance the PineBlaster in example.py is triggered at t=1), then it should only run for stop_time-initial_trigger_time.</p>\n<p>At the moment, each device has instructions for \"stop_time\" length of time, regardless of it's initial trigger point, which is wrong.</p>\n<p>Fortunately, this shouldn't effect anything as the extra instructions just hold the final value, and the device is forced into manual mode at the end of an experiment by BLACS anyway. It does however produce strange plots in runviewer!</p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-06-02T06:24:41.815147+00:00", "milestone": null, "updated_on": "2015-08-04T23:28:23.749726+00:00", "type": "issue", "id": 1}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/2/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/2/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/2/shutter-commands-can-be-reordered-due-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/2/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Shutter commands can be reordered due to shutter delays", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The simplistic implementation of shutter delays can result in undesired results.\r\n\r\nFor example if the delays are:\r\n\r\n```\r\n#!python\r\n\r\nopen_delay = 3e-3\r\nclose_delay = 5e-3\r\n```\r\n\r\n\r\nand you call:\r\n\r\n```\r\n#!python\r\n\r\nshutter.open(t)\r\nshutter.close(t+1e-3)\r\n\r\n```\r\n\r\nthen the command to close the shutter ends up coming before the command to open it.\r\n\r\nThis will result in the shutter opening at the correct time, but never closing.\r\n\r\nSimilarly the delays may be such that the open command is overwritten by the close command, so the shutter will never open (though in this case labscript will at least warn the user).", "markup": "markdown", "html": "<p>The simplistic implementation of shutter delays can result in undesired results.</p>\n<p>For example if the delays are:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">open_delay</span> <span class=\"o\">=</span> <span class=\"mf\">3e-3</span>\n<span class=\"n\">close_delay</span> <span class=\"o\">=</span> <span class=\"mf\">5e-3</span>\n</pre></div>\n\n\n<p>and you call:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">shutter</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"n\">shutter</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">+</span><span class=\"mf\">1e-3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>then the command to close the shutter ends up coming before the command to open it.</p>\n<p>This will result in the shutter opening at the correct time, but never closing.</p>\n<p>Similarly the delays may be such that the open command is overwritten by the close command, so the shutter will never open (though in this case labscript will at least warn the user).</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-11T07:04:48.251490+00:00", "milestone": null, "updated_on": "2017-06-23T01:42:31.480508+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/3/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/3/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/3/better-control-of-shutters"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/3/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Better control of shutters", "component": null, "votes": 0, "watches": 2, "content": {"raw": "At the moment labscript is quite simple when it comes to shutters. The open() and close() commands offset the triggers by the appropriate delays (see also issue #2).\r\n\r\nIn reality, shutters are more complicated, they take a finite time to open and close, and may have other timing requirements.\r\n\r\nFor example, our SRS shutters will stay open for a fixed minimum time if the close trigger is too soon after the open trigger, and similar for minimum close times.\r\n\r\nPhil and I propose the introduction of new commands to allow the user to be sure that the shutter does what they want:\r\n\r\n```\r\nopen_by(t)\r\nclose_by(t)\r\nopen_from(t)\r\nclose_from(t)\r\n```\r\nThe _by commands would take the open/close delays and the shutter rise/fall time to ensure that the trigger is sent such that the shutter is completely open/closed at the time requested.\r\n\r\nThe _from commands would use the delays to trigger the shutter to start opening/closing at the requested time.\r\n\r\nFurther, the triggering should be aware of minimum opened/closed state times, and not trigger faster than these such that the timing of the trigger commands matches the timing of the physical state of the shutter. This helps debugging experimental problems in runviewer.\r\nThe safest option for dealing with user requests to open/close this would be to raise an error.\r\nThis should be implemented generally enough to account for the fact that the min open and min close times are not always equal.\r\n\r\nThe \"delay\" parameters that will be supplied for each shutter will now be\r\n```\r\n(open_delay,\r\nopen_time,\r\nmin_opened_time,\r\nclose_delay,\r\nclose_time,\r\nmin_closed_time)\r\n```\r\nOpen and close delays should be the time from the trigger until the shutter is half way between the fully open and fully closed states (as is currently assumed).\r\nThis will allow backwards compatibility with open and close commands.\r\n\r\nThe _by and _from commands will then add or subtract half the open/close time as needed. The user can choose how strict they want to be with their open/close times depending on what level of leakage is acceptable (e.g. time taken from 10% open to 90% open vs 1% to 99%)\r\n\r\nThe min_opened/closed_time should be the maximum time allowed between triggers such that the shutter state remains the same as a short/delta pulse would produce.\r\n\r\nThese parameters are stored as attributes of the shutters. This is useful, for example the user could request a shutter to open for the minimum possible time by calling\r\n\r\n```\r\nshutter.open(t)\r\nshutter.close(t+shutter.min_opened_time)\r\n```", "markup": "markdown", "html": "<p>At the moment labscript is quite simple when it comes to shutters. The open() and close() commands offset the triggers by the appropriate delays (see also issue <a href=\"#!/labscript_suite/labscript/issues/2/shutter-commands-can-be-reordered-due-to\" rel=\"nofollow\" title=\"Shutter commands can be reordered due to shutter delays\" class=\"ap-connect-link\">#2</a>).</p>\n<p>In reality, shutters are more complicated, they take a finite time to open and close, and may have other timing requirements.</p>\n<p>For example, our SRS shutters will stay open for a fixed minimum time if the close trigger is too soon after the open trigger, and similar for minimum close times.</p>\n<p>Phil and I propose the introduction of new commands to allow the user to be sure that the shutter does what they want:</p>\n<div class=\"codehilite\"><pre><span></span>open_by(t)\nclose_by(t)\nopen_from(t)\nclose_from(t)\n</pre></div>\n\n\n<p>The _by commands would take the open/close delays and the shutter rise/fall time to ensure that the trigger is sent such that the shutter is completely open/closed at the time requested.</p>\n<p>The _from commands would use the delays to trigger the shutter to start opening/closing at the requested time.</p>\n<p>Further, the triggering should be aware of minimum opened/closed state times, and not trigger faster than these such that the timing of the trigger commands matches the timing of the physical state of the shutter. This helps debugging experimental problems in runviewer.\nThe safest option for dealing with user requests to open/close this would be to raise an error.\nThis should be implemented generally enough to account for the fact that the min open and min close times are not always equal.</p>\n<p>The \"delay\" parameters that will be supplied for each shutter will now be</p>\n<div class=\"codehilite\"><pre><span></span>(open_delay,\nopen_time,\nmin_opened_time,\nclose_delay,\nclose_time,\nmin_closed_time)\n</pre></div>\n\n\n<p>Open and close delays should be the time from the trigger until the shutter is half way between the fully open and fully closed states (as is currently assumed).\nThis will allow backwards compatibility with open and close commands.</p>\n<p>The _by and _from commands will then add or subtract half the open/close time as needed. The user can choose how strict they want to be with their open/close times depending on what level of leakage is acceptable (e.g. time taken from 10% open to 90% open vs 1% to 99%)</p>\n<p>The min_opened/closed_time should be the maximum time allowed between triggers such that the shutter state remains the same as a short/delta pulse would produce.</p>\n<p>These parameters are stored as attributes of the shutters. This is useful, for example the user could request a shutter to open for the minimum possible time by calling</p>\n<div class=\"codehilite\"><pre><span></span>shutter.open(t)\nshutter.close(t+shutter.min_opened_time)\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-11T07:35:16.666374+00:00", "milestone": null, "updated_on": "2014-06-12T01:50:30.016391+00:00", "type": "issue", "id": 3}, {"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/4/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/4/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/4/labscript-should-reject-commands-after-a"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/4/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "labscript should reject commands after a wait if they have a time before the last wait", "component": null, "votes": 0, "watches": 2, "content": {"raw": "To avoid confusion, once you call \r\n```\r\n#!python\r\n\r\nwait(t)\r\n```\r\nyou should not be able to issue subsequent commands with a time before 't'.\r\n\r\nFor example, you might call:\r\n\r\n```\r\n#!python\r\n\r\nt+=wait(t)\r\n# science!\r\n\r\n# image\r\ncamera.expose(t-70e-3)\r\n```\r\nDepending on the length of science, your exposure may start before or after the wait. Labscript cannot do anything to fix the sequence of events, but it can refuse to trigger the camera before the wait if it implements the above suggestion.", "markup": "markdown", "html": "<p>To avoid confusion, once you call </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>you should not be able to issue subsequent commands with a time before 't'.</p>\n<p>For example, you might call:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">t</span><span class=\"o\">+=</span><span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"c1\"># science!</span>\n\n<span class=\"c1\"># image</span>\n<span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">expose</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">-</span><span class=\"mf\">70e-3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Depending on the length of science, your exposure may start before or after the wait. Labscript cannot do anything to fix the sequence of events, but it can refuse to trigger the camera before the wait if it implements the above suggestion.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-18T05:09:03.291627+00:00", "milestone": null, "updated_on": "2014-06-18T05:09:03.291627+00:00", "type": "issue", "id": 4}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/5/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/5/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/5/instructions-should-be-able-to-have-an"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/5/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Instructions should be able to have an uncertainty to their time", "component": null, "votes": 0, "watches": 2, "content": {"raw": "For commands with non-critical timing (for instance the ignored edge of a trigger) should be able to have an uncertainty so that they round to the nearest instruction within this uncertainty.\r\n\r\nIt would be good if the uncertainty could be passed in as a float (equal positive and negative components) or a tuple (to individually specify the positive and negative range). This would allow us to round shutters in the correct direction.\r\n\r\nThis feature would help resolve conflicts when two instructions are placed too close together for the given clockline or pseudoclock (will need to specifically check and resolve conflicts where the clockline clock_limit is exceeded or conflicts where the pseudoclock clock_limit is exceeded)", "markup": "markdown", "html": "<p>For commands with non-critical timing (for instance the ignored edge of a trigger) should be able to have an uncertainty so that they round to the nearest instruction within this uncertainty.</p>\n<p>It would be good if the uncertainty could be passed in as a float (equal positive and negative components) or a tuple (to individually specify the positive and negative range). This would allow us to round shutters in the correct direction.</p>\n<p>This feature would help resolve conflicts when two instructions are placed too close together for the given clockline or pseudoclock (will need to specifically check and resolve conflicts where the clockline clock_limit is exceeded or conflicts where the pseudoclock clock_limit is exceeded)</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-18T05:20:26.352543+00:00", "milestone": null, "updated_on": "2014-06-18T05:20:26.352543+00:00", "type": "issue", "id": 5}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/6/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/6/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/6/a-clocklines-clock_limit-is-effectively"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/6/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "A clockline's clock_limit is effectively limited by another's while that other clockline is ramping.", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Consider the following scenario.\r\n\r\nThere are two clocklines on a pseudoclock; clockline_a and clockline_b. The clock_limits of these two clocklines are significantly less than the maximum update rate of the pseudoclock. There is a channel on clockline_a that is ramping. During this ramp, there is a channel on clockline_b which is being issued \"constant\" commands. \r\n\r\nCurrently, the constant commands will result in the ramp being broken into several parts, with the first clock_tick of each ramp/loop being used to also update clockline_b to its next constant value.\r\n\r\nThis means that clockline_b is effectively limited to the update rate of clockline_a while clockline_a is ramping. There is however, no reason why the pseudoclock loop couldn't be broken, a command issued to tick clockline_b, and later the loop for clockline_a resumed. As long as the pseudoclock update rate is fast enough, you can effectively have the clocklines independently tick of each other in many circumstances.", "markup": "markdown", "html": "<p>Consider the following scenario.</p>\n<p>There are two clocklines on a pseudoclock; clockline_a and clockline_b. The clock_limits of these two clocklines are significantly less than the maximum update rate of the pseudoclock. There is a channel on clockline_a that is ramping. During this ramp, there is a channel on clockline_b which is being issued \"constant\" commands. </p>\n<p>Currently, the constant commands will result in the ramp being broken into several parts, with the first clock_tick of each ramp/loop being used to also update clockline_b to its next constant value.</p>\n<p>This means that clockline_b is effectively limited to the update rate of clockline_a while clockline_a is ramping. There is however, no reason why the pseudoclock loop couldn't be broken, a command issued to tick clockline_b, and later the loop for clockline_a resumed. As long as the pseudoclock update rate is fast enough, you can effectively have the clocklines independently tick of each other in many circumstances.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-18T05:27:34.751927+00:00", "milestone": null, "updated_on": "2014-06-18T05:27:34.751927+00:00", "type": "issue", "id": 6}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/7/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/7/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/7/nested-loops"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/7/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Nested loops", "component": null, "votes": 0, "watches": 2, "content": {"raw": "If the pseudoclock supports it, we should support nested loops.\r\n\r\nThis would especially be useful if two clocklines are ramping, where one ramps at an integer multiple of another. \r\n\r\nThis shouldn't be too hard to do, the question is if the ramp rates are not specified as integer multiples, which one do you up-sample. The \"obvious\" answer is to up-sample the one with more available instructions. In a perfect world we'd keep track of how many instructions were left on a device at any given time, but perhaps that is overkill!", "markup": "markdown", "html": "<p>If the pseudoclock supports it, we should support nested loops.</p>\n<p>This would especially be useful if two clocklines are ramping, where one ramps at an integer multiple of another. </p>\n<p>This shouldn't be too hard to do, the question is if the ramp rates are not specified as integer multiples, which one do you up-sample. The \"obvious\" answer is to up-sample the one with more available instructions. In a perfect world we'd keep track of how many instructions were left on a device at any given time, but perhaps that is overkill!</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-06-18T05:37:40.573065+00:00", "milestone": null, "updated_on": "2014-06-18T05:37:40.573065+00:00", "type": "issue", "id": 7}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/8/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/8/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/8/asymmetric-clock-pulses"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/8/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Asymmetric clock pulses", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Currently, labscript\u2019s clocking signals are symmetric, meaning the line is high for as long as it is low.\r\nThis limits the rate at which we can clock the Novatech DDS9m to approximately half its maximum possible rate (for details see http://labscriptsuite.org/blog/implementation-of-the-novatech-dds9m/)\r\n\r\nIdeally, we should use asymmetric pulses, which are calculated based on the minimum high time, minimum low time, and requested clock rate for each device on the pseudoclock.\r\n\r\nThis would be a substantial change to labscript, however given the current re-write (see http://labscriptsuite.org/blog/development-roadmap/) this would be the ideal time to implement it.\r\n\r\nIs it worth it for the factor of 2 in sample rate? It would mean we can go from the current 200 microsecond minimum rf pulses on the Novatech DDS9m to 100.01 microsecond pulses.", "markup": "markdown", "html": "<p>Currently, labscript\u2019s clocking signals are symmetric, meaning the line is high for as long as it is low.\nThis limits the rate at which we can clock the Novatech DDS9m to approximately half its maximum possible rate (for details see <a href=\"http://labscriptsuite.org/blog/implementation-of-the-novatech-dds9m/\" rel=\"nofollow\" class=\"ap-connect-link\">http://labscriptsuite.org/blog/implementation-of-the-novatech-dds9m/</a>)</p>\n<p>Ideally, we should use asymmetric pulses, which are calculated based on the minimum high time, minimum low time, and requested clock rate for each device on the pseudoclock.</p>\n<p>This would be a substantial change to labscript, however given the current re-write (see <a href=\"http://labscriptsuite.org/blog/development-roadmap/\" rel=\"nofollow\" class=\"ap-connect-link\">http://labscriptsuite.org/blog/development-roadmap/</a>) this would be the ideal time to implement it.</p>\n<p>Is it worth it for the factor of 2 in sample rate? It would mean we can go from the current 200 microsecond minimum rf pulses on the Novatech DDS9m to 100.01 microsecond pulses.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-08-14T02:52:07.295467+00:00", "milestone": null, "updated_on": "2019-06-03T15:36:45.710788+00:00", "type": "issue", "id": 8}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/9/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/9/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/9/additional-column-in-the-connection-table"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/9/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Additional column in the connection table", "component": null, "votes": 0, "watches": 2, "content": {"raw": "We need an additional column in the connection table for comparing parameters/configurations of specific devices/channels. I propose we have a column for generic \"other\" data that is stored as the repr of a dictionary.\r\n\r\n**Current** examples of where this is needed:\r\n\r\n* If a NovaTech DDS9m is referenced to an external clock, frequency values need to be scaled depending on the reference clock frequency. This reference clock frequency should be stored in the connection table and compared at the usual comparison points.\r\n* I'm currently writing an SLM class for labscript where a given SLM can be split into segments (which will be child devices of the SLM device). The size and position of these segments should be compared as part of the connection table check.\r\n\r\nThis could possibly be merged in with the BLACS_connection column, however for backwards compatibility I would probably suggest we add a new column in addition to the existing BLACS_connection column. ", "markup": "markdown", "html": "<p>We need an additional column in the connection table for comparing parameters/configurations of specific devices/channels. I propose we have a column for generic \"other\" data that is stored as the repr of a dictionary.</p>\n<p><strong>Current</strong> examples of where this is needed:</p>\n<ul>\n<li>If a NovaTech DDS9m is referenced to an external clock, frequency values need to be scaled depending on the reference clock frequency. This reference clock frequency should be stored in the connection table and compared at the usual comparison points.</li>\n<li>I'm currently writing an SLM class for labscript where a given SLM can be split into segments (which will be child devices of the SLM device). The size and position of these segments should be compared as part of the connection table check.</li>\n</ul>\n<p>This could possibly be merged in with the BLACS_connection column, however for backwards compatibility I would probably suggest we add a new column in addition to the existing BLACS_connection column. </p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-09-25T06:41:33.340525+00:00", "milestone": null, "updated_on": "2014-12-05T23:48:24.228152+00:00", "type": "issue", "id": 9}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/10/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/10.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/10/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/10/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/10/unexpected-results-when-importing"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/10/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Unexpected results when importing connection table", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If a user offloads their connection table to a separate module and imports it from their main experiment script, it works fine, at first.\r\n\r\nThe second time they click 'engage' in runmanager, however, they will find that they have no devices defined.\r\n\r\nThis is because the module was imported, and their code is running in the same interpreter process as before, and so the import statement just returns a cached module. The module has not changed, so ModuleWatcher does not reload it. This would be fine if the connection table defined objects to be referred to, but it doesn't - those `Device.__init__` methods are special, and it is important that they actually run again each time.\r\n\r\nI'm not totally sure what to do about this. One solution is documentation: \r\n\r\n\"Dear user, these may look like object definitions, but they are actually procedural. You need this code to actually run, not just be imported, and the fact that code runs when imported is actually bad practise and shouldn't be relied upon. It only does so the first time, and your module can never know how many times it is going to be expected to run its code. Please wrap your connection table in a function called something like `define_connection_table()`, and call it, rather than relying on the fact that module-level code gets run on the first import\"\r\n\r\nThe other solutions are likely the darkest black magic, and would make Guido cry. I don't want to make Guido cry, and so would only really consider other solutions if they were sufficiently nonmagical.\r\n\r\nMuch easier to tolerate though, is the sort of magic required to detect when a Device class is being instantiated at the toplevel of anything but the main labscript file, and shoot the above warning at the user. In fact, not a warning, an exception probably.\r\n\r\nYes, I think that is the correct solution, but I need to think about how it might interact with another issue I'm about to create, in which I'll document our previous decision that stuff we're currently inserting into builtins should actually be placed in a dynamically generated module for user import. Because regardless of the resolution of *this* issue, the builtins hammering would certainly have the [BDFL](http://en.wikipedia.org/wiki/Guido_van_Rossum) in tears.", "markup": "markdown", "html": "<p>If a user offloads their connection table to a separate module and imports it from their main experiment script, it works fine, at first.</p>\n<p>The second time they click 'engage' in runmanager, however, they will find that they have no devices defined.</p>\n<p>This is because the module was imported, and their code is running in the same interpreter process as before, and so the import statement just returns a cached module. The module has not changed, so ModuleWatcher does not reload it. This would be fine if the connection table defined objects to be referred to, but it doesn't - those <code>Device.__init__</code> methods are special, and it is important that they actually run again each time.</p>\n<p>I'm not totally sure what to do about this. One solution is documentation: </p>\n<p>\"Dear user, these may look like object definitions, but they are actually procedural. You need this code to actually run, not just be imported, and the fact that code runs when imported is actually bad practise and shouldn't be relied upon. It only does so the first time, and your module can never know how many times it is going to be expected to run its code. Please wrap your connection table in a function called something like <code>define_connection_table()</code>, and call it, rather than relying on the fact that module-level code gets run on the first import\"</p>\n<p>The other solutions are likely the darkest black magic, and would make Guido cry. I don't want to make Guido cry, and so would only really consider other solutions if they were sufficiently nonmagical.</p>\n<p>Much easier to tolerate though, is the sort of magic required to detect when a Device class is being instantiated at the toplevel of anything but the main labscript file, and shoot the above warning at the user. In fact, not a warning, an exception probably.</p>\n<p>Yes, I think that is the correct solution, but I need to think about how it might interact with another issue I'm about to create, in which I'll document our previous decision that stuff we're currently inserting into builtins should actually be placed in a dynamically generated module for user import. Because regardless of the resolution of <em>this</em> issue, the builtins hammering would certainly have the <a data-is-external-link=\"true\" href=\"http://en.wikipedia.org/wiki/Guido_van_Rossum\" rel=\"nofollow\">BDFL</a> in tears.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T00:13:15.035862+00:00", "milestone": null, "updated_on": "2014-10-05T03:45:48.295197+00:00", "type": "issue", "id": 10}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/11/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/11/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/11/globals-and-devices-should-be-in-modules"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/11/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`", "component": null, "votes": 0, "watches": 2, "content": {"raw": "I used to not think it mattered much that we were modifying builtins to put our globals in them. Mainly because, although completely sacrilegious, we have a sort-of domain specific language here, damnit, we should be able to do what we like.\r\n\r\nBut more pragmatically I figured it wouldn't affect anything. Our code is the toplevel code, and nothing is relying on it conforming to good practices. Code we use will be unaffected because scoping rules.\r\n\r\n\r\nThis is not true. There is correct, unbuggy code out there that relies on getting NameErrors on things:\r\n\r\n```\r\n#!bash\r\n\r\nbilbo:~ $ grep -R 'except NameError' /usr/lib/python2.7/ | wc -l\r\n301\r\n```\r\noften for telling the difference between different versions of Python, but also for other totally innocent reasons.\r\n\r\nBut also I acknowledge that deviating from accepted practices confuses people, even when it doesn't to do any harm. This inhibits their ability to make good assumptions about how your software behaves.\r\n\r\nSo all the code that puts stuff into builtins should instead put them in two programmatically created modules, called `shot_globals` and `shot_devices`. These will be inserted into sys.modules so the user can import them from anywhere.\r\n\r\nThe user will probably want to import * from both (but they don't have to), and either way it makes it clearer in there code where stuff can be coming from, and no code that doesn't want to see our crap has to.\r\n\r\nThe only other question is: do we still make device instantiation put device objects into the global namespace they're being defined in? This is important because the user will often be immediately using the device they just defined as the parent of subsequently defined child devices.\r\n\r\nI think we should not do this. The user should define their connection table and *then* do from shot_devices import * (or whatever they want to import).\r\n\r\nTo handle the fact that devices are needed within the connection table, we should change it such that parent devices are specified with *strings* instead of python identidiers from the current namespace.\r\n\r\nAny other methods the user wants to call on devices halfway through the connection table should generally wait until the end, but if necessary, the user can import `shot_devices` as is, or import specific devices from it at any point. So long as they save their `import *` until the end. I can add an import hook that will take note of `import *` for the shot_devices module, such that `Device.__init__` can raise an exception if a new device is being added after an `import *` was done. Using the same introspection that I'll be using to give labscript users better errors about compilation, I'll even be able to store the traceback to the `import *` call. No more of this `error: something was imported once, I don't know when, but don't do that!' like h5_lock and lyse's figure manager do (both of which should be changed to turn on their functionality on a function call, rather than as an import side effect).\r\n\r\nDiscussion welcome.", "markup": "markdown", "html": "<p>I used to not think it mattered much that we were modifying builtins to put our globals in them. Mainly because, although completely sacrilegious, we have a sort-of domain specific language here, damnit, we should be able to do what we like.</p>\n<p>But more pragmatically I figured it wouldn't affect anything. Our code is the toplevel code, and nothing is relying on it conforming to good practices. Code we use will be unaffected because scoping rules.</p>\n<p>This is not true. There is correct, unbuggy code out there that relies on getting NameErrors on things:</p>\n<div class=\"codehilite language-bash\"><pre><span></span>bilbo:~ $ grep -R <span class=\"s1\">&#39;except NameError&#39;</span> /usr/lib/python2.7/ <span class=\"p\">|</span> wc -l\n<span class=\"m\">301</span>\n</pre></div>\n\n\n<p>often for telling the difference between different versions of Python, but also for other totally innocent reasons.</p>\n<p>But also I acknowledge that deviating from accepted practices confuses people, even when it doesn't to do any harm. This inhibits their ability to make good assumptions about how your software behaves.</p>\n<p>So all the code that puts stuff into builtins should instead put them in two programmatically created modules, called <code>shot_globals</code> and <code>shot_devices</code>. These will be inserted into sys.modules so the user can import them from anywhere.</p>\n<p>The user will probably want to import * from both (but they don't have to), and either way it makes it clearer in there code where stuff can be coming from, and no code that doesn't want to see our crap has to.</p>\n<p>The only other question is: do we still make device instantiation put device objects into the global namespace they're being defined in? This is important because the user will often be immediately using the device they just defined as the parent of subsequently defined child devices.</p>\n<p>I think we should not do this. The user should define their connection table and <em>then</em> do from shot_devices import * (or whatever they want to import).</p>\n<p>To handle the fact that devices are needed within the connection table, we should change it such that parent devices are specified with <em>strings</em> instead of python identidiers from the current namespace.</p>\n<p>Any other methods the user wants to call on devices halfway through the connection table should generally wait until the end, but if necessary, the user can import <code>shot_devices</code> as is, or import specific devices from it at any point. So long as they save their <code>import *</code> until the end. I can add an import hook that will take note of <code>import *</code> for the shot_devices module, such that <code>Device.__init__</code> can raise an exception if a new device is being added after an <code>import *</code> was done. Using the same introspection that I'll be using to give labscript users better errors about compilation, I'll even be able to store the traceback to the <code>import *</code> call. No more of this `error: something was imported once, I don't know when, but don't do that!' like h5_lock and lyse's figure manager do (both of which should be changed to turn on their functionality on a function call, rather than as an import side effect).</p>\n<p>Discussion welcome.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T00:47:19.242010+00:00", "milestone": null, "updated_on": "2014-10-04T03:52:38.827803+00:00", "type": "issue", "id": 11}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/12/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/12/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/12/failure-when-there-is-no-master"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/12/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Failure when there is no master pseudoclock is ungraceful", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If you don't define a master pseudoclock (or any devices), you get this obtuse thing:\r\n\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/bilbo/Desktop/user_scripts/labscriptlib/spinor/__init__.py\", line 8, in <module>\r\n    start()\r\n  File \"/home/bilbo/bitbucket_clones/labscript/labscript.py\", line 1593, in start\r\n    master_pseudoclock, = [pseudoclock for pseudoclock in all_pseudoclocks if pseudoclock.is_master_pseudoclock]\r\nValueError: need more than 0 values to unpack\r\n```\r\n\r\nThis is pretty simple, let's put a better error message there if `stop()` gets called and there is no master pseudoclock", "markup": "markdown", "html": "<p>If you don't define a master pseudoclock (or any devices), you get this obtuse thing:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/Desktop/user_scripts/labscriptlib/spinor/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">start</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/bitbucket_clones/labscript/labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1593</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">start</span>\n    <span class=\"n\">master_pseudoclock</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pseudoclock</span> <span class=\"k\">for</span> <span class=\"n\">pseudoclock</span> <span class=\"ow\">in</span> <span class=\"n\">all_pseudoclocks</span> <span class=\"k\">if</span> <span class=\"n\">pseudoclock</span><span class=\"o\">.</span><span class=\"n\">is_master_pseudoclock</span><span class=\"p\">]</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">need</span> <span class=\"n\">more</span> <span class=\"n\">than</span> <span class=\"mi\">0</span> <span class=\"n\">values</span> <span class=\"n\">to</span> <span class=\"n\">unpack</span>\n</pre></div>\n\n\n<p>This is pretty simple, let's put a better error message there if <code>stop()</code> gets called and there is no master pseudoclock</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-04T02:05:11.592863+00:00", "milestone": null, "updated_on": "2014-10-09T21:01:32.555025+00:00", "type": "issue", "id": 12}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/13/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/13/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/13/have-user-explicitly-call-labscript_init"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/13/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Have user explicitly call `labscript_init`", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I've been wondering whether we should have the user explicitly call `labscript_init(shot_file)` in labscript code, and have the only magical thing runmanger does be inserting that `shot_file` varialble into the namespace, kinda like how lyse does it.\r\n\r\nThis would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals if we do this in Issue #11 - calling `labscript_init()` puts globals in your global namespace.\r\n\r\nThe advantage of this is that it gives us more power to do things independently of runmanager if we want to. It is also less magical - even though we're still populating the namespace with globals, the user knows what line that happens on, and the only magic is us giving them a filepath which they can check for the existence of and do something different if it doesn't exist. This is precisely the same as lyse, and I like that consistency.\r\n\r\nAs an example, one could import runmanager, programatically create a shot file by making runmanager API calls (`runmanger.make_run_file_from_globals_files()` comes to mind), and then call `labscript_init()` on the resulting file. Connection table code could then follow, and thus you've compiled a connection table without the GUI programs.\r\n\r\nI mean, that's not the way we should do that - I'll file another issue to BLACS about making that easier, but still.\r\n\r\nThis would be backward incompatible, but if a `Device` was instantiated without calling `labscript_init()` it would throw an exception saying \"please call `labscript_init()`\" ", "markup": "markdown", "html": "<p>I've been wondering whether we should have the user explicitly call <code>labscript_init(shot_file)</code> in labscript code, and have the only magical thing runmanger does be inserting that <code>shot_file</code> varialble into the namespace, kinda like how lyse does it.</p>\n<p>This would make it once again symmetric between compiling shots standalone and from runmanager, and would define which module gets the globals if we do this in Issue <a href=\"#!/labscript_suite/labscript/issues/11/globals-and-devices-should-be-in-modules\" rel=\"nofollow\" title=\"Globals and devices should be in modules, not builtins: `shot_globals` and `shot_devices`\" class=\"ap-connect-link\">#11</a> - calling <code>labscript_init()</code> puts globals in your global namespace.</p>\n<p>The advantage of this is that it gives us more power to do things independently of runmanager if we want to. It is also less magical - even though we're still populating the namespace with globals, the user knows what line that happens on, and the only magic is us giving them a filepath which they can check for the existence of and do something different if it doesn't exist. This is precisely the same as lyse, and I like that consistency.</p>\n<p>As an example, one could import runmanager, programatically create a shot file by making runmanager API calls (<code>runmanger.make_run_file_from_globals_files()</code> comes to mind), and then call <code>labscript_init()</code> on the resulting file. Connection table code could then follow, and thus you've compiled a connection table without the GUI programs.</p>\n<p>I mean, that's not the way we should do that - I'll file another issue to BLACS about making that easier, but still.</p>\n<p>This would be backward incompatible, but if a <code>Device</code> was instantiated without calling <code>labscript_init()</code> it would throw an exception saying \"please call <code>labscript_init()</code>\" </p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T04:03:24.728275+00:00", "milestone": null, "updated_on": "2014-10-04T04:03:24.728275+00:00", "type": "issue", "id": 13}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/14/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/14.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/14/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/14/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/14/experiments-do-not-work-with-no"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/14/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Experiments do not work with no pseudoclock", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It should be perfectly possible to have an experiment with no pseudoclocks,\r\nif it is using only toplevel devices, and none of them require clocking by a pseudoclock,\r\nor even triggering for that matter (anything that requires triggering should be a subclass of\r\nPseudoclockDevice).\r\n\r\nSo if there are no pseudoclocks labscript should still compile. it should store None as the master pseudoclock in the hdf5 file, and BLACS will need to check this.\r\n\r\nBLACS normally uses this attribute to check which device tab to call start() on, but if it is None it can simply skip this line and consider the experiment already started.\r\n\r\nWe should store the experiment's stop time somewhere, and if there is no pseudoclok, BLACS should just `time.sleep()` for that long.\r\n\r\nThis would be the case for example for an experiment that contained static devices only like Zaber stages and these NewPort  automatic mirror mounts we're implementing a labscript device for.\r\n\r\nIt is practical to run shots with static values, if only to automate a scan over parameter space and manually look at scopes and stuff.\r\n\r\n", "markup": "markdown", "html": "<p>It should be perfectly possible to have an experiment with no pseudoclocks,\nif it is using only toplevel devices, and none of them require clocking by a pseudoclock,\nor even triggering for that matter (anything that requires triggering should be a subclass of\nPseudoclockDevice).</p>\n<p>So if there are no pseudoclocks labscript should still compile. it should store None as the master pseudoclock in the hdf5 file, and BLACS will need to check this.</p>\n<p>BLACS normally uses this attribute to check which device tab to call start() on, but if it is None it can simply skip this line and consider the experiment already started.</p>\n<p>We should store the experiment's stop time somewhere, and if there is no pseudoclok, BLACS should just <code>time.sleep()</code> for that long.</p>\n<p>This would be the case for example for an experiment that contained static devices only like Zaber stages and these NewPort  automatic mirror mounts we're implementing a labscript device for.</p>\n<p>It is practical to run shots with static values, if only to automate a scan over parameter space and manually look at scopes and stuff.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-09T20:59:46.968693+00:00", "milestone": null, "updated_on": "2014-10-09T21:01:32.595649+00:00", "type": "issue", "id": 14}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/15/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/15/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/15/basic-connection-tables-with-no-outputs-do"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/15/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Basic connection tables (with no outputs) do not compile", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Take this simple connection table:\r\n\r\n\r\n```\r\n#!python\r\n\r\nfrom labscript import *\r\nfrom labscript_devices.PineBlaster import PineBlaster\r\nfrom labscript_utils.unitconversions import *\r\nfrom labscript_devices.NI_PCI_6733 import NI_PCI_6733\r\n\r\nPineBlaster(name='pineblaster_0', trigger_device = None, trigger_connection = None, usbport='com6')\r\nNI_PCI_6733(name='ni_card_1', parent_device=pineblaster_0.clockline, clock_terminal='ni_pcie_6733_0/PFI0', MAX_name='ni_pci_6733_0')\r\n\r\nstart()\r\nstop(1)\r\n```\r\n\r\nThis produces the traceback\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\nFile \"C:\\user_scripts\\labscriptlib\\example_experiment\\connectiontable.py\", line 8, in <module>\r\nstop(0.1)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 1772, in stop\r\ngenerate_code()\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 1686, in generate_code\r\ndevice.generate_code(hdf5_file)\r\nFile \"C:\\pythonlib\\labscript_devices\\PineBlaster.py\", line 76, in generate_code\r\nPseudoclockDevice.generate_code(self, hdf5_file)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 763, in generate_code\r\nDevice.generate_code(self, hdf5_file)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 276, in generate_code\r\ndevice.generate_code(hdf5_file)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 659, in generate_code\r\nDevice.generate_code(self, hdf5_file)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 276, in generate_code\r\ndevice.generate_code(hdf5_file)\r\nFile \"C:\\pythonlib\\labscript\\labscript.py\", line 276, in generate_code\r\ndevice.generate_code(hdf5_file)\r\nFile \"C:\\pythonlib\\labscript_devices\\NI_PCI_6733.py\", line 31, in generate_code\r\nparent.NIBoard.generate_code(self, hdf5_file)\r\nFile \"C:\\pythonlib\\labscript_devices\\NIBoard.py\", line 56, in generate_code\r\ntimes = pseudoclock.times[clockline]\r\nKeyError: <labscript.labscript.ClockLine object at 0x07153530>\r\n```\r\n\r\nAdding two `AnalogOut`s  to the connection table allows it to be successfully compiled.\r\n\r\nWe should fix this, but we also need to make sure that BLACS isn't going to get upset if an experiment is submitted with a device that has no outputs. ", "markup": "markdown", "html": "<p>Take this simple connection table:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PineBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PineBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.unitconversions</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NI_PCI_6733</span> <span class=\"kn\">import</span> <span class=\"n\">NI_PCI_6733</span>\n\n<span class=\"n\">PineBlaster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pineblaster_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">trigger_device</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">trigger_connection</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">usbport</span><span class=\"o\">=</span><span class=\"s1\">&#39;com6&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NI_PCI_6733</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_card_1&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pineblaster_0</span><span class=\"o\">.</span><span class=\"n\">clockline</span><span class=\"p\">,</span> <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pcie_6733_0/PFI0&#39;</span><span class=\"p\">,</span> <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pci_6733_0&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>This produces the traceback</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\user_scripts\\labscriptlib\\example_experiment\\connectiontable.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1772</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">stop</span>\n<span class=\"n\">generate_code</span><span class=\"p\">()</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1686</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_devices\\PineBlaster.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">PseudoclockDevice</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">763</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">276</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">659</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">276</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">276</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_devices\\NI_PCI_6733.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">NIBoard</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n<span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_devices\\NIBoard.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n<span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"n\">pseudoclock</span><span class=\"o\">.</span><span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">clockline</span><span class=\"p\">]</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">ClockLine</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x07153530</span><span class=\"o\">&gt;</span>\n</pre></div>\n\n\n<p>Adding two <code>AnalogOut</code>s  to the connection table allows it to be successfully compiled.</p>\n<p>We should fix this, but we also need to make sure that BLACS isn't going to get upset if an experiment is submitted with a device that has no outputs. </p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-12-05T23:53:51.350756+00:00", "milestone": null, "updated_on": "2017-07-19T22:18:10.107519+00:00", "type": "issue", "id": 15}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/16/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/16/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/16/round-off-error-in-ramps-tries-to-make"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/16/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Round-off error in ramps tries to make devices go beyond their limits", "component": null, "votes": 0, "watches": 2, "content": {"raw": "When trying to ramp a DDS to zero amplitude (in this case using an exponential ramp), I often find that the compilation fails saying that the device cannot accept values between 0 and 1. My current workaround for this is to change the final value of the ramp to be a small non-zero number below the quantisation limit of the device so that it will be rounded to zero anyway.\r\nThere must be some rounding issues involved in the evaluation of ramp functions. The error message does not tell me what value it is tying to program, but I suspect that it will be an extremely small negative number.", "markup": "markdown", "html": "<p>When trying to ramp a DDS to zero amplitude (in this case using an exponential ramp), I often find that the compilation fails saying that the device cannot accept values between 0 and 1. My current workaround for this is to change the final value of the ramp to be a small non-zero number below the quantisation limit of the device so that it will be rounded to zero anyway.\nThere must be some rounding issues involved in the evaluation of ramp functions. The error message does not tell me what value it is tying to program, but I suspect that it will be an extremely small negative number.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2015-06-18T01:12:17.137545+00:00", "milestone": null, "updated_on": "2015-06-18T01:12:17.137545+00:00", "type": "issue", "id": 16}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/17/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/17/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/17/while-setting-values-for-the-ni-pci-6733"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/17/vote"}}, "reporter": {"display_name": "Jesse Evans", "uuid": "{3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31%7D"}, "html": {"href": "https://bitbucket.org/%7B3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jcevans/avatar/"}}, "nickname": "jcevans", "type": "user", "account_id": null}, "title": "While setting values for the NI PCI 6733 DAQ...", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I got this strange error raised in blacs when I tried to run my script. The script had a bunch of commands like these:\r\n\r\nLi72DP_amp.constant(Li72DP_amp.t0, 0.5)\r\n\r\nwhich compiled ok, but once I tried to run in blacs gave rise to the attached error.\r\nNo idea what the root cause is. I tried to use the same syntax as in the example python file. The blacs gui can still be used to set values on the daq, but whenever I try to use a script it runs into trouble.\r\n\r\nRegards\r\n\r\nJesse Evans", "markup": "markdown", "html": "<p>I got this strange error raised in blacs when I tried to run my script. The script had a bunch of commands like these:</p>\n<p>Li72DP_amp.constant(Li72DP_amp.t0, 0.5)</p>\n<p>which compiled ok, but once I tried to run in blacs gave rise to the attached error.\nNo idea what the root cause is. I tried to use the same syntax as in the example python file. The blacs gui can still be used to set values on the daq, but whenever I try to use a script it runs into trouble.</p>\n<p>Regards</p>\n<p>Jesse Evans</p>", "type": "rendered"}, "assignee": null, "state": "closed", "version": null, "edited_on": null, "created_on": "2016-01-08T14:59:45.686990+00:00", "milestone": null, "updated_on": "2016-01-12T22:23:46.747052+00:00", "type": "issue", "id": 17}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/18/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/18/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/18/execution-of-small-or-time-critical"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/18/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Execution of small or time-critical analysis scripts as part of running shot", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Description:\r\n\r\nAdd a feature that allows the execution of small or time-critical scripts within the context of an individual labscript shot.  The intended application of this tool is for cases where in-shot or time-critical processing of data is required, for example when images or traces have been acquired that are used to feedback to the next shot to stabilize the magnetic field.\r\n\r\nProposed syntax:\r\n\r\n\r\n```\r\n#!python\r\n\r\n# Initialize a script executing \u201cdevice\u201d.\r\n# These can be launched locally or remotly (using the to be implemented methods to start\r\n# devices on remote computers.\r\n\r\nScripterLocal = ScriptManager(start_order=-1, stop_order=1)\r\nScripterRemote = ScriptManager(host=192.168.2.5, start_order=-1, stop_order=2)\r\n\r\nfrom Scripts import Script1, Script2, Script3\r\n\r\n# These will be executed after the shot completes in order on the local computer\r\nScripterLocal.AttachScript(Script1)\r\nScripterLocal.AttachScript(Script2)\r\n\r\n# this will be executed on a remote computer after the shot stops, on the remote computer\r\nScripterRemote(Script3)\r\n```\r\n\r\n\r\nComments:\r\n\r\nAs \u201cdevices\u201d these will have Blacs tabs each with suitable error reporting.  start_order and stop_order are two new kwargs to be present in the lowest level device class.  These dictate the order in which devices are sent to buffered mode (start_order) and then back to manuals (stop_order).  These default to 0 (so all 0's are started together, all 1's together and so forth).\r\n\r\nScript1,2,3 are callable python functions.  With the call syntax TBD, for example each should expect to be given a path to the current h5 file (or to the group were it should save any data), and current variables (?) and it should expect some action to be taken from its return values (such as having them sent to runmanager or something).\r\n\r\nPersistence can be achieved by assuming that the returns of the current cycle will be passed to the function next time.  OR each ScripterLocal can maintain a persistent local cache [I like this one]", "markup": "markdown", "html": "<p>Description:</p>\n<p>Add a feature that allows the execution of small or time-critical scripts within the context of an individual labscript shot.  The intended application of this tool is for cases where in-shot or time-critical processing of data is required, for example when images or traces have been acquired that are used to feedback to the next shot to stabilize the magnetic field.</p>\n<p>Proposed syntax:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Initialize a script executing \u201cdevice\u201d.</span>\n<span class=\"c1\"># These can be launched locally or remotly (using the to be implemented methods to start</span>\n<span class=\"c1\"># devices on remote computers.</span>\n\n<span class=\"n\">ScripterLocal</span> <span class=\"o\">=</span> <span class=\"n\">ScriptManager</span><span class=\"p\">(</span><span class=\"n\">start_order</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">stop_order</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">ScripterRemote</span> <span class=\"o\">=</span> <span class=\"n\">ScriptManager</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"mf\">192.168</span><span class=\"o\">.</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">start_order</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">stop_order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">Scripts</span> <span class=\"kn\">import</span> <span class=\"n\">Script1</span><span class=\"p\">,</span> <span class=\"n\">Script2</span><span class=\"p\">,</span> <span class=\"n\">Script3</span>\n\n<span class=\"c1\"># These will be executed after the shot completes in order on the local computer</span>\n<span class=\"n\">ScripterLocal</span><span class=\"o\">.</span><span class=\"n\">AttachScript</span><span class=\"p\">(</span><span class=\"n\">Script1</span><span class=\"p\">)</span>\n<span class=\"n\">ScripterLocal</span><span class=\"o\">.</span><span class=\"n\">AttachScript</span><span class=\"p\">(</span><span class=\"n\">Script2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># this will be executed on a remote computer after the shot stops, on the remote computer</span>\n<span class=\"n\">ScripterRemote</span><span class=\"p\">(</span><span class=\"n\">Script3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Comments:</p>\n<p>As \u201cdevices\u201d these will have Blacs tabs each with suitable error reporting.  start_order and stop_order are two new kwargs to be present in the lowest level device class.  These dictate the order in which devices are sent to buffered mode (start_order) and then back to manuals (stop_order).  These default to 0 (so all 0's are started together, all 1's together and so forth).</p>\n<p>Script1,2,3 are callable python functions.  With the call syntax TBD, for example each should expect to be given a path to the current h5 file (or to the group were it should save any data), and current variables (?) and it should expect some action to be taken from its return values (such as having them sent to runmanager or something).</p>\n<p>Persistence can be achieved by assuming that the returns of the current cycle will be passed to the function next time.  OR each ScripterLocal can maintain a persistent local cache [I like this one]</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-20T16:25:24.636478+00:00", "milestone": null, "updated_on": "2018-08-08T19:48:08.834582+00:00", "type": "issue", "id": 18}, {"priority": "major", "kind": "task", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/19/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/19/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/19/19-remerge-jqi-with-monash-then-get-ground"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/19/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "#19: Remerge JQI with Monash.  Then get ground rules down for proper behavior with rules.", "component": null, "votes": 0, "watches": 4, "content": {"raw": "There has been a lot of development at JQI.  This needs to be merged into the main branch.  Then the labscript documentation should define the exact procedure we want to follow to add features.", "markup": "markdown", "html": "<p>There has been a lot of development at JQI.  This needs to be merged into the main branch.  Then the labscript documentation should define the exact procedure we want to follow to add features.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:43:15.466390+00:00", "milestone": null, "updated_on": "2017-04-21T15:51:45.296171+00:00", "type": "issue", "id": 19}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/20/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/20/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/20/20-ability-to-run-directly-from-the"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/20/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "#20: Ability to run directly from the console with ease.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently the user is compelled to use GUI programs.  It would be desirable if ALL the gui programs were simply talking to \"server\" processes that the user could directly send tasks to.  Meaning the \"blacs server\" could run on a headless machine and the GUI could be anywhere.", "markup": "markdown", "html": "<p>Currently the user is compelled to use GUI programs.  It would be desirable if ALL the gui programs were simply talking to \"server\" processes that the user could directly send tasks to.  Meaning the \"blacs server\" could run on a headless machine and the GUI could be anywhere.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:45:08.655327+00:00", "milestone": null, "updated_on": "2017-04-21T03:58:55.602987+00:00", "type": "issue", "id": 20}, {"priority": "trivial", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/21/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/21.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/21/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/21/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/21/21-far-future-have-in-shot-analysis-with"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/21/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "#21: Far future: have in-shot analysis with live feedback rather than between shots.", "component": null, "votes": 1, "watches": 3, "content": {"raw": "The in-shot processing capability should be able to execute scripts at a defined place in the script, making processed information available for use in the same script (for example allowing dynamical feed forward correction of magnetic fields), or removing any dead \"computation\" time between scripts.", "markup": "markdown", "html": "<p>The in-shot processing capability should be able to execute scripts at a defined place in the script, making processed information available for use in the same script (for example allowing dynamical feed forward correction of magnetic fields), or removing any dead \"computation\" time between scripts.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:47:12.456575+00:00", "milestone": null, "updated_on": "2017-04-21T00:47:12.456575+00:00", "type": "issue", "id": 21}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/22/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/22/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/22/22-in-run-managed-have-default-case-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/22/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "#22: In run managed have \"default\" case for all the variables.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Run manager should have a default field for all of its variables that defines the desired state of that quantity if a \"ramp\" is not running.", "markup": "markdown", "html": "<p>Run manager should have a default field for all of its variables that defines the desired state of that quantity if a \"ramp\" is not running.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:48:29.189238+00:00", "milestone": null, "updated_on": "2017-04-21T00:48:47.262329+00:00", "type": "issue", "id": 22}, {"priority": "trivial", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/23/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/23/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/23/23-automatic-data-for-insersion-into"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/23/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "#23: Automatic data for insersion into labbook", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Lyse should cull through metadata and insert some figures and text into the copy buffer to be pasted into the digital lab book.", "markup": "markdown", "html": "<p>Lyse should cull through metadata and insert some figures and text into the copy buffer to be pasted into the digital lab book.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:50:45.167969+00:00", "milestone": null, "updated_on": "2017-04-21T03:04:43.800961+00:00", "type": "issue", "id": 23}, {"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/24/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/24.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/24/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/24/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/24/add-a-history-for-each-variable-and-a"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/24/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Add a history for each variable and a comment box about a variable in Runmanager", "component": null, "votes": 0, "watches": 1, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:51:46.517758+00:00", "milestone": null, "updated_on": "2017-04-21T00:51:46.517758+00:00", "type": "issue", "id": 24}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/25/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/25/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/25/better-arrangement-of-tabs-in-blacs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/25/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Better arrangement of tabs in blacs.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We don't know how to describe this, but we have so many blacs tabs that they are a mess to manage.  A better organizational principle is desired.", "markup": "markdown", "html": "<p>We don't know how to describe this, but we have so many blacs tabs that they are a mess to manage.  A better organizational principle is desired.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:52:52.093447+00:00", "milestone": null, "updated_on": "2017-04-21T02:17:45.450496+00:00", "type": "issue", "id": 25}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/26/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/26.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/26/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/26/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/26/port-to-pyqt5-and-python3"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/26/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Port to pyqt5 and python3.", "component": null, "votes": 1, "watches": 3, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:54:05.759547+00:00", "milestone": null, "updated_on": "2017-08-30T14:03:11.516451+00:00", "type": "issue", "id": 26}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/27/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/27/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/27/more-secure-interprocess-communication"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/27/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "More secure interprocess communication", "component": null, "votes": 0, "watches": 1, "content": {"raw": "More secure interprocess communication so that labscript programs are safe to run on networks that aren't necessarily entirely trusted.  ChrisB has a plan", "markup": "markdown", "html": "<p>More secure interprocess communication so that labscript programs are safe to run on networks that aren't necessarily entirely trusted.  ChrisB has a plan</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T00:54:34.608530+00:00", "milestone": null, "updated_on": "2017-04-21T02:19:37.833331+00:00", "type": "issue", "id": 27}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/28/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/28.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/28/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/28/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/28/remote-launching-of-all-blacs-devices"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/28/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Remote launching of all Blacs devices", "component": null, "votes": 1, "watches": 4, "content": {"raw": "All blacs devices should accept a \"host\" kwarg allowing that device to be launched on a suitably configured remote computer.  Currently desired for python based camera devices, but nice in many cases.", "markup": "markdown", "html": "<p>All blacs devices should accept a \"host\" kwarg allowing that device to be launched on a suitably configured remote computer.  Currently desired for python based camera devices, but nice in many cases.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T01:09:25.918121+00:00", "milestone": null, "updated_on": "2019-01-03T04:48:05.967956+00:00", "type": "issue", "id": 28}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/29/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/29/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/29/blacs-real-time-display-of-input-data"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/29/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Blacs real time display of input data", "component": null, "votes": 1, "watches": 3, "content": {"raw": "Have blacs do real-time display option to tabs, so that things like MOT's could be displayed.  Because we would like to eliminate the silly secutiry cameras we use to look at MOTs, it would be useful to allow live streaming of input data to a blacs tab for any connected input device.", "markup": "markdown", "html": "<p>Have blacs do real-time display option to tabs, so that things like MOT's could be displayed.  Because we would like to eliminate the silly secutiry cameras we use to look at MOTs, it would be useful to allow live streaming of input data to a blacs tab for any connected input device.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T01:10:53.713218+00:00", "milestone": null, "updated_on": "2017-04-21T01:10:53.713218+00:00", "type": "issue", "id": 29}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/30/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/30.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/30/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/30/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/30/better-restarting-of-ni-devices"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/30/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Better restarting of NI devices", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Sometimes NI devices find themselves in a state where they must be restarted to resume operator.  Implement this behavior in labscript if possible to avoid power cycling.", "markup": "markdown", "html": "<p>Sometimes NI devices find themselves in a state where they must be restarted to resume operator.  Implement this behavior in labscript if possible to avoid power cycling.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T01:11:51.742933+00:00", "milestone": null, "updated_on": "2017-04-21T01:11:51.742933+00:00", "type": "issue", "id": 30}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/31/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/31.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/31/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/31/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/31/automatic-backup-of-shot-files-after-blacs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/31/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Automatic backup of shot files after BLACS runs them", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We are implementing a google drive based backup system, and we would like all h5 files to be saved to more than one location (standard location + one or more backup locations) when blacs releases control of the file (and before lyse or any non-critical post-processing occurs).", "markup": "markdown", "html": "<p>We are implementing a google drive based backup system, and we would like all h5 files to be saved to more than one location (standard location + one or more backup locations) when blacs releases control of the file (and before lyse or any non-critical post-processing occurs).</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T01:13:38.283877+00:00", "milestone": null, "updated_on": "2017-04-21T03:44:24.900576+00:00", "type": "issue", "id": 31}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/32/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/32.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/32/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/32/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/32/smarter-dealing-with-errors-so-not-every"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/32/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Smarter dealing with errors, so not every error causes a stop.", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently blacs stops on all error conditions.  This is bad behavior.  Our system requires that it be running constantly to stay in a stable \"warm\" configuration.  So blacs should not stop submitting shots unless and \"end of the world\" bad event has occurred. \r\n\r\nThere are different degrees of badness.  For example, in some cases a camera will miss an image for some reason.  This type of error should just request blacs to ignore the error (or perhaps re-try the shot). \r\n\r\nBlacs should switch to a \"safe\" script of too many errors accumulate.", "markup": "markdown", "html": "<p>Currently blacs stops on all error conditions.  This is bad behavior.  Our system requires that it be running constantly to stay in a stable \"warm\" configuration.  So blacs should not stop submitting shots unless and \"end of the world\" bad event has occurred. </p>\n<p>There are different degrees of badness.  For example, in some cases a camera will miss an image for some reason.  This type of error should just request blacs to ignore the error (or perhaps re-try the shot). </p>\n<p>Blacs should switch to a \"safe\" script of too many errors accumulate.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-21T01:16:53.457833+00:00", "milestone": null, "updated_on": "2017-04-21T04:10:51.691355+00:00", "type": "issue", "id": 32}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/33/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/33.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/33/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/33/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/33/staticdds-class-does-not-ask-parent-device"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/33/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "StaticDDS class does not ask parent device for default unit conversion classes like DDS class", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It's a minor annoyance, but getting the right number of zeros on a Novatech to set 80MHz in Hz is tedious.\r\n\r\nThere is a simple copy/paste upgrade from the DDS class. I can send a pull request with the fix I've been using for a while now.", "markup": "markdown", "html": "<p>It's a minor annoyance, but getting the right number of zeros on a Novatech to set 80MHz in Hz is tedious.</p>\n<p>There is a simple copy/paste upgrade from the DDS class. I can send a pull request with the fix I've been using for a while now.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-04-28T16:35:56.190836+00:00", "milestone": null, "updated_on": "2017-04-28T17:36:57.961986+00:00", "type": "issue", "id": 33}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/34/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/34/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/34/ramp-splitting"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/34/vote"}}, "reporter": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "title": "Ramp splitting", "component": null, "votes": 0, "watches": 3, "content": {"raw": "If an AnalogOutput on Clockline1 does a ramp and another DigitaOut on Clockline2 should change its state during the ramp (at t=t2), the compile process adds an instruction to both clocklines at t=t2. This additional clock-tick may lead to clock ticks on ClockLine1 which the AnalogOutput card cannot handle\r\n\r\nIn order to fix this issue the ramp could be split into multiple sections, in which the ClockLine1 emmits pulses at the appropriate ramp samplerate, stop at t2, emmit a single clocktick on Clockline2 and continue ticking an ClockLine1 with the ramp samplerate. \r\n\r\nI wrote a (maybe hacky) solution, but it seems to work (see attachment).\r\nIn Line 486 \"def self.collect_change_times(...)\" I collect all times which are during a ramp and return them as list in a dict with the clockline.name as key.\r\n\r\nIn Line 596: def expand_change_times(), I analyse the split times and check if multiple times belong to the same \"split\" ( mutliple times are in between two ramp ticks). Also I analyse if a split time is simultaneous to a ramp tick, so the pseudoclock has to emmit clock signals on both ClockLines.\r\n\r\nThen the actual ramp instructions are added to the clock list. Afterwards the other instructions are inserted at the correct list index, to keep time ordering.\r\n\r\nI also calculate the correct step size for all the clock instructions.\r\n\r\nI also attached a runviewer screenshot of a compiled example script. (don't be confused about the short graphs for Cooler_TTL and Oszi_Trigger. This seems to be a bug in our runviewer implementation)\r\nA1_clockline and D1_clockline are the both clocklines. A1_clockline for the AnalogOut TiSa1_Amplitude, D1_clockline for the DigitalOuts Cooler_TTL and Oszi_Trigger.\r\nTiSa1_Amplitude does the ramp.\r\nCooler_TTL and Oszi_Trigger change their states during the ramp.\r\n\r\nI don't think this is the best or cleanest solution, but maybe you can use the idea ;-)", "markup": "markdown", "html": "<p>If an AnalogOutput on Clockline1 does a ramp and another DigitaOut on Clockline2 should change its state during the ramp (at t=t2), the compile process adds an instruction to both clocklines at t=t2. This additional clock-tick may lead to clock ticks on ClockLine1 which the AnalogOutput card cannot handle</p>\n<p>In order to fix this issue the ramp could be split into multiple sections, in which the ClockLine1 emmits pulses at the appropriate ramp samplerate, stop at t2, emmit a single clocktick on Clockline2 and continue ticking an ClockLine1 with the ramp samplerate. </p>\n<p>I wrote a (maybe hacky) solution, but it seems to work (see attachment).\nIn Line 486 \"def self.collect_change_times(...)\" I collect all times which are during a ramp and return them as list in a dict with the clockline.name as key.</p>\n<p>In Line 596: def expand_change_times(), I analyse the split times and check if multiple times belong to the same \"split\" ( mutliple times are in between two ramp ticks). Also I analyse if a split time is simultaneous to a ramp tick, so the pseudoclock has to emmit clock signals on both ClockLines.</p>\n<p>Then the actual ramp instructions are added to the clock list. Afterwards the other instructions are inserted at the correct list index, to keep time ordering.</p>\n<p>I also calculate the correct step size for all the clock instructions.</p>\n<p>I also attached a runviewer screenshot of a compiled example script. (don't be confused about the short graphs for Cooler_TTL and Oszi_Trigger. This seems to be a bug in our runviewer implementation)\nA1_clockline and D1_clockline are the both clocklines. A1_clockline for the AnalogOut TiSa1_Amplitude, D1_clockline for the DigitalOuts Cooler_TTL and Oszi_Trigger.\nTiSa1_Amplitude does the ramp.\nCooler_TTL and Oszi_Trigger change their states during the ramp.</p>\n<p>I don't think this is the best or cleanest solution, but maybe you can use the idea ;-)</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-30T13:16:29.639971+00:00", "milestone": null, "updated_on": "2017-05-31T16:06:24.249470+00:00", "type": "issue", "id": 34}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/35/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/35.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/35/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/35/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/35/strict-timing-of-shot-submission-times"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/35/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Strict timing of shot-submission times", "component": null, "votes": 0, "watches": 1, "content": {"raw": "For optimal experimental stability it is desired that shots be submitted as periodically as possible.  I propose adding a new kwarg to \"stop\" in labscript so:\r\n\r\nstop(t) \r\n\r\nbecomes\r\n\r\nstop(t, shot_interval=20)\r\n\r\nthis would demand that the _execution_ (not programming) of the next shot in the sequence start as close to 20 s after this one was executed as possible.  If not currently present the h5 file will contain attributes marking both the start and completion time of the script along with a boolean reporting if the script was successfully started at the desired shot_interval (this might fail sometimes, owing to novatech programming for example), but we don't want to stop cycling because of this.", "markup": "markdown", "html": "<p>For optimal experimental stability it is desired that shots be submitted as periodically as possible.  I propose adding a new kwarg to \"stop\" in labscript so:</p>\n<p>stop(t) </p>\n<p>becomes</p>\n<p>stop(t, shot_interval=20)</p>\n<p>this would demand that the <em>execution</em> (not programming) of the next shot in the sequence start as close to 20 s after this one was executed as possible.  If not currently present the h5 file will contain attributes marking both the start and completion time of the script along with a boolean reporting if the script was successfully started at the desired shot_interval (this might fail sometimes, owing to novatech programming for example), but we don't want to stop cycling because of this.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-31T19:59:42.682816+00:00", "milestone": null, "updated_on": "2017-05-31T19:59:42.682816+00:00", "type": "issue", "id": 35}, {"priority": "major", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/36/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/36.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/36/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/36/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/36/desire-output-values-between-shots"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/36/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Desire output values between shots different from those present when stopping sequencing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We often desire to have some activity running between shots (MOT loading, or shining UV) or whatever, that is not good or safe to have on for a long time.  So we do want to use the time between sequences for this, but we do not want the system to sit in this state for a very long time when we are not actively cycling.\r\n\r\npropose new output methods that looks somewhat like:\r\n\r\nDO_2.safe_state(0, timeout=5)\r\n\r\nwhich directs labscript to demand DO_2 return to \"0\" after 5 seconds (say to avoid having something overheat).  The default behavior would remain as it is, only those channels with a safe_state set would be subject to this.", "markup": "markdown", "html": "<p>We often desire to have some activity running between shots (MOT loading, or shining UV) or whatever, that is not good or safe to have on for a long time.  So we do want to use the time between sequences for this, but we do not want the system to sit in this state for a very long time when we are not actively cycling.</p>\n<p>propose new output methods that looks somewhat like:</p>\n<p>DO_2.safe_state(0, timeout=5)</p>\n<p>which directs labscript to demand DO_2 return to \"0\" after 5 seconds (say to avoid having something overheat).  The default behavior would remain as it is, only those channels with a safe_state set would be subject to this.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-31T20:07:50.996320+00:00", "milestone": null, "updated_on": "2017-05-31T20:07:50.996320+00:00", "type": "issue", "id": 36}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/37/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/37.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/37/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/37/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/37/eliminate-go_high-go_low-syntax"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/37/vote"}}, "reporter": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "title": "Eliminate go_high, go_low syntax", "component": null, "votes": 0, "watches": 1, "content": {"raw": "For no apparent reason digital lines behave different from analog lines.  For example I propose instead:\r\n\r\ndo_line.go_high(t)\r\nbecomes:\r\ndo_line.constant(t, 1) or\r\ndo_line.constant(t, True)\r\n\r\nthis allows uniform syntax across analog and digital lines, and makes programming do lines with variables more natural.  Realistically the go_high/low methods would remain, but be depreciated.", "markup": "markdown", "html": "<p>For no apparent reason digital lines behave different from analog lines.  For example I propose instead:</p>\n<p>do_line.go_high(t)\nbecomes:\ndo_line.constant(t, 1) or\ndo_line.constant(t, True)</p>\n<p>this allows uniform syntax across analog and digital lines, and makes programming do lines with variables more natural.  Realistically the go_high/low methods would remain, but be depreciated.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-05-31T20:12:25.316990+00:00", "milestone": null, "updated_on": "2017-05-31T20:12:25.316990+00:00", "type": "issue", "id": 37}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/38/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/38.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/38/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/38/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/38/saving-of-hg-info-slows-down-compilation"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/38/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Saving of hg info slows down compilation", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Pull request #7 introduced the saving of hg (mercurial) repository version information into the hdf5 file. However, tests on my PC indicate this adds an additions 3 seconds onto compilation time (original compilation time was ~0.65 seconds, now ~3.5 seconds).\r\n\r\nWe should investigate this and correct it.", "markup": "markdown", "html": "<p><a href=\"#!/labscript_suite/labscript/pull-requests/7/save-mercurial-instead-of-subversion\" rel=\"nofollow\" class=\"ap-connect-link\">Pull request #7</a> introduced the saving of hg (mercurial) repository version information into the hdf5 file. However, tests on my PC indicate this adds an additions 3 seconds onto compilation time (original compilation time was ~0.65 seconds, now ~3.5 seconds).</p>\n<p>We should investigate this and correct it.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-17T01:17:20.419976+00:00", "milestone": null, "updated_on": "2017-06-19T00:52:42.002362+00:00", "type": "issue", "id": 38}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/39/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/39.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/39/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/39/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/39/non-looping-clock-ticks-may-be-too-short"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/39/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Non-looping clock ticks may be too short if they happen during a ramp", "component": null, "votes": 0, "watches": 1, "content": {"raw": "There is a bug in labscript where the non-looping clock ticks can be too short.\r\n\r\nThis is because ramps (a looping clock) is broken up into [two pseudoclock instructions](#!/labscript_suite/labscript/src/72f10b9ab0a00ed12833f42216229611574bdfac/labscript.py?at=default&fileviewer=file-view-default#labscript.py-686)*, the first where non-looping clocks and looping clocks tick, and then second where only looping clocks tick. However, the maximum rate is calculated based on the fastest ramp, and the maximum allowed ramping rate (the [`local_clock_limit`](#!/labscript_suite/labscript/src/72f10b9ab0a00ed12833f42216229611574bdfac/labscript.py?at=default&fileviewer=file-view-default#labscript.py-628)) determined by ramping clockline. This then ignores the clock limit for clocklines that are not ramping, but need updating during the first tick of the ramp.\r\n\r\nI'm not sure what the fix should be. We have options like:\r\n\r\n1. Force the maximum ramp rate to be limited by the clock limit of any non-ramping clocks that are commanded at the start/end or during a ramp (this is likely to make everyone's existing labscript files fail to compile)\r\n\r\n2. Somehow break the ramps at the pseudoclock device instruction level so that non-looping clocks have a period that matches the length of the looping clock ramp (this seems quite complicated to implement though as I think it breaks the current structure of the internal representation of pseudoclock instructions). Effectively this would mean we revert to the slow/fast clock system we had a long time ago (but it would be better because the slow/fast determination is made on a per ramp basis, and we'd still maintain gating)\r\n\r\n3. ??\r\n\r\nLooking for other better suggestions!\r\n\r\n\r\nNotes:\r\n\r\n\\* by this I mean the internal labscript dictionary that describes the pseudoclock instructions, which may translate to more pseudoclock device instructions depending on how many device instructions you need per clock tick", "markup": "markdown", "html": "<p>There is a bug in labscript where the non-looping clock ticks can be too short.</p>\n<p>This is because ramps (a looping clock) is broken up into <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/72f10b9ab0a00ed12833f42216229611574bdfac/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-686\" rel=\"nofollow\">two pseudoclock instructions</a>*, the first where non-looping clocks and looping clocks tick, and then second where only looping clocks tick. However, the maximum rate is calculated based on the fastest ramp, and the maximum allowed ramping rate (the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/72f10b9ab0a00ed12833f42216229611574bdfac/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-628\" rel=\"nofollow\"><code>local_clock_limit</code></a>) determined by ramping clockline. This then ignores the clock limit for clocklines that are not ramping, but need updating during the first tick of the ramp.</p>\n<p>I'm not sure what the fix should be. We have options like:</p>\n<ol>\n<li>\n<p>Force the maximum ramp rate to be limited by the clock limit of any non-ramping clocks that are commanded at the start/end or during a ramp (this is likely to make everyone's existing labscript files fail to compile)</p>\n</li>\n<li>\n<p>Somehow break the ramps at the pseudoclock device instruction level so that non-looping clocks have a period that matches the length of the looping clock ramp (this seems quite complicated to implement though as I think it breaks the current structure of the internal representation of pseudoclock instructions). Effectively this would mean we revert to the slow/fast clock system we had a long time ago (but it would be better because the slow/fast determination is made on a per ramp basis, and we'd still maintain gating)</p>\n</li>\n<li>\n<p>??</p>\n</li>\n</ol>\n<p>Looking for other better suggestions!</p>\n<p>Notes:</p>\n<p>* by this I mean the internal labscript dictionary that describes the pseudoclock instructions, which may translate to more pseudoclock device instructions depending on how many device instructions you need per clock tick</p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-27T06:26:17.530551+00:00", "milestone": null, "updated_on": "2017-06-28T08:10:24.682574+00:00", "type": "issue", "id": 39}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/40/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/40.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/40/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/40/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/40/instruction-times-should-be-quantised-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/40/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "instruction times should be quantised to the pseudoclock clock_resolution", "component": null, "votes": 0, "watches": 2, "content": {"raw": "As per pull request #11, there is a bug where the 'extra clock tick' that can be inserted just before a break in a ramp* may be shortened incorrectly (and thus tick faster than the allowed `clock_limit` rate of an attached `ClockLine`) due to the quantisation of the pseudoclock.\r\n\r\nEDIT: This was reported by @philipstarkey (@shaunj was just logged into the PC)\r\n\r\n---\r\n\\* The break in ramps is a result of labscript automatically splitting ramps when another output needs to be updated during the middle of a ramp", "markup": "markdown", "html": "<p>As per <a href=\"#!/labscript_suite/labscript/pull-requests/11/added-the-ability-to-split-ramps\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #11</a>, there is a bug where the 'extra clock tick' that can be inserted just before a break in a ramp* may be shortened incorrectly (and thus tick faster than the allowed <code>clock_limit</code> rate of an attached <code>ClockLine</code>) due to the quantisation of the pseudoclock.</p>\n<p>EDIT: This was reported by @philipstarkey (@shaunj was just logged into the PC)</p>\n<hr />\n<p>* The break in ramps is a result of labscript automatically splitting ramps when another output needs to be updated during the middle of a ramp</p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-06-28T02:21:30.110617+00:00", "milestone": null, "updated_on": "2017-07-18T00:56:14.294945+00:00", "type": "issue", "id": 40}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/41/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/41.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/41/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/41/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/41/test-suite-for-labscript"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/41/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Test suite for labscript", "component": null, "votes": 1, "watches": 2, "content": {"raw": "Changes to labscript that contain unexpected bugs, risk breaking people's experiments. Worse, a mistake could adversely affect the ability to obtain scientific results, or even invalidate publications. Corner cases are often hard to catch during testing, and may persist for years. To combat this, we should implement a test suite.\r\n\r\nI suggest that we expose the runviewer `Shot` class in an API and use the traces (that are reverse engineered from the hardware instructions stored in the hdf5 file) to verify that outputs still maintain the same behaviour after labscript changes.\r\n\r\nWe should also:\r\n\r\n* have something in the test suite that detects ramps, and warns (but not fails) the test if the clock ticks (and thus the ramp evaluation points) have changed slightly.\r\n* Determines if part of the trace is just shifted in time (so that we can determine if the shift is expected - e.g. because we increased the trigger time when fixing a bug)\r\n* Create a comprehensive test shot that uses all standard hardware, along with expected traces (generated by hand, so that the test does not fail (or worse, pass) due to a mistake in the runviewer API) to be used before merging pull requests.\r\n* use mercurial to pull the expected behaviour of past versions for comparison with the expected behaviour of the current version", "markup": "markdown", "html": "<p>Changes to labscript that contain unexpected bugs, risk breaking people's experiments. Worse, a mistake could adversely affect the ability to obtain scientific results, or even invalidate publications. Corner cases are often hard to catch during testing, and may persist for years. To combat this, we should implement a test suite.</p>\n<p>I suggest that we expose the runviewer <code>Shot</code> class in an API and use the traces (that are reverse engineered from the hardware instructions stored in the hdf5 file) to verify that outputs still maintain the same behaviour after labscript changes.</p>\n<p>We should also:</p>\n<ul>\n<li>have something in the test suite that detects ramps, and warns (but not fails) the test if the clock ticks (and thus the ramp evaluation points) have changed slightly.</li>\n<li>Determines if part of the trace is just shifted in time (so that we can determine if the shift is expected - e.g. because we increased the trigger time when fixing a bug)</li>\n<li>Create a comprehensive test shot that uses all standard hardware, along with expected traces (generated by hand, so that the test does not fail (or worse, pass) due to a mistake in the runviewer API) to be used before merging pull requests.</li>\n<li>use mercurial to pull the expected behaviour of past versions for comparison with the expected behaviour of the current version</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-28T04:54:06.313879+00:00", "milestone": null, "updated_on": "2017-06-28T04:55:51.473040+00:00", "type": "issue", "id": 41}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/42/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/42.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/42/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/42/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/42/loop-recognition"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/42/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "Loop recognition", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Loops in experiment scripts should get recognized an not waste Pulsblaster commands.\r\nIf we do something like the following code we quickly reach the maximum commands of the Pulsblaster this is suboptimal.\r\n```\r\n#!python\r\n\r\nstart()\r\nt = 1\r\nfor i in range(2000):\r\n    digitaloutput_name.go_high(t)\r\n    t += 1\r\n   digitaloutput_name.go_low(t)\r\n    t += 1\r\n\r\nstop(t + 6)\r\n```", "markup": "markdown", "html": "<p>Loops in experiment scripts should get recognized an not waste Pulsblaster commands.\nIf we do something like the following code we quickly reach the maximum commands of the Pulsblaster this is suboptimal.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">):</span>\n    <span class=\"n\">digitaloutput_name</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n   <span class=\"n\">digitaloutput_name</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-07-19T09:30:14.049794+00:00", "milestone": null, "updated_on": "2017-07-20T01:21:35.861577+00:00", "type": "issue", "id": 42}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/43/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/43.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/43/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/43/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/43/better-to-short-delay-error-message"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/43/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "Better \"to short delay\" error message", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We often get  the \"Commands have been issued to devices attached to X at t= ...s s and ... s. This Pseudoclock cannot support update delays shorter than ... sec.\" when rewriting experiment scripts. This is mostly caused by shutters that just happen to get to close to some other pulse.\r\nThis is hard to debug, as we can't just view the file in runviewer since it didn't compile. \r\nIt would be really helpful to get the names of the colliding outputs as this would make things a lot easier.", "markup": "markdown", "html": "<p>We often get  the \"Commands have been issued to devices attached to X at t= ...s s and ... s. This Pseudoclock cannot support update delays shorter than ... sec.\" when rewriting experiment scripts. This is mostly caused by shutters that just happen to get to close to some other pulse.\nThis is hard to debug, as we can't just view the file in runviewer since it didn't compile. \nIt would be really helpful to get the names of the colliding outputs as this would make things a lot easier.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-07-21T15:15:50.760990+00:00", "milestone": null, "updated_on": "2017-07-21T15:15:50.760990+00:00", "type": "issue", "id": 43}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/44/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/44.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/44/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/44/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/44/limits-should-be-stored-in-the-connection"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/44/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "limits should be stored in the connection table", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently limits only protect you from breaking something when running a shot, but are not respected by BLACS since they aren't saved anywhere.\r\n\r\nDevice limits (really only relevant to analog quantities and derivatives) should be stored somewhere so that BLACS can access them and use them to protect devices. I'm not sure that connection table properties is really the best idea (should probably be device properties) but since we don't have device properties working for channels (they only work for devices) then the connection table is really the only place left to us.\r\n\r\nWe should probably also document them (at least show an example in example.py) as probably most people reading this won't even have known limits exist!", "markup": "markdown", "html": "<p>Currently limits only protect you from breaking something when running a shot, but are not respected by BLACS since they aren't saved anywhere.</p>\n<p>Device limits (really only relevant to analog quantities and derivatives) should be stored somewhere so that BLACS can access them and use them to protect devices. I'm not sure that connection table properties is really the best idea (should probably be device properties) but since we don't have device properties working for channels (they only work for devices) then the connection table is really the only place left to us.</p>\n<p>We should probably also document them (at least show an example in example.py) as probably most people reading this won't even have known limits exist!</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-01-23T04:26:41.853762+00:00", "milestone": null, "updated_on": "2018-03-22T06:25:13.086113+00:00", "type": "issue", "id": 44}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/45/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/45.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/45/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/45/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/45/restructure-properties-and-blacs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/45/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Restructure properties and BLACS connections", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Perhaps we should move device properties to the connection table dataset rather than attributes of device groups (with backward compatibility - property reading code can look for the device group if the column of the connection table doesn't exist). This would a) unify connection table properties and device properties, b) make the connection table dataset contain more of the information that is in a connection table .py file, c) allow saving device_properties on devices that do not have a BLACS tab.\r\n\r\nWe had a problem in the past where we added a device_property to all devices, and BLACS broke because it saw there was a device group for devices and tried to find a tab for them at shot run time and failed. Even though in that case the property was only really applicable for devices with BLACS tabs, you can imagine we might want to save more info for individual outputs, things that don't invalidate the connection table.\r\n\r\nThe device_properties column could be ignored by connection table code for the purposes of determining whether a connection table is a subset of/compatible with another.\r\n\r\nDevices could still have free reign over their device group, but some of the things that are currently stored as attributes there could instead go in the device_properties column of the connection table group. A guide could be: if it's a user-set configuration, it goes in the connection table column, if it's programmatically generated by labscript compilation then it goes in the device group. To continue to take advantage of the serialisation and deserialisation in properties.py, we could rename the types of data that are saved in the device group from device_properties to something that emphasises that they are things programatically generated during compilation - like 'hardware_instruction_attributes'.\r\n\r\nThis would help things like [labscript_devices pull request 27](#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/) not invalidate connection tables unnecessarily. That pull request could be modified to use device_properties already, but again, you can imagine wanting to separate user configuration and compilation results, as well as adding these properties for devices that do not have their own device group.\r\n\r\nAnother thing is BLACS_connection. This is superseded somewhat by the fact that devices can have many bits of data that tell BLACS how to connect to it, and these are increasingly going into connection_table_properties. I propose we get rid of the BLACS_connection column, replace it with a bool is_blacs_device or has_blacs_tab or similar - that way BLACS can still tell which devices it need to make tabs for - and move the actual connection information into connection_table_properties.\r\n\r\nI think this can all be done in a backward compatible way.", "markup": "markdown", "html": "<p>Perhaps we should move device properties to the connection table dataset rather than attributes of device groups (with backward compatibility - property reading code can look for the device group if the column of the connection table doesn't exist). This would a) unify connection table properties and device properties, b) make the connection table dataset contain more of the information that is in a connection table .py file, c) allow saving device_properties on devices that do not have a BLACS tab.</p>\n<p>We had a problem in the past where we added a device_property to all devices, and BLACS broke because it saw there was a device group for devices and tried to find a tab for them at shot run time and failed. Even though in that case the property was only really applicable for devices with BLACS tabs, you can imagine we might want to save more info for individual outputs, things that don't invalidate the connection table.</p>\n<p>The device_properties column could be ignored by connection table code for the purposes of determining whether a connection table is a subset of/compatible with another.</p>\n<p>Devices could still have free reign over their device group, but some of the things that are currently stored as attributes there could instead go in the device_properties column of the connection table group. A guide could be: if it's a user-set configuration, it goes in the connection table column, if it's programmatically generated by labscript compilation then it goes in the device group. To continue to take advantage of the serialisation and deserialisation in properties.py, we could rename the types of data that are saved in the device group from device_properties to something that emphasises that they are things programatically generated during compilation - like 'hardware_instruction_attributes'.</p>\n<p>This would help things like <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/\" rel=\"nofollow\">labscript_devices pull request 27</a> not invalidate connection tables unnecessarily. That pull request could be modified to use device_properties already, but again, you can imagine wanting to separate user configuration and compilation results, as well as adding these properties for devices that do not have their own device group.</p>\n<p>Another thing is BLACS_connection. This is superseded somewhat by the fact that devices can have many bits of data that tell BLACS how to connect to it, and these are increasingly going into connection_table_properties. I propose we get rid of the BLACS_connection column, replace it with a bool is_blacs_device or has_blacs_tab or similar - that way BLACS can still tell which devices it need to make tabs for - and move the actual connection information into connection_table_properties.</p>\n<p>I think this can all be done in a backward compatible way.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-12T23:13:48.590265+00:00", "milestone": null, "updated_on": "2018-03-12T23:38:56.831273+00:00", "type": "issue", "id": 45}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/46/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/46.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/46/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/46/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/46/ramps-can-over-undershoot-their-final"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/46/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "Ramps can over-/undershoot their final value", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Today in the lab we ran into the problem where a script would not compile due to the fact that a ramp exceeded the outputs limits. \r\nThe output had the limits (0, 10) and the initial values was something like 4 and final value of the ramp was 0 the invalid value was something like -4e-14. \r\nMy guess is that the quantized times might have caused this though I'm not sure.\r\n\r\nI'll try to make a minimal working example tomorrow. The script we used in the lab is quite complex and contains devices that are not in mainline labscript.", "markup": "markdown", "html": "<p>Today in the lab we ran into the problem where a script would not compile due to the fact that a ramp exceeded the outputs limits. \nThe output had the limits (0, 10) and the initial values was something like 4 and final value of the ramp was 0 the invalid value was something like -4e-14. \nMy guess is that the quantized times might have caused this though I'm not sure.</p>\n<p>I'll try to make a minimal working example tomorrow. The script we used in the lab is quite complex and contains devices that are not in mainline labscript.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-03-14T22:41:00.790660+00:00", "milestone": null, "updated_on": "2018-03-20T03:59:07.826651+00:00", "type": "issue", "id": 46}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/47/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/47.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/47/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/47/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/47/missing-wait-instruction-s"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/47/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Missing WAIT instruction(s)", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The quantisation of change times via `quantise_to_pseudoclock` (pull request #14) has introduced a bug to waits. Wait instructions are not always appended to the clock instructions, as:\r\n\r\n* [`clock.append('WAIT')`](#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&fileviewer=file-view-default#labscript.py-704) being run is contingent on the equality of two floats, an element of `all_change_times` and an element of `self.parent_device.trigger_times[1:]`.\r\n* `all_change_times` has had `quantise_to_psuedoclock` applied, whereas `self.parent_device.trigger_times` has not.\r\n\r\nThis bug arises in the following (using c7fd004) for various values of `t_wait`:\r\n\r\n```\r\n#!python\r\n\r\nfrom __future__ import division\r\nfrom labscript import ClockLine, DigitalOut, WaitMonitor, AnalogIn, start, stop, wait\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.NI_PCIe_6363 import NI_PCIe_6363\r\n\r\nPulseBlaster(name='pulseblaster_0', board_number=0)\r\nClockLine(name='pulseblaster_0_ni_clock',\r\n          pseudoclock=pulseblaster_0.pseudoclock, connection='flag 0')\r\nNI_PCIe_6363(name='ni_pcie_6363_0', parent_device=pulseblaster_0_ni_clock,\r\n             clock_terminal='/ni_pcie_6363_0/PFI0', acquisition_rate=1e4, \r\n             MAX_name='ni_pcie_6363_0')\r\nWaitMonitor(name='wait_monitor', parent_device=ni_pcie_6363_0, connection='port0/line3',\r\n            acquisition_device=ni_pcie_6363_0, acquisition_connection='ctr0',\r\n            timeout_device=ni_pcie_6363_0, timeout_connection='port1/line1')\r\n\r\nstart()\r\nt = 0\r\nt_wait = 4.5/ni_pcie_6363_0.clock_limit\r\nt_wait_quantised = ni_pcie_6363_0.quantise_to_pseudoclock([t_wait])[0]\r\nprint('t_wait  = {:.10f} s'.format(t_wait))\r\nprint('quantised = {:.10f} s'.format(t_wait_quantised))\r\nprint('difference = {:.3e} s'.format(t_wait_quantised - t_wait))\r\nt += t_wait\r\nt += wait(label='wait_test', t=t, timeout=0.1)\r\nt += 1e-3\r\nstop(t)\r\n\r\n```\r\nThe bug can be detected by adding a print statement before/after `clock.append('WAIT')` in labscript.py, or by appending the following to the above labscript (after `stop(t)`):\r\n\r\n```\r\n#!python\r\n\r\nif t_wait_quantised in pulseblaster_0.trigger_times[1:]:\r\n    print('WAIT instruction added')\r\nelse:\r\n    print('WAIT instruction missed')\r\n```\r\nIt seems to be that non-integer multiples of `1/ni_pcie_6363_0.clock_limit` reliably result in the missing `WAIT` instruction. A potential solution is to quantise the trigger times before [checking each element](#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&fileviewer=file-view-default#labscript.py-702) of `all_change_times` for membership of `self.parent_device.trigger_times[1:]`:\r\n\r\n```\r\n#!python\r\nquantised_trigger_times = self.quantise_to_pseudoclock(self.parent_device.trigger_times)\r\nfor i, time in enumerate(all_change_times):\r\n    if time in quantised_trigger_times[1:]:\r\n       clock.append('WAIT')\r\n```\r\n... or check for proximity of the differently conditioned times rather than equality.\r\n\r\n```\r\n#!python\r\nfor i, time in enumerate(all_change_times):\r\n    if min(abs(time - self.parent_device.trigger_times[1:])) <= self.pseudoclock_device.clock_resolution/2:\r\n       clock.append('WAIT')\r\n```", "markup": "markdown", "html": "<p>The quantisation of change times via <code>quantise_to_pseudoclock</code> (<a href=\"#!/labscript_suite/labscript/pull-requests/14/fixed-bug-with-timing-in-labscript\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #14</a>) has introduced a bug to waits. Wait instructions are not always appended to the clock instructions, as:</p>\n<ul>\n<li><a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-704\" rel=\"nofollow\"><code>clock.append('WAIT')</code></a> being run is contingent on the equality of two floats, an element of <code>all_change_times</code> and an element of <code>self.parent_device.trigger_times[1:]</code>.</li>\n<li><code>all_change_times</code> has had <code>quantise_to_psuedoclock</code> applied, whereas <code>self.parent_device.trigger_times</code> has not.</li>\n</ul>\n<p>This bug arises in the following (using <a href=\"#!/labscript_suite/labscript/commits/c7fd004\" rel=\"nofollow\" class=\"ap-connect-link\">c7fd004</a>) for various values of <code>t_wait</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">division</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"n\">ClockLine</span><span class=\"p\">,</span> <span class=\"n\">DigitalOut</span><span class=\"p\">,</span> <span class=\"n\">WaitMonitor</span><span class=\"p\">,</span> <span class=\"n\">AnalogIn</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">wait</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NI_PCIe_6363</span> <span class=\"kn\">import</span> <span class=\"n\">NI_PCIe_6363</span>\n\n<span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pulseblaster_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">board_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pulseblaster_0_ni_clock&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NI_PCIe_6363</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pcie_6363_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0_ni_clock</span><span class=\"p\">,</span>\n             <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s1\">&#39;/ni_pcie_6363_0/PFI0&#39;</span><span class=\"p\">,</span> <span class=\"n\">acquisition_rate</span><span class=\"o\">=</span><span class=\"mf\">1e4</span><span class=\"p\">,</span> \n             <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ni_pcie_6363_0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">WaitMonitor</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;wait_monitor&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;port0/line3&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">acquisition_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">acquisition_connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;ctr0&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout_device</span><span class=\"o\">=</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"p\">,</span> <span class=\"n\">timeout_connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;port1/line1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">t_wait</span> <span class=\"o\">=</span> <span class=\"mf\">4.5</span><span class=\"o\">/</span><span class=\"n\">ni_pcie_6363_0</span><span class=\"o\">.</span><span class=\"n\">clock_limit</span>\n<span class=\"n\">t_wait_quantised</span> <span class=\"o\">=</span> <span class=\"n\">ni_pcie_6363_0</span><span class=\"o\">.</span><span class=\"n\">quantise_to_pseudoclock</span><span class=\"p\">([</span><span class=\"n\">t_wait</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;t_wait  = {:.10f} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;quantised = {:.10f} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait_quantised</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;difference = {:.3e} s&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">t_wait_quantised</span> <span class=\"o\">-</span> <span class=\"n\">t_wait</span><span class=\"p\">))</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">t_wait</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;wait_test&#39;</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">1e-3</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The bug can be detected by adding a print statement before/after <code>clock.append('WAIT')</code> in labscript.py, or by appending the following to the above labscript (after <code>stop(t)</code>):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">t_wait_quantised</span> <span class=\"ow\">in</span> <span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT instruction added&#39;</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT instruction missed&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>It seems to be that non-integer multiples of <code>1/ni_pcie_6363_0.clock_limit</code> reliably result in the missing <code>WAIT</code> instruction. A potential solution is to quantise the trigger times before <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/c7fd00487ddf54772bcd28de426d29bebeb56cf0/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-702\" rel=\"nofollow\">checking each element</a> of <code>all_change_times</code> for membership of <code>self.parent_device.trigger_times[1:]</code>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">quantised_trigger_times</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantise_to_pseudoclock</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_device</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_change_times</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">quantised_trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n       <span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>... or check for proximity of the differently conditioned times rather than equality.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">all_change_times</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">time</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_device</span><span class=\"o\">.</span><span class=\"n\">trigger_times</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]))</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pseudoclock_device</span><span class=\"o\">.</span><span class=\"n\">clock_resolution</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">:</span>\n       <span class=\"n\">clock</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">&#39;WAIT&#39;</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-05-30T02:06:19.565223+00:00", "milestone": null, "updated_on": "2018-05-30T07:09:26.982657+00:00", "type": "issue", "id": 47}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/48/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/48.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/48/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/48/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/48/make-wait-monitors-optional"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/48/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Make wait monitors optional", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Wait monitors are confusing, take up ports and have some bugs and limitations associated with them.\r\n\r\nIf people do not want to have waits automatically time-out, and if they are not using analog inputs that require wait duration information in order to be processed, then they shouldn't need to have a wait monitor in order to run a shot.\r\n\r\nBugs in NI DAQmx counter acquisition at UMD have caused issues that we have worked around by making the wait monitor pulses 100ms long (the counter on the NI DAQmx device in question has a very small buffer and so misses edges if they are too close together and are not read out by the software before more edges come). This has worked well enough, but now at NIST an experiment needs multiple waits closer together than 100ms. They aren't using timeouts or NI DAQmx analog inputs, so the wait monitor is nothing but a source of bugs for them.\r\n\r\nSo I'll likely make wait monitors optional, with errors being raised if you try to do analog input or specify a timeout to wait() without a wait monitor.", "markup": "markdown", "html": "<p>Wait monitors are confusing, take up ports and have some bugs and limitations associated with them.</p>\n<p>If people do not want to have waits automatically time-out, and if they are not using analog inputs that require wait duration information in order to be processed, then they shouldn't need to have a wait monitor in order to run a shot.</p>\n<p>Bugs in NI DAQmx counter acquisition at UMD have caused issues that we have worked around by making the wait monitor pulses 100ms long (the counter on the NI DAQmx device in question has a very small buffer and so misses edges if they are too close together and are not read out by the software before more edges come). This has worked well enough, but now at NIST an experiment needs multiple waits closer together than 100ms. They aren't using timeouts or NI DAQmx analog inputs, so the wait monitor is nothing but a source of bugs for them.</p>\n<p>So I'll likely make wait monitors optional, with errors being raised if you try to do analog input or specify a timeout to wait() without a wait monitor.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-08-23T19:21:53.880127+00:00", "milestone": null, "updated_on": "2019-08-01T17:04:29.620568+00:00", "type": "issue", "id": 48}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/49/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/49.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/49/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/49/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/49/allow-the-set_passed_properties-decorator"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/49/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Allow the set_passed_properties decorator to be used on labscript objects that do not have an entry in the device group", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Currently, the `set_passed_properties` decorator is not supported for use on things like `Output` objects because we do not expect to create a device group for things other than devices with a BLACS connection.\r\n\r\nCurrently I think the behaviour actually forces the creation of device groups if you use the decorator on things like outputs, which is bad because BLACS assumes that every entry in the devices group is a real device it can communicate with via a BLACS_connection (hence why we had to role back a commit a while ago that inadvertently did something like this).\r\n\r\nThere are various ways to fix this, for example changing the way that BLACS determines which devices are in use. However, I also think that polluting the devices group with an entry per-channel is probably bad. So maybe we should save a special attribute in the device group for the parent, that contains JSON (aka a dictionary) of the properties of child objects like outputs and inputs.\r\n\r\nAnyway, mainly I'm logging this so we don't forget about it, not because I need the feature right now or because I have a particular solution in mind.", "markup": "markdown", "html": "<p>Currently, the <code>set_passed_properties</code> decorator is not supported for use on things like <code>Output</code> objects because we do not expect to create a device group for things other than devices with a BLACS connection.</p>\n<p>Currently I think the behaviour actually forces the creation of device groups if you use the decorator on things like outputs, which is bad because BLACS assumes that every entry in the devices group is a real device it can communicate with via a BLACS_connection (hence why we had to role back a commit a while ago that inadvertently did something like this).</p>\n<p>There are various ways to fix this, for example changing the way that BLACS determines which devices are in use. However, I also think that polluting the devices group with an entry per-channel is probably bad. So maybe we should save a special attribute in the device group for the parent, that contains JSON (aka a dictionary) of the properties of child objects like outputs and inputs.</p>\n<p>Anyway, mainly I'm logging this so we don't forget about it, not because I need the feature right now or because I have a particular solution in mind.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-10-17T01:00:09.661175+00:00", "milestone": null, "updated_on": "2018-10-17T01:00:09.661175+00:00", "type": "issue", "id": 49}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/50/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/50.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/50/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/50/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/50/pseudoclock-wait_delay-is-probably-not"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/50/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "pseudoclock wait_delay is probably not respected", "component": null, "votes": 0, "watches": 1, "content": {"raw": "As per the comment chain in this [pull request](#!/labscript_suite/labscript_devices/pull-requests/50/cicero-opal-kelly-xem3001-pseudoclock/diff#comment-77422362) over on the labscript_devices repository, I suspect that the `wait_delay` attribute of secondary pseudoclocks is not being respected, and thus the master pseudoclock may not wait a sufficient time before emitting a trigger pulse to resume the shot.\r\n\r\nThis would result in secondary pseudoclocks becoming out of sync with the primary, which may explain the occasional dropped shots seen in the monash spinor BEC lab.\r\n\r\nWe should check to see if it is easy to fix in labscript 2, or if we need to wait until labscript 3 in order to correctly offset instruction times for secondary pseudoclocks.", "markup": "markdown", "html": "<p>As per the comment chain in this <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/50/cicero-opal-kelly-xem3001-pseudoclock/diff#comment-77422362\" rel=\"nofollow\">pull request</a> over on the labscript_devices repository, I suspect that the <code>wait_delay</code> attribute of secondary pseudoclocks is not being respected, and thus the master pseudoclock may not wait a sufficient time before emitting a trigger pulse to resume the shot.</p>\n<p>This would result in secondary pseudoclocks becoming out of sync with the primary, which may explain the occasional dropped shots seen in the monash spinor BEC lab.</p>\n<p>We should check to see if it is easy to fix in labscript 2, or if we need to wait until labscript 3 in order to correctly offset instruction times for secondary pseudoclocks.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-10-30T04:44:22.020913+00:00", "milestone": null, "updated_on": "2018-10-30T04:44:22.020913+00:00", "type": "issue", "id": 50}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/51/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/51.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/51/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/51/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/51/recent-gatedclocks-bugfix-merge-breaks-at"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/51/vote"}}, "reporter": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "title": "Recent GatedClocks-bugfix merge breaks (at least) Novatech DDS9m timing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Marked as critical because it\u2019s in mainline and a timing issue in hardware many of us use.\r\n\r\nI initially reported this as [labscript\\_devices issue #35](#!/labscript_suite/labscript_devices/issues/35/novatech-dds9m-digital-gate-being) thinking it was Novatech DDS9m specific\u2026\r\n\r\n\u2026\r\n\r\nSo I reverted to `05cf8b9676a9`, removing the GatedClocks-bugfix merge.\r\n\r\nThen all is well!\r\n\r\nShots compile. And better, they run and produce nice fluoroscence images!\r\n\r\nAnd indeed @Philip Starkey 's commit `b74958231436` does seem to edit code in and around this error message\u2026\r\n\r\nSee closed issue linked above for details\u2026", "markup": "markdown", "html": "<p>Marked as critical because it\u2019s in mainline and a timing issue in hardware many of us use.</p>\n<p>I initially reported this as <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/issues/35/novatech-dds9m-digital-gate-being\" rel=\"nofollow\">labscript_devices issue #35</a> thinking it was Novatech DDS9m specific\u2026</p>\n<p>\u2026</p>\n<p>So I reverted to <code>05cf8b9676a9</code>, removing the GatedClocks-bugfix merge.</p>\n<p>Then all is well!</p>\n<p>Shots compile. And better, they run and produce nice fluoroscence images!</p>\n<p>And indeed @Philip Starkey 's commit <code>b74958231436</code> does seem to edit code in and around this error message\u2026</p>\n<p>See closed issue linked above for details\u2026</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-06-25T06:38:54.735363+00:00", "milestone": null, "updated_on": "2019-11-30T00:40:17.812997+00:00", "type": "issue", "id": 51}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/52/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/52.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/52/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/52/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/52/redefinition-of-digital-outputs-at-least"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/52/vote"}}, "reporter": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "title": "Redefinition of digital outputs (at least) is silent", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We unintentionally had in our connection table:\r\n\r\n```\r\nDigitalOut('Bq_cap_charge', ni_pcie_6363_0, \u2018port0/line11\u2019)\r\n```\r\n\r\nand later in the connection table\r\n\r\n```\r\nDigitalOut('lf_amp_shutdown', ni_pcie_6363_0, \u2018port0/line11\u2019)\r\n```\r\n\r\nWe edited the Bq\\_cap\\_charge line to give it another name, and this made the BLACS tab button change labels from Bq\\_cap\\_charge to lf\\_amp\\_shutdown. \r\n\r\nThis smells like a dict-keys ordering issue where adding new DOs with the same port/line just adds keys to a dict and it is fairly arbitrary what key gets displayed in BLACS\u2026?\r\n\r\nPresumably the fix should be an error, or at least a warning, if the line is already attached to a label?", "markup": "markdown", "html": "<p>We unintentionally had in our connection table:</p>\n<div class=\"codehilite\"><pre><span></span>DigitalOut(&#39;Bq_cap_charge&#39;, ni_pcie_6363_0, \u2018port0/line11\u2019)\n</pre></div>\n\n\n<p>and later in the connection table</p>\n<div class=\"codehilite\"><pre><span></span>DigitalOut(&#39;lf_amp_shutdown&#39;, ni_pcie_6363_0, \u2018port0/line11\u2019)\n</pre></div>\n\n\n<p>We edited the Bq_cap_charge line to give it another name, and this made the BLACS tab button change labels from Bq_cap_charge to lf_amp_shutdown. </p>\n<p>This smells like a dict-keys ordering issue where adding new DOs with the same port/line just adds keys to a dict and it is fairly arbitrary what key gets displayed in BLACS\u2026?</p>\n<p>Presumably the fix should be an error, or at least a warning, if the line is already attached to a label?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-07-11T00:39:13.184156+00:00", "milestone": null, "updated_on": "2019-07-11T02:17:37.751818+00:00", "type": "issue", "id": 52}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/53/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/53.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/53/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/53/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/53/pseudoclock-clockline-collision"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/53/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Pseudoclock/clockline collision", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The other project in my lab has encountered a strange issue that produces the following traceback during compilation.\r\n\r\n![](data/bitbucket.org/repo/g75Ex9/images/888255601-image_2.png)\r\nI don\u2019t really understand the error message at all. Why is the clock limitation of our slow clockline being applied to updates of the master pseudoclock? Am I just reading that wrong.\r\n\r\nAnyway, doing some digging we found the offending portion of the script to be\r\n\r\n```python\r\n    ### note t=0.8047 here ###\r\n    Shutter_MOT.go_high(t)\r\n    Shutter_Repump.go_high(t)\r\n\r\n    MOT_BN.setfreq(t,91.7*MHz) #65.8+(266)/16+157/16 #Tuned by looking at imaging\r\n    REP_BN.setfreq(t,83.8*MHz) #Use Horizontal Repumping beam (along xhat (table) (that is, the y coil in Blacs)) to pump 1-1'.\r\n    zCoil.constant(t,value = -0.35) #-.365 #SET FIELD Vertical for opt Pump\r\n    xCoil.constant(t, value = -0.02) #-0.02\r\n    yCoil.constant(t, value = -1.5) #0.25\r\n    print(\"there: \", t)\r\n    #xCoil.constant(t,value = bx_sweep)\r\n    #yCoil.constant(t,value = by_sweep)\r\n    #zCoil.constant(t,value = bz_sweep)\r\n    \r\n    t +=2.011e-3 #Coils update.\r\n    #Keep this short, so that don't get too much extra pumping.\r\n    #Turn on light to Pump to F=1\r\n\r\n    MOT_AOM_Switch.go_high(t)\r\n    Rep_AOM_Switch.go_high(t)\r\n    t += 0.10e-3\r\n    Rep_AOM_Switch.go_low(t)\r\n\r\n    t+= 0.3e-3\r\n    MOT_AOM_Switch.go_low(t)\r\n    \r\n   #Blow away\r\n    MOT_BN.setfreq(t,65.5*MHz)\r\n    t+=0.2e-3\r\n    MOT_AOM_Switch.go_high(t)\r\n    t+=0.7e-3\r\n    MOT_AOM_Switch.go_low(t)\r\n    \r\n    MOT_BN.setfreq(t,30*MHz)\r\n    REP_BN.setfreq(t,30*MHz)\r\n    MOT_AOM_Switch.go_low(t)\r\n    \r\n    t += 0.15e-3\r\n    Shutter_MOT.go_low(t)\r\n```\r\n\r\nIf the time in line 14 is set to <=2.01ms the error occurs. The relevant devices are the analog outputs on a fast clocked NI-6733, direct digital outputs of the pulseblaster, and DDS updates from a Novatech 409B-AC on a slow clockline in asynchronous mode. The slow clockline only goes to novatechs and the fast clockline goes to NI-DAQs.\r\n\r\nUsing runviewer we can look at the clocklines as this time is decreased up to this limit. \r\n\r\n![](data/bitbucket.org/repo/g75Ex9/images/550794617-image_1.png)\r\nThis raises a few questions: Why are the fast and slow clocklines identical? What exactly is updating at 804.8 ms? Why does the timing of instructions happening after the offending one matter?\r\n\r\n I don\u2019t spend as much time on this experiment so I\u2019m not intimately familiar with their script, but I believe it is configured correctly. Two of the corresponding shots to those shown in runviewer are attached \\(accidentally grabbed an error shot as well, T170000\\).\r\n\r\nHelp diagnosing \\(and hopefully fixing this\\) would be appreciated.", "markup": "markdown", "html": "<p>The other project in my lab has encountered a strange issue that produces the following traceback during compilation.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/g75Ex9/images/888255601-image_2.png\" />\nI don\u2019t really understand the error message at all. Why is the clock limitation of our slow clockline being applied to updates of the master pseudoclock? Am I just reading that wrong.</p>\n<p>Anyway, doing some digging we found the offending portion of the script to be</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"c1\">### note t=0.8047 here ###</span>\n    <span class=\"n\">Shutter_MOT</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">Shutter_Repump</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n    <span class=\"n\">MOT_BN</span><span class=\"o\">.</span><span class=\"n\">setfreq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">91.7</span><span class=\"o\">*</span><span class=\"n\">MHz</span><span class=\"p\">)</span> <span class=\"c1\">#65.8+(266)/16+157/16 #Tuned by looking at imaging</span>\n    <span class=\"n\">REP_BN</span><span class=\"o\">.</span><span class=\"n\">setfreq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">83.8</span><span class=\"o\">*</span><span class=\"n\">MHz</span><span class=\"p\">)</span> <span class=\"c1\">#Use Horizontal Repumping beam (along xhat (table) (that is, the y coil in Blacs)) to pump 1-1&#39;.</span>\n    <span class=\"n\">zCoil</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.35</span><span class=\"p\">)</span> <span class=\"c1\">#-.365 #SET FIELD Vertical for opt Pump</span>\n    <span class=\"n\">xCoil</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.02</span><span class=\"p\">)</span> <span class=\"c1\">#-0.02</span>\n    <span class=\"n\">yCoil</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1.5</span><span class=\"p\">)</span> <span class=\"c1\">#0.25</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;there: &quot;</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"c1\">#xCoil.constant(t,value = bx_sweep)</span>\n    <span class=\"c1\">#yCoil.constant(t,value = by_sweep)</span>\n    <span class=\"c1\">#zCoil.constant(t,value = bz_sweep)</span>\n\n    <span class=\"n\">t</span> <span class=\"o\">+=</span><span class=\"mf\">2.011e-3</span> <span class=\"c1\">#Coils update.</span>\n    <span class=\"c1\">#Keep this short, so that don&#39;t get too much extra pumping.</span>\n    <span class=\"c1\">#Turn on light to Pump to F=1</span>\n\n    <span class=\"n\">MOT_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">Rep_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">0.10e-3</span>\n    <span class=\"n\">Rep_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n    <span class=\"n\">t</span><span class=\"o\">+=</span> <span class=\"mf\">0.3e-3</span>\n    <span class=\"n\">MOT_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n   <span class=\"c1\">#Blow away</span>\n    <span class=\"n\">MOT_BN</span><span class=\"o\">.</span><span class=\"n\">setfreq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">65.5</span><span class=\"o\">*</span><span class=\"n\">MHz</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span><span class=\"o\">+=</span><span class=\"mf\">0.2e-3</span>\n    <span class=\"n\">MOT_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span><span class=\"o\">+=</span><span class=\"mf\">0.7e-3</span>\n    <span class=\"n\">MOT_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n    <span class=\"n\">MOT_BN</span><span class=\"o\">.</span><span class=\"n\">setfreq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"o\">*</span><span class=\"n\">MHz</span><span class=\"p\">)</span>\n    <span class=\"n\">REP_BN</span><span class=\"o\">.</span><span class=\"n\">setfreq</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"o\">*</span><span class=\"n\">MHz</span><span class=\"p\">)</span>\n    <span class=\"n\">MOT_AOM_Switch</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">0.15e-3</span>\n    <span class=\"n\">Shutter_MOT</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>If the time in line 14 is set to &lt;=2.01ms the error occurs. The relevant devices are the analog outputs on a fast clocked NI-6733, direct digital outputs of the pulseblaster, and DDS updates from a Novatech 409B-AC on a slow clockline in asynchronous mode. The slow clockline only goes to novatechs and the fast clockline goes to NI-DAQs.</p>\n<p>Using runviewer we can look at the clocklines as this time is decreased up to this limit. </p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/g75Ex9/images/550794617-image_1.png\" />\nThis raises a few questions: Why are the fast and slow clocklines identical? What exactly is updating at 804.8 ms? Why does the timing of instructions happening after the offending one matter?</p>\n<p>I don\u2019t spend as much time on this experiment so I\u2019m not intimately familiar with their script, but I believe it is configured correctly. Two of the corresponding shots to those shown in runviewer are attached (accidentally grabbed an error shot as well, T170000).</p>\n<p>Help diagnosing (and hopefully fixing this) would be appreciated.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-07-27T14:36:17.069766+00:00", "milestone": null, "updated_on": "2019-08-02T05:48:13.011534+00:00", "type": "issue", "id": 53}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript/issues/54/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/issues/54.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/54/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript/issues/54/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript/issues/54/ability-to-define-duration-of-a-constant"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/issues/54/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Ability to define duration of a constant instruction", "component": null, "votes": 0, "watches": 1, "content": {"raw": "An issue that wasted a lot of time for someone here is that they intended to set an output to a value for some amount of time, but it turned out that a function being called later in the script was setting the same output to some other value \"in advance\", something like:\r\n\r\n```python\r\ndef stage_1(t, duration):\r\n    output.constant(t, value)\r\n    return duration\r\n\r\ndef stage_2(t, duration):\r\n    output.constant(t - offset, some_other_value)\r\n    return duration\r\n\r\nstart()\r\nt = 0\r\nt += stage_1(t, duration_1)\r\nt += stage_2(t, duration_2)\r\nstop(t)\r\n```\r\n\r\nIdeally one would be able to specify a duration to the `.constant()` method in `stage_1()` so that any instructions to the same output within some duration will result in a compile time error.\r\n\r\nAlso, a ramp instruction should be able to have a duration provided that exceeds the actual ramping duration, so that the final value being held as a constant can also be guaranteed by the compiler not be be cut short of some desired length of time.\r\n\r\nNot sure how easy this will be to add to labscript as is, so whilst anyone should feel free to hack it in if they want, I'll try to include it in labscript 3.", "markup": "markdown", "html": "<p>An issue that wasted a lot of time for someone here is that they intended to set an output to a value for some amount of time, but it turned out that a function being called later in the script was setting the same output to some other value \"in advance\", something like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">stage_1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">duration</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">stage_2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">some_other_value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">duration</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">stage_1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration_1</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">stage_2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration_2</span><span class=\"p\">)</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Ideally one would be able to specify a duration to the <code>.constant()</code> method in <code>stage_1()</code> so that any instructions to the same output within some duration will result in a compile time error.</p>\n<p>Also, a ramp instruction should be able to have a duration provided that exceeds the actual ramping duration, so that the final value being held as a constant can also be guaranteed by the compiler not be be cut short of some desired length of time.</p>\n<p>Not sure how easy this will be to add to labscript as is, so whilst anyone should feel free to hack it in if they want, I'll try to include it in labscript 3.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-10-25T17:01:05.930979+00:00", "milestone": null, "updated_on": "2019-10-25T17:08:34.649059+00:00", "type": "issue", "id": 54}], "page": 1, "size": 54}