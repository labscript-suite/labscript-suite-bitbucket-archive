{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10/comments/39036920.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10/_/diff#comment-39036920"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10"}}, "title": "Added basis for runviewer marker functionality"}, "content": {"raw": "I agree a device is the wrong place. It's nice for the rest of the code to be able to assume that most devices have parent devices, and that if they don't they are pseudoclocks, etc. It feels like making this feature a device would be abusing devices in place of a more general plugin/extension system. If the ability to turn features on and off (because not everybody wants them or they conflict with each other or whatever) is what's desired, then there should be an 'extensions' group in the HDF5 file in which each extension would have free-reign over a subgroup. For example, this is probably what will happen to the mercurial info saving code.\n\nHowever, I think this ought to be considered core functionality and not disableable, so I think it's fine if it gets a group at the top level of the HDF5 file. I would probably say it shouldn't be considered runviewer specific either - there should just be a toplevel group called something like \"time_markers\". And yes, it should be a dataset rather than attributes. See the \"waits\" table for an example of a dataset that includes both numbers and string names. A dataset with named columns is just as friendly to backward-compatible future modifications as a dictionary, since you can add a named column to the dataset and properly written code reading the dataset by column names will not break. \n\nOne reason I'm inclined to argue it should be core is that I'm planning on merging/reimplementing the Spielman fork's progress bar in BLACS that shows the progress of the experiment as it runs. This progress bar could use the time markers to tell you approximately what stage the experiment was up to.\n\nOne quibble about the code - I don't think \"markers\" should be added to the builtins dict. It's a mistake that we use builtins in the way we do, we should instead make a module object (from which you can `import *` to get the current behaviour) to contain the things we are putting in builtins, so whilst that change will come at some point, we shouldn't add to it!\n\nInstead, the markers dictionary should be an attribute to the global object `compiler` in the `labscript` module. Also if it's going to live at the top level and be possibly used by more than just runviewer, \"time_markers\" is a less ambiguous name:\n\n\n```\n#!python\n\nclass compiler:\n    ...\n    time_markers = {}\n\n...\ndef labscript_cleanup():\n    ...\n    compiler.time_markers = {}\n\ndef save_time_markers(hdf5_file):\n    ...\n    time_markers = compiler.time_markers\n    # Put them in a dataset\n\n```\n\nEven though the colours seem specific to runviewer - I could use them in the progress bar too! Then the colour of the bar would change to indicate the stage of the experiment, with the same colours your brain will have internalised from looking at runviewer.\n\nI'm not going to get much time to look at labsscript development stuff for the next week, and then I'm going to vanish for 3 weeks and not look at it at all, so I won't get much of a chance to look at or debate anything about this feature. So Phil, you should go ahead with this without my input, I'm happy to defer to Phil on how things should work on the runviewer side, and as for labscript my vote is: basically the same as what you've got now with minor changes:\n\n- Dataset in a top level group of the HDF5 file.\n\n- Named \"time_markers\" or something similarly slightly less ambiguous than just \"markers\n\n- Not a device or other extension: baked into labscript in exactly the way you've done it except to store the `markers` dictionary (renamed `time_markers` perhaps) in the `compiler` object rather than in builtins.\n\nThe Spielman labs use a function decorator to mark stages of the experiment - I think it's good way of doing things but it should be a wrapper around what you're doing rather than the only way of doing things, I think. So I might make a pull request to include this decorator if it looks sensible after this feature is otherwise complete.", "markup": "markdown", "html": "<p>I agree a device is the wrong place. It's nice for the rest of the code to be able to assume that most devices have parent devices, and that if they don't they are pseudoclocks, etc. It feels like making this feature a device would be abusing devices in place of a more general plugin/extension system. If the ability to turn features on and off (because not everybody wants them or they conflict with each other or whatever) is what's desired, then there should be an 'extensions' group in the HDF5 file in which each extension would have free-reign over a subgroup. For example, this is probably what will happen to the mercurial info saving code.</p>\n<p>However, I think this ought to be considered core functionality and not disableable, so I think it's fine if it gets a group at the top level of the HDF5 file. I would probably say it shouldn't be considered runviewer specific either - there should just be a toplevel group called something like \"time_markers\". And yes, it should be a dataset rather than attributes. See the \"waits\" table for an example of a dataset that includes both numbers and string names. A dataset with named columns is just as friendly to backward-compatible future modifications as a dictionary, since you can add a named column to the dataset and properly written code reading the dataset by column names will not break. </p>\n<p>One reason I'm inclined to argue it should be core is that I'm planning on merging/reimplementing the Spielman fork's progress bar in BLACS that shows the progress of the experiment as it runs. This progress bar could use the time markers to tell you approximately what stage the experiment was up to.</p>\n<p>One quibble about the code - I don't think \"markers\" should be added to the builtins dict. It's a mistake that we use builtins in the way we do, we should instead make a module object (from which you can <code>import *</code> to get the current behaviour) to contain the things we are putting in builtins, so whilst that change will come at some point, we shouldn't add to it!</p>\n<p>Instead, the markers dictionary should be an attribute to the global object <code>compiler</code> in the <code>labscript</code> module. Also if it's going to live at the top level and be possibly used by more than just runviewer, \"time_markers\" is a less ambiguous name:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">compiler</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">time_markers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"o\">...</span>\n<span class=\"k\">def</span> <span class=\"nf\">labscript_cleanup</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">time_markers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_time_markers</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">time_markers</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">time_markers</span>\n    <span class=\"c1\"># Put them in a dataset</span>\n</pre></div>\n\n\n<p>Even though the colours seem specific to runviewer - I could use them in the progress bar too! Then the colour of the bar would change to indicate the stage of the experiment, with the same colours your brain will have internalised from looking at runviewer.</p>\n<p>I'm not going to get much time to look at labsscript development stuff for the next week, and then I'm going to vanish for 3 weeks and not look at it at all, so I won't get much of a chance to look at or debate anything about this feature. So Phil, you should go ahead with this without my input, I'm happy to defer to Phil on how things should work on the runviewer side, and as for labscript my vote is: basically the same as what you've got now with minor changes:</p>\n<ul>\n<li>\n<p>Dataset in a top level group of the HDF5 file.</p>\n</li>\n<li>\n<p>Named \"time_markers\" or something similarly slightly less ambiguous than just \"markers</p>\n</li>\n<li>\n<p>Not a device or other extension: baked into labscript in exactly the way you've done it except to store the <code>markers</code> dictionary (renamed <code>time_markers</code> perhaps) in the <code>compiler</code> object rather than in builtins.</p>\n</li>\n</ul>\n<p>The Spielman labs use a function decorator to mark stages of the experiment - I think it's good way of doing things but it should be a wrapper around what you're doing rather than the only way of doing things, I think. So I might make a pull request to include this decorator if it looks sensible after this feature is otherwise complete.</p>", "type": "rendered"}, "created_on": "2017-06-18T18:52:45.589099+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-18T18:52:45.591532+00:00", "type": "pullrequest_comment", "id": 39036920}