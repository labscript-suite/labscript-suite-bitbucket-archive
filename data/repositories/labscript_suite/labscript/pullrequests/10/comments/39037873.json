{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10/comments/39037873.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10/_/diff#comment-39037873"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10"}}, "title": "Added basis for runviewer marker functionality"}, "content": {"raw": "We should think about this more.  A marker is a type of event that occurs at a time, as are all other elements in labscript as a scripted control language.\n\nThe simple proposal of having runmanager have markers matches that, but as Chris points out, my suggestion of making this a device begs the question of \"what defines time\", but the following discussion manages to avoid that question.  It should faced head on.\n\nSo regarding the progress bar, right now that is a little visual aid that lets us know where we are in the shot, and the time is \"rough\" at best.  I have wanted for some time a software \"time\" device that starts whenever the master pseudoclock starts, and to the extent possible keeps sync even with waits.  With this, we can have an honest progress bar that responds to events sent out by this \"device.\"   I had not intended to bring up this at this point, but here it is.  \n\nIn this world, the software time-device sends out events at specific times in the script (defined ) that any listeners can respond to.  This allows for generic software actions to take place in response to events.  Run manager would naturally display these events, and of course the progress bar could also get colored from them.  This would still be linked to a pseudoclock, to at minimum emit a \"start\" event to the software clock  the proposed syntax could be like\n\n```\n#!python\n\n# Master pseudoclock\nPulseBlaster_SP2_24_100_32k('pulseblaster_0', programming_scheme='pb_stop_programming/STOP')\n\n# Initialize a sotware clock \u201cdevice\u201d.\n\nSoftClock(name='SoftwareClock', \n\tparent_device=pulseblaster_0.direct_outputs, \n\tconnection='zmq_events'\n\t)\n\n# Trivial script\nstart()\nt=0\nSoftClock.AddEvent(t, \"AwesomeMarker\", opts={'runmanager_color':'Red'})\nstop()\n```\nso my feeling with this small-seeming proposal is that it is a very natural part of a software clock that is desirable for things like adding timing to devices that can only do static outputs, but that can still be software-updated in shot.  One way to to is to make every pseudoclock class always have as part of itself such a soft-clock rather than introducing a new one, then we would have the syntax\n\n```\n#!python\n\n# Master pseudoclock\nPulseBlaster_SP2_24_100_32k('pulseblaster_0', programming_scheme='pb_stop_programming/STOP')\n\n# Trivial script\nstart()\nt=0\npulseblaster_0.AddEvent(t, \"AwesomeMarker\", opts={'runmanager_color':'Red'})\nstop()\n```\nI rather like this second solution since there are no new devices classes, and it has a syntax similar to what PhyNerd initially proposed, and it also solves Chris's issues since it _will_ be the pseudo-clock.\n\nAn initial version of this could use the code that already exists but move it into the pseudoclock ancestor class and have the current dictionary saved as an attributed to that device.  Since that device is the one defining the time that is being referenced it makes sense, much more sense that at the base level of the h5 file.\n", "markup": "markdown", "html": "<p>We should think about this more.  A marker is a type of event that occurs at a time, as are all other elements in labscript as a scripted control language.</p>\n<p>The simple proposal of having runmanager have markers matches that, but as Chris points out, my suggestion of making this a device begs the question of \"what defines time\", but the following discussion manages to avoid that question.  It should faced head on.</p>\n<p>So regarding the progress bar, right now that is a little visual aid that lets us know where we are in the shot, and the time is \"rough\" at best.  I have wanted for some time a software \"time\" device that starts whenever the master pseudoclock starts, and to the extent possible keeps sync even with waits.  With this, we can have an honest progress bar that responds to events sent out by this \"device.\"   I had not intended to bring up this at this point, but here it is.  </p>\n<p>In this world, the software time-device sends out events at specific times in the script (defined ) that any listeners can respond to.  This allows for generic software actions to take place in response to events.  Run manager would naturally display these events, and of course the progress bar could also get colored from them.  This would still be linked to a pseudoclock, to at minimum emit a \"start\" event to the software clock  the proposed syntax could be like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Master pseudoclock</span>\n<span class=\"n\">PulseBlaster_SP2_24_100_32k</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">programming_scheme</span><span class=\"o\">=</span><span class=\"s1\">&#39;pb_stop_programming/STOP&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initialize a sotware clock \u201cdevice\u201d.</span>\n\n<span class=\"n\">SoftClock</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;SoftwareClock&#39;</span><span class=\"p\">,</span> \n    <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span> \n    <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;zmq_events&#39;</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># Trivial script</span>\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"n\">SoftClock</span><span class=\"o\">.</span><span class=\"n\">AddEvent</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AwesomeMarker&quot;</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;runmanager_color&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;Red&#39;</span><span class=\"p\">})</span>\n<span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>so my feeling with this small-seeming proposal is that it is a very natural part of a software clock that is desirable for things like adding timing to devices that can only do static outputs, but that can still be software-updated in shot.  One way to to is to make every pseudoclock class always have as part of itself such a soft-clock rather than introducing a new one, then we would have the syntax</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Master pseudoclock</span>\n<span class=\"n\">PulseBlaster_SP2_24_100_32k</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster_0&#39;</span><span class=\"p\">,</span> <span class=\"n\">programming_scheme</span><span class=\"o\">=</span><span class=\"s1\">&#39;pb_stop_programming/STOP&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Trivial script</span>\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">AddEvent</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s2\">&quot;AwesomeMarker&quot;</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;runmanager_color&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;Red&#39;</span><span class=\"p\">})</span>\n<span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>I rather like this second solution since there are no new devices classes, and it has a syntax similar to what PhyNerd initially proposed, and it also solves Chris's issues since it <em>will</em> be the pseudo-clock.</p>\n<p>An initial version of this could use the code that already exists but move it into the pseudoclock ancestor class and have the current dictionary saved as an attributed to that device.  Since that device is the one defining the time that is being referenced it makes sense, much more sense that at the base level of the h5 file.</p>", "type": "rendered"}, "created_on": "2017-06-18T21:20:50.981296+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2017-06-18T21:27:47.737702+00:00", "type": "pullrequest_comment", "id": 39037873}