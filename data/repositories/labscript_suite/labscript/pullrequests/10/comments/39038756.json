{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10/comments/39038756.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10/_/diff#comment-39038756"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 10, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/10.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/10"}}, "title": "Added basis for runviewer marker functionality"}, "content": {"raw": "Well, if labscript already has a sense of labscript time that differs from the time maintained by the master pseudoclock (confusing to me), then I think that should be made explicit rather than totally hidden as it is now.  In this case I suggest introducing a new core-language class called LabScriptTime that will behave as follows:\n\n```\n# Trivial script\nstart()\nt=LabScriptTime(0)\nt += 4\nt.add_marker(\"AwesomeMarker\", opts={'runmanager_color':'Red'})\nstop()\n\n#\n# Or even have start return an object of type LabScriptTime which would look like\n#\n\nt=start()\nt += 4\nt.add_marker(\"AwesomeMarker\", opts={'runmanager_color':'Red'})\nstop()\n```\n\nsuch an object would define all behavior for += and so forth to maintain the behavior of current scripts that expect a number to be passed.  This has some flaws in implementation, for example somebody might set t = 5, which would change t into a number.", "markup": "markdown", "html": "<p>Well, if labscript already has a sense of labscript time that differs from the time maintained by the master pseudoclock (confusing to me), then I think that should be made explicit rather than totally hidden as it is now.  In this case I suggest introducing a new core-language class called LabScriptTime that will behave as follows:</p>\n<div class=\"codehilite\"><pre><span></span># Trivial script\nstart()\nt=LabScriptTime(0)\nt += 4\nt.add_marker(&quot;AwesomeMarker&quot;, opts={&#39;runmanager_color&#39;:&#39;Red&#39;})\nstop()\n\n#\n# Or even have start return an object of type LabScriptTime which would look like\n#\n\nt=start()\nt += 4\nt.add_marker(&quot;AwesomeMarker&quot;, opts={&#39;runmanager_color&#39;:&#39;Red&#39;})\nstop()\n</pre></div>\n\n\n<p>such an object would define all behavior for += and so forth to maintain the behavior of current scripts that expect a number to be passed.  This has some flaws in implementation, for example somebody might set t = 5, which would change t into a number.</p>", "type": "rendered"}, "created_on": "2017-06-18T23:26:45.888745+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2017-06-18T23:27:30.863334+00:00", "type": "pullrequest_comment", "id": 39038756}