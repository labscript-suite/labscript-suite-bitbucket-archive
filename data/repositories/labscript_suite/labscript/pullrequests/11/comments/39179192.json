{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39179192.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39179192"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I see.  The problem you have identified is that the steps in the ramp are made non-uniform by the injection of the updated to some other channel in the middle of a ramp.  I think that this solution is really hitting a special case of this category of problems.  For example, try making a ramp from t1 to t3 with some step size, then request a second ramp from t2 in (t1, t3) with different step sizes and you will see that the resulting two ramps will share the same step size starting when the second ramp starts.  For this reason I think:\n\n* Since this was a problem for you it should be fixed.\n\n* Since it is a problem that extends past the case that you specifically solved we need to consider if a special-case patch is really the right way to go.  The ramp case is more tricky because ramps are implemented using loops in the pseudoclock's language and to have two update rates requires nested loops, or possibly just more complex pulse sequences in a single-depth loop.  The problem arrises when the two outputs request clocks that are fairly incommensurate.  If one can tolerate updates that are _nearly_ synchronous with the desired update interval, and are on-average what you requested, then there is a good algorithm to solve this problem.", "markup": "markdown", "html": "<p>I see.  The problem you have identified is that the steps in the ramp are made non-uniform by the injection of the updated to some other channel in the middle of a ramp.  I think that this solution is really hitting a special case of this category of problems.  For example, try making a ramp from t1 to t3 with some step size, then request a second ramp from t2 in (t1, t3) with different step sizes and you will see that the resulting two ramps will share the same step size starting when the second ramp starts.  For this reason I think:</p>\n<ul>\n<li>\n<p>Since this was a problem for you it should be fixed.</p>\n</li>\n<li>\n<p>Since it is a problem that extends past the case that you specifically solved we need to consider if a special-case patch is really the right way to go.  The ramp case is more tricky because ramps are implemented using loops in the pseudoclock's language and to have two update rates requires nested loops, or possibly just more complex pulse sequences in a single-depth loop.  The problem arrises when the two outputs request clocks that are fairly incommensurate.  If one can tolerate updates that are <em>nearly</em> synchronous with the desired update interval, and are on-average what you requested, then there is a good algorithm to solve this problem.</p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2017-06-20T13:23:22.761076+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2017-06-20T13:24:22.870407+00:00", "type": "pullrequest_comment", "id": 39179192}