{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39232059.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39232059"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Hi @ReneKolb,\n\nSimilar to Chris, I increased the sample rate to 695kHz (note labscript throws an error if you set it to 700kHz because it rounds up to the nearest multiple of the pseudoclock frequency, which is 704 kHz in this case). You can see the runviewer image below:\n\n![runviewer_1.png](data/bitbucket.org/repo/g75Ex9/images/3385203212-runviewer_1.png)\n\nHere, you'll notice that the length of the step immediately preceding the digital channel is longer, because an additional clock tick in there would breach the maximum sample rate of the NI card. The ramp is broken internally into two ramps by [these lines in labscript.py](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-497). The check to see if an additional clock tick can fit in at the end of the ramp is [here](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-667), with the condition that the rate doesn't break the [lowest of all the `clockline.clock_limit`](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-643) in use in the first of the two ramps. In this case, the `clock_limit` is set to `700e3` by the [NI card](#!/labscript_suite/labscript_devices/src/dc4c60911bc3a6594fb7296fd45a0db72ff7048c/NI_PCI_6733.py?at=default&fileviewer=file-view-default#NI_PCI_6733.py-28) although it should be noted that if you don't have that `clock_limit` attribute set as a **class attribute** of your NI card (or similar) device, then the clockline will use the pseudoclock's clock limit (which may be too fast, but that's what happens if it doesn't get defined in the class prior to instantiation of the NI card). \n\nSo the behaviour should be that it either inserts an extra clock tick prior to the break in the ramp, but the rate of that extra clocktick does not breach the maximum rate the device can handle, or there is a longer pause in time before the break in ramp.\n\nThe fact that you see an error when running the shot, but the example you provide seems to work correctly according to my runmanager, indicates to me that either there is something wrong with the `clock_limit` specification of the device you are actually using, or that there is a rounding error somewhere in our code that is biting you in the specific circumstances of your script (and so is not being replicated by the example). **I'd like to track it down, so if you can provide any more information that would be appreciated!** If you can provide an example script that shows the clockline rate breaking the maximum allowed rate of the devices attached, that would be perfect.\n\nWith regards to your actual patch: We still might want the functionality to do what you have proposed, I can definitely see the merits of it. However I'm reluctant to approve such a large change without a test framework for labscript. Last time I did something like this (when I wrote the gated-clocks implementation) it took weeks to find all of the corner cases. It wasn't such a problem back then because not many people were using labscript, but the number has grown significantly and I don't want to risk introducing bugs for them just because they have a corner case that you/we/ChrisB don't. We might need to hold off a little with merging until we get a test framework in place (which shouldn't be too hard -- I would propose using the runmanager API to verify that the output of all channels (not clocklines) matches what we expect.", "markup": "markdown", "html": "<p>Hi @ReneKolb,</p>\n<p>Similar to Chris, I increased the sample rate to 695kHz (note labscript throws an error if you set it to 700kHz because it rounds up to the nearest multiple of the pseudoclock frequency, which is 704 kHz in this case). You can see the runviewer image below:</p>\n<p><img alt=\"runviewer_1.png\" src=\"data/bitbucket.org/repo/g75Ex9/images/3385203212-runviewer_1.png\" /></p>\n<p>Here, you'll notice that the length of the step immediately preceding the digital channel is longer, because an additional clock tick in there would breach the maximum sample rate of the NI card. The ramp is broken internally into two ramps by <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-497\" rel=\"nofollow\">these lines in labscript.py</a>. The check to see if an additional clock tick can fit in at the end of the ramp is <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-667\" rel=\"nofollow\">here</a>, with the condition that the rate doesn't break the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-643\" rel=\"nofollow\">lowest of all the <code>clockline.clock_limit</code></a> in use in the first of the two ramps. In this case, the <code>clock_limit</code> is set to <code>700e3</code> by the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/src/dc4c60911bc3a6594fb7296fd45a0db72ff7048c/NI_PCI_6733.py?at=default&amp;fileviewer=file-view-default#NI_PCI_6733.py-28\" rel=\"nofollow\">NI card</a> although it should be noted that if you don't have that <code>clock_limit</code> attribute set as a <strong>class attribute</strong> of your NI card (or similar) device, then the clockline will use the pseudoclock's clock limit (which may be too fast, but that's what happens if it doesn't get defined in the class prior to instantiation of the NI card). </p>\n<p>So the behaviour should be that it either inserts an extra clock tick prior to the break in the ramp, but the rate of that extra clocktick does not breach the maximum rate the device can handle, or there is a longer pause in time before the break in ramp.</p>\n<p>The fact that you see an error when running the shot, but the example you provide seems to work correctly according to my runmanager, indicates to me that either there is something wrong with the <code>clock_limit</code> specification of the device you are actually using, or that there is a rounding error somewhere in our code that is biting you in the specific circumstances of your script (and so is not being replicated by the example). <strong>I'd like to track it down, so if you can provide any more information that would be appreciated!</strong> If you can provide an example script that shows the clockline rate breaking the maximum allowed rate of the devices attached, that would be perfect.</p>\n<p>With regards to your actual patch: We still might want the functionality to do what you have proposed, I can definitely see the merits of it. However I'm reluctant to approve such a large change without a test framework for labscript. Last time I did something like this (when I wrote the gated-clocks implementation) it took weeks to find all of the corner cases. It wasn't such a problem back then because not many people were using labscript, but the number has grown significantly and I don't want to risk introducing bugs for them just because they have a corner case that you/we/ChrisB don't. We might need to hold off a little with merging until we get a test framework in place (which shouldn't be too hard -- I would propose using the runmanager API to verify that the output of all channels (not clocklines) matches what we expect.</p>", "type": "rendered"}, "created_on": "2017-06-21T01:57:11.274485+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T02:10:55.709905+00:00", "type": "pullrequest_comment", "id": 39232059}