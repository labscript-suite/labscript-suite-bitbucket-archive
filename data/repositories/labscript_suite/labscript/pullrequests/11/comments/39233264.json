{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233264.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233264"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Ok, I think I've identified the issue. @cbillington You'll want to read this and weigh in\n\nThe issue stems from the fact that we assume that the change_times (when instructions are commanded) are quantised to the pseudoclock's maximum update rate when we calculate whether an extra tick can fit in. However, I don't think we actually ever quantise the position of instructions. We leave this up to the specific implementation of the pseudoclock, and so the behaviour is effectively undefined (I have no idea what pulseblasters do - looks like we leave it up to the pulseblaster firmware. PineBlasters round to the nearest multiple, either up or down I think).\n\nThe result is that the final clock tick of a ramp as described can be made shorter by the quantisation process, and thus it can break everything!\n\nI think we should probably round the times to a multiple of the master pseudoclock's clock_resolution at some point from within labscript.\n\n@ReneKolb Could you let us know what pseudoclock you are using in your lab?\n", "markup": "markdown", "html": "<p>Ok, I think I've identified the issue. @cbillington You'll want to read this and weigh in</p>\n<p>The issue stems from the fact that we assume that the change_times (when instructions are commanded) are quantised to the pseudoclock's maximum update rate when we calculate whether an extra tick can fit in. However, I don't think we actually ever quantise the position of instructions. We leave this up to the specific implementation of the pseudoclock, and so the behaviour is effectively undefined (I have no idea what pulseblasters do - looks like we leave it up to the pulseblaster firmware. PineBlasters round to the nearest multiple, either up or down I think).</p>\n<p>The result is that the final clock tick of a ramp as described can be made shorter by the quantisation process, and thus it can break everything!</p>\n<p>I think we should probably round the times to a multiple of the master pseudoclock's clock_resolution at some point from within labscript.</p>\n<p>@ReneKolb Could you let us know what pseudoclock you are using in your lab?</p>", "type": "rendered"}, "created_on": "2017-06-21T02:44:49.326699+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T02:44:49.340194+00:00", "type": "pullrequest_comment", "id": 39233264}