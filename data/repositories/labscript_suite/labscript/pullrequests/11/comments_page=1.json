{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39096669.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39096669"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Just to clarify, the problem you were having is that when you update a digital line, an extra tick is inserted for an analogue ramp? Is this when the analog and digital output are on the same ClockLine of the same Pseudoclock, or something different?\n\nThe thing is that labscript already splits up ramps when there is an instruction on the same ClockLine mid-ramp so I'm wondering what your solution does differently.\n\nLabscript's current behaviour is that a ramp interrupted by an instruction on another output will be identical to a if you had requested a new ramp at the time the other instructions was inserted, but with the same function used to evaluate both \"sub-ramps\".\n\nCould you provide an example of labscript code that demonstrates the problem? If it's practical, a screenshot of traces on runviewer pointing out the undesired extra ticks or whatnot would be good too.", "markup": "markdown", "html": "<p>Just to clarify, the problem you were having is that when you update a digital line, an extra tick is inserted for an analogue ramp? Is this when the analog and digital output are on the same ClockLine of the same Pseudoclock, or something different?</p>\n<p>The thing is that labscript already splits up ramps when there is an instruction on the same ClockLine mid-ramp so I'm wondering what your solution does differently.</p>\n<p>Labscript's current behaviour is that a ramp interrupted by an instruction on another output will be identical to a if you had requested a new ramp at the time the other instructions was inserted, but with the same function used to evaluate both \"sub-ramps\".</p>\n<p>Could you provide an example of labscript code that demonstrates the problem? If it's practical, a screenshot of traces on runviewer pointing out the undesired extra ticks or whatnot would be good too.</p>", "type": "rendered"}, "created_on": "2017-06-19T15:27:56.287714+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-19T15:51:46.210741+00:00", "type": "pullrequest_comment", "id": 39096669}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39096678.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39096678"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "ReneKolb: What exactly is the current physical behavior when this type of thing is requested without your patch? Since our experiment does this all the time, I am interested to see what the consequences are currently for current scripts.\n\nAlso there are some debug lines in around 615, 1144, 1179, and 1194, 1623, 1629, 1697 and possible elsewhere.  Whatever these were dealing with should be confirmed and then removed.  ", "markup": "markdown", "html": "<p>ReneKolb: What exactly is the current physical behavior when this type of thing is requested without your patch? Since our experiment does this all the time, I am interested to see what the consequences are currently for current scripts.</p>\n<p>Also there are some debug lines in around 615, 1144, 1179, and 1194, 1623, 1629, 1697 and possible elsewhere.  Whatever these were dealing with should be confirmed and then removed.  </p>", "type": "rendered"}, "created_on": "2017-06-19T15:28:00.091912+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2017-06-19T15:39:52.140593+00:00", "type": "pullrequest_comment", "id": 39096678}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39161780.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39161780"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "@ReneKolb @PhyNerd I want to echo the comments above: We really need to see an minimilistic working example (a minimal labscript experiment) that demonstrates the error with the previous labscript version and doesn't demonstrate the error with the suggested patch before we can merge such a large change in.", "markup": "markdown", "html": "<p>@ReneKolb @PhyNerd I want to echo the comments above: We really need to see an minimilistic working example (a minimal labscript experiment) that demonstrates the error with the previous labscript version and doesn't demonstrate the error with the suggested patch before we can merge such a large change in.</p>", "type": "rendered"}, "created_on": "2017-06-20T10:28:17.109083+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-20T10:28:17.150185+00:00", "type": "pullrequest_comment", "id": 39161780}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39168290.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39168290"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "This unwanted behavior occures when the DigitalOut and the ramp are on different clocklines (digital clockline and analog clockline) on the same Pseudoclock. Without this fix labscript adds an additional clock tick on both clocklines at the DigitalOut's change time. It is possible that this additional tick on the analog clockline is too close to a ramp clock tick, so the physical card cannot handle the update rate and the digital Card is limited by the maximum clock\\_limit of the analog card during a ramp. If the clock\\_limit in the analog card is configured correctly, this will result in an LabscriptError.\n\nMy solution only adds a clock tick to the digital clockline and does not add an additional clock tick to the analog clockline, so the ramp is sampled with the appropriate samplerate which is configured in the ramp command.\n\n\u200c\n\nI wrote a demo script, which uses only devices that are implemented in the labscriptsuite (we use differnet ones). In out experiments we use higher sample rates, but the behavior is equivalent :\n\n`from labscript import *`\n\n`from labscript_devices.PulseBlaster_No_DDS import PulseBlaster_No_DDS`\n\n`from labscript_devices.NI_USB_6343 import NI_USB_6343`\n\n`from labscript_devices.NI_PCI_6733 import NI_PCI_6733`\n\n`#Connection Table`\n\n`PulseBlaster_No_DDS( name='pulse_blaster')`\n\n`ClockLine( name='A1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 0')`\n\n`ClockLine( name='D1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 2')`\n\n`DigitalOut( name='pb_flag4', parent_device=pulse_blaster.direct_outputs, connection='flag 4')`\n\n`NI_USB_6343(name=\"dio\", MAX_name=\"dummy\", parent_device=D1_clockline, clock_terminal=\"dummy\")`\n\n`DigitalOut( name='DO00', parent_device=dio, connection='port0/line0')`\n\n`NI_PCI_6733(name=\"ana\", MAX_name=\"dummy2\", parent_device=A1_clockline, clock_terminal=\"dummy2\")`\n\n`AnalogOut(name=\"AO0\", parent_device=ana, connection=\"ao0\")`\n\n`AnalogOut(name=\"AO1\", parent_device=ana, connection=\"ao1\")`\n\n`#Experiment Logic`\n\n`start()`\n\n`t=0.0`\n\n`AO0. ramp(t, duration=0.03, initial=3.0, final=5.0, samplerate=200)`\n\n`DO00. go_high(t+0.01555)`\n\n`t += 0.03`\n\n`t += 0.01`\n\n`stop(t)`\n\n\u200c\n\n\u200c\n\nThe corresponding runviewer output is:\n\n![old_version.png](https://bitbucket.org/repo/g75Ex9/images/2440920928-old_version.png 'old_version.png')\n\nThe output with my solution is:\n\n![new_version.png](https://bitbucket.org/repo/g75Ex9/images/1129694141-new_version.png 'new_version.png')\n\n\u200c\n\nI also removed the debug lines.", "markup": "markdown", "html": "<p>This unwanted behavior occures when the DigitalOut and the ramp are on different clocklines (digital clockline and analog clockline) on the same Pseudoclock. Without this fix labscript adds an additional clock tick on both clocklines at the DigitalOut's change time. It is possible that this additional tick on the analog clockline is too close to a ramp clock tick, so the physical card cannot handle the update rate and the digital Card is limited by the maximum clock_limit of the analog card during a ramp. If the clock_limit in the analog card is configured correctly, this will result in an LabscriptError.</p>\n<p>My solution only adds a clock tick to the digital clockline and does not add an additional clock tick to the analog clockline, so the ramp is sampled with the appropriate samplerate which is configured in the ramp command.</p>\n<p>\u200c</p>\n<p>I wrote a demo script, which uses only devices that are implemented in the labscriptsuite (we use differnet ones). In out experiments we use higher sample rates, but the behavior is equivalent :</p>\n<p><code>from labscript import *</code></p>\n<p><code>from labscript_devices.PulseBlaster_No_DDS import PulseBlaster_No_DDS</code></p>\n<p><code>from labscript_devices.NI_USB_6343 import NI_USB_6343</code></p>\n<p><code>from labscript_devices.NI_PCI_6733 import NI_PCI_6733</code></p>\n<p><code>#Connection Table</code></p>\n<p><code>PulseBlaster_No_DDS( name='pulse_blaster')</code></p>\n<p><code>ClockLine( name='A1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 0')</code></p>\n<p><code>ClockLine( name='D1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 2')</code></p>\n<p><code>DigitalOut( name='pb_flag4', parent_device=pulse_blaster.direct_outputs, connection='flag 4')</code></p>\n<p><code>NI_USB_6343(name=\"dio\", MAX_name=\"dummy\", parent_device=D1_clockline, clock_terminal=\"dummy\")</code></p>\n<p><code>DigitalOut( name='DO00', parent_device=dio, connection='port0/line0')</code></p>\n<p><code>NI_PCI_6733(name=\"ana\", MAX_name=\"dummy2\", parent_device=A1_clockline, clock_terminal=\"dummy2\")</code></p>\n<p><code>AnalogOut(name=\"AO0\", parent_device=ana, connection=\"ao0\")</code></p>\n<p><code>AnalogOut(name=\"AO1\", parent_device=ana, connection=\"ao1\")</code></p>\n<p><code>#Experiment Logic</code></p>\n<p><code>start()</code></p>\n<p><code>t=0.0</code></p>\n<p><code>AO0. ramp(t, duration=0.03, initial=3.0, final=5.0, samplerate=200)</code></p>\n<p><code>DO00. go_high(t+0.01555)</code></p>\n<p><code>t += 0.03</code></p>\n<p><code>t += 0.01</code></p>\n<p><code>stop(t)</code></p>\n<p>\u200c</p>\n<p>\u200c</p>\n<p>The corresponding runviewer output is:</p>\n<p><img alt=\"old_version.png\" src=\"data/bitbucket.org/repo/g75Ex9/images/2440920928-old_version.png\" title=\"old_version.png\" /></p>\n<p>The output with my solution is:</p>\n<p><img alt=\"new_version.png\" src=\"data/bitbucket.org/repo/g75Ex9/images/1129694141-new_version.png\" title=\"new_version.png\" /></p>\n<p>\u200c</p>\n<p>I also removed the debug lines.</p>", "type": "rendered"}, "created_on": "2017-06-20T11:44:10.142198+00:00", "user": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "updated_on": "2017-06-20T11:55:32.654068+00:00", "type": "pullrequest_comment", "id": 39168290}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39179192.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39179192"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I see.  The problem you have identified is that the steps in the ramp are made non-uniform by the injection of the updated to some other channel in the middle of a ramp.  I think that this solution is really hitting a special case of this category of problems.  For example, try making a ramp from t1 to t3 with some step size, then request a second ramp from t2 in (t1, t3) with different step sizes and you will see that the resulting two ramps will share the same step size starting when the second ramp starts.  For this reason I think:\n\n* Since this was a problem for you it should be fixed.\n\n* Since it is a problem that extends past the case that you specifically solved we need to consider if a special-case patch is really the right way to go.  The ramp case is more tricky because ramps are implemented using loops in the pseudoclock's language and to have two update rates requires nested loops, or possibly just more complex pulse sequences in a single-depth loop.  The problem arrises when the two outputs request clocks that are fairly incommensurate.  If one can tolerate updates that are _nearly_ synchronous with the desired update interval, and are on-average what you requested, then there is a good algorithm to solve this problem.", "markup": "markdown", "html": "<p>I see.  The problem you have identified is that the steps in the ramp are made non-uniform by the injection of the updated to some other channel in the middle of a ramp.  I think that this solution is really hitting a special case of this category of problems.  For example, try making a ramp from t1 to t3 with some step size, then request a second ramp from t2 in (t1, t3) with different step sizes and you will see that the resulting two ramps will share the same step size starting when the second ramp starts.  For this reason I think:</p>\n<ul>\n<li>\n<p>Since this was a problem for you it should be fixed.</p>\n</li>\n<li>\n<p>Since it is a problem that extends past the case that you specifically solved we need to consider if a special-case patch is really the right way to go.  The ramp case is more tricky because ramps are implemented using loops in the pseudoclock's language and to have two update rates requires nested loops, or possibly just more complex pulse sequences in a single-depth loop.  The problem arrises when the two outputs request clocks that are fairly incommensurate.  If one can tolerate updates that are <em>nearly</em> synchronous with the desired update interval, and are on-average what you requested, then there is a good algorithm to solve this problem.</p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2017-06-20T13:23:22.761076+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2017-06-20T13:24:22.870407+00:00", "type": "pullrequest_comment", "id": 39179192}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39201918.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39201918"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Thank you for the minimal example that clearly demonstrates the problem.\n\n> It is possible that this additional tick on the analog clockline is too close to a ramp clock tick, so the physical card cannot handle the update rate and the digital Card is limited by the maximum clock_limit of the analog card during a ramp.\n\nIf this is the case, then it is a bug. The intended behaviour is that a clock tick will occur at the time the digital output changed, and this will not be limited by the maximum update rate of the NI card. The last clock tick on the analog line is only inserted if labscript determines it is within the capabilities of the device, otherwise labscript leaves it out (see  [line 666 of labscript.py](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-666)). But in either case the digital output changes at the correct time, and the only downside is that the analog output's final clock tick may be too *long* by an amount up to its minimum update interval. If I run your code but with the NI_PCI_6733 clock limit artificially reduced (in order to tell labscript that the final clock tick would be too fast) I don't get a LabscriptError. Running this code:\n\n\n```\n#!python\n\nfrom labscript import *\nfrom labscript_devices.PulseBlaster_No_DDS import PulseBlaster_No_DDS\nfrom labscript_devices.NI_USB_6343 import NI_USB_6343\nfrom labscript_devices.NI_PCI_6733 import NI_PCI_6733\n\nNI_PCI_6733.clock_limit = 250\n\n#Connection Table\nPulseBlaster_No_DDS( name='pulse_blaster')\nClockLine( name='A1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 0')\nClockLine( name='D1_clockline', pseudoclock=pulse_blaster.pseudoclock, connection='flag 2')\nDigitalOut( name='pb_flag4', parent_device=pulse_blaster.direct_outputs, connection='flag 4')\nNI_USB_6343(name=\"dio\", MAX_name=\"dummy\", parent_device=D1_clockline, clock_terminal=\"dummy\")\nDigitalOut( name='DO00', parent_device=dio, connection='port0/line0')\nNI_PCI_6733(name=\"ana\", MAX_name=\"dummy2\", parent_device=A1_clockline, clock_terminal=\"dummy2\")\nAnalogOut(name=\"AO0\", parent_device=ana, connection=\"ao0\")\nAnalogOut(name=\"AO1\", parent_device=ana, connection=\"ao1\")\n#Experiment Logic\nstart()\nt=0.0\nAO0. ramp(t, duration=0.03, initial=3.0, final=5.0, samplerate=200)\nDO00. go_high(t+0.01555)\nt += 0.03\nt += 0.01\nstop(t)\n```\nI get the following:\n\n![runviewerscreenshot.png](data/bitbucket.org/repo/g75Ex9/images/1713143531-runviewerscreenshot.png)\n\n\nNow, granted, the analog ramp is still affected. Its final sample before the split lasts for ~5.5 ms, instead of 5 ms.\n\nSo what labscript currently aims to do is not give you the exact clock rate you asked for, but in general *at least* the clock rate you asked for (when multiple analog ramps are requested with different sample rates on outputs clocked by the same psuedoclock, they both run at the faster sample rate of the two), with the exception that clock ticks in the situation we're talking about might be *too slow* by an amount up to the minimum sample time the device is capable of.\n\nSo if the minimal example you provided is representative of your experiment, I'd be inclined to think that there is nothing to fix about how ramps are computed, and either `NI_PCI_6733.clock_limit` is set too high for you in your case or perhaps in general (it depends on the number of outputs, I think, which I don't think labscript is taking into account ).\n\nA change would be required though if:\n\n- You really want regular clock ticks for an analog output, and can't tolerate the occasional error on the scale of the minimum sample time the device is capable, or\n\n- You need the digital output not to just update at a specific time, but to change at a rate that is actually faster than what the analog card can handle. I'm not sure what labscript does in this case, but the solution would be simpler than the patch in this pull request because the (slower) analog ramp would have at most 1 sample for each faster change in the digital output.\n\nTypically we solve these problems by buying more PuleBlasters. But, they might be fixable in software. If the latter of the above two points is the case, then I'm fairly confident we can fix it more simply than this pull request (which I'm not sure fixes it either). If the former is the case then your pull request does indeed appear to solve the problem, and the only reason I would be wary of accepting it is that it is a large amount of code, and I also suspect a simpler solution is possible (such as the algorithms Ian is alluding to), which would be more maintainable over time.", "markup": "markdown", "html": "<p>Thank you for the minimal example that clearly demonstrates the problem.</p>\n<blockquote>\n<p>It is possible that this additional tick on the analog clockline is too close to a ramp clock tick, so the physical card cannot handle the update rate and the digital Card is limited by the maximum clock_limit of the analog card during a ramp.</p>\n</blockquote>\n<p>If this is the case, then it is a bug. The intended behaviour is that a clock tick will occur at the time the digital output changed, and this will not be limited by the maximum update rate of the NI card. The last clock tick on the analog line is only inserted if labscript determines it is within the capabilities of the device, otherwise labscript leaves it out (see  <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-666\" rel=\"nofollow\">line 666 of labscript.py</a>). But in either case the digital output changes at the correct time, and the only downside is that the analog output's final clock tick may be too <em>long</em> by an amount up to its minimum update interval. If I run your code but with the NI_PCI_6733 clock limit artificially reduced (in order to tell labscript that the final clock tick would be too fast) I don't get a LabscriptError. Running this code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster_No_DDS</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster_No_DDS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NI_USB_6343</span> <span class=\"kn\">import</span> <span class=\"n\">NI_USB_6343</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NI_PCI_6733</span> <span class=\"kn\">import</span> <span class=\"n\">NI_PCI_6733</span>\n\n<span class=\"n\">NI_PCI_6733</span><span class=\"o\">.</span><span class=\"n\">clock_limit</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>\n\n<span class=\"c1\">#Connection Table</span>\n<span class=\"n\">PulseBlaster_No_DDS</span><span class=\"p\">(</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pulse_blaster&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;A1_clockline&#39;</span><span class=\"p\">,</span> <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulse_blaster</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;D1_clockline&#39;</span><span class=\"p\">,</span> <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulse_blaster</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 2&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">DigitalOut</span><span class=\"p\">(</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;pb_flag4&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulse_blaster</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 4&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NI_USB_6343</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dio&quot;</span><span class=\"p\">,</span> <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dummy&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">D1_clockline</span><span class=\"p\">,</span> <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s2\">&quot;dummy&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">DigitalOut</span><span class=\"p\">(</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;DO00&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">dio</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;port0/line0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NI_PCI_6733</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;ana&quot;</span><span class=\"p\">,</span> <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dummy2&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">A1_clockline</span><span class=\"p\">,</span> <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s2\">&quot;dummy2&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">AnalogOut</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;AO0&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">ana</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s2\">&quot;ao0&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">AnalogOut</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;AO1&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">ana</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s2\">&quot;ao1&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\">#Experiment Logic</span>\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>\n<span class=\"n\">AO0</span><span class=\"o\">.</span> <span class=\"n\">ramp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mf\">0.03</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span> <span class=\"n\">final</span><span class=\"o\">=</span><span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n<span class=\"n\">DO00</span><span class=\"o\">.</span> <span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">+</span><span class=\"mf\">0.01555</span><span class=\"p\">)</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">0.03</span>\n<span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"mf\">0.01</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I get the following:</p>\n<p><img alt=\"runviewerscreenshot.png\" src=\"data/bitbucket.org/repo/g75Ex9/images/1713143531-runviewerscreenshot.png\" /></p>\n<p>Now, granted, the analog ramp is still affected. Its final sample before the split lasts for ~5.5 ms, instead of 5 ms.</p>\n<p>So what labscript currently aims to do is not give you the exact clock rate you asked for, but in general <em>at least</em> the clock rate you asked for (when multiple analog ramps are requested with different sample rates on outputs clocked by the same psuedoclock, they both run at the faster sample rate of the two), with the exception that clock ticks in the situation we're talking about might be <em>too slow</em> by an amount up to the minimum sample time the device is capable of.</p>\n<p>So if the minimal example you provided is representative of your experiment, I'd be inclined to think that there is nothing to fix about how ramps are computed, and either <code>NI_PCI_6733.clock_limit</code> is set too high for you in your case or perhaps in general (it depends on the number of outputs, I think, which I don't think labscript is taking into account ).</p>\n<p>A change would be required though if:</p>\n<ul>\n<li>\n<p>You really want regular clock ticks for an analog output, and can't tolerate the occasional error on the scale of the minimum sample time the device is capable, or</p>\n</li>\n<li>\n<p>You need the digital output not to just update at a specific time, but to change at a rate that is actually faster than what the analog card can handle. I'm not sure what labscript does in this case, but the solution would be simpler than the patch in this pull request because the (slower) analog ramp would have at most 1 sample for each faster change in the digital output.</p>\n</li>\n</ul>\n<p>Typically we solve these problems by buying more PuleBlasters. But, they might be fixable in software. If the latter of the above two points is the case, then I'm fairly confident we can fix it more simply than this pull request (which I'm not sure fixes it either). If the former is the case then your pull request does indeed appear to solve the problem, and the only reason I would be wary of accepting it is that it is a large amount of code, and I also suspect a simpler solution is possible (such as the algorithms Ian is alluding to), which would be more maintainable over time.</p>", "type": "rendered"}, "created_on": "2017-06-20T16:43:23.962043+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T01:22:19.603807+00:00", "type": "pullrequest_comment", "id": 39201918}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39232059.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39232059"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Hi @ReneKolb,\n\nSimilar to Chris, I increased the sample rate to 695kHz (note labscript throws an error if you set it to 700kHz because it rounds up to the nearest multiple of the pseudoclock frequency, which is 704 kHz in this case). You can see the runviewer image below:\n\n![runviewer_1.png](data/bitbucket.org/repo/g75Ex9/images/3385203212-runviewer_1.png)\n\nHere, you'll notice that the length of the step immediately preceding the digital channel is longer, because an additional clock tick in there would breach the maximum sample rate of the NI card. The ramp is broken internally into two ramps by [these lines in labscript.py](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-497). The check to see if an additional clock tick can fit in at the end of the ramp is [here](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-667), with the condition that the rate doesn't break the [lowest of all the `clockline.clock_limit`](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-643) in use in the first of the two ramps. In this case, the `clock_limit` is set to `700e3` by the [NI card](#!/labscript_suite/labscript_devices/src/dc4c60911bc3a6594fb7296fd45a0db72ff7048c/NI_PCI_6733.py?at=default&fileviewer=file-view-default#NI_PCI_6733.py-28) although it should be noted that if you don't have that `clock_limit` attribute set as a **class attribute** of your NI card (or similar) device, then the clockline will use the pseudoclock's clock limit (which may be too fast, but that's what happens if it doesn't get defined in the class prior to instantiation of the NI card). \n\nSo the behaviour should be that it either inserts an extra clock tick prior to the break in the ramp, but the rate of that extra clocktick does not breach the maximum rate the device can handle, or there is a longer pause in time before the break in ramp.\n\nThe fact that you see an error when running the shot, but the example you provide seems to work correctly according to my runmanager, indicates to me that either there is something wrong with the `clock_limit` specification of the device you are actually using, or that there is a rounding error somewhere in our code that is biting you in the specific circumstances of your script (and so is not being replicated by the example). **I'd like to track it down, so if you can provide any more information that would be appreciated!** If you can provide an example script that shows the clockline rate breaking the maximum allowed rate of the devices attached, that would be perfect.\n\nWith regards to your actual patch: We still might want the functionality to do what you have proposed, I can definitely see the merits of it. However I'm reluctant to approve such a large change without a test framework for labscript. Last time I did something like this (when I wrote the gated-clocks implementation) it took weeks to find all of the corner cases. It wasn't such a problem back then because not many people were using labscript, but the number has grown significantly and I don't want to risk introducing bugs for them just because they have a corner case that you/we/ChrisB don't. We might need to hold off a little with merging until we get a test framework in place (which shouldn't be too hard -- I would propose using the runmanager API to verify that the output of all channels (not clocklines) matches what we expect.", "markup": "markdown", "html": "<p>Hi @ReneKolb,</p>\n<p>Similar to Chris, I increased the sample rate to 695kHz (note labscript throws an error if you set it to 700kHz because it rounds up to the nearest multiple of the pseudoclock frequency, which is 704 kHz in this case). You can see the runviewer image below:</p>\n<p><img alt=\"runviewer_1.png\" src=\"data/bitbucket.org/repo/g75Ex9/images/3385203212-runviewer_1.png\" /></p>\n<p>Here, you'll notice that the length of the step immediately preceding the digital channel is longer, because an additional clock tick in there would breach the maximum sample rate of the NI card. The ramp is broken internally into two ramps by <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-497\" rel=\"nofollow\">these lines in labscript.py</a>. The check to see if an additional clock tick can fit in at the end of the ramp is <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-667\" rel=\"nofollow\">here</a>, with the condition that the rate doesn't break the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-643\" rel=\"nofollow\">lowest of all the <code>clockline.clock_limit</code></a> in use in the first of the two ramps. In this case, the <code>clock_limit</code> is set to <code>700e3</code> by the <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/src/dc4c60911bc3a6594fb7296fd45a0db72ff7048c/NI_PCI_6733.py?at=default&amp;fileviewer=file-view-default#NI_PCI_6733.py-28\" rel=\"nofollow\">NI card</a> although it should be noted that if you don't have that <code>clock_limit</code> attribute set as a <strong>class attribute</strong> of your NI card (or similar) device, then the clockline will use the pseudoclock's clock limit (which may be too fast, but that's what happens if it doesn't get defined in the class prior to instantiation of the NI card). </p>\n<p>So the behaviour should be that it either inserts an extra clock tick prior to the break in the ramp, but the rate of that extra clocktick does not breach the maximum rate the device can handle, or there is a longer pause in time before the break in ramp.</p>\n<p>The fact that you see an error when running the shot, but the example you provide seems to work correctly according to my runmanager, indicates to me that either there is something wrong with the <code>clock_limit</code> specification of the device you are actually using, or that there is a rounding error somewhere in our code that is biting you in the specific circumstances of your script (and so is not being replicated by the example). <strong>I'd like to track it down, so if you can provide any more information that would be appreciated!</strong> If you can provide an example script that shows the clockline rate breaking the maximum allowed rate of the devices attached, that would be perfect.</p>\n<p>With regards to your actual patch: We still might want the functionality to do what you have proposed, I can definitely see the merits of it. However I'm reluctant to approve such a large change without a test framework for labscript. Last time I did something like this (when I wrote the gated-clocks implementation) it took weeks to find all of the corner cases. It wasn't such a problem back then because not many people were using labscript, but the number has grown significantly and I don't want to risk introducing bugs for them just because they have a corner case that you/we/ChrisB don't. We might need to hold off a little with merging until we get a test framework in place (which shouldn't be too hard -- I would propose using the runmanager API to verify that the output of all channels (not clocklines) matches what we expect.</p>", "type": "rendered"}, "created_on": "2017-06-21T01:57:11.274485+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T02:10:55.709905+00:00", "type": "pullrequest_comment", "id": 39232059}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233264.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233264"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Ok, I think I've identified the issue. @cbillington You'll want to read this and weigh in\n\nThe issue stems from the fact that we assume that the change_times (when instructions are commanded) are quantised to the pseudoclock's maximum update rate when we calculate whether an extra tick can fit in. However, I don't think we actually ever quantise the position of instructions. We leave this up to the specific implementation of the pseudoclock, and so the behaviour is effectively undefined (I have no idea what pulseblasters do - looks like we leave it up to the pulseblaster firmware. PineBlasters round to the nearest multiple, either up or down I think).\n\nThe result is that the final clock tick of a ramp as described can be made shorter by the quantisation process, and thus it can break everything!\n\nI think we should probably round the times to a multiple of the master pseudoclock's clock_resolution at some point from within labscript.\n\n@ReneKolb Could you let us know what pseudoclock you are using in your lab?\n", "markup": "markdown", "html": "<p>Ok, I think I've identified the issue. @cbillington You'll want to read this and weigh in</p>\n<p>The issue stems from the fact that we assume that the change_times (when instructions are commanded) are quantised to the pseudoclock's maximum update rate when we calculate whether an extra tick can fit in. However, I don't think we actually ever quantise the position of instructions. We leave this up to the specific implementation of the pseudoclock, and so the behaviour is effectively undefined (I have no idea what pulseblasters do - looks like we leave it up to the pulseblaster firmware. PineBlasters round to the nearest multiple, either up or down I think).</p>\n<p>The result is that the final clock tick of a ramp as described can be made shorter by the quantisation process, and thus it can break everything!</p>\n<p>I think we should probably round the times to a multiple of the master pseudoclock's clock_resolution at some point from within labscript.</p>\n<p>@ReneKolb Could you let us know what pseudoclock you are using in your lab?</p>", "type": "rendered"}, "created_on": "2017-06-21T02:44:49.326699+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T02:44:49.340194+00:00", "type": "pullrequest_comment", "id": 39233264}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233940.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233940"}}, "parent": {"id": 39233264, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233264.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233264"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Looks like the PulseBlaster converts to an integer like [this](https://github.com/imrehg/SpinAPI/blob/master/spinapi_src/spinapi.c#L900):\n\n\n```\n#!C\n\npb_inst_pbonly64 (__int64 flags, int inst, int inst_data, double length)\n{\n  unsigned int delay;\n  double pb_clock, clock_period;\n\n  spinerr = noerr;\n\n  pb_clock = board[cur_board].clock * board[cur_board].pb_clock_mult;\n  clock_period = 1.0 / pb_clock;\n\n  delay = (unsigned int) rint ((length * pb_clock) - 3.0);\n```\n\nWhich looks to be rounding down to a multiple of the clock period rather than rounding nearest (could be rounding up, but it's definitely not rounding nearest else that 3.0 would be a half-integer).", "markup": "markdown", "html": "<p>Looks like the PulseBlaster converts to an integer like <a data-is-external-link=\"true\" href=\"https://github.com/imrehg/SpinAPI/blob/master/spinapi_src/spinapi.c#L900\" rel=\"nofollow\">this</a>:</p>\n<div class=\"codehilite language-c\"><pre><span></span><span class=\"n\">pb_inst_pbonly64</span> <span class=\"p\">(</span><span class=\"kr\">__int64</span> <span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inst</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">inst_data</span><span class=\"p\">,</span> <span class=\"kt\">double</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">delay</span><span class=\"p\">;</span>\n  <span class=\"kt\">double</span> <span class=\"n\">pb_clock</span><span class=\"p\">,</span> <span class=\"n\">clock_period</span><span class=\"p\">;</span>\n\n  <span class=\"n\">spinerr</span> <span class=\"o\">=</span> <span class=\"n\">noerr</span><span class=\"p\">;</span>\n\n  <span class=\"n\">pb_clock</span> <span class=\"o\">=</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">cur_board</span><span class=\"p\">].</span><span class=\"n\">clock</span> <span class=\"o\">*</span> <span class=\"n\">board</span><span class=\"p\">[</span><span class=\"n\">cur_board</span><span class=\"p\">].</span><span class=\"n\">pb_clock_mult</span><span class=\"p\">;</span>\n  <span class=\"n\">clock_period</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">pb_clock</span><span class=\"p\">;</span>\n\n  <span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"n\">rint</span> <span class=\"p\">((</span><span class=\"n\">length</span> <span class=\"o\">*</span> <span class=\"n\">pb_clock</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">3.0</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<p>Which looks to be rounding down to a multiple of the clock period rather than rounding nearest (could be rounding up, but it's definitely not rounding nearest else that 3.0 would be a half-integer).</p>", "type": "rendered"}, "created_on": "2017-06-21T03:11:36.385831+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:17:47.351079+00:00", "type": "pullrequest_comment", "id": 39233940}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234293.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234293"}}, "parent": {"id": 39233940, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233940.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233940"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Even rounding to the nearest is bad if it's done this late because the calculation earlier (for whether or not to include the extra tick) assumed it was already quantised.", "markup": "markdown", "html": "<p>Even rounding to the nearest is bad if it's done this late because the calculation earlier (for whether or not to include the extra tick) assumed it was already quantised.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:25:01.400254+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T03:25:01.402370+00:00", "type": "pullrequest_comment", "id": 39234293}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234532.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234532"}}, "parent": {"id": 39234293, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234293.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234293"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "If the compilation code assumes quantisation has already happened when it hasn't, then yes, but in addition to that, even if we get the quantisation right in labscript, rounding down instead of nearest could be a disaster.\n\nAt least rounding to the nearest multiple of something is stable to floating point error. Do it twice and you'll get the same result as doing it once. Rounding down is not - if you round down yourself, and then some other code rounds down again, you'd better hope your first rounding down ended up slightly on the positive side of the target number and not the negative side, otherwise an entire unit will be subtracted off again. So this could be a problem even if we are getting the rounding 'right', by which I mean 'what we thought was right'.", "markup": "markdown", "html": "<p>If the compilation code assumes quantisation has already happened when it hasn't, then yes, but in addition to that, even if we get the quantisation right in labscript, rounding down instead of nearest could be a disaster.</p>\n<p>At least rounding to the nearest multiple of something is stable to floating point error. Do it twice and you'll get the same result as doing it once. Rounding down is not - if you round down yourself, and then some other code rounds down again, you'd better hope your first rounding down ended up slightly on the positive side of the target number and not the negative side, otherwise an entire unit will be subtracted off again. So this could be a problem even if we are getting the rounding 'right', by which I mean 'what we thought was right'.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:31:59.943512+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:32:23.862032+00:00", "type": "pullrequest_comment", "id": 39234532}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234721.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234721"}}, "parent": {"id": 39234532, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234532.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234532"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Adding 0.5 and then rounding down is 'floating point idempotent' though.\n\nPerhaps then, after doing all our calculations, we need to add 0.5 minimum time intervals to each PulseBlaster instruction to ensure that it is correct after rounding down. Or subtract 0.5 if we determine it's rounding up, which might be possible by staring at the spinapi code some more.", "markup": "markdown", "html": "<p>Adding 0.5 and then rounding down is 'floating point idempotent' though.</p>\n<p>Perhaps then, after doing all our calculations, we need to add 0.5 minimum time intervals to each PulseBlaster instruction to ensure that it is correct after rounding down. Or subtract 0.5 if we determine it's rounding up, which might be possible by staring at the spinapi code some more.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:38:33.863245+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:38:33.865473+00:00", "type": "pullrequest_comment", "id": 39234721}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234804.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234804"}}, "parent": {"id": 39234721, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234721.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234721"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I feel like this is a separate issue. We should fix it more generally for all devices as well. I suspect the general fix will at least restrict the probability of the issue occuring.", "markup": "markdown", "html": "<p>I feel like this is a separate issue. We should fix it more generally for all devices as well. I suspect the general fix will at least restrict the probability of the issue occuring.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:41:35.288361+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T03:41:35.291110+00:00", "type": "pullrequest_comment", "id": 39234804}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235129.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235129"}}, "parent": {"id": 39234804, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234804.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234804"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I'm not sure it is. To me it looks like the rounding-nearest is already happening in labscript, and that the problem might be that device APIs are then rounding down or up and changing what we intended by a whole unit (whereas if they rounded nearest it would be fine). \n\nIf pseudoclocks do have different rounding shemes in their APIs/hardware then each one will need a `rounding_type` attribute to tell you whether the hardware/driver whatever rounds up or down or nearest, and then we'll need to do the adding, subtracting or nothing of 0.5 to the nearest-rounded numbers that we have right at the end of compilation to ensure that after the driver rounds it, it ends up being what we intended.", "markup": "markdown", "html": "<p>I'm not sure it is. To me it looks like the rounding-nearest is already happening in labscript, and that the problem might be that device APIs are then rounding down or up and changing what we intended by a whole unit (whereas if they rounded nearest it would be fine). </p>\n<p>If pseudoclocks do have different rounding shemes in their APIs/hardware then each one will need a <code>rounding_type</code> attribute to tell you whether the hardware/driver whatever rounds up or down or nearest, and then we'll need to do the adding, subtracting or nothing of 0.5 to the nearest-rounded numbers that we have right at the end of compilation to ensure that after the driver rounds it, it ends up being what we intended.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:52:40.583907+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:52:40.586002+00:00", "type": "pullrequest_comment", "id": 39235129}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234034.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234034"}}, "parent": {"id": 39233264, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39233264.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39233264"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I'm sure we can fix this timing bug, and unless @ReneKolb is really pushing the limits of the devices, it should be a quick fix to simply lie to labscript and say that the hardware is not capable of going as fast as it really is.\n\nHowever we should try to fix it in labscript, and in the longer run the timing calculations of labscript need to be rearchitected with trigger delays and quantisation front and centre instead being added later in the current, hard to debug way.", "markup": "markdown", "html": "<p>I'm sure we can fix this timing bug, and unless @ReneKolb is really pushing the limits of the devices, it should be a quick fix to simply lie to labscript and say that the hardware is not capable of going as fast as it really is.</p>\n<p>However we should try to fix it in labscript, and in the longer run the timing calculations of labscript need to be rearchitected with trigger delays and quantisation front and centre instead being added later in the current, hard to debug way.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:14:58.503319+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:14:58.527148+00:00", "type": "pullrequest_comment", "id": 39234034}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234751.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234751"}}, "parent": {"id": 39234034, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234034.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234034"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I think this is pretty easy to do. We should quantise the times at the end of `Pseudoclock.collect_change_times`, which is after all of the offsets have been taken into account. \n\nI think we should round to the nearest integer multiple of `clock_resolution`, but demand that triggers be `2*clock_resolution` longer than they are now just in case it rounds both start and end points in the direct that makes the trigger shorter.\n\nI don't think that will introduce any issues, but keen for your input to see if I've missed something. We should probably open an issue regarding this so we don't clutter this pull request up.", "markup": "markdown", "html": "<p>I think this is pretty easy to do. We should quantise the times at the end of <code>Pseudoclock.collect_change_times</code>, which is after all of the offsets have been taken into account. </p>\n<p>I think we should round to the nearest integer multiple of <code>clock_resolution</code>, but demand that triggers be <code>2*clock_resolution</code> longer than they are now just in case it rounds both start and end points in the direct that makes the trigger shorter.</p>\n<p>I don't think that will introduce any issues, but keen for your input to see if I've missed something. We should probably open an issue regarding this so we don't clutter this pull request up.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:39:40.691150+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T03:39:40.693603+00:00", "type": "pullrequest_comment", "id": 39234751}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234807.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234807"}}, "parent": {"id": 39234751, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234751.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234751"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Right, so *we* should round nearest to most accurately reflect what the user asked for, but then what we give to the PulseBlaster I think we may need to add 0.5 units to anticipate that it will round down whatever we give it.", "markup": "markdown", "html": "<p>Right, so <em>we</em> should round nearest to most accurately reflect what the user asked for, but then what we give to the PulseBlaster I think we may need to add 0.5 units to anticipate that it will round down whatever we give it.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:41:45.011338+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T03:41:45.014084+00:00", "type": "pullrequest_comment", "id": 39234807}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234960.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234960"}}, "parent": {"id": 39234751, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234751.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234751"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Labscript is already quantising the change times in [`Pseudoclock.expand_change_times()`](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-655), which occurs after `Pseudoclock.collect_change_times()`. Have I misunderstood what you meant?\n\nThe 2\\*clock_resolution might make sense. I would have though so long as it was 1\\*clock_resolution + floating_point_epsilon it would have been sufficient, to ensure the two times round to different quantised times, but that exactly 1 was pushing it with the rounding error.", "markup": "markdown", "html": "<p>Labscript is already quantising the change times in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-655\" rel=\"nofollow\"><code>Pseudoclock.expand_change_times()</code></a>, which occurs after <code>Pseudoclock.collect_change_times()</code>. Have I misunderstood what you meant?</p>\n<p>The 2*clock_resolution might make sense. I would have though so long as it was 1*clock_resolution + floating_point_epsilon it would have been sufficient, to ensure the two times round to different quantised times, but that exactly 1 was pushing it with the rounding error.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:46:47.633502+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T04:03:12.306298+00:00", "type": "pullrequest_comment", "id": 39234960}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235150.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235150"}}, "parent": {"id": 39234960, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39234960.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39234960"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Yes, I think you've misunderstood. The rate is quantised, but the start/end points are not. [This](#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&fileviewer=file-view-default#labscript.py-698) line where we add the instruction that 'makes up the difference'. However, if that value for `step` is not quantised, then it falls apart when it gets quantised by the pseudoclock device. However, if we quantise the start times of instructions, then that instruction I link to will be quantised correctly\n\nAlso, (unrelated) apparently we now might have 3 clock instructions per ramp? I thought we only had 2. I wonder if that's my fault from implementing gated clocks. Not sure what else could be done.", "markup": "markdown", "html": "<p>Yes, I think you've misunderstood. The rate is quantised, but the start/end points are not. <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/src/7f4bffa24052338a0971ee6b2e7ea90b2de41f12/labscript.py?at=default&amp;fileviewer=file-view-default#labscript.py-698\" rel=\"nofollow\">This</a> line where we add the instruction that 'makes up the difference'. However, if that value for <code>step</code> is not quantised, then it falls apart when it gets quantised by the pseudoclock device. However, if we quantise the start times of instructions, then that instruction I link to will be quantised correctly</p>\n<p>Also, (unrelated) apparently we now might have 3 clock instructions per ramp? I thought we only had 2. I wonder if that's my fault from implementing gated clocks. Not sure what else could be done.</p>", "type": "rendered"}, "created_on": "2017-06-21T03:53:33.144851+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T03:53:45.891467+00:00", "type": "pullrequest_comment", "id": 39235150}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235368.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235368"}}, "parent": {"id": 39235150, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235150.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235150"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Yes I see what you mean now. I wonder why we haven't seen this problem before?\n\nWell, this is good news: we quantise all the change times, as you said.\n\nIn the future, I think times should be stored as integers internally. The user will say \"gimme something at time t\", and we'll floating-point subtract trigger times to get a relative time for the pseudoclock, and then quantise and store an integer the quantised relative time, for how many clock ticks of the parent pseudoclock that is. Then compilation will just be about those integers for time. It will be much simpler.", "markup": "markdown", "html": "<p>Yes I see what you mean now. I wonder why we haven't seen this problem before?</p>\n<p>Well, this is good news: we quantise all the change times, as you said.</p>\n<p>In the future, I think times should be stored as integers internally. The user will say \"gimme something at time t\", and we'll floating-point subtract trigger times to get a relative time for the pseudoclock, and then quantise and store an integer the quantised relative time, for how many clock ticks of the parent pseudoclock that is. Then compilation will just be about those integers for time. It will be much simpler.</p>", "type": "rendered"}, "created_on": "2017-06-21T04:00:48.468921+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T04:00:48.471070+00:00", "type": "pullrequest_comment", "id": 39235368}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235697.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235697"}}, "parent": {"id": 39235368, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235368.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235368"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "It's only an issue if you push the limits of the update rate of the cards outputs, and even then it only sometimes bites you depending on how it gets rounded (plus, I think we maybe underestimate the update rate of the NI 6363?).\n\nAre you happy for me to implement a fix for now as I outlined above?", "markup": "markdown", "html": "<p>It's only an issue if you push the limits of the update rate of the cards outputs, and even then it only sometimes bites you depending on how it gets rounded (plus, I think we maybe underestimate the update rate of the NI 6363?).</p>\n<p>Are you happy for me to implement a fix for now as I outlined above?</p>", "type": "rendered"}, "created_on": "2017-06-21T04:13:30.388088+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T04:13:30.390713+00:00", "type": "pullrequest_comment", "id": 39235697}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235747.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235747"}}, "parent": {"id": 39235697, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235697.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235697"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Yep, perfectly happy! Integers will have to wait.", "markup": "markdown", "html": "<p>Yep, perfectly happy! Integers will have to wait.</p>", "type": "rendered"}, "created_on": "2017-06-21T04:15:17.637678+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T04:15:17.640187+00:00", "type": "pullrequest_comment", "id": 39235747}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39235665.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39235665"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-06-21T04:12:08.674744+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-21T04:12:17.158899+00:00", "type": "pullrequest_comment", "id": 39235665}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39363221.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39363221"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "I know my solution is not the best, but it solves our issue without creating new ones ;-)\n\nWe use a pulseblaster as pseudoclock (Pb12-100-4k). I implemented the ramp splitting a while ago, because we had the issues and it seems to me that this comes from the additional clock tick on the digital and analog clockline. But later I checked the clock\\_limit of our NI-card implementation (NI PCI-6713), which was indeed too high (1MHz vs 700kHz). I think this was the main issue which leads to the hardware error. But the other LabscriptError may come from the rounding issue like @philipstarkey meant. So this should definitely get fixed. If this solves the issues for us then this pull request is not needed any more, otherwise we should think of a more compact way to solve the issue.", "markup": "markdown", "html": "<p>I know my solution is not the best, but it solves our issue without creating new ones ;-)</p>\n<p>We use a pulseblaster as pseudoclock (Pb12-100-4k). I implemented the ramp splitting a while ago, because we had the issues and it seems to me that this comes from the additional clock tick on the digital and analog clockline. But later I checked the clock_limit of our NI-card implementation (NI PCI-6713), which was indeed too high (1MHz vs 700kHz). I think this was the main issue which leads to the hardware error. But the other LabscriptError may come from the rounding issue like @philipstarkey meant. So this should definitely get fixed. If this solves the issues for us then this pull request is not needed any more, otherwise we should think of a more compact way to solve the issue.</p>", "type": "rendered"}, "created_on": "2017-06-22T12:10:24.433946+00:00", "user": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "updated_on": "2017-06-22T12:10:24.516220+00:00", "type": "pullrequest_comment", "id": 39363221}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/39688111.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-39688111"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "There is also the possibility that issue #39 is actually the cause of the crash you saw (the first clock tick of a ramp, rather than the last, is too short). I'll try and also patch that soon, but it's a bit harder to do and probably needs to wait until @cbillington is back so he can review it.", "markup": "markdown", "html": "<p>There is also the possibility that issue <a href=\"#!/labscript_suite/labscript/issues/39/non-looping-clock-ticks-may-be-too-short\" rel=\"nofollow\" title=\"Non-looping clock ticks may be too short if they happen during a ramp\" class=\"ap-connect-link\">#39</a> is actually the cause of the crash you saw (the first clock tick of a ramp, rather than the last, is too short). I'll try and also patch that soon, but it's a bit harder to do and probably needs to wait until @cbillington is back so he can review it.</p>", "type": "rendered"}, "created_on": "2017-06-28T04:41:07.209292+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-28T04:41:07.217401+00:00", "type": "pullrequest_comment", "id": 39688111}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11/comments/54214213.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11/_/diff#comment-54214213"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/11"}}, "title": "Added the ability to split ramps."}, "content": {"raw": "Given that most of this \\(except for #39, which will be fixed separately as well\\) has been fixed in subsequent pull requests, I'm rejecting this pull request in order to close it.\n\nIf this issue still persists with the latest commit of labscript, and you don't think #39 is the cause, please log a new issue so we can track it down!", "markup": "markdown", "html": "<p>Given that most of this (except for <a href=\"#!/labscript_suite/labscript/issues/39/non-looping-clock-ticks-may-be-too-short\" rel=\"nofollow\" title=\"Non-looping clock ticks may be too short if they happen during a ramp\" class=\"ap-connect-link\">#39</a>, which will be fixed separately as well) has been fixed in subsequent pull requests, I'm rejecting this pull request in order to close it.</p>\n<p>If this issue still persists with the latest commit of labscript, and you don't think <a href=\"#!/labscript_suite/labscript/issues/39/non-looping-clock-ticks-may-be-too-short\" rel=\"nofollow\" title=\"Non-looping clock ticks may be too short if they happen during a ramp\" class=\"ap-connect-link\">#39</a> is the cause, please log a new issue so we can track it down!</p>", "type": "rendered"}, "created_on": "2018-01-22T06:14:29.223810+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-01-22T06:14:29.226273+00:00", "type": "pullrequest_comment", "id": 54214213}], "page": 1, "size": 26}