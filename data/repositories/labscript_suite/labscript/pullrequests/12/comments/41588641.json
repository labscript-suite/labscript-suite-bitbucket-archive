{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/12/comments/41588641.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/12/_/diff#comment-41588641"}}, "parent": {"id": 41588208, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/12/comments/41588208.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/12/_/diff#comment-41588208"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/12.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/12"}}, "title": "Provides start_order and stop_order as per Issue #18."}, "content": {"raw": "That's almost what a mixin would do.\n\nThe problem is that your BLACS class might be an IntermediateDevice instead of just a Device, for example. What then? Do you  make a BlacsIntermediateDevice that inherits from BlacsDevice? No. That's where mixins come in. What you do is you have your NovatechDDS9M inherit from both IntermediateDevice and BLACSDevice. Something like this:\n\n\n```\n#!python\n\nclass Device(object):\n    pass\n\nclass BLACSDevice(Device):\n    pass    \n\nclass IntermediateDevice(Device):\n    pass\n\nclass NovatechDDS9M(IntermediateDevice, BLACSDevice):\n    pass\n\n```\nBLACSDevice is then a mixin - it overrides just one method, so you inherit from it *as well* when you want all of the class hierarchy that's in place *except* to make sure that BLACSDevice comes in and overrides one of Device's methods near the top of the class hierarchy.\n\nYou have to change all of the `__init__` calls to call the `__init__` methods of their parent classes using `super` instead of directly naming the parent class, but then you'd be surprised how logically it all works out. NovatechDDS9M's `__init__` runs first, then IntermediateDevice's, then BLACSDevice, then Device, which is exactly what you would want.\n\nSo long as `__init__` is the only method being overridden in BLACSDevice, then it's the only one that super() needs to be used for when calling the parent class's method. But it's good practice to use super a bit more than we have been doing, to allow for these sorts of things.\n\nThis is the \"right\" way to do it in my opinion but I'll be happy with anything for now, even if it's a bit hacky. Allowing for multiple inheritance like this is something I've been thinking about for labscript 3 anyway. When I get around to making some more progress on that we can make some of these things \"right\".", "markup": "markdown", "html": "<p>That's almost what a mixin would do.</p>\n<p>The problem is that your BLACS class might be an IntermediateDevice instead of just a Device, for example. What then? Do you  make a BlacsIntermediateDevice that inherits from BlacsDevice? No. That's where mixins come in. What you do is you have your NovatechDDS9M inherit from both IntermediateDevice and BLACSDevice. Something like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Device</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BLACSDevice</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>    \n\n<span class=\"k\">class</span> <span class=\"nc\">IntermediateDevice</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NovatechDDS9M</span><span class=\"p\">(</span><span class=\"n\">IntermediateDevice</span><span class=\"p\">,</span> <span class=\"n\">BLACSDevice</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n\n\n<p>BLACSDevice is then a mixin - it overrides just one method, so you inherit from it <em>as well</em> when you want all of the class hierarchy that's in place <em>except</em> to make sure that BLACSDevice comes in and overrides one of Device's methods near the top of the class hierarchy.</p>\n<p>You have to change all of the <code>__init__</code> calls to call the <code>__init__</code> methods of their parent classes using <code>super</code> instead of directly naming the parent class, but then you'd be surprised how logically it all works out. NovatechDDS9M's <code>__init__</code> runs first, then IntermediateDevice's, then BLACSDevice, then Device, which is exactly what you would want.</p>\n<p>So long as <code>__init__</code> is the only method being overridden in BLACSDevice, then it's the only one that super() needs to be used for when calling the parent class's method. But it's good practice to use super a bit more than we have been doing, to allow for these sorts of things.</p>\n<p>This is the \"right\" way to do it in my opinion but I'll be happy with anything for now, even if it's a bit hacky. Allowing for multiple inheritance like this is something I've been thinking about for labscript 3 anyway. When I get around to making some more progress on that we can make some of these things \"right\".</p>", "type": "rendered"}, "created_on": "2017-07-26T23:54:03.834787+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T23:54:55.974718+00:00", "type": "pullrequest_comment", "id": 41588641}