{"rendered": {"description": {"raw": "* Fixed bug where all wait timeouts were set to the timeout of the first wait.\r\n\r\n    This was due to a list comprehension leaking values into the namespace of the wait() function because we used a variable name in the list comprehension which was the same as one of the function arguments.\r\n    The list comprehension has been modified to use a dummy variable name\r\n\r\n * Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\r\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\r\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\r\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Fixed bug where all wait timeouts were set to the timeout of the first wait.</p>\n<p>This was due to a list comprehension leaking values into the namespace of the wait() function because we used a variable name in the list comprehension which was the same as one of the function arguments.\nThe list comprehension has been modified to use a dummy variable name</p>\n</li>\n<li>\n<p>Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Fixed bugs with waits", "markup": "markdown", "html": "<p>Fixed bugs with waits</p>", "type": "rendered"}}, "type": "pullrequest", "description": "* Fixed bug where all wait timeouts were set to the timeout of the first wait.\r\n\r\n    This was due to a list comprehension leaking values into the namespace of the wait() function because we used a variable name in the list comprehension which was the same as one of the function arguments.\r\n    The list comprehension has been modified to use a dummy variable name\r\n\r\n * Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\r\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\r\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\r\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/pullrequests/4/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/diffstat/labscript_suite/labscript:000000000000%0D3735fcca8ce8?from_pullrequest_id=4"}, "commits": {"href": "data/repositories/labscript_suite/labscript/pullrequests/4/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/4.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript/pullrequests/4/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/pullrequests/4/merge"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/4"}, "activity": {"href": "data/repositories/labscript_suite/labscript/pullrequests/4/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/diff/labscript_suite/labscript:000000000000%0D3735fcca8ce8?from_pullrequest_id=4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript/pullrequests/4/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript/pullrequests/4/statuses_page=1.json"}}, "title": "Fixed bugs with waits", "close_source_branch": false, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}], "id": 4, "destination": {"commit": {"hash": "3735fcca8ce8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/3735fcca8ce8.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/3735fcca8ce8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "branch": {"name": "default"}}, "created_on": "2015-11-03T02:27:01.859755+00:00", "summary": {"raw": "* Fixed bug where all wait timeouts were set to the timeout of the first wait.\r\n\r\n    This was due to a list comprehension leaking values into the namespace of the wait() function because we used a variable name in the list comprehension which was the same as one of the function arguments.\r\n    The list comprehension has been modified to use a dummy variable name\r\n\r\n * Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\r\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\r\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\r\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Fixed bug where all wait timeouts were set to the timeout of the first wait.</p>\n<p>This was due to a list comprehension leaking values into the namespace of the wait() function because we used a variable name in the list comprehension which was the same as one of the function arguments.\nThe list comprehension has been modified to use a dummy variable name</p>\n</li>\n<li>\n<p>Fixed bug where the ClockLine clock_limits were not taken into account when determining the minimum time between a wait and subsequent output.\nThis meant that triggers to secondary pseudoclocks, immediately followed by output could be faster than the allowed update rate of IntermediateDevices. This was fortunately caught further down the line, but should have never been a problem.\nThe wait() function (via a fix to trigger_all_pseudoclocks) now returns the correct length of time before you can command further output.\nIt is possible this bug only affected wait() commands with a single pseudoclock where the pseudoclock trigger_duration was very short and the wait_monitor was on a clockline that had a high clock_limit.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "9d7795077896", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript/commit/9d7795077896"}, "html": {"href": "#!/monashkrb/labscript/commits/9d7795077896"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript"}, "html": {"href": "#!/monashkrb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{4d42e2d0-41cf-4474-ac4a-eaf59f1279fb}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "monashkrb/labscript", "uuid": "{4d42e2d0-41cf-4474-ac4a-eaf59f1279fb}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2015-11-03T02:58:30.096094+00:00", "type": "participant", "approved": true, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}], "reason": "", "updated_on": "2015-11-03T09:14:23.473607+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": null, "closed_by": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}