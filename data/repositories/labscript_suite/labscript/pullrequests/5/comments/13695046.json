{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5/comments/13695046.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5/_/diff#comment-13695046"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5"}}, "title": "Truncation decorator for ramp functions"}, "content": {"raw": "An alternative implementation (suggested many moons ago by @cbillington) that avoids the above problem, is to modify relevant ramp functions of `AnalogQuantity`, having them take an optional `truncation` parameter, and modify the returned `duration` and `end_time` of the instruction passed to `add_instruction`. For example, `AnalogQuantity.sine_ramp` would go from\n```\n#!python\ndef sine_ramp(self, t, duration, initial, final, samplerate, units=None):\n    self.add_instruction(t, {'function': functions.sine_ramp(duration, initial, final), 'description': 'sinusoidal ramp',\n                             'initial time': t, 'end time': t + duration, 'clock rate': samplerate, 'units': units})\n    return duration\n```\n... to...\n```\n#!python\ndef sine_ramp(self, t, duration, initial, final, samplerate, units=None, truncation=1.):\n    self.add_instruction(t, {'function': functions.sine_ramp(duration, initial, final), 'description': 'sinusoidal ramp',\n                             'initial time': t, 'end time': t + truncation*duration, 'clock rate': samplerate, 'units': units})\n    return truncation*duration\n```\nThis does not include error checking such as the value constraint on `truncation`.", "markup": "markdown", "html": "<p>An alternative implementation (suggested many moons ago by @cbillington) that avoids the above problem, is to modify relevant ramp functions of <code>AnalogQuantity</code>, having them take an optional <code>truncation</code> parameter, and modify the returned <code>duration</code> and <code>end_time</code> of the instruction passed to <code>add_instruction</code>. For example, <code>AnalogQuantity.sine_ramp</code> would go from</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">sine_ramp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"p\">,</span> <span class=\"n\">final</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_instruction</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;function&#39;</span><span class=\"p\">:</span> <span class=\"n\">functions</span><span class=\"o\">.</span><span class=\"n\">sine_ramp</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"p\">,</span> <span class=\"n\">final</span><span class=\"p\">),</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;sinusoidal ramp&#39;</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;initial time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s1\">&#39;end time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clock rate&#39;</span><span class=\"p\">:</span> <span class=\"n\">samplerate</span><span class=\"p\">,</span> <span class=\"s1\">&#39;units&#39;</span><span class=\"p\">:</span> <span class=\"n\">units</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">duration</span>\n</pre></div>\n\n\n<p>... to...</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">sine_ramp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"p\">,</span> <span class=\"n\">final</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">truncation</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_instruction</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;function&#39;</span><span class=\"p\">:</span> <span class=\"n\">functions</span><span class=\"o\">.</span><span class=\"n\">sine_ramp</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"n\">initial</span><span class=\"p\">,</span> <span class=\"n\">final</span><span class=\"p\">),</span> <span class=\"s1\">&#39;description&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;sinusoidal ramp&#39;</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;initial time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s1\">&#39;end time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">truncation</span><span class=\"o\">*</span><span class=\"n\">duration</span><span class=\"p\">,</span> <span class=\"s1\">&#39;clock rate&#39;</span><span class=\"p\">:</span> <span class=\"n\">samplerate</span><span class=\"p\">,</span> <span class=\"s1\">&#39;units&#39;</span><span class=\"p\">:</span> <span class=\"n\">units</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">truncation</span><span class=\"o\">*</span><span class=\"n\">duration</span>\n</pre></div>\n\n\n<p>This does not include error checking such as the value constraint on <code>truncation</code>.</p>", "type": "rendered"}, "created_on": "2016-01-21T00:14:45.336628+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2016-01-21T00:14:45.343223+00:00", "type": "pullrequest_comment", "id": 13695046}