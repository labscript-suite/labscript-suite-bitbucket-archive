{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5/comments/13696855.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5/_/diff#comment-13696855"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5"}}, "title": "Truncation decorator for ramp functions"}, "content": {"raw": "The place the decorator itself is defined is a little odd though, it looks like an instance method, but if you call it on an instance then 'self' will be passed in instead of a ramp func. To make it clear what it's for and how it's supposed to be called, it should be made a static method:\n\n```\n#!python\n    @staticmethod\n    def truncate(ramp_func):\n        \"\"\"Decorator to add to a ramp function the ability to truncate it to a\n        given fractional proportion of its duration using a keyword argument\n        \"truncation\" (1.0 by default - no truncation).\"\"\"\n```\nThis way `AnalogQuantity` is just a namespace for holding the function, and if called on an instance, the instance won't be passed in as an argument. Other classes can use it (as `AnalogQuantity.truncate`) without regard for whether they are a subclass. In fact I would suggest referring to it in full as `@AnalogQuantity.truncate` even within `AnalogQuantity` itself, just to make clear that it is a generically usable decorator that is not necessarily limited to use within `AnalogQuantity`.\n\nAlso a docstring!", "markup": "markdown", "html": "<p>The place the decorator itself is defined is a little odd though, it looks like an instance method, but if you call it on an instance then 'self' will be passed in instead of a ramp func. To make it clear what it's for and how it's supposed to be called, it should be made a static method:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">truncate</span><span class=\"p\">(</span><span class=\"n\">ramp_func</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Decorator to add to a ramp function the ability to truncate it to a</span>\n<span class=\"sd\">        given fractional proportion of its duration using a keyword argument</span>\n<span class=\"sd\">        &quot;truncation&quot; (1.0 by default - no truncation).&quot;&quot;&quot;</span>\n</pre></div>\n\n\n<p>This way <code>AnalogQuantity</code> is just a namespace for holding the function, and if called on an instance, the instance won't be passed in as an argument. Other classes can use it (as <code>AnalogQuantity.truncate</code>) without regard for whether they are a subclass. In fact I would suggest referring to it in full as <code>@AnalogQuantity.truncate</code> even within <code>AnalogQuantity</code> itself, just to make clear that it is a generically usable decorator that is not necessarily limited to use within <code>AnalogQuantity</code>.</p>\n<p>Also a docstring!</p>", "type": "rendered"}, "created_on": "2016-01-21T01:48:43.627191+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2016-01-21T01:54:10.232928+00:00", "type": "pullrequest_comment", "id": 13696855}