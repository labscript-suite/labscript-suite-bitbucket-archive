{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5/comments/13743092.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5/_/diff#comment-13743092"}}, "parent": {"id": 13741444, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5/comments/13741444.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5/_/diff#comment-13741444"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 5, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/5.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/5"}}, "title": "Truncation decorator for ramp functions"}, "content": {"raw": "Absolutely, Phil! I knew that with `truncation_type=linear`, the `truncation` parameter of the `exp_ramp` and `exp_ramp_t` functions corresponded to the *value* to stop the ramp at, rather than a fraction of the range to stop at. There is still a value check that can be done, to see if `truncation` lies between the `initial` and `final` value of the ramp. If it doesn't, a potentially obscure error will be thrown when each of these functions attempts to compute/use the truncated ramp duration, as `trunc_duration` will be a complex number. I've modified `_check_truncation` to include optional bounds, and used this accordingly based on the `truncation_type` of these ramp functions.\n\nThe different meaning of `truncation` based on the `truncation_type` also affects the conditionals used to inform whether or not a truncated duration should be computed, or a ramp instruction issued at all. I've fixed this as well.", "markup": "markdown", "html": "<p>Absolutely, Phil! I knew that with <code>truncation_type=linear</code>, the <code>truncation</code> parameter of the <code>exp_ramp</code> and <code>exp_ramp_t</code> functions corresponded to the <em>value</em> to stop the ramp at, rather than a fraction of the range to stop at. There is still a value check that can be done, to see if <code>truncation</code> lies between the <code>initial</code> and <code>final</code> value of the ramp. If it doesn't, a potentially obscure error will be thrown when each of these functions attempts to compute/use the truncated ramp duration, as <code>trunc_duration</code> will be a complex number. I've modified <code>_check_truncation</code> to include optional bounds, and used this accordingly based on the <code>truncation_type</code> of these ramp functions.</p>\n<p>The different meaning of <code>truncation</code> based on the <code>truncation_type</code> also affects the conditionals used to inform whether or not a truncated duration should be computed, or a ramp instruction issued at all. I've fixed this as well.</p>", "type": "rendered"}, "created_on": "2016-01-22T02:44:20.062621+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2016-01-22T02:44:20.064821+00:00", "type": "pullrequest_comment", "id": 13743092}