{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/40354246.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-40354246"}}, "parent": {"id": 39026352, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39026352.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39026352"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "@philipstarkey I tested your approach and it worked in a few but not all cases. The problem was, that if open and close delay are not the same instructions can start to get reordered if they get too close to each other. This would then make self.instructions[time] != self.instructions[next_time]  return False and some cases would not trigger that should have.\nI took your approach and expanded on it in the following way that also scales with O(N). I also worked around the problem of nor being able to back calculate:\n```\n#!python\n\n    def get_change_times(self, *args, **kwargs):\n        retval = DigitalOut.get_change_times(self, *args, **kwargs)\n\n        sorted_times = self.actual_times.keys()\n        sorted_times.sort()\n        if len(sorted_times)>1:\n            for i in range(len(sorted_times)-1):\n                time = sorted_times[i]\n                next_time = sorted_times[i+1]\n                # only look at instructions that contain a state change\n                if self.actual_times[time]['instruction'] != self.actual_times[next_time]['instruction']:\n                    state1 = 'open' if self.actual_times[next_time]['instruction'] == 1 else 'close'\n                    state2 = 'opened' if self.actual_times[time]['instruction'] == 1 else 'closed'\n                    if self.actual_times[next_time]['time'] < time:\n                        message = \"WARNING: The shutter '{:s}' is requestes to {:s} too early (taking delay into account) at t={:.10f}s when it is still not {:s} from an earlier instruction at t={:.10f}s\".format(self.name, state1, next_time, state2, time)\n                        sys.stderr.write(message+'\\n')\n\n        return retval\n```\n\nThis however only works with the new interal variable self.actual_times that gets added to in open/close:\n\n\n```\n#!python\n\n    def open(self, t):\n        t_calc = t-self.open_delay if t >= self.open_delay else 0\n        self.actual_times[t] = {'time': t_calc, 'instruction': 1}\n        if self.open_state == 1:\n            self.go_high(t_calc)\n        elif self.open_state == 0:\n            self.go_low(t_calc)\n\n    def close(self, t):\n        t_calc = t-self.close_delay if t >= self.close_delay else 0\n        self.actual_times[t] = {'time': t_calc, 'instruction': 0}\n        if self.open_state == 1:\n            self.go_low(t_calc)\n        elif self.open_state == 0:\n            self.go_high(t_calc)\n```\nand is initialized in __init__:\n\n```\n#!python\n\nself.actual_times = {}\n```\n\nCould you test the compilation time with and without this implementation of shutter collision and your ramp collision checks to see if compilation time is still a problem?", "markup": "markdown", "html": "<p>@philipstarkey I tested your approach and it worked in a few but not all cases. The problem was, that if open and close delay are not the same instructions can start to get reordered if they get too close to each other. This would then make self.instructions[time] != self.instructions[next_time]  return False and some cases would not trigger that should have.\nI took your approach and expanded on it in the following way that also scales with O(N). I also worked around the problem of nor being able to back calculate:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"n\">DigitalOut</span><span class=\"o\">.</span><span class=\"n\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sorted_times</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"n\">sorted_times</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sorted_times</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sorted_times</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">sorted_times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">next_time</span> <span class=\"o\">=</span> <span class=\"n\">sorted_times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"c1\"># only look at instructions that contain a state change</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">state1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;open&#39;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;close&#39;</span>\n                    <span class=\"n\">state2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;opened&#39;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;closed&#39;</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"p\">:</span>\n                        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;WARNING: The shutter &#39;{:s}&#39; is requestes to {:s} too early (taking delay into account) at t={:.10f}s when it is still not {:s} from an earlier instruction at t={:.10f}s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">next_time</span><span class=\"p\">,</span> <span class=\"n\">state2</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n                        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">+</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">retval</span>\n</pre></div>\n\n\n<p>This however only works with the new interal variable self.actual_times that gets added to in open/close:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"n\">t_calc</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t_calc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"n\">t_calc</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t_calc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and is initialized in <strong>init</strong>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n</pre></div>\n\n\n<p>Could you test the compilation time with and without this implementation of shutter collision and your ramp collision checks to see if compilation time is still a problem?</p>", "type": "rendered"}, "created_on": "2017-07-08T15:42:29.058879+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-08T15:42:29.258545+00:00", "type": "pullrequest_comment", "id": 40354246}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39497053.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39497053"}}, "parent": {"id": 39496712, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39496712.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39496712"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "For backward compatibility and simplicity, we could make `t0` a property, which if the device or instruction has a simple, fixed delay, would just return it, and otherwise would raise an exception and ask you to call `get_t0(instruction_type_or_child_device)` instead.", "markup": "markdown", "html": "<p>For backward compatibility and simplicity, we could make <code>t0</code> a property, which if the device or instruction has a simple, fixed delay, would just return it, and otherwise would raise an exception and ask you to call <code>get_t0(instruction_type_or_child_device)</code> instead.</p>", "type": "rendered"}, "created_on": "2017-06-25T01:34:16.476299+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-25T01:34:16.478519+00:00", "type": "pullrequest_comment", "id": 39497053}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39496712.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39496712"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "I've been working on an experimental new timing architecture for labscript 3.0 (for now just to see whether it makes sense, but I'm happy to do this out in the open if people want to see it and comment - so far it's basically the same class hierarchy but with an extra inheritance layer or two, an `Instruction` class and much more explicit stages of when what happens during compilation), and I think the way around this might be to make `t0` (and related things that are currently attributes) a method instead of an attribute, which can take as an argument the child device or `Instruction` class that the question applies to. In this way, different outputs of a device could have different latencies, and different types of `Instruction` objects when given to an `Output` could have different latencies. So you'd implement a `ShutterOpen` and `ShutterClose` subclass of the Instruction class, and a `Shutter` subclass of the `Output` or `DigitalOutput` class (as we have already), and the `Shutter`'s implementation of `t0()` and `trigger_delay()` would return the open delay for one type of instruction and the close delay for the other. (relatedly, I think every device should implement `trigger_delay()` to allow for latencies at every connection - I would rename it `latency` or similar though since it's not necessarily about triggers).\n\nThe default implementations of these methods would not require a child device or instruction to be passed in, and would simply look for a class/instance attribute and return it, which would make things simple when output delays are constant. I could perhaps make the default implementation look for  an attribute which could be *either* a number or a dictionary. If it found the latter, it would error if the user didn't pass in a child device or Instruction class, and then would check for a dictionary entry keyed by `Instruction` classes in the case of an `Instruction`, or by connection string in the case of a child device. Any more sophisticated requirements could be met by reimplementing the method to return delay times based on anything else you like.\n\nThat way you could ask \"What's t0 for a `ShutterOpen` instruction?\", specifically.\n\nSome syntactic sugar for this could be that you pass in a special object called `t0` or `trigger_delay` similar, in place of a time, and the Instruction class's `__init__` method would see this and know to call the parent output's `t0` method with itself as the argument in order to determine the `t` value for that instruction. The type that `t0` and `trigger_delay` (or `total_latency` or whatever it ends up being called) were could grow an `__add__` method (any arithmetic other than adding and subtracting should probably be a `TypeError` unless there's a compelling reason otherwise) to store an offset so that you could pass in `t + trigger_delay` after a wait and have that do something sensible. This is sounding similar to a suggestion @spielman was making in another thread, though it's not the same - I think times should still be floats, but I like some syntactic sugar that is just a shortcut telling the code directly beneath is what methods to call and what offset to apply to get the time you mean.", "markup": "markdown", "html": "<p>I've been working on an experimental new timing architecture for labscript 3.0 (for now just to see whether it makes sense, but I'm happy to do this out in the open if people want to see it and comment - so far it's basically the same class hierarchy but with an extra inheritance layer or two, an <code>Instruction</code> class and much more explicit stages of when what happens during compilation), and I think the way around this might be to make <code>t0</code> (and related things that are currently attributes) a method instead of an attribute, which can take as an argument the child device or <code>Instruction</code> class that the question applies to. In this way, different outputs of a device could have different latencies, and different types of <code>Instruction</code> objects when given to an <code>Output</code> could have different latencies. So you'd implement a <code>ShutterOpen</code> and <code>ShutterClose</code> subclass of the Instruction class, and a <code>Shutter</code> subclass of the <code>Output</code> or <code>DigitalOutput</code> class (as we have already), and the <code>Shutter</code>'s implementation of <code>t0()</code> and <code>trigger_delay()</code> would return the open delay for one type of instruction and the close delay for the other. (relatedly, I think every device should implement <code>trigger_delay()</code> to allow for latencies at every connection - I would rename it <code>latency</code> or similar though since it's not necessarily about triggers).</p>\n<p>The default implementations of these methods would not require a child device or instruction to be passed in, and would simply look for a class/instance attribute and return it, which would make things simple when output delays are constant. I could perhaps make the default implementation look for  an attribute which could be <em>either</em> a number or a dictionary. If it found the latter, it would error if the user didn't pass in a child device or Instruction class, and then would check for a dictionary entry keyed by <code>Instruction</code> classes in the case of an <code>Instruction</code>, or by connection string in the case of a child device. Any more sophisticated requirements could be met by reimplementing the method to return delay times based on anything else you like.</p>\n<p>That way you could ask \"What's t0 for a <code>ShutterOpen</code> instruction?\", specifically.</p>\n<p>Some syntactic sugar for this could be that you pass in a special object called <code>t0</code> or <code>trigger_delay</code> similar, in place of a time, and the Instruction class's <code>__init__</code> method would see this and know to call the parent output's <code>t0</code> method with itself as the argument in order to determine the <code>t</code> value for that instruction. The type that <code>t0</code> and <code>trigger_delay</code> (or <code>total_latency</code> or whatever it ends up being called) were could grow an <code>__add__</code> method (any arithmetic other than adding and subtracting should probably be a <code>TypeError</code> unless there's a compelling reason otherwise) to store an offset so that you could pass in <code>t + trigger_delay</code> after a wait and have that do something sensible. This is sounding similar to a suggestion @spielman was making in another thread, though it's not the same - I think times should still be floats, but I like some syntactic sugar that is just a shortcut telling the code directly beneath is what methods to call and what offset to apply to get the time you mean.</p>", "type": "rendered"}, "created_on": "2017-06-24T23:31:33.224762+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-24T23:50:44.280283+00:00", "type": "pullrequest_comment", "id": 39496712}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39417115.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39417115"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "You should probably move to initialising your shutters at `shutter1.close(shutter1.t0)` (or similarly `open(...)` if you want to open them). The `t0` parameter of each object will contain the earliest time that the channel can be commanded (based on trigger delays, etc. if you are on a secondary pseudoclock). For channels on the master pseudoclock, I believe it is set to 0 (so would be equivalent for you, but more maintainable in the long run)\n\nRight now this doesn't take into account the shutter delay, but I think we should probably modify the `t0` parameter of shutters so that it does include the delay (this is tricky though because it depends on whether it is an open or close event since the delay may be different...we might need to wait to fix that particular issue with labscript v3 whose aim will be to introduce a better instruction class that will not throw away information about times as triggers/delays/etc are taken into account...I think this is why the comment in issue #2 is \"aim to fix in labscript 2.0\" (which actually means labscript v3). It's too difficult to fix correctly, and efficiently without better labscript internals.)", "markup": "markdown", "html": "<p>You should probably move to initialising your shutters at <code>shutter1.close(shutter1.t0)</code> (or similarly <code>open(...)</code> if you want to open them). The <code>t0</code> parameter of each object will contain the earliest time that the channel can be commanded (based on trigger delays, etc. if you are on a secondary pseudoclock). For channels on the master pseudoclock, I believe it is set to 0 (so would be equivalent for you, but more maintainable in the long run)</p>\n<p>Right now this doesn't take into account the shutter delay, but I think we should probably modify the <code>t0</code> parameter of shutters so that it does include the delay (this is tricky though because it depends on whether it is an open or close event since the delay may be different...we might need to wait to fix that particular issue with labscript v3 whose aim will be to introduce a better instruction class that will not throw away information about times as triggers/delays/etc are taken into account...I think this is why the comment in issue <a href=\"#!/labscript_suite/labscript/issues/2/shutter-commands-can-be-reordered-due-to\" rel=\"nofollow\" title=\"Shutter commands can be reordered due to shutter delays\" class=\"ap-connect-link\">#2</a> is \"aim to fix in labscript 2.0\" (which actually means labscript v3). It's too difficult to fix correctly, and efficiently without better labscript internals.)</p>", "type": "rendered"}, "created_on": "2017-06-23T01:41:39.138039+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-23T01:41:39.140448+00:00", "type": "pullrequest_comment", "id": 39417115}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39409725.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39409725"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "I think @philipstarkey 's ramp collision code is clearly superior and that constant, go_high and go_low are the way to go . \n\nLimiting the shutters opening/closing times to t0 + delay could however become confusing as most (of our) scripts initialize shutters at t=0 to a defined state. It wouldn't be to hard to change it to t=0+delay but not very intuitive either.", "markup": "markdown", "html": "<p>I think @philipstarkey 's ramp collision code is clearly superior and that constant, go_high and go_low are the way to go . </p>\n<p>Limiting the shutters opening/closing times to t0 + delay could however become confusing as most (of our) scripts initialize shutters at t=0 to a defined state. It wouldn't be to hard to change it to t=0+delay but not very intuitive either.</p>", "type": "rendered"}, "created_on": "2017-06-22T21:58:07.682548+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-06-22T21:58:07.753058+00:00", "type": "pullrequest_comment", "id": 39409725}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39026352.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39026352"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "I've been thinking about how to implement these checks efficiently. \n\nFor the collision of instructions with ramps, I think we should modify `Output.get_change_times()` to include the following\n\n```\n#!python\n# These lines already exist in the method\ntimes = self.instructions.keys()\ntimes.sort()\n\n# new code to be inserted\ncurrent_dict_time = None\nfor time in times:\n    if isinstance(self.instructions[time], dict) and current_dict_time is None:\n        current_dict_time = self.instructions[time]\n    elif current_dict_time is not None and current_dict_time['initial time'] < time < current_dict_time['end time']:        \n        err = (\"{:s} {:s} has an instruction at t={:.10f}s. This instruction collides with a ramp on this output at that time. \".format(self.description, self.name, time)+\n               \"The colliding {:s} is from {:.10f}s till {:.10f}s\".format(inst['description'], current_dict_time['initial time'], current_dict_time['end time']))\n        raise LabscriptError(err) \n```\n\nThere may be a more efficient way to do this, but we should check this first to avoid premature optimisation. At least this only scales with O(N) rather than O(N^2).\n\n----\n\nThe shutter collision checking is a lot more complicated. I'm not sure we can actually do it correctly before the proper introduction of the instruction class that keeps track of things. This is because the current Shutter implementation appears broken to me because it assumes that the device starts at t=0, which is not the case for secondary pseudoclocks. Since the original code was broken, the patch in this pull request is also broken because it utilises the same time calculation. I think that calls to shutters within the open/close delay of the pseudoclock trigger, provided that trigger is at least one open/close delay after t=0 will probably raise an exception deep within labscript somewhere.\n\nI'd like to do this check in `get_change_times()` as well (override it in the `Shutter` class) but because we ignore the open/close delay if we are close to t=0, then we can't back-calculate the original request time at that point with the current labscript implementation. We could demand that shutters cannot be commanded prior to `output.t0 + output.open_delay` or `output.t0 + output.close_delay` for open/close respectively I suppose?\n\nThen we could do:\n\n```\n#!python\ndef get_change_times(self, *args, **kwargs):\n    retval = DigitalOut.get_change_times(self, *args, **kwargs)\n\n    for i, time in enumerate(self.times):\n        if i < len(self.times)-1:\n            next_time = self.times[i+1]\n            # only look at instructions that contain a state change\n            if self.instructions[time] != self.instructions[next_time]:\n                # calculate original times for these instructions, \n                # make sure they were not reordered!\n                if self.open_state == self.instructions[time]:\n                    t1 = time+self.open_delay\n                else:\n                    t1 = time+self.close_delay\n\n                if self.open_state == self.instructions[next_time]:\n                    t2 = next_time+self.open_delay\n                else:\n                    t2 = next_time+self.close_delay\n\n                if t2 < t1:\n                    #raise appropriately derived error message\n\n    return retval\n\n```\nThis also scales with O(N)\n\nNot sure if that's too drastic though (the limiting of how early shutters can be opened/closed)?\n\n", "markup": "markdown", "html": "<p>I've been thinking about how to implement these checks efficiently. </p>\n<p>For the collision of instructions with ramps, I think we should modify <code>Output.get_change_times()</code> to include the following</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># These lines already exist in the method</span>\n<span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n<span class=\"n\">times</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># new code to be inserted</span>\n<span class=\"n\">current_dict_time</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n<span class=\"k\">for</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"n\">times</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">current_dict_time</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">current_dict_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">current_dict_time</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"ow\">and</span> <span class=\"n\">current_dict_time</span><span class=\"p\">[</span><span class=\"s1\">&#39;initial time&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span> <span class=\"o\">&lt;</span> <span class=\"n\">current_dict_time</span><span class=\"p\">[</span><span class=\"s1\">&#39;end time&#39;</span><span class=\"p\">]:</span>        \n        <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;{:s} {:s} has an instruction at t={:.10f}s. This instruction collides with a ramp on this output at that time. &quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">)</span><span class=\"o\">+</span>\n               <span class=\"s2\">&quot;The colliding {:s} is from {:.10f}s till {:.10f}s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;description&#39;</span><span class=\"p\">],</span> <span class=\"n\">current_dict_time</span><span class=\"p\">[</span><span class=\"s1\">&#39;initial time&#39;</span><span class=\"p\">],</span> <span class=\"n\">current_dict_time</span><span class=\"p\">[</span><span class=\"s1\">&#39;end time&#39;</span><span class=\"p\">]))</span>\n        <span class=\"k\">raise</span> <span class=\"n\">LabscriptError</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span> \n</pre></div>\n\n\n<p>There may be a more efficient way to do this, but we should check this first to avoid premature optimisation. At least this only scales with O(N) rather than O(N^2).</p>\n<hr />\n<p>The shutter collision checking is a lot more complicated. I'm not sure we can actually do it correctly before the proper introduction of the instruction class that keeps track of things. This is because the current Shutter implementation appears broken to me because it assumes that the device starts at t=0, which is not the case for secondary pseudoclocks. Since the original code was broken, the patch in this pull request is also broken because it utilises the same time calculation. I think that calls to shutters within the open/close delay of the pseudoclock trigger, provided that trigger is at least one open/close delay after t=0 will probably raise an exception deep within labscript somewhere.</p>\n<p>I'd like to do this check in <code>get_change_times()</code> as well (override it in the <code>Shutter</code> class) but because we ignore the open/close delay if we are close to t=0, then we can't back-calculate the original request time at that point with the current labscript implementation. We could demand that shutters cannot be commanded prior to <code>output.t0 + output.open_delay</code> or <code>output.t0 + output.close_delay</code> for open/close respectively I suppose?</p>\n<p>Then we could do:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"n\">DigitalOut</span><span class=\"o\">.</span><span class=\"n\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">times</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">times</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">next_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"c1\"># only look at instructions that contain a state change</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">]:</span>\n                <span class=\"c1\"># calculate original times for these instructions, </span>\n                <span class=\"c1\"># make sure they were not reordered!</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">]:</span>\n                    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span>\n\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instructions</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">]:</span>\n                    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">next_time</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"n\">next_time</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">t2</span> <span class=\"o\">&lt;</span> <span class=\"n\">t1</span><span class=\"p\">:</span>\n                    <span class=\"c1\">#raise appropriately derived error message</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">retval</span>\n</pre></div>\n\n\n<p>This also scales with O(N)</p>\n<p>Not sure if that's too drastic though (the limiting of how early shutters can be opened/closed)?</p>", "type": "rendered"}, "created_on": "2017-06-17T05:22:02.042412+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-17T05:22:02.044726+00:00", "type": "pullrequest_comment", "id": 39026352}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39025528.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39025528"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "Ok, this has been backed out in commit 7f4bffa24", "markup": "markdown", "html": "<p>Ok, this has been backed out in commit <a href=\"#!/labscript_suite/labscript/commits/7f4bffa24\" rel=\"nofollow\" class=\"ap-connect-link\">7f4bffa24</a></p>", "type": "rendered"}, "created_on": "2017-06-17T01:49:32.565788+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T01:49:32.567836+00:00", "type": "pullrequest_comment", "id": 39025528}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39025401.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39025401"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "I hadn't considered compilation time. I suppose this processing must be quadratic in the number of instructions, or something like that. I'll back it out for now.", "markup": "markdown", "html": "<p>I hadn't considered compilation time. I suppose this processing must be quadratic in the number of instructions, or something like that. I'll back it out for now.</p>", "type": "rendered"}, "created_on": "2017-06-17T01:27:10.818951+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-17T01:27:10.821211+00:00", "type": "pullrequest_comment", "id": 39025401}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39025302.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39025302"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "I actually don't approve of this patch because it significantly increases compilation time. For our experiment, compilation time was previously around 0.65 seconds (note: I've removed RFBlasters and saving of hg information here to get reliable benchmarks. I'll elaborate on the second in the issue tracker shortly). With this patch it is now more like 1.65 seconds.\n\nI'd also like to see the patch use `constant` and `go_high` and `go_low` rather than directly using `add_instruction` as that follows a better programming paradigm in my view.\n\n@cbillington Since this has already been merged, I would suggest either backing out the changes for the moment until these issues are addressed, or tracking down which part of the patch was inefficient and quickly fixing it.", "markup": "markdown", "html": "<p>I actually don't approve of this patch because it significantly increases compilation time. For our experiment, compilation time was previously around 0.65 seconds (note: I've removed RFBlasters and saving of hg information here to get reliable benchmarks. I'll elaborate on the second in the issue tracker shortly). With this patch it is now more like 1.65 seconds.</p>\n<p>I'd also like to see the patch use <code>constant</code> and <code>go_high</code> and <code>go_low</code> rather than directly using <code>add_instruction</code> as that follows a better programming paradigm in my view.</p>\n<p>@cbillington Since this has already been merged, I would suggest either backing out the changes for the moment until these issues are addressed, or tracking down which part of the patch was inefficient and quickly fixing it.</p>", "type": "rendered"}, "created_on": "2017-06-17T01:13:27.620228+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-06-17T01:13:27.628994+00:00", "type": "pullrequest_comment", "id": 39025302}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"update": {"description": "* Check that no other instruction is during a ramp on one output\r\n\r\n* Close branch ReneKolb/Ramp_Collide_Check\r\n\r\n* A check has been added which checks whether the shutter is to be closed during the opening process and vice versa. If the new instruction is during the open or close delay, a warning message is emitted.\r\n\r\n* Close branch ReneKolb/Check_Shutter_Delays", "title": "Check ramp collision and shutter delays", "destination": {"commit": {"hash": "8605d16ba9c6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/8605d16ba9c6.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/8605d16ba9c6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "acd6abf3f7c2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/commit/acd6abf3f7c2"}, "html": {"href": "#!/ReneKolb/labscript/commits/acd6abf3f7c2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript"}, "html": {"href": "#!/ReneKolb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e5bcc338-0f71-423d-a5e3-5e9b093934f9}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "ReneKolb/labscript", "uuid": "{e5bcc338-0f71-423d-a5e3-5e9b093934f9}"}, "branch": {"name": "default"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-06-16T05:22:40.290034+00:00"}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/38956317.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-38956317"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "Thanks for the patch! This looks fine to me, so I'm merging it.", "markup": "markdown", "html": "<p>Thanks for the patch! This looks fine to me, so I'm merging it.</p>", "type": "rendered"}, "created_on": "2017-06-16T05:22:29.462618+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-16T05:22:29.465177+00:00", "type": "pullrequest_comment", "id": 38956317}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"approval": {"date": "2017-06-16T05:20:45.526533+00:00", "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"update": {"description": "* Check that no other instruction is during a ramp on one output\r\n\r\n* Close branch ReneKolb/Ramp_Collide_Check\r\n\r\n* A check has been added which checks whether the shutter is to be closed during the opening process and vice versa. If the new instruction is during the open or close delay, a warning message is emitted.\r\n\r\n* Close branch ReneKolb/Check_Shutter_Delays", "title": "Check ramp collision and shutter delays", "destination": {"commit": {"hash": "8605d16ba9c6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/8605d16ba9c6.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/8605d16ba9c6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "acd6abf3f7c2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/commit/acd6abf3f7c2"}, "html": {"href": "#!/ReneKolb/labscript/commits/acd6abf3f7c2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript"}, "html": {"href": "#!/ReneKolb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e5bcc338-0f71-423d-a5e3-5e9b093934f9}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "ReneKolb/labscript", "uuid": "{e5bcc338-0f71-423d-a5e3-5e9b093934f9}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "date": "2017-05-30T13:56:45.695822+00:00"}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/37822146.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-37822146"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "This fixes issue #2", "markup": "markdown", "html": "<p>This fixes issue <a href=\"#!/labscript_suite/labscript/issues/2/shutter-commands-can-be-reordered-due-to\" rel=\"nofollow\" title=\"Shutter commands can be reordered due to shutter delays\" class=\"ap-connect-link\">#2</a></p>", "type": "rendered"}, "created_on": "2017-05-30T12:28:25.064776+00:00", "user": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "updated_on": "2017-05-30T12:28:25.106113+00:00", "type": "pullrequest_comment", "id": 37822146}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"update": {"description": "* Check that no other instruction is during a ramp on one output\r\n\r\n* Close branch ReneKolb/Ramp_Collide_Check\r\n\r\n* A check has been added which checks whether the shutter is to be closed during the opening process and vice versa. If the new instruction is during the open or close delay, a warning message is emitted.\r\n\r\n* Close branch ReneKolb/Check_Shutter_Delays", "title": "Check ramp collision and shutter delays", "destination": {"commit": {"hash": "8605d16ba9c6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/8605d16ba9c6.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/8605d16ba9c6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b238964a18d7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/commit/b238964a18d7"}, "html": {"href": "#!/ReneKolb/labscript/commits/b238964a18d7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript"}, "html": {"href": "#!/ReneKolb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e5bcc338-0f71-423d-a5e3-5e9b093934f9}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "ReneKolb/labscript", "uuid": "{e5bcc338-0f71-423d-a5e3-5e9b093934f9}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "date": "2017-05-30T12:22:17.250013+00:00"}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}, {"update": {"description": "* Check that no other instruction is during a ramp on one output\r\n\r\n* Close branch ReneKolb/Ramp_Collide_Check\r\n\r\n* A check has been added which checks whether the shutter is to be closed during the opening process and vice versa. If the new instruction is during the open or close delay, a warning message is emitted.\r\n\r\n* Close branch ReneKolb/Check_Shutter_Delays", "title": "Check ramp collision and shutter delays", "destination": {"commit": {"hash": "8605d16ba9c6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript/commit/8605d16ba9c6.json"}, "html": {"href": "#!/labscript_suite/labscript/commits/8605d16ba9c6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript.json"}, "html": {"href": "#!/labscript_suite/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{48848b08-1db5-463b-bbdc-911beadf8bbf}ts=249917"}}, "type": "repository", "name": "labscript", "full_name": "labscript_suite/labscript", "uuid": "{48848b08-1db5-463b-bbdc-911beadf8bbf}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b238964a18d7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript/commit/b238964a18d7"}, "html": {"href": "#!/ReneKolb/labscript/commits/b238964a18d7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/ReneKolb/labscript"}, "html": {"href": "#!/ReneKolb/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e5bcc338-0f71-423d-a5e3-5e9b093934f9}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "ReneKolb/labscript", "uuid": "{e5bcc338-0f71-423d-a5e3-5e9b093934f9}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "ReneKolb", "uuid": "{a14da38a-5a42-4215-a657-8d03e2e12c62}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D"}, "html": {"href": "https://bitbucket.org/%7Ba14da38a-5a42-4215-a657-8d03e2e12c62%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fdb60d6ad1bfc79b620af131e1ff76acd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsR-3.png"}}, "nickname": "ReneKolb", "type": "user", "account_id": "557058:cee66bea-c1f2-4230-9ace-11e2dc725285"}, "date": "2017-05-30T12:22:17.094863+00:00"}, "pull_request": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}}]}