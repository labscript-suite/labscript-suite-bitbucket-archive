{"links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/40354246.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-40354246"}}, "parent": {"id": 39026352, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9/comments/39026352.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9/_/diff#comment-39026352"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 9, "links": {"self": {"href": "data/repositories/labscript_suite/labscript/pullrequests/9.json"}, "html": {"href": "#!/labscript_suite/labscript/pull-requests/9"}}, "title": "Check ramp collision and shutter delays"}, "content": {"raw": "@philipstarkey I tested your approach and it worked in a few but not all cases. The problem was, that if open and close delay are not the same instructions can start to get reordered if they get too close to each other. This would then make self.instructions[time] != self.instructions[next_time]  return False and some cases would not trigger that should have.\nI took your approach and expanded on it in the following way that also scales with O(N). I also worked around the problem of nor being able to back calculate:\n```\n#!python\n\n    def get_change_times(self, *args, **kwargs):\n        retval = DigitalOut.get_change_times(self, *args, **kwargs)\n\n        sorted_times = self.actual_times.keys()\n        sorted_times.sort()\n        if len(sorted_times)>1:\n            for i in range(len(sorted_times)-1):\n                time = sorted_times[i]\n                next_time = sorted_times[i+1]\n                # only look at instructions that contain a state change\n                if self.actual_times[time]['instruction'] != self.actual_times[next_time]['instruction']:\n                    state1 = 'open' if self.actual_times[next_time]['instruction'] == 1 else 'close'\n                    state2 = 'opened' if self.actual_times[time]['instruction'] == 1 else 'closed'\n                    if self.actual_times[next_time]['time'] < time:\n                        message = \"WARNING: The shutter '{:s}' is requestes to {:s} too early (taking delay into account) at t={:.10f}s when it is still not {:s} from an earlier instruction at t={:.10f}s\".format(self.name, state1, next_time, state2, time)\n                        sys.stderr.write(message+'\\n')\n\n        return retval\n```\n\nThis however only works with the new interal variable self.actual_times that gets added to in open/close:\n\n\n```\n#!python\n\n    def open(self, t):\n        t_calc = t-self.open_delay if t >= self.open_delay else 0\n        self.actual_times[t] = {'time': t_calc, 'instruction': 1}\n        if self.open_state == 1:\n            self.go_high(t_calc)\n        elif self.open_state == 0:\n            self.go_low(t_calc)\n\n    def close(self, t):\n        t_calc = t-self.close_delay if t >= self.close_delay else 0\n        self.actual_times[t] = {'time': t_calc, 'instruction': 0}\n        if self.open_state == 1:\n            self.go_low(t_calc)\n        elif self.open_state == 0:\n            self.go_high(t_calc)\n```\nand is initialized in __init__:\n\n```\n#!python\n\nself.actual_times = {}\n```\n\nCould you test the compilation time with and without this implementation of shutter collision and your ramp collision checks to see if compilation time is still a problem?", "markup": "markdown", "html": "<p>@philipstarkey I tested your approach and it worked in a few but not all cases. The problem was, that if open and close delay are not the same instructions can start to get reordered if they get too close to each other. This would then make self.instructions[time] != self.instructions[next_time]  return False and some cases would not trigger that should have.\nI took your approach and expanded on it in the following way that also scales with O(N). I also worked around the problem of nor being able to back calculate:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"n\">DigitalOut</span><span class=\"o\">.</span><span class=\"n\">get_change_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">sorted_times</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span>\n        <span class=\"n\">sorted_times</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sorted_times</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sorted_times</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">sorted_times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                <span class=\"n\">next_time</span> <span class=\"o\">=</span> <span class=\"n\">sorted_times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"c1\"># only look at instructions that contain a state change</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">state1</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;open&#39;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;close&#39;</span>\n                    <span class=\"n\">state2</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;opened&#39;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">time</span><span class=\"p\">][</span><span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;closed&#39;</span>\n                    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">next_time</span><span class=\"p\">][</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"p\">:</span>\n                        <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;WARNING: The shutter &#39;{:s}&#39; is requestes to {:s} too early (taking delay into account) at t={:.10f}s when it is still not {:s} from an earlier instruction at t={:.10f}s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">state1</span><span class=\"p\">,</span> <span class=\"n\">next_time</span><span class=\"p\">,</span> <span class=\"n\">state2</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n                        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">+</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">retval</span>\n</pre></div>\n\n\n<p>This however only works with the new interal variable self.actual_times that gets added to in open/close:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"n\">t_calc</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_delay</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t_calc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"n\">t_calc</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">close_delay</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">:</span> <span class=\"n\">t_calc</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instruction&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_low</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open_state</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"n\">t_calc</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and is initialized in <strong>init</strong>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">actual_times</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n</pre></div>\n\n\n<p>Could you test the compilation time with and without this implementation of shutter collision and your ramp collision checks to see if compilation time is still a problem?</p>", "type": "rendered"}, "created_on": "2017-07-08T15:42:29.058879+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-08T15:42:29.258545+00:00", "type": "pullrequest_comment", "id": 40354246}