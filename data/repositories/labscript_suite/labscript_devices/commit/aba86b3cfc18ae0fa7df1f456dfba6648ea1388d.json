{"rendered": {"message": {"raw": "Resolve issue #33.\n\nPulseblasters now have a long delay time computed from their core clock freq,\nwhich has been added as an instance attribute to every subclass.\n(this is messy, as it is duplicated in the BLACS worker classes too. It should be\npassed as a connection table property ideally, but this will have to wait for a\nmore general 'pulseblaster unification' change I think, along the lines of the\nNI DAQ unification).\n\nFor each clock tick, the high time is half the clock period if\n`pulse_width='symmetric'` (the default), the minimum possible if\n`pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\n\nThe high time is then clipped to self.long_delay if it is larger, in which case\nthe pulse_width argument is not honoured, but 57 second high times ought to be\nvisible on scopes and not too fast for any devices, so this is preferable to\nthe alternative of adding LONG_DELAY instructions to *both* the high and low\ntimes of the clock ticks.\n\nThe low time is then computed as whatever is left, and split into a LONG_DELAY\ninstruction plus the remainder as an END_LOOP instruction, as before.\n\nIf the PulseBlaster has no external clocks for this clock tick, it uses a\nLONG_DELAY plus the remainder as a CONTINUE instruction, as before.", "markup": "markdown", "html": "<p>Resolve issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>.</p>\n<p>Pulseblasters now have a long delay time computed from their core clock freq,<br />\nwhich has been added as an instance attribute to every subclass.<br />\n(this is messy, as it is duplicated in the BLACS worker classes too. It should be<br />\npassed as a connection table property ideally, but this will have to wait for a<br />\nmore general 'pulseblaster unification' change I think, along the lines of the<br />\nNI DAQ unification).</p>\n<p>For each clock tick, the high time is half the clock period if<br />\n<code>pulse_width='symmetric'</code> (the default), the minimum possible if<br />\n<code>pulse_width='minimum'</code>, or a fixed value if <code>pulse_width</code> is given as a number.</p>\n<p>The high time is then clipped to self.long_delay if it is larger, in which case<br />\nthe pulse_width argument is not honoured, but 57 second high times ought to be<br />\nvisible on scopes and not too fast for any devices, so this is preferable to<br />\nthe alternative of adding LONG_DELAY instructions to <em>both</em> the high and low<br />\ntimes of the clock ticks.</p>\n<p>The low time is then computed as whatever is left, and split into a LONG_DELAY<br />\ninstruction plus the remainder as an END_LOOP instruction, as before.</p>\n<p>If the PulseBlaster has no external clocks for this clock tick, it uses a<br />\nLONG_DELAY plus the remainder as a CONTINUE instruction, as before.</p>", "type": "rendered"}}, "hash": "aba86b3cfc18ae0fa7df1f456dfba6648ea1388d", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/commit/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/patch/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/commit/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/commit/aba86b3cfc18ae0fa7df1f456dfba6648ea1388d/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Resolve issue #33.\n\nPulseblasters now have a long delay time computed from their core clock freq,\nwhich has been added as an instance attribute to every subclass.\n(this is messy, as it is duplicated in the BLACS worker classes too. It should be\npassed as a connection table property ideally, but this will have to wait for a\nmore general 'pulseblaster unification' change I think, along the lines of the\nNI DAQ unification).\n\nFor each clock tick, the high time is half the clock period if\n`pulse_width='symmetric'` (the default), the minimum possible if\n`pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\n\nThe high time is then clipped to self.long_delay if it is larger, in which case\nthe pulse_width argument is not honoured, but 57 second high times ought to be\nvisible on scopes and not too fast for any devices, so this is preferable to\nthe alternative of adding LONG_DELAY instructions to *both* the high and low\ntimes of the clock ticks.\n\nThe low time is then computed as whatever is left, and split into a LONG_DELAY\ninstruction plus the remainder as an END_LOOP instruction, as before.\n\nIf the PulseBlaster has no external clocks for this clock tick, it uses a\nLONG_DELAY plus the remainder as a CONTINUE instruction, as before.", "markup": "markdown", "html": "<p>Resolve issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>.</p>\n<p>Pulseblasters now have a long delay time computed from their core clock freq,<br />\nwhich has been added as an instance attribute to every subclass.<br />\n(this is messy, as it is duplicated in the BLACS worker classes too. It should be<br />\npassed as a connection table property ideally, but this will have to wait for a<br />\nmore general 'pulseblaster unification' change I think, along the lines of the<br />\nNI DAQ unification).</p>\n<p>For each clock tick, the high time is half the clock period if<br />\n<code>pulse_width='symmetric'</code> (the default), the minimum possible if<br />\n<code>pulse_width='minimum'</code>, or a fixed value if <code>pulse_width</code> is given as a number.</p>\n<p>The high time is then clipped to self.long_delay if it is larger, in which case<br />\nthe pulse_width argument is not honoured, but 57 second high times ought to be<br />\nvisible on scopes and not too fast for any devices, so this is preferable to<br />\nthe alternative of adding LONG_DELAY instructions to <em>both</em> the high and low<br />\ntimes of the clock ticks.</p>\n<p>The low time is then computed as whatever is left, and split into a LONG_DELAY<br />\ninstruction plus the remainder as an END_LOOP instruction, as before.</p>\n<p>If the PulseBlaster has no external clocks for this clock tick, it uses a<br />\nLONG_DELAY plus the remainder as a CONTINUE instruction, as before.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "96b758466d85692e4a0ec40604dcfe89af3c8df3", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/96b758466d85692e4a0ec40604dcfe89af3c8df3.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/96b758466d85692e4a0ec40604dcfe89af3c8df3"}}}], "date": "2019-05-15T20:58:44+00:00", "message": "Resolve issue #33.\n\nPulseblasters now have a long delay time computed from their core clock freq,\nwhich has been added as an instance attribute to every subclass.\n(this is messy, as it is duplicated in the BLACS worker classes too. It should be\npassed as a connection table property ideally, but this will have to wait for a\nmore general 'pulseblaster unification' change I think, along the lines of the\nNI DAQ unification).\n\nFor each clock tick, the high time is half the clock period if\n`pulse_width='symmetric'` (the default), the minimum possible if\n`pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\n\nThe high time is then clipped to self.long_delay if it is larger, in which case\nthe pulse_width argument is not honoured, but 57 second high times ought to be\nvisible on scopes and not too fast for any devices, so this is preferable to\nthe alternative of adding LONG_DELAY instructions to *both* the high and low\ntimes of the clock ticks.\n\nThe low time is then computed as whatever is left, and split into a LONG_DELAY\ninstruction plus the remainder as an END_LOOP instruction, as before.\n\nIf the PulseBlaster has no external clocks for this clock tick, it uses a\nLONG_DELAY plus the remainder as a CONTINUE instruction, as before.", "type": "commit", "git_hash": "9e334987a0458e61085b5ca57af3435d4a3248ac", "tags": null, "branches": "pulse-width-fixes"}