{"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/13/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/13/pulseblaster-dds-cannot-be-ramped"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/13/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Pulseblaster DDS cannot be ramped", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In the current implementation, it seems as though the DDS outputs on a pulseblaster (DDS-II-300-AWG in this case) cannot be ramped.\r\nThere is a flag in pulseblaster.py which sets the internal pseudoclock to be non-rampable. Simply changing this to allow ramping *does not work.*\r\nThe resulting ramp appears to have the wrong timescale.\r\n\r\nIn my test case, I had the pulseblaster DDS amplitude ramp from 0 to 1 over a second, and then at the end of that ramp, a device clocked by flag 0 of the pulseblaster was supposed to have a 2s long ramp.\r\nInstead, based on the traces shown in runviewer, the pulseblaster DDS amplitude slowly increased, but with quite long time intervals between jumps in amplitude, and only reached ~0.2 by the end of the experiment. Meanwhile, the device which was supposed to ramp at the completion of the pulseblaster ramp started its ramp at the start of the pulseblaster ramp, and completed it in the duration set.\r\n\r\nThere must be some issues with the internal clocking?\r\n\r\nThere is, however a relatively easy workaround, so long as you are not doing anything too complex: use a for loop to update the DDS value to \"constant\" values based on the function which you want it to follow.\r\nThe main limitation of this workaround is that it may be hard to implement overlapping ramps or other complex situations like this, which labscript is generally excellent at dealing with.", "markup": "markdown", "html": "<p>In the current implementation, it seems as though the DDS outputs on a pulseblaster (DDS-II-300-AWG in this case) cannot be ramped.\nThere is a flag in pulseblaster.py which sets the internal pseudoclock to be non-rampable. Simply changing this to allow ramping <em>does not work.</em>\nThe resulting ramp appears to have the wrong timescale.</p>\n<p>In my test case, I had the pulseblaster DDS amplitude ramp from 0 to 1 over a second, and then at the end of that ramp, a device clocked by flag 0 of the pulseblaster was supposed to have a 2s long ramp.\nInstead, based on the traces shown in runviewer, the pulseblaster DDS amplitude slowly increased, but with quite long time intervals between jumps in amplitude, and only reached ~0.2 by the end of the experiment. Meanwhile, the device which was supposed to ramp at the completion of the pulseblaster ramp started its ramp at the start of the pulseblaster ramp, and completed it in the duration set.</p>\n<p>There must be some issues with the internal clocking?</p>\n<p>There is, however a relatively easy workaround, so long as you are not doing anything too complex: use a for loop to update the DDS value to \"constant\" values based on the function which you want it to follow.\nThe main limitation of this workaround is that it may be hard to implement overlapping ramps or other complex situations like this, which labscript is generally excellent at dealing with.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2015-09-21T23:39:34.191465+00:00", "milestone": null, "updated_on": "2015-09-21T23:39:34.191465+00:00", "type": "issue", "id": 13}