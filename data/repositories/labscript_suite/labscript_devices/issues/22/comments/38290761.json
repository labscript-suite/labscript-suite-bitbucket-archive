{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/38290761.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-38290761"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "Yes we should solve this. Tangentially, I've been having discussions with @shaunj regarding how we might manage user contributed plugins for BLACS (and hopefully other programs). It's a similar problem (though to be clear, I am **not** proposing devices and plugins be related in anyway).\n\nA proposed structure we came up with for this sort of user contributed code would be something like (replace ______ with device code or plugins or analysis scripts etc.):\n\n1. A set of ______ included with the main master repositories of the labscript suite (as we currently do)\n2. A set of repositories managed by the labscript_suite team for ______, grouped under a new project (bitbucket repository hierarchy currently has team -> project -> repository. Currently all of our repositories are in the one project with the same name as the team). These repositories would have access delegated to specific people outside the core team who maintain them (e.g. the maintainer for the device code). I think at this level, I'd suggest maintainers were limited to people who have shown a willingness to contribute to the main project, and are familiar with the coding conventions and quality expected (aka the people discussing here). This bypasses the need for us to have to vet every pull request like we're doing the the moment, which is particularly important if we can't test! Emphasis would need to be placed on never breaking backwards compatibility with previous version of the exposed user API, so as not to make life difficult for people using code from these repositories.\n3. ______ code stored in other repositories (aka their own and unrelated to the main repositories) \n\nThis suggests having a simple GUI to manage the pulling of code from any/all of the above repositories. I guess this is basically like a simple package manager, where you can add different sources which may have varying qualities, and then install the ______ that you want. Such a system would also allow us to at least warn users about name conflicts.\n\nI'd also suggest it is an open question as to whether the concept outlined in point 2 above would have one repository per ______ or one repository containing multiple ______. The former makes it easier to assign which people maintain which bits of code.\n\nAnyway, that's approximately an idea I had for this sort of thing. What do people think to it?", "markup": "markdown", "html": "<p>Yes we should solve this. Tangentially, I've been having discussions with @shaunj regarding how we might manage user contributed plugins for BLACS (and hopefully other programs). It's a similar problem (though to be clear, I am <strong>not</strong> proposing devices and plugins be related in anyway).</p>\n<p>A proposed structure we came up with for this sort of user contributed code would be something like (replace <strong>_</strong>_ with device code or plugins or analysis scripts etc.):</p>\n<ol>\n<li>A set of <strong>_</strong>_ included with the main master repositories of the labscript suite (as we currently do)</li>\n<li>A set of repositories managed by the labscript_suite team for <strong>_</strong>_, grouped under a new project (bitbucket repository hierarchy currently has team -&gt; project -&gt; repository. Currently all of our repositories are in the one project with the same name as the team). These repositories would have access delegated to specific people outside the core team who maintain them (e.g. the maintainer for the device code). I think at this level, I'd suggest maintainers were limited to people who have shown a willingness to contribute to the main project, and are familiar with the coding conventions and quality expected (aka the people discussing here). This bypasses the need for us to have to vet every pull request like we're doing the the moment, which is particularly important if we can't test! Emphasis would need to be placed on never breaking backwards compatibility with previous version of the exposed user API, so as not to make life difficult for people using code from these repositories.</li>\n<li><strong>_</strong>_ code stored in other repositories (aka their own and unrelated to the main repositories) </li>\n</ol>\n<p>This suggests having a simple GUI to manage the pulling of code from any/all of the above repositories. I guess this is basically like a simple package manager, where you can add different sources which may have varying qualities, and then install the <strong>_</strong>_ that you want. Such a system would also allow us to at least warn users about name conflicts.</p>\n<p>I'd also suggest it is an open question as to whether the concept outlined in point 2 above would have one repository per <strong><em>___ or one repository containing multiple </em></strong>___. The former makes it easier to assign which people maintain which bits of code.</p>\n<p>Anyway, that's approximately an idea I had for this sort of thing. What do people think to it?</p>", "type": "rendered"}, "created_on": "2017-07-18T00:09:27.402309+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38290761}