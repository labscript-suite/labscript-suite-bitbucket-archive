{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/38283422.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-38283422"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "Edited description to add the link.", "markup": "markdown", "html": "<p>Edited description to add the link.</p>", "type": "rendered"}, "created_on": "2017-07-17T16:18:46.672461+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 38283422}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/38288513.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-38288513"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "I'd widely support more devices being made available! We also have implemented a synthesizer (HP_8672A) and a Tektronix scope(Tektronix_TDS210) along with a bit of software for plotting and so on.\nAs I've not personally written that code nor used it much so I'm a bit hesitant of adding it. But non the less it seems that everyone uses about the same devices. A devices repo would definitely help everyone starting out and could also reduce the workload of implementing devices someone already has.\n\nI think a separate repo would be the best way to go.", "markup": "markdown", "html": "<p>I'd widely support more devices being made available! We also have implemented a synthesizer (HP_8672A) and a Tektronix scope(Tektronix_TDS210) along with a bit of software for plotting and so on.\nAs I've not personally written that code nor used it much so I'm a bit hesitant of adding it. But non the less it seems that everyone uses about the same devices. A devices repo would definitely help everyone starting out and could also reduce the workload of implementing devices someone already has.</p>\n<p>I think a separate repo would be the best way to go.</p>", "type": "rendered"}, "created_on": "2017-07-17T20:42:39.864479+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 38288513}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/38290761.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-38290761"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "Yes we should solve this. Tangentially, I've been having discussions with @shaunj regarding how we might manage user contributed plugins for BLACS (and hopefully other programs). It's a similar problem (though to be clear, I am **not** proposing devices and plugins be related in anyway).\n\nA proposed structure we came up with for this sort of user contributed code would be something like (replace ______ with device code or plugins or analysis scripts etc.):\n\n1. A set of ______ included with the main master repositories of the labscript suite (as we currently do)\n2. A set of repositories managed by the labscript_suite team for ______, grouped under a new project (bitbucket repository hierarchy currently has team -> project -> repository. Currently all of our repositories are in the one project with the same name as the team). These repositories would have access delegated to specific people outside the core team who maintain them (e.g. the maintainer for the device code). I think at this level, I'd suggest maintainers were limited to people who have shown a willingness to contribute to the main project, and are familiar with the coding conventions and quality expected (aka the people discussing here). This bypasses the need for us to have to vet every pull request like we're doing the the moment, which is particularly important if we can't test! Emphasis would need to be placed on never breaking backwards compatibility with previous version of the exposed user API, so as not to make life difficult for people using code from these repositories.\n3. ______ code stored in other repositories (aka their own and unrelated to the main repositories) \n\nThis suggests having a simple GUI to manage the pulling of code from any/all of the above repositories. I guess this is basically like a simple package manager, where you can add different sources which may have varying qualities, and then install the ______ that you want. Such a system would also allow us to at least warn users about name conflicts.\n\nI'd also suggest it is an open question as to whether the concept outlined in point 2 above would have one repository per ______ or one repository containing multiple ______. The former makes it easier to assign which people maintain which bits of code.\n\nAnyway, that's approximately an idea I had for this sort of thing. What do people think to it?", "markup": "markdown", "html": "<p>Yes we should solve this. Tangentially, I've been having discussions with @shaunj regarding how we might manage user contributed plugins for BLACS (and hopefully other programs). It's a similar problem (though to be clear, I am <strong>not</strong> proposing devices and plugins be related in anyway).</p>\n<p>A proposed structure we came up with for this sort of user contributed code would be something like (replace <strong>_</strong>_ with device code or plugins or analysis scripts etc.):</p>\n<ol>\n<li>A set of <strong>_</strong>_ included with the main master repositories of the labscript suite (as we currently do)</li>\n<li>A set of repositories managed by the labscript_suite team for <strong>_</strong>_, grouped under a new project (bitbucket repository hierarchy currently has team -&gt; project -&gt; repository. Currently all of our repositories are in the one project with the same name as the team). These repositories would have access delegated to specific people outside the core team who maintain them (e.g. the maintainer for the device code). I think at this level, I'd suggest maintainers were limited to people who have shown a willingness to contribute to the main project, and are familiar with the coding conventions and quality expected (aka the people discussing here). This bypasses the need for us to have to vet every pull request like we're doing the the moment, which is particularly important if we can't test! Emphasis would need to be placed on never breaking backwards compatibility with previous version of the exposed user API, so as not to make life difficult for people using code from these repositories.</li>\n<li><strong>_</strong>_ code stored in other repositories (aka their own and unrelated to the main repositories) </li>\n</ol>\n<p>This suggests having a simple GUI to manage the pulling of code from any/all of the above repositories. I guess this is basically like a simple package manager, where you can add different sources which may have varying qualities, and then install the <strong>_</strong>_ that you want. Such a system would also allow us to at least warn users about name conflicts.</p>\n<p>I'd also suggest it is an open question as to whether the concept outlined in point 2 above would have one repository per <strong><em>___ or one repository containing multiple </em></strong>___. The former makes it easier to assign which people maintain which bits of code.</p>\n<p>Anyway, that's approximately an idea I had for this sort of thing. What do people think to it?</p>", "type": "rendered"}, "created_on": "2017-07-18T00:09:27.402309+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 38290761}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/38364110.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-38364110"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "I think this is a good way forward personally. As far as point 2, I would think one repo per set of distinguishable ___. I say this because I've intentionally written my VISA based devices as children of parent classes to ease long term maintenance. I'd prefer to have all the inheritors in the same repo, even though they cover different devices. I suppose this would be less important if the simple package manager existed and had good dependency resolution.\n\nThat's my two cents.", "markup": "markdown", "html": "<p>I think this is a good way forward personally. As far as point 2, I would think one repo per set of distinguishable ___. I say this because I've intentionally written my VISA based devices as children of parent classes to ease long term maintenance. I'd prefer to have all the inheritors in the same repo, even though they cover different devices. I suppose this would be less important if the simple package manager existed and had good dependency resolution.</p>\n<p>That's my two cents.</p>", "type": "rendered"}, "created_on": "2017-07-20T19:38:36.320264+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 38364110}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/43623219.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-43623219"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "As a note to myself for when we finally get around to doing this, the ClassRegister functionality is going to need some moderate reworking in order to find devices not in the main repository (the module search is basically hard-coded in the \\__getitem__() method now). It took me longer than it should have to figure this out and I don't want to forget.", "markup": "markdown", "html": "<p>As a note to myself for when we finally get around to doing this, the ClassRegister functionality is going to need some moderate reworking in order to find devices not in the main repository (the module search is basically hard-coded in the __getitem__() method now). It took me longer than it should have to figure this out and I don't want to forget.</p>", "type": "rendered"}, "created_on": "2018-03-01T13:49:50.337736+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 43623219}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/48558306.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-48558306"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "@chrisbillington \n\nDoes pull request #51 at least partially resolve this? \n\nRight now I've got a hack on the ClassRegister to find our own [device repo](https://bitbucket.org/dihm/naqslab_devices/) outside the labscript_devices folder. \nIs the idea now to [subrepo](https://www.mercurial-scm.org/wiki/Subrepository) our devices into the labscript_devices folder with a register_classes.py in our device repo? Do I need to move over all of our old import style code to the new style for this to work well?", "markup": "markdown", "html": "<p>@chrisbillington </p>\n<p>Does <a href=\"#!/labscript_suite/labscript_devices/pull-requests/51/arbitrary-subfolders-for-device-code\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #51</a> at least partially resolve this? </p>\n<p>Right now I've got a hack on the ClassRegister to find our own <a data-is-external-link=\"true\" href=\"https://bitbucket.org/dihm/naqslab_devices/\" rel=\"nofollow\">device repo</a> outside the labscript_devices folder. \nIs the idea now to <a data-is-external-link=\"true\" href=\"https://www.mercurial-scm.org/wiki/Subrepository\" rel=\"nofollow\">subrepo</a> our devices into the labscript_devices folder with a register_classes.py in our device repo? Do I need to move over all of our old import style code to the new style for this to work well?</p>", "type": "rendered"}, "created_on": "2018-10-25T12:09:04.661903+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 48558306}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/48561946.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-48561946"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "It does address it somewhat.\n\nSubrepos would work.\n\nAnother option for including in-development devices would be to have `labscript_devices` scan additional directories for 'register_classes.py' files. For example, we could have a path settable in labconfig for where additional devices are located. Or, we could just have all of userlib be scanned (it's not like there's much of a performance hit for this).\n\nI'm eager to have 3rd party devices 'upstreamed', and with the possibility of subrepos, it makes it pretty transparent - such that the developers of the code are in charge of their own code whilst it still being included in mainline. But I think if devices are to be included in mainline labscript that are not maintained by the core developers, I'd prefer to still have one repo, and just allow the maintainers of that code to be in charge of it - reviewing each others' pull requests or whatever, with the core developers just rubber-stamping or raising style issues.\n\nTo get existing device code into mainline, or to have it work either in a subrepo or a separate folder, yes, you'd need to convert it to the 'new' way of doing things with 'register_devices.py' files etc. It makes sense to put a bunch of related devices all in one folder of labscript_devices, the folder structure is free, we should do whatever is sensible. For example the DAQmx code I'm working on is all within one folder, though it is for all DAQmx models and has separate classes for all of them (see [here](#!/cbillington/labscript_devices/src/NI_DAQmx/NI_DAQmx/?at=NI_DAQmx) for what that's looking like). Devices that are not converted to the new way of doing things will only continue to work if they are at the top level of labscript_devices, though of course you're free to re-add your hack to make old-style devices keep working elsewhere. But we will presumably eventually remove this 'old-style' way of looking up devices.\n\nSo how about this:\n\n* We make labscript_devices scan userlib, allowing in-development devices to be developed there, or entirely separate repos of devices to be maintained separately from the labscript_devices repository, if the code is not appropriate to share for whatever reason (though I really want to lower the bar for this - please share, even if the code is not the best quality, it can improve after it is out there. I'm more thinking there's no reason to share code for in-house devices, that sort of thing).\n\n* We agree that it is up to the users of a particular device maintain it, and defer to them to be the judges of how much testing is enough, before merging any given change. Core developers will still do the merging though, unless clicking the merge button in  response to \"this is ready for merging\" comment actually consumes too much of our time. Actually I have been doing all 3rd party merges locally to get around a deficiency in bitbucket, so I would have to share the tools I use to do that before others could do the same, or at least make sure the process is understood, as it's not quite as simple as clicking the merge button.\n\nIn the DAQmx support I'm working on at the moment, I've broken backward compatibility with previous DAQmx device classes, so I added a `__version__` attribute to be able to detect this and raise meaningful errors. In this way we can track the versions of individual labscript devices regardless of them being in the same repository, and we can mark them with a version number less than one if they are not yet considered stable.\n\nAt some point I'll be making a push for automated sphinx documentation from docstrings, at that point we can add extra information to the documentation like: \"who is maintaining this device code?\", \"which labs use this device that are happy to test?\" etc, these sorts of things could aid development as you will know who can test, who you might be breaking compatibility for etc.", "markup": "markdown", "html": "<p>It does address it somewhat.</p>\n<p>Subrepos would work.</p>\n<p>Another option for including in-development devices would be to have <code>labscript_devices</code> scan additional directories for 'register_classes.py' files. For example, we could have a path settable in labconfig for where additional devices are located. Or, we could just have all of userlib be scanned (it's not like there's much of a performance hit for this).</p>\n<p>I'm eager to have 3rd party devices 'upstreamed', and with the possibility of subrepos, it makes it pretty transparent - such that the developers of the code are in charge of their own code whilst it still being included in mainline. But I think if devices are to be included in mainline labscript that are not maintained by the core developers, I'd prefer to still have one repo, and just allow the maintainers of that code to be in charge of it - reviewing each others' pull requests or whatever, with the core developers just rubber-stamping or raising style issues.</p>\n<p>To get existing device code into mainline, or to have it work either in a subrepo or a separate folder, yes, you'd need to convert it to the 'new' way of doing things with 'register_devices.py' files etc. It makes sense to put a bunch of related devices all in one folder of labscript_devices, the folder structure is free, we should do whatever is sensible. For example the DAQmx code I'm working on is all within one folder, though it is for all DAQmx models and has separate classes for all of them (see <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_devices/src/NI_DAQmx/NI_DAQmx/?at=NI_DAQmx\" rel=\"nofollow\">here</a> for what that's looking like). Devices that are not converted to the new way of doing things will only continue to work if they are at the top level of labscript_devices, though of course you're free to re-add your hack to make old-style devices keep working elsewhere. But we will presumably eventually remove this 'old-style' way of looking up devices.</p>\n<p>So how about this:</p>\n<ul>\n<li>\n<p>We make labscript_devices scan userlib, allowing in-development devices to be developed there, or entirely separate repos of devices to be maintained separately from the labscript_devices repository, if the code is not appropriate to share for whatever reason (though I really want to lower the bar for this - please share, even if the code is not the best quality, it can improve after it is out there. I'm more thinking there's no reason to share code for in-house devices, that sort of thing).</p>\n</li>\n<li>\n<p>We agree that it is up to the users of a particular device maintain it, and defer to them to be the judges of how much testing is enough, before merging any given change. Core developers will still do the merging though, unless clicking the merge button in  response to \"this is ready for merging\" comment actually consumes too much of our time. Actually I have been doing all 3rd party merges locally to get around a deficiency in bitbucket, so I would have to share the tools I use to do that before others could do the same, or at least make sure the process is understood, as it's not quite as simple as clicking the merge button.</p>\n</li>\n</ul>\n<p>In the DAQmx support I'm working on at the moment, I've broken backward compatibility with previous DAQmx device classes, so I added a <code>__version__</code> attribute to be able to detect this and raise meaningful errors. In this way we can track the versions of individual labscript devices regardless of them being in the same repository, and we can mark them with a version number less than one if they are not yet considered stable.</p>\n<p>At some point I'll be making a push for automated sphinx documentation from docstrings, at that point we can add extra information to the documentation like: \"who is maintaining this device code?\", \"which labs use this device that are happy to test?\" etc, these sorts of things could aid development as you will know who can test, who you might be breaking compatibility for etc.</p>", "type": "rendered"}, "created_on": "2018-10-25T14:47:19.227274+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-10-25T15:02:03.984024+00:00", "type": "issue_comment", "id": 48561946}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments/48624373.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22#comment-48624373"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Third-Party Devices"}, "content": {"raw": "All of this sounds good to me, having not thought about it super carefully.\n\nFor the near term I really like the idea of just designating a separate \"local devices\" folder that functions as a secondary labscript_devices folder (using either method you suggested). This makes it easy to prototype devices outside the main repo, though I suppose history then gets lost if mainlining does ultimately occur...\n\nIt would also be nice if the secondary folder could also support the 'old-style' look-up, at least temporarily, so I can port over devices to the 'new style' at my leisure. Once everything is ported it should be very easy to subrepo, if desired.\n\nAnd it's good to know sphinx docs are in the future. I'll be sure to start adding appropriate docs strings.", "markup": "markdown", "html": "<p>All of this sounds good to me, having not thought about it super carefully.</p>\n<p>For the near term I really like the idea of just designating a separate \"local devices\" folder that functions as a secondary labscript_devices folder (using either method you suggested). This makes it easy to prototype devices outside the main repo, though I suppose history then gets lost if mainlining does ultimately occur...</p>\n<p>It would also be nice if the secondary folder could also support the 'old-style' look-up, at least temporarily, so I can port over devices to the 'new style' at my leisure. Once everything is ported it should be very easy to subrepo, if desired.</p>\n<p>And it's good to know sphinx docs are in the future. I'll be sure to start adding appropriate docs strings.</p>", "type": "rendered"}, "created_on": "2018-10-29T16:29:17.942146+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 48624373}], "page": 1, "size": 8}