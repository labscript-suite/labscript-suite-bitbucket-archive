{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/24/comments/43870660.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/24#comment-43870660"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/24.json"}}, "type": "issue", "id": 24, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Backwards compatible connection table comparisons between different versions"}, "content": {"raw": "Ignoring additional properties only works if you expect one of the connection tables to always be newer or equal in version to the other. However we have the possibility that:\n\n* newly compiled shots use the new labscript_devices but the BLACS connection table still uses the old one\n* historical HDF5 files will have used an older version of labscript_devices to make the connection table where as the BLACS connection table uses the newer one.\n\nEnforcing that BLACS recompile the connection table, when labscript_devices is updated, doesn't work because BLACS and runmanager/labscript may be running on different PCs with different versions of labscript_devices. I guess if we refused to run shots compiled with a new version of labscript_devices (compared to BLACS) **and** forced BLACS to ensure the connection table was compiled with the current version of labscript_devices this would break the above symmetry....no that only works for added properties. It doesn't work if you remove or rename a property. I guess such an instance would be a major version bump and be discouraged though? (And we could refuse all connection table matches for differing major versions)", "markup": "markdown", "html": "<p>Ignoring additional properties only works if you expect one of the connection tables to always be newer or equal in version to the other. However we have the possibility that:</p>\n<ul>\n<li>newly compiled shots use the new labscript_devices but the BLACS connection table still uses the old one</li>\n<li>historical HDF5 files will have used an older version of labscript_devices to make the connection table where as the BLACS connection table uses the newer one.</li>\n</ul>\n<p>Enforcing that BLACS recompile the connection table, when labscript_devices is updated, doesn't work because BLACS and runmanager/labscript may be running on different PCs with different versions of labscript_devices. I guess if we refused to run shots compiled with a new version of labscript_devices (compared to BLACS) <strong>and</strong> forced BLACS to ensure the connection table was compiled with the current version of labscript_devices this would break the above symmetry....no that only works for added properties. It doesn't work if you remove or rename a property. I guess such an instance would be a major version bump and be discouraged though? (And we could refuse all connection table matches for differing major versions)</p>", "type": "rendered"}, "created_on": "2018-03-12T23:59:56.427875+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 43870660}