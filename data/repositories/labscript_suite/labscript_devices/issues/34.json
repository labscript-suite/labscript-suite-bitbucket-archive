{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/34/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/34/port-imaqdxcamera-to-other-backends"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/34/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Port IMAQdxCamera to other backends", "component": null, "votes": 0, "watches": 3, "content": {"raw": "So have used a wide variety of cameras with labscript in the past, but have never wanted to spring for the NI Vision Development software necessary to use the universal IMAQdx driver. This has led me to make old-style camera\\_servers using different, freely available, SDK backends provided by the manufacturers \\(Pylon, FlyCapture2, AndorSDK3, and PICAM so far\\). As such, I could fairly easily port the backend of the new IMAQdxCamera class to these other SDKs to open up some other options for camera integration. General thoughts? \r\n\r\nI have two specific questions to start with:\r\n\r\nI\u2019ve already made a first pass at a port to [Basler\u2019s PyPylon](https://pypi.org/project/pypylon/#description). Manual mode operation is tested and functioning well. Still need to test buffered shots but I expect that to be fine since most of the heavy lifting has already been done by @cbillington in IMAQdxCamera. In keeping with the discussion at Issue #22, should this be mainlined or do I send it to our lab\u2019s devices [repo](https://bitbucket.org/dihm/naqslab_devices/src/default/) instead?\r\n\r\nGenerally speaking, the IMAQdxCamera class is very easy to subclass when porting over to a new SDK with one glaring exception: the camera properties dictionaries all contain \u2018imaqdx\u2019 in their variable names. While I could just use those names and live with the inevitable confusion about why you set imaqdx properties for a PylonCamera, I\u2019d rather not. As such, there is a bunch of unnecessary subclassing, particularly in the blacs\\_tab and labscript\\_device, just to rename these variables. Would it be too much to ask to make IMAQdxCamera a little more agnostic? I suppose the ideal would be to make a common parent class that IMAQdx also inherits from\u2026", "markup": "markdown", "html": "<p>So have used a wide variety of cameras with labscript in the past, but have never wanted to spring for the NI Vision Development software necessary to use the universal IMAQdx driver. This has led me to make old-style camera_servers using different, freely available, SDK backends provided by the manufacturers (Pylon, FlyCapture2, AndorSDK3, and PICAM so far). As such, I could fairly easily port the backend of the new IMAQdxCamera class to these other SDKs to open up some other options for camera integration. General thoughts? </p>\n<p>I have two specific questions to start with:</p>\n<p>I\u2019ve already made a first pass at a port to <a data-is-external-link=\"true\" href=\"https://pypi.org/project/pypylon/#description\" rel=\"nofollow\">Basler\u2019s PyPylon</a>. Manual mode operation is tested and functioning well. Still need to test buffered shots but I expect that to be fine since most of the heavy lifting has already been done by @cbillington in IMAQdxCamera. In keeping with the discussion at Issue <a href=\"#!/labscript_suite/labscript_devices/issues/22/third-party-devices\" rel=\"nofollow\" title=\"Third-Party Devices\" class=\"ap-connect-link\">#22</a>, should this be mainlined or do I send it to our lab\u2019s devices <a data-is-external-link=\"true\" href=\"https://bitbucket.org/dihm/naqslab_devices/src/default/\" rel=\"nofollow\">repo</a> instead?</p>\n<p>Generally speaking, the IMAQdxCamera class is very easy to subclass when porting over to a new SDK with one glaring exception: the camera properties dictionaries all contain \u2018imaqdx\u2019 in their variable names. While I could just use those names and live with the inevitable confusion about why you set imaqdx properties for a PylonCamera, I\u2019d rather not. As such, there is a bunch of unnecessary subclassing, particularly in the blacs_tab and labscript_device, just to rename these variables. Would it be too much to ask to make IMAQdxCamera a little more agnostic? I suppose the ideal would be to make a common parent class that IMAQdx also inherits from\u2026</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-05-16T16:34:58.828173+00:00", "milestone": null, "updated_on": "2019-06-01T17:16:38.133641+00:00", "type": "issue", "id": 34}