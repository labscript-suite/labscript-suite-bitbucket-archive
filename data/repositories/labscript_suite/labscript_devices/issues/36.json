{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/36/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/36/blacs-hang-with-continuous-camera"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/36/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "BLACS hang with continuous camera acquisitions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I again ran in to an issue I first saw working on PR #69 where fast continuous acquisitions with the PylonCamera would cause a complete lock up of the BLACS main process. With further testing and I can now reproduce the issue using the Mock Camera applying the following diff to the IMAQdxCamera blacs\\_workers.py\r\n\r\n```diff\r\n@@ -95,5 +95,5 @@\r\n         print(f\"Got {len(images)} of {n_images} (mock) images.\")\r\n \r\n     def snap(self):\r\n-        N = 500\r\n+        N = 100\r\n         A = 500\r\n@@ -99,6 +99,6 @@\r\n         A = 500\r\n-        x = np.linspace(-5, 5, 500)\r\n+        x = np.linspace(-5, 5, N)\r\n         y = x.reshape((N, 1))\r\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\r\n \r\n         # Write text on the image that says \"NOT REAL DATA\"\r\n@@ -101,6 +101,6 @@\r\n         y = x.reshape((N, 1))\r\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\r\n \r\n         # Write text on the image that says \"NOT REAL DATA\"\r\n-        from PIL import Image, ImageDraw, ImageFont\r\n+        #from PIL import Image, ImageDraw, ImageFont\r\n \r\n@@ -106,9 +106,9 @@\r\n \r\n-        font = ImageFont.load_default()\r\n-        canvas = Image.new('L', [N // 5, N // 5], (0,))\r\n-        draw = ImageDraw.Draw(canvas)\r\n-        draw.text((10, 20), \"NOT REAL DATA\", font=font, fill=1)\r\n-        clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))\r\n+        #font = ImageFont.load_default()\r\n+        #canvas = Image.new('L', [N // 5, N // 5], (0,))\r\n+        #draw = ImageDraw.Draw(canvas)\r\n+        #draw.text((10, 20), \"NOT REAL DATA\", font=font, fill=1)\r\n+        #clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))\r\n         return np.random.poisson(clean_image)\r\n \r\n     def stop_acquisition(self):\r\n```\r\n\r\n\u200c\r\n\r\nBasically, you need to get the fps way up to see the issue, which occurs around iteration #330 on my machine. The PylonCamera shows the same behavior, but it occurs at lower fps \\(25 fps\\) and sooner \\(~130\\). It does not appear to occur if the randomizer is turned off on the mock camera images \\(ie `return clean_image` only\\). \r\n\r\nBest guess at the moment is that the histogram updates of pyqtgraph are causing issues. Is it possible that those updates are non-blocking and can stack up somehow? That doesn\u2019t seem likely but I\u2019m not sure what else it could be at this point.", "markup": "markdown", "html": "<p>I again ran in to an issue I first saw working on <a href=\"#!/labscript_suite/labscript_devices/pull-requests/69/pylon-backend-for-imaqdxcamera-class\" rel=\"nofollow\" class=\"ap-connect-link\">PR #69</a> where fast continuous acquisitions with the PylonCamera would cause a complete lock up of the BLACS main process. With further testing and I can now reproduce the issue using the Mock Camera applying the following diff to the IMAQdxCamera blacs_workers.py</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -95,5 +95,5 @@</span>\n         print(f&quot;Got {len(images)} of {n_images} (mock) images.&quot;)\n\n     def snap(self):\n<span class=\"gd\">-        N = 500</span>\n<span class=\"gi\">+        N = 100</span>\n         A = 500\n<span class=\"gu\">@@ -99,6 +99,6 @@</span>\n         A = 500\n<span class=\"gd\">-        x = np.linspace(-5, 5, 500)</span>\n<span class=\"gi\">+        x = np.linspace(-5, 5, N)</span>\n         y = x.reshape((N, 1))\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\n\n         # Write text on the image that says &quot;NOT REAL DATA&quot;\n<span class=\"gu\">@@ -101,6 +101,6 @@</span>\n         y = x.reshape((N, 1))\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\n\n         # Write text on the image that says &quot;NOT REAL DATA&quot;\n<span class=\"gd\">-        from PIL import Image, ImageDraw, ImageFont</span>\n<span class=\"gi\">+        #from PIL import Image, ImageDraw, ImageFont</span>\n\n<span class=\"gu\">@@ -106,9 +106,9 @@</span>\n\n<span class=\"gd\">-        font = ImageFont.load_default()</span>\n<span class=\"gd\">-        canvas = Image.new(&#39;L&#39;, [N // 5, N // 5], (0,))</span>\n<span class=\"gd\">-        draw = ImageDraw.Draw(canvas)</span>\n<span class=\"gd\">-        draw.text((10, 20), &quot;NOT REAL DATA&quot;, font=font, fill=1)</span>\n<span class=\"gd\">-        clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))</span>\n<span class=\"gi\">+        #font = ImageFont.load_default()</span>\n<span class=\"gi\">+        #canvas = Image.new(&#39;L&#39;, [N // 5, N // 5], (0,))</span>\n<span class=\"gi\">+        #draw = ImageDraw.Draw(canvas)</span>\n<span class=\"gi\">+        #draw.text((10, 20), &quot;NOT REAL DATA&quot;, font=font, fill=1)</span>\n<span class=\"gi\">+        #clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))</span>\n         return np.random.poisson(clean_image)\n\n     def stop_acquisition(self):\n</pre></div>\n\n\n<p>\u200c</p>\n<p>Basically, you need to get the fps way up to see the issue, which occurs around iteration #330 on my machine. The PylonCamera shows the same behavior, but it occurs at lower fps (25 fps) and sooner (~130). It does not appear to occur if the randomizer is turned off on the mock camera images (ie <code>return clean_image</code> only). </p>\n<p>Best guess at the moment is that the histogram updates of pyqtgraph are causing issues. Is it possible that those updates are non-blocking and can stack up somehow? That doesn\u2019t seem likely but I\u2019m not sure what else it could be at this point.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-06-27T19:13:56.099356+00:00", "milestone": null, "updated_on": "2019-09-23T16:31:57.594124+00:00", "type": "issue", "id": 36}