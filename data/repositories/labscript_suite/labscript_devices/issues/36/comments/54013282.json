{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36/comments/54013282.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/36#comment-54013282"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36.json"}}, "type": "issue", "id": 36, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "BLACS hang with continuous camera acquisitions"}, "content": {"raw": "Thanks Phil, and thanks David.\n\nSo whilst I don't see as obvious a hang, it is clear that user interaction is much laggier for me in some circumstances than others, and it seems to follow the same conditions as you say cause your hang. It goes away for me when I apply the changes that you say solve the issue for you, so I am going to assume they have the same root cause.\n\nEvent priorities are not solving the issue for me, and as you said they only seemed to help a little bit for you. It seems to me that they are not sufficient - perhaps the priorities of our events and other events are not even being compared, maybe because we have a custom event handler. Maybe the priorities are only meaningful within a single event handler and not app-wide. I don't know, but I couldn't seem to change much by using event priorities.\n\nSo I'm proposing PR #83 as a fix. This is essentially the `sendPostedEvents()` fix, though I've gone ahead and merged the `handler()` and `update()` methods as a simplification - they were only separate in order to send the reply to the worker ASAP, but with a tiny addition to zprocess (update required), the `handler()` method can now send a reply immediately and then continue to do its processing, so no need for a separate `update()` call to be queued up.\n\nThis removes the GUI lagginess for me, and it sounds like it will for you too based on your testing. It still allows the worker to be fetching a new frame whilst the parent process is rendering the previous frame, so we still in principle should be able to render frames at the maximum rate of whichever is slowest: rendering or downloading.\n\nIt is usually code smell to be manually calling `sendPostedEvents` or similar things, but since we are in the main thread when we call it, and since most events are dispatched immediately in Qt anyway (leading to re-entrancy even in single-threaded programs), all it's doing is not allowing these other events to be an exception to that. And we're calling it at the very end of our function, where control is about to be returned to the mainloop anyway, which would be doing the same thing. So I think this is an OK solution.\n\nOne possibility is that the events that are processed may themselves post further events, such that we may need to call `sendPostedEvents()` multiple times to clear the whole backlog. But a) there doesn't seem to be any way to check if there are pending events or to say \"run until there are no more\", and b) we're still calling it once per frame, so nothing should build up for more than one frame. I think we're good.\n\nDavid if you could confirm this fixes the problem, maybe we can put this one to rest :)\n\nRegarding `imageAxisOrder='row-major'`, I don't think there is any significant cost to transposing the arrays since this is just a metadata change, it doesn't actually move the data in memory. So unless there is a \"real\" transpose operation happening at a lower level that `imageAxisOrder='row-major'` somehow avoids (which seems doubtful), I don't think this will make any difference. Profiling results would change my mind though :).", "markup": "markdown", "html": "<p>Thanks Phil, and thanks David.</p>\n<p>So whilst I don't see as obvious a hang, it is clear that user interaction is much laggier for me in some circumstances than others, and it seems to follow the same conditions as you say cause your hang. It goes away for me when I apply the changes that you say solve the issue for you, so I am going to assume they have the same root cause.</p>\n<p>Event priorities are not solving the issue for me, and as you said they only seemed to help a little bit for you. It seems to me that they are not sufficient - perhaps the priorities of our events and other events are not even being compared, maybe because we have a custom event handler. Maybe the priorities are only meaningful within a single event handler and not app-wide. I don't know, but I couldn't seem to change much by using event priorities.</p>\n<p>So I'm proposing <a href=\"#!/labscript_suite/labscript_devices/pull-requests/83/fix-issue-36-blacs-freezing-in\" rel=\"nofollow\" class=\"ap-connect-link\">PR #83</a> as a fix. This is essentially the <code>sendPostedEvents()</code> fix, though I've gone ahead and merged the <code>handler()</code> and <code>update()</code> methods as a simplification - they were only separate in order to send the reply to the worker ASAP, but with a tiny addition to zprocess (update required), the <code>handler()</code> method can now send a reply immediately and then continue to do its processing, so no need for a separate <code>update()</code> call to be queued up.</p>\n<p>This removes the GUI lagginess for me, and it sounds like it will for you too based on your testing. It still allows the worker to be fetching a new frame whilst the parent process is rendering the previous frame, so we still in principle should be able to render frames at the maximum rate of whichever is slowest: rendering or downloading.</p>\n<p>It is usually code smell to be manually calling <code>sendPostedEvents</code> or similar things, but since we are in the main thread when we call it, and since most events are dispatched immediately in Qt anyway (leading to re-entrancy even in single-threaded programs), all it's doing is not allowing these other events to be an exception to that. And we're calling it at the very end of our function, where control is about to be returned to the mainloop anyway, which would be doing the same thing. So I think this is an OK solution.</p>\n<p>One possibility is that the events that are processed may themselves post further events, such that we may need to call <code>sendPostedEvents()</code> multiple times to clear the whole backlog. But a) there doesn't seem to be any way to check if there are pending events or to say \"run until there are no more\", and b) we're still calling it once per frame, so nothing should build up for more than one frame. I think we're good.</p>\n<p>David if you could confirm this fixes the problem, maybe we can put this one to rest :)</p>\n<p>Regarding <code>imageAxisOrder='row-major'</code>, I don't think there is any significant cost to transposing the arrays since this is just a metadata change, it doesn't actually move the data in memory. So unless there is a \"real\" transpose operation happening at a lower level that <code>imageAxisOrder='row-major'</code> somehow avoids (which seems doubtful), I don't think this will make any difference. Profiling results would change my mind though :).</p>", "type": "rendered"}, "created_on": "2019-09-21T18:44:21.523301+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 54013282}