{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/8/comments/14233106.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/8#comment-14233106"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/8.json"}}, "type": "issue", "id": 8, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "title": "Pulseblaster Board DDS Problem"}, "content": {"raw": "Ah, so this line of PulseBlasters have no DDS outputs, if I understand correctly. So you're getting this error because the PulseBlaster labscript device assumes a model with DDS outputs.\n\nThere are multiple models of PulseBlaster supported, and the \"PulseBlaster\" device is for the PulseBlaster DDS II, for historical reasons (it was the only one we had at the time).\n\nIf your model of PulseBlaster is not one of the ones in labscript_devices (I don't think it is), you can pretty easily implement support for it.\n\nIf you want to do this, you should have a look at [PulseBlasterESRPro500.py](#!/labscript_suite/labscript_devices/src/54518170a02711ea607ace4807935bd54af520f8/PulseBlasterESRPro500.py?at=default), and see how it subclasses PulseBlaster_No_DDS and related classes. If you copy this file, rename things, and set the following class attributes:\n\n    description: a string description of the device\n    clock_limit: the maximum rate, in Hz the device can output two instructions in a loop, so 2/(min instuction length in seconds)\n    clock_resolution = similarly, 2/(resolution of instruction length, in seconds)\n    n_flags: number of digital flags the PulseBlaster has\n\n    num_DO: same as n_flags\n        \n    core_clock_freq: the argument to be passed to the spincore API function pb_core_clock when initializing communication with the PulseBlaster\n\nThen that should suffice, and you can put this device in your connection table and BLACS should be able to use it. Note that the filename must match the name of the class decorated with `@labscript_device`, the names of the other classes can be arbitrary so long as they are decorated correctly. ", "markup": "markdown", "html": "<p>Ah, so this line of PulseBlasters have no DDS outputs, if I understand correctly. So you're getting this error because the PulseBlaster labscript device assumes a model with DDS outputs.</p>\n<p>There are multiple models of PulseBlaster supported, and the \"PulseBlaster\" device is for the PulseBlaster DDS II, for historical reasons (it was the only one we had at the time).</p>\n<p>If your model of PulseBlaster is not one of the ones in labscript_devices (I don't think it is), you can pretty easily implement support for it.</p>\n<p>If you want to do this, you should have a look at <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/src/54518170a02711ea607ace4807935bd54af520f8/PulseBlasterESRPro500.py?at=default\" rel=\"nofollow\">PulseBlasterESRPro500.py</a>, and see how it subclasses PulseBlaster_No_DDS and related classes. If you copy this file, rename things, and set the following class attributes:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">description</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">string</span> <span class=\"n\">description</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">device</span>\n<span class=\"n\">clock_limit</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">maximum</span> <span class=\"n\">rate</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">Hz</span> <span class=\"n\">the</span> <span class=\"n\">device</span> <span class=\"n\">can</span> <span class=\"n\">output</span> <span class=\"n\">two</span> <span class=\"n\">instructions</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"n\">loop</span><span class=\"o\">,</span> <span class=\"n\">so</span> <span class=\"mi\">2</span><span class=\"o\">/(</span><span class=\"n\">min</span> <span class=\"n\">instuction</span> <span class=\"n\">length</span> <span class=\"k\">in</span> <span class=\"n\">seconds</span><span class=\"o\">)</span>\n<span class=\"n\">clock_resolution</span> <span class=\"o\">=</span> <span class=\"n\">similarly</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">/(</span><span class=\"n\">resolution</span> <span class=\"n\">of</span> <span class=\"n\">instruction</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">seconds</span><span class=\"o\">)</span>\n<span class=\"n\">n_flags</span><span class=\"o\">:</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">digital</span> <span class=\"n\">flags</span> <span class=\"n\">the</span> <span class=\"n\">PulseBlaster</span> <span class=\"n\">has</span>\n\n<span class=\"n\">num_DO</span><span class=\"o\">:</span> <span class=\"n\">same</span> <span class=\"k\">as</span> <span class=\"n\">n_flags</span>\n\n<span class=\"n\">core_clock_freq</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">argument</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">spincore</span> <span class=\"n\">API</span> <span class=\"kd\">function</span> <span class=\"n\">pb_core_clock</span> <span class=\"n\">when</span> <span class=\"n\">initializing</span> <span class=\"n\">communication</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">PulseBlaster</span>\n</pre></div>\n\n\n<p>Then that should suffice, and you can put this device in your connection table and BLACS should be able to use it. Note that the filename must match the name of the class decorated with <code>@labscript_device</code>, the names of the other classes can be arbitrary so long as they are decorated correctly. </p>", "type": "rendered"}, "created_on": "2014-12-11T22:07:27.878140+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2014-12-11T22:08:25.932734+00:00", "type": "issue_comment", "id": 14233106}