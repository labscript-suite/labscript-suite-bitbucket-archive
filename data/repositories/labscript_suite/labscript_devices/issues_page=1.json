{"pagelen": 100, "values": [{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/1/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/1/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/1/bug-in-ni_pcie_6363-extract-measurements"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/1/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Bug in NI_PCIe_6363 extract measurements", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Got a traceback today in BLACS\r\n\r\n```\r\n#!python\r\n\r\nException in worker - Fri Sep 26, 10:15:40 :\r\nTraceback (most recent call last):\r\n  File \"C:\\pythonlib\\labscript_devices\\NI_PCIe_6363.py\", line 524, in transition_to_manual\r\n    self.extract_measurements(self.device_name)\r\n  File \"C:\\pythonlib\\labscript_devices\\NI_PCIe_6363.py\", line 575, in extract_measurements\r\n    data['t'] = times\r\nValueError: could not broadcast input array from shape (23175) into shape (23000)\r\n```\r\n\r\nThe logic in extract_measurements is quite complex and there is no debugging information logged so I don't really know why this crash has occurred. First time we've seen it in several years of regularly using this function.\r\n\r\nAnyway, the length of data['t'] is set by the length of the extracted analog trace, and the times array is generated slightly differently. I'm guessing there is a subtle bug somewhere in how the indices of the full array (specifying the region to extract) are generated. \r\n\r\nAbout the only useful information I have is that the acquisition rate was set to 1e3 in the labscript file.", "markup": "markdown", "html": "<p>Got a traceback today in BLACS</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"ne\">Exception</span> <span class=\"ow\">in</span> <span class=\"n\">worker</span> <span class=\"o\">-</span> <span class=\"n\">Fri</span> <span class=\"n\">Sep</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">:</span><span class=\"mi\">40</span> <span class=\"p\">:</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_devices\\NI_PCIe_6363.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">524</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">transition_to_manual</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extract_measurements</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">device_name</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_devices\\NI_PCIe_6363.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">575</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">extract_measurements</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">&#39;t&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">times</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">could</span> <span class=\"ow\">not</span> <span class=\"n\">broadcast</span> <span class=\"nb\">input</span> <span class=\"n\">array</span> <span class=\"kn\">from</span> <span class=\"nn\">shape</span> <span class=\"p\">(</span><span class=\"mi\">23175</span><span class=\"p\">)</span> <span class=\"n\">into</span> <span class=\"n\">shape</span> <span class=\"p\">(</span><span class=\"mi\">23000</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>The logic in extract_measurements is quite complex and there is no debugging information logged so I don't really know why this crash has occurred. First time we've seen it in several years of regularly using this function.</p>\n<p>Anyway, the length of data['t'] is set by the length of the extracted analog trace, and the times array is generated slightly differently. I'm guessing there is a subtle bug somewhere in how the indices of the full array (specifying the region to extract) are generated. </p>\n<p>About the only useful information I have is that the acquisition rate was set to 1e3 in the labscript file.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2014-09-26T01:09:37.487001+00:00", "milestone": null, "updated_on": "2019-08-12T15:56:13.023974+00:00", "type": "issue", "id": 1}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/2/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/2/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/2/rf-blaster-minimum-frequency-is-incorrect"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/2/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "RF Blaster minimum frequency is incorrect", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Bug report moved from [BLACS](#!/labscript_suite/blacs/issue/3/rfblaster-doesnt-allow-frequencies-05mhz):\r\n\r\n--\r\nIn manual mode, any frequency <0.5MHz is set to 0.5MHz.\r\nIf the rfblaster is programmed to such a frequency through the web interface, it works, but BLACS reports the frequency as 0.5MHz regardless.\r\nMinimum value on the input box maybe?\r\n--\r\n\r\nUnsure of what the minimum RF Blaster DDS frequency is. Need to check and update the BLACS tab class with the correct minimum value.", "markup": "markdown", "html": "<p>Bug report moved from <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/issue/3/rfblaster-doesnt-allow-frequencies-05mhz\" rel=\"nofollow\">BLACS</a>:</p>\n<p>--\nIn manual mode, any frequency &lt;0.5MHz is set to 0.5MHz.\nIf the rfblaster is programmed to such a frequency through the web interface, it works, but BLACS reports the frequency as 0.5MHz regardless.\nMinimum value on the input box maybe?\n--</p>\n<p>Unsure of what the minimum RF Blaster DDS frequency is. Need to check and update the BLACS tab class with the correct minimum value.</p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-09-30T10:29:06.535516+00:00", "milestone": null, "updated_on": "2014-09-30T10:29:06.535516+00:00", "type": "issue", "id": 2}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/3/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/3/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/3/connection-table-compilation-fails-when-ni"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/3/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Connection table compilation fails when NI cards have no outputs", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When no output devices are connected to an NI card in the gated-clocks implementation, compilation fails with:\r\n\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\userlib\\labscriptlib\\rb_chip\\connectiontable.py\", line 13, in <module>\r\n    stop(1)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 1625, in stop\r\n    generate_code()\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 1552, in generate_code\r\n    device.generate_code(hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript_devices\\PulseBlaster_No_DDS.py\", line 67, in generate_code\r\n    PseudoclockDevice.generate_code(self, hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 691, in generate_code\r\n    Device.generate_code(self, hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 216, in generate_code\r\n    device.generate_code(hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 603, in generate_code\r\n    Device.generate_code(self, hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 216, in generate_code\r\n    device.generate_code(hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript\\labscript.py\", line 216, in generate_code\r\n    device.generate_code(hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript_devices\\NI_PCI_6733.py\", line 30, in generate_code\r\n    parent.NIBoard.generate_code(self, hdf5_file)\r\n  File \"C:\\labscript_suite\\labscript_devices\\NIBoard.py\", line 56, in generate_code\r\n    times = pseudoclock.times[clockline]\r\nKeyError: <labscript.labscript.ClockLine object at 0x0000000009D102B0>\r\n```\r\n\r\nThis should be easy to fix, I'm just documenting it here so I don't forget about it", "markup": "markdown", "html": "<p>When no output devices are connected to an NI card in the gated-clocks implementation, compilation fails with:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\userlib\\labscriptlib</span><span class=\"se\">\\r</span><span class=\"s2\">b_chip\\connectiontable.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1625</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">stop</span>\n    <span class=\"n\">generate_code</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1552</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_devices\\PulseBlaster_No_DDS.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">PseudoclockDevice</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">691</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">216</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">603</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">216</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">216</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_devices\\NI_PCI_6733.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">NIBoard</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_devices\\NIBoard.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"n\">pseudoclock</span><span class=\"o\">.</span><span class=\"n\">times</span><span class=\"p\">[</span><span class=\"n\">clockline</span><span class=\"p\">]</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">ClockLine</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x0000000009D102B0</span><span class=\"o\">&gt;</span>\n</pre></div>\n\n\n<p>This should be easy to fix, I'm just documenting it here so I don't forget about it</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-02T18:27:45.053876+00:00", "milestone": null, "updated_on": "2017-11-11T14:05:35.107797+00:00", "type": "issue", "id": 3}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/4/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/4/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/4/blacs-tabs-for-ni-cards-do-not-show"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/4/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "BLACS tabs for NI Cards do not show correct labels", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If the user has renamed analog output channels in NI MAX, then the names of the outputs are not shown in BLACS  it just shows dashes. This is because the current implementation of the BLACS tabs assumes that the names are as default, ", "markup": "markdown", "html": "<p>If the user has renamed analog output channels in NI MAX, then the names of the outputs are not shown in BLACS  it just shows dashes. This is because the current implementation of the BLACS tabs assumes that the names are as default, </p>", "type": "rendered"}, "assignee": null, "state": "wontfix", "version": null, "edited_on": null, "created_on": "2014-10-02T18:43:57.950816+00:00", "milestone": null, "updated_on": "2014-10-03T14:40:20.710306+00:00", "type": "issue", "id": 4}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/5/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/5/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/5/novatech-ddss-dont-get-unit-conversion-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/5/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Novatech DDSs don't get unit conversion for non static channels", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Only the dynamic channels on the Novatech DDSs seem to get the default unit conversions.\r\n\r\nNaively changing the code to give the unit conversion classes regardless of whether it is static or not does not work, so this needs to be looked into.", "markup": "markdown", "html": "<p>Only the dynamic channels on the Novatech DDSs seem to get the default unit conversions.</p>\n<p>Naively changing the code to give the unit conversion classes regardless of whether it is static or not does not work, so this needs to be looked into.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-03T19:13:50.589921+00:00", "milestone": null, "updated_on": "2014-10-03T19:13:50.589921+00:00", "type": "issue", "id": 5}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/6/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/6/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/6/one-folder-per-device-one-file-for-each"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/6/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "One folder per device, one file for each program's class", "component": null, "votes": 0, "watches": 2, "content": {"raw": "In the spirit of only executing the code you need, and not putting fairly unrelated types of code together, I propose splitting `labscript_devices` further. Each `LabscriptDeviceClassName.py` in there should become `LabscriptDeviceClassName/__init__.py` and the BLACS tab and runviewer parsers should each be put in their own files too, named something like `BLACS_tab` and `runviewer_parser` or something. These filenames would be required in order for the classes to be found by BLACS and runviewer.\r\n\r\nThe interfaces to getting these classes would not change under this proposal, and so it would be backward compatible with the programs that use them.\r\n\r\nIt would still be:\r\n\r\n    from labscript_devices.LabscriptDeviceClassName import LabscriptDeviceClassName\r\n\r\nfor labscript, and still\r\n\r\n`labscript_devices.get_BLACS_tab` and `labscript_devices.get_runviewer_parser`\r\n\r\nfor BLACS and runviewer\r\n", "markup": "markdown", "html": "<p>In the spirit of only executing the code you need, and not putting fairly unrelated types of code together, I propose splitting <code>labscript_devices</code> further. Each <code>LabscriptDeviceClassName.py</code> in there should become <code>LabscriptDeviceClassName/__init__.py</code> and the BLACS tab and runviewer parsers should each be put in their own files too, named something like <code>BLACS_tab</code> and <code>runviewer_parser</code> or something. These filenames would be required in order for the classes to be found by BLACS and runviewer.</p>\n<p>The interfaces to getting these classes would not change under this proposal, and so it would be backward compatible with the programs that use them.</p>\n<p>It would still be:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.LabscriptDeviceClassName</span> <span class=\"kn\">import</span> <span class=\"n\">LabscriptDeviceClassName</span>\n</pre></div>\n\n\n<p>for labscript, and still</p>\n<p><code>labscript_devices.get_BLACS_tab</code> and <code>labscript_devices.get_runviewer_parser</code></p>\n<p>for BLACS and runviewer</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T02:35:08.165350+00:00", "milestone": null, "updated_on": "2014-10-04T02:39:51.694591+00:00", "type": "issue", "id": 6}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/7/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/7/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/7/ni-card-unification"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/7/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "NI card unification", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I copied and pasted a lot of code to add functionality for a new NI card yesterday, because there is no base class to subclass from.\r\n\r\nThis looks possible, and so we should do it at some point: all NI cards should be fairly stub-like subclasses of a base class.", "markup": "markdown", "html": "<p>I copied and pasted a lot of code to add functionality for a new NI card yesterday, because there is no base class to subclass from.</p>\n<p>This looks possible, and so we should do it at some point: all NI cards should be fairly stub-like subclasses of a base class.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-04T02:37:01.814701+00:00", "milestone": null, "updated_on": "2019-08-12T05:24:26.982173+00:00", "type": "issue", "id": 7}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/8/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/8/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/8/pulseblaster-board-dds-problem"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/8/vote"}}, "reporter": {"display_name": "Jesse Evans", "uuid": "{3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31%7D"}, "html": {"href": "https://bitbucket.org/%7B3f9ae0ef-8c02-4174-a140-9c1e3f0c4f31%7D/"}, "avatar": {"href": "https://bitbucket.org/account/jcevans/avatar/"}}, "nickname": "jcevans", "type": "user", "account_id": null}, "title": "Pulseblaster Board DDS Problem", "component": null, "votes": 0, "watches": 3, "content": {"raw": "I've recently installed the pulseblaster into our setup, and I'm running into an error when I open blacs. \"DDS Shape capabilities not supported on this board\".", "markup": "markdown", "html": "<p>I've recently installed the pulseblaster into our setup, and I'm running into an error when I open blacs. \"DDS Shape capabilities not supported on this board\".</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2014-12-11T21:29:41.514313+00:00", "milestone": null, "updated_on": "2014-12-12T17:46:22.570055+00:00", "type": "issue", "id": 8}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/9/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/9/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/9/no-button-labels-on"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/9/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "No button labels on PulseBlaster_SP2_24_100_32k in BLACS", "component": null, "votes": 0, "watches": 2, "content": {"raw": "In BLACS, the buttons for the flags on the PulseBlaster_SP2_24_100_32k aren't labeled with what output device they are connected to. I forget why this is but it's something I've looked into before. It might even be sensitive to how you write your connection table. It's probably trivial but I'm creating this bug report so I don't forget about it.", "markup": "markdown", "html": "<p>In BLACS, the buttons for the flags on the PulseBlaster_SP2_24_100_32k aren't labeled with what output device they are connected to. I forget why this is but it's something I've looked into before. It might even be sensitive to how you write your connection table. It's probably trivial but I'm creating this bug report so I don't forget about it.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-07-17T04:23:09.076350+00:00", "milestone": null, "updated_on": "2015-07-20T07:05:08.701211+00:00", "type": "issue", "id": 9}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/10/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/10.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/10/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/10/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/10/ni-pci-6733-digital-outputs-do-not-work"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/10/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "NI PCI 6733 Digital outputs do not work", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When you try and use a Digital output for teh NI PCI 6733 during a buffered sequence, you get the following exception raised during transition_to_buffered\r\n\r\n\r\n```\r\n#!python\r\n\r\nException in worker - Mon Aug 10, 14:41:05 :\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript\\labscript_devices\\NI_PCI_6733.py\", line 185, in transition_to_buffered\r\n    do_write_data = numpy.zeros((do_bitfield.shape[0],self.num['DO']),dtype=numpy.uint8)\r\nAttributeError: 'NiPCI6733Worker' object has no attribute 'num'\r\n```\r\n", "markup": "markdown", "html": "<p>When you try and use a Digital output for teh NI PCI 6733 during a buffered sequence, you get the following exception raised during transition_to_buffered</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"ne\">Exception</span> <span class=\"ow\">in</span> <span class=\"n\">worker</span> <span class=\"o\">-</span> <span class=\"n\">Mon</span> <span class=\"n\">Aug</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mo\">05</span> <span class=\"p\">:</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript_devices\\NI_PCI_6733.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">185</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">transition_to_buffered</span>\n    <span class=\"n\">do_write_data</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">do_bitfield</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">[</span><span class=\"s1\">&#39;DO&#39;</span><span class=\"p\">]),</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NiPCI6733Worker&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;num&#39;</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-08-11T02:13:04.243165+00:00", "milestone": null, "updated_on": "2016-01-09T01:06:53.329765+00:00", "type": "issue", "id": 10}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/11/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/11/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/11/ni-pci-6733-labscruipt-class-incorrectly"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/11/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "NI PCI 6733 labscruipt class incorrectly checks number of child devices", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The NI PCI 6733 requires an even number of Analog outputs during a buffered shot. However, the labscript code just checks there are an even number of child devices. Since this card also supports digital outputs, you run into the following problems:\r\n\r\n* You cannot add only 1 digital output\r\n* you can bypass the check by adding 1 digital and 1 analog output (which will raise an exception in BLACS when you try to run such a shot)", "markup": "markdown", "html": "<p>The NI PCI 6733 requires an even number of Analog outputs during a buffered shot. However, the labscript code just checks there are an even number of child devices. Since this card also supports digital outputs, you run into the following problems:</p>\n<ul>\n<li>You cannot add only 1 digital output</li>\n<li>you can bypass the check by adding 1 digital and 1 analog output (which will raise an exception in BLACS when you try to run such a shot)</li>\n</ul>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-08-11T02:15:20.303078+00:00", "milestone": null, "updated_on": "2016-01-09T01:06:27.318912+00:00", "type": "issue", "id": 11}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/12/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/12/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/12/cannot-compile-labscript-file-when-ni-pci"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/12/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Cannot compile labscript file when NI PCI 6733 has digital outputs", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The NI PCI 6733 raises an exception when trying to add digital outputs in labscript.\r\n\r\nThe Exception raised is:\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n     File \"C:\\labscript\\userlib\\labscriptlib\\atoms2\\connectiontable.py\", line 12, in <module>\r\n       stop(1)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 1928, in stop\r\n       generate_code()\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 1841, in generate_code\r\n       device.generate_code(hdf5_file)\r\n     File \"C:\\labscript\\labscript_devices\\CiceroOpalKellyXEM3001.py\", line 83, in generate_code\r\n       PseudoclockDevice.generate_code(self, hdf5_file)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 896, in generate_code\r\n       Device.generate_code(self, hdf5_file)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 393, in generate_code\r\n       device.generate_code(hdf5_file)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 786, in generate_code\r\n       Device.generate_code(self, hdf5_file)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 393, in generate_code\r\n       device.generate_code(hdf5_file)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 393, in generate_code\r\n       device.generate_code(hdf5_file)\r\n     File \"C:\\labscript\\labscript_devices\\NI_PCI_6733.py\", line 32, in generate_code\r\n       parent.NIBoard.generate_code(self, hdf5_file)\r\n     File \"C:\\labscript\\labscript_devices\\NIBoard.py\", line 94, in generate_code\r\n       digital_out_table = self.convert_bools_to_bytes(digitals.values())\r\n     File \"C:\\labscript\\labscript_devices\\NIBoard.py\", line 40, in convert_bools_to_bytes\r\n       bits = bitfield(outputarray,dtype=self.digital_dtype)\r\n     File \"C:\\labscript\\labscript\\labscript.py\", line 94, in bitfield\r\n       if iterable(arrays[i]):\r\n   IndexError: list index out of range\r\n```\r\n\r\nLooks like the digital output numpy array dtype is incorrectly specified (must match the number of digital outputs)", "markup": "markdown", "html": "<p>The NI PCI 6733 raises an exception when trying to add digital outputs in labscript.</p>\n<p>The Exception raised is:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\userlib\\labscriptlib</span><span class=\"se\">\\a</span><span class=\"s2\">toms2\\connectiontable.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n       <span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1928</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">stop</span>\n       <span class=\"n\">generate_code</span><span class=\"p\">()</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1841</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript_devices\\CiceroOpalKellyXEM3001.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">PseudoclockDevice</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">896</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">393</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">786</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">Device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">393</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">393</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript_devices\\NI_PCI_6733.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">NIBoard</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript_devices\\NIBoard.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n       <span class=\"n\">digital_out_table</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_bools_to_bytes</span><span class=\"p\">(</span><span class=\"n\">digitals</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript_devices\\NIBoard.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">convert_bools_to_bytes</span>\n       <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">bitfield</span><span class=\"p\">(</span><span class=\"n\">outputarray</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">digital_dtype</span><span class=\"p\">)</span>\n     <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript\\labscript\\labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">94</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">bitfield</span>\n       <span class=\"k\">if</span> <span class=\"n\">iterable</span><span class=\"p\">(</span><span class=\"n\">arrays</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]):</span>\n   <span class=\"ne\">IndexError</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"n\">index</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"nb\">range</span>\n</pre></div>\n\n\n<p>Looks like the digital output numpy array dtype is incorrectly specified (must match the number of digital outputs)</p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2015-08-11T02:18:38.321543+00:00", "milestone": null, "updated_on": "2016-01-09T01:07:07.712571+00:00", "type": "issue", "id": 12}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/13/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/13/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/13/pulseblaster-dds-cannot-be-ramped"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/13/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Pulseblaster DDS cannot be ramped", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In the current implementation, it seems as though the DDS outputs on a pulseblaster (DDS-II-300-AWG in this case) cannot be ramped.\r\nThere is a flag in pulseblaster.py which sets the internal pseudoclock to be non-rampable. Simply changing this to allow ramping *does not work.*\r\nThe resulting ramp appears to have the wrong timescale.\r\n\r\nIn my test case, I had the pulseblaster DDS amplitude ramp from 0 to 1 over a second, and then at the end of that ramp, a device clocked by flag 0 of the pulseblaster was supposed to have a 2s long ramp.\r\nInstead, based on the traces shown in runviewer, the pulseblaster DDS amplitude slowly increased, but with quite long time intervals between jumps in amplitude, and only reached ~0.2 by the end of the experiment. Meanwhile, the device which was supposed to ramp at the completion of the pulseblaster ramp started its ramp at the start of the pulseblaster ramp, and completed it in the duration set.\r\n\r\nThere must be some issues with the internal clocking?\r\n\r\nThere is, however a relatively easy workaround, so long as you are not doing anything too complex: use a for loop to update the DDS value to \"constant\" values based on the function which you want it to follow.\r\nThe main limitation of this workaround is that it may be hard to implement overlapping ramps or other complex situations like this, which labscript is generally excellent at dealing with.", "markup": "markdown", "html": "<p>In the current implementation, it seems as though the DDS outputs on a pulseblaster (DDS-II-300-AWG in this case) cannot be ramped.\nThere is a flag in pulseblaster.py which sets the internal pseudoclock to be non-rampable. Simply changing this to allow ramping <em>does not work.</em>\nThe resulting ramp appears to have the wrong timescale.</p>\n<p>In my test case, I had the pulseblaster DDS amplitude ramp from 0 to 1 over a second, and then at the end of that ramp, a device clocked by flag 0 of the pulseblaster was supposed to have a 2s long ramp.\nInstead, based on the traces shown in runviewer, the pulseblaster DDS amplitude slowly increased, but with quite long time intervals between jumps in amplitude, and only reached ~0.2 by the end of the experiment. Meanwhile, the device which was supposed to ramp at the completion of the pulseblaster ramp started its ramp at the start of the pulseblaster ramp, and completed it in the duration set.</p>\n<p>There must be some issues with the internal clocking?</p>\n<p>There is, however a relatively easy workaround, so long as you are not doing anything too complex: use a for loop to update the DDS value to \"constant\" values based on the function which you want it to follow.\nThe main limitation of this workaround is that it may be hard to implement overlapping ramps or other complex situations like this, which labscript is generally excellent at dealing with.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2015-09-21T23:39:34.191465+00:00", "milestone": null, "updated_on": "2015-09-21T23:39:34.191465+00:00", "type": "issue", "id": 13}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/14/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/14.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/14/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/14/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/14/ni-pci-6733-must-have-at-least-2"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/14/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "NI PCI 6733 must have at least 2 instructions", "component": null, "votes": 0, "watches": 2, "content": {"raw": "If the NI PCI 6733 has less than 2 instructions (2 samples) in the HDF5 table, then the DAQmx library will raise an exception when programming the device. We should catch this error at compilation time, rather than at programming time, and display a more useful error message.\r\n\r\nSee: #!/labscript_suite/labscript/issues/17/while-setting-values-for-the-ni-pic-6733", "markup": "markdown", "html": "<p>If the NI PCI 6733 has less than 2 instructions (2 samples) in the HDF5 table, then the DAQmx library will raise an exception when programming the device. We should catch this error at compilation time, rather than at programming time, and display a more useful error message.</p>\n<p>See: <a href=\"#!/labscript_suite/labscript/issues/17/while-setting-values-for-the-ni-pic-6733\" rel=\"nofollow\" class=\"ap-connect-link\">#!/labscript_suite/labscript/issues/17/while-setting-values-for-the-ni-pic-6733</a></p>", "type": "rendered"}, "assignee": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "state": "new", "version": null, "edited_on": null, "created_on": "2016-01-09T01:09:08.549280+00:00", "milestone": null, "updated_on": "2016-01-09T01:11:20.968235+00:00", "type": "issue", "id": 14}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/15/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/15/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/15/blacs-doesnt-notice-when-a-pulseblaster"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/15/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "BLACS doesn't notice when a PulseBlaster has been unplugged", "component": null, "votes": 0, "watches": 2, "content": {"raw": "If you unplug a pulseblaster from the computer, the BLACS tab sits there happily thinking that everything is OK, with check_status running without error. You can even change the state of its flags and BLACS will take around 40 seconds then seemingly time out without an error, leaving the front panel indicating that the flag state has been changed.\r\n\r\nWhile this is almost certainly spinapi's fault, can we work around this so that the tab accurately represents the state of the hardware by giving an error when it is unplugged?", "markup": "markdown", "html": "<p>If you unplug a pulseblaster from the computer, the BLACS tab sits there happily thinking that everything is OK, with check_status running without error. You can even change the state of its flags and BLACS will take around 40 seconds then seemingly time out without an error, leaving the front panel indicating that the flag state has been changed.</p>\n<p>While this is almost certainly spinapi's fault, can we work around this so that the tab accurately represents the state of the hardware by giving an error when it is unplugged?</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2016-01-13T01:21:48.087679+00:00", "milestone": null, "updated_on": "2016-01-13T01:44:12.394580+00:00", "type": "issue", "id": 15}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/16/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/16/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/16/introduction-of-asymmetric-pulseblaster"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/16/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Introduction of asymmetric pulseblaster clock ticks were not introduced in a backwards compatible fashion and has created bugs with long experiments", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The introduction of asymmetric clock ticks (changeset: 67d75ca) has introduced a bug with long delays.\r\nIt was implemented in such a way that bypasses the check for adding a `LONG_DELAY` opcode.\r\n\r\nIt also defaults to a clock tick of 66ns, which is extremely fast and is likely the cause of random missed triggers we've experienced in the lab for the past year.\r\n\r\nI think it would be good to set the default behaviour (`pulse_width=None` keyword argument at instantiation) to use the original 50/50 high/low clock tick behaviour (thus making the change backwards compatible)\r\n\r\nThe bug with long delays should also be fixed.", "markup": "markdown", "html": "<p>The introduction of asymmetric clock ticks (changeset: <a href=\"#!/labscript_suite/labscript_devices/commits/67d75ca\" rel=\"nofollow\" class=\"ap-connect-link\">67d75ca</a>) has introduced a bug with long delays.\nIt was implemented in such a way that bypasses the check for adding a <code>LONG_DELAY</code> opcode.</p>\n<p>It also defaults to a clock tick of 66ns, which is extremely fast and is likely the cause of random missed triggers we've experienced in the lab for the past year.</p>\n<p>I think it would be good to set the default behaviour (<code>pulse_width=None</code> keyword argument at instantiation) to use the original 50/50 high/low clock tick behaviour (thus making the change backwards compatible)</p>\n<p>The bug with long delays should also be fixed.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2016-02-17T06:26:14.948137+00:00", "milestone": null, "updated_on": "2016-03-22T03:59:22.345186+00:00", "type": "issue", "id": 16}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/17/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/17/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/17/timeout-trigger-of-wait-monitor-doesnt"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/17/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Timeout trigger of wait monitor doesn't change state", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The [`send_resume_trigger`](#!/labscript_suite/labscript_devices/src/1f51ddd7833c5eb33be3c6e3851c2bb732aeab34/NI_PCIe_6363.py?at=default&fileviewer=file-view-default#NI_PCIe_6363.py-694) function of the NI_PCIe_6363 issues two identical instructions to the `timeout_connection`, i.e. failing to produce a rising/falling edge.", "markup": "markdown", "html": "<p>The <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/src/1f51ddd7833c5eb33be3c6e3851c2bb732aeab34/NI_PCIe_6363.py?at=default&amp;fileviewer=file-view-default#NI_PCIe_6363.py-694\" rel=\"nofollow\"><code>send_resume_trigger</code></a> function of the NI_PCIe_6363 issues two identical instructions to the <code>timeout_connection</code>, i.e. failing to produce a rising/falling edge.</p>", "type": "rendered"}, "assignee": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-02-21T02:54:46.004967+00:00", "milestone": null, "updated_on": "2018-09-12T18:16:11.709651+00:00", "type": "issue", "id": 17}, {"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/18/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/18/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/18/edge-type-for-timeout-trigger-of-wait"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/18/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Edge type for timeout trigger of wait monitor", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Permit specification of the `trigger_edge_type` for the `WaitMonitor` class.", "markup": "markdown", "html": "<p>Permit specification of the <code>trigger_edge_type</code> for the <code>WaitMonitor</code> class.</p>", "type": "rendered"}, "assignee": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-02-21T02:56:47.714686+00:00", "milestone": null, "updated_on": "2019-01-17T22:31:59.547124+00:00", "type": "issue", "id": 18}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/19/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/19/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/19/acquisitions-after-wait-do-not-account-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/19/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Acquisitions after wait do not account for wait time : USB-6343", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I've attached an example data run that exhibits the problem.\r\n\r\nAfter a 60Hz Trigger the execution resumes as normal. However, it appears the acquisition worker does not account for the wait time and slices out the analog inputs as if it didn't happen. The result is that the data returned by the acquisition no longer corresponds to experiment execution time after a wait making it essentially impossible to get the data desired.\r\n\r\nI think the issue is in the extract_measurements method of the Acquisition worker. It waits to ensure the wait times are calculated, but then does nothing with those times. I don't see a correct implementation in other classes so I'll start working a fix. Unless I'm greatly mistaken, I only need to update extract_measurements to properly account for unknown number of waits at different times?", "markup": "markdown", "html": "<p>I've attached an example data run that exhibits the problem.</p>\n<p>After a 60Hz Trigger the execution resumes as normal. However, it appears the acquisition worker does not account for the wait time and slices out the analog inputs as if it didn't happen. The result is that the data returned by the acquisition no longer corresponds to experiment execution time after a wait making it essentially impossible to get the data desired.</p>\n<p>I think the issue is in the extract_measurements method of the Acquisition worker. It waits to ensure the wait times are calculated, but then does nothing with those times. I don't see a correct implementation in other classes so I'll start working a fix. Unless I'm greatly mistaken, I only need to update extract_measurements to properly account for unknown number of waits at different times?</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-26T15:36:10.499787+00:00", "milestone": null, "updated_on": "2017-04-27T04:24:49.703270+00:00", "type": "issue", "id": 19}, {"priority": "trivial", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/20/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/20/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/20/runviewer-does-not-process-flags-11-for"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/20/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Runviewer does not process flags >11 for PulseBlaster_No_DDS", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It also prevents runviewer from loading any traces from devices connected to the pulseblaster.\r\n\r\nThis is due to a typo I made in pull request #10 in the Parser. \r\n\r\nnum_DO needs to be num_flags, as it is in the parent class. Oops.\r\n\r\nIs there a better way to fix it than me making a hotfix branch and sending a pull request?", "markup": "markdown", "html": "<p>It also prevents runviewer from loading any traces from devices connected to the pulseblaster.</p>\n<p>This is due to a typo I made in <a href=\"#!/labscript_suite/labscript_devices/pull-requests/10/default\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #10</a> in the Parser. </p>\n<p>num_DO needs to be num_flags, as it is in the parent class. Oops.</p>\n<p>Is there a better way to fix it than me making a hotfix branch and sending a pull request?</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-04-28T16:26:02.104797+00:00", "milestone": null, "updated_on": "2017-04-28T17:50:27.778809+00:00", "type": "issue", "id": 20}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/21/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/21.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/21/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/21/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/21/add-icons-to-device-tabs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/21/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Add icons to device tabs", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Now that we're adding icons to BLACS, there are a few places within specific devices' tabs where icons could help to make the interface look nicer. \r\n\r\n* In the pulseblaster tab, the status area could use \"tick-circle\" and \"cross-circle\" icons rather than \"True\" and \"False\". In this case, I'd also suggest changing the layout to have the status labels spread out horizontally, with the icons below, then the manual control buttons spread horizontally below that, with appropriate play, stop and reset icons added to them.\r\n\r\n* The camera tab \"Check connectivity\" button needs an icon to help distinguish it as a button with the new borderless style. I'm not sure which icon would look best, there are a few we could choose from. The server status line can also be replaced by an icon, perhaps either the tick and cross like in the pulseblaster, or \"network-status\" and \"network-status-busy\"\r\n\r\nThese used to be icons when we used GTK, but were not re implemented during the initial port to qt.", "markup": "markdown", "html": "<p>Now that we're adding icons to BLACS, there are a few places within specific devices' tabs where icons could help to make the interface look nicer. </p>\n<ul>\n<li>\n<p>In the pulseblaster tab, the status area could use \"tick-circle\" and \"cross-circle\" icons rather than \"True\" and \"False\". In this case, I'd also suggest changing the layout to have the status labels spread out horizontally, with the icons below, then the manual control buttons spread horizontally below that, with appropriate play, stop and reset icons added to them.</p>\n</li>\n<li>\n<p>The camera tab \"Check connectivity\" button needs an icon to help distinguish it as a button with the new borderless style. I'm not sure which icon would look best, there are a few we could choose from. The server status line can also be replaced by an icon, perhaps either the tick and cross like in the pulseblaster, or \"network-status\" and \"network-status-busy\"</p>\n</li>\n</ul>\n<p>These used to be icons when we used GTK, but were not re implemented during the initial port to qt.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-06-16T00:06:12.962833+00:00", "milestone": null, "updated_on": "2017-07-28T22:09:28.058259+00:00", "type": "issue", "id": 21}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/22/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/22/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/22/third-party-devices"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/22/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Third-Party Devices", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In the course of setting up my lab I've written a few new device classes for working with labscript. Right now I have simple classes for use with Tektronix scopes and single-tone frequency synthesizers (think big HP boxes and the like) based on a more generic VISA class in the [VISAinstr branch](#!/dihm/labscript_devices/branch/VISAinstr) of my fork that I would like to contribute upstream to help widen device support for labscript. I've talked to Chris about this in person but figured I should open up the audience before sending pull requests directly to the repository. The obvious issue is that you need to be careful about having code in the repository that you can't test directly. \r\n\r\nCould I suggest at least a third-party subfolder in the labscript_devices repo or maybe even a separate repository for holding such contributed devices? The idea is to make it easy (and obvious how) to contribute back while also making it clear the devices are not directly supported.", "markup": "markdown", "html": "<p>In the course of setting up my lab I've written a few new device classes for working with labscript. Right now I have simple classes for use with Tektronix scopes and single-tone frequency synthesizers (think big HP boxes and the like) based on a more generic VISA class in the <a data-is-external-link=\"true\" href=\"#!/dihm/labscript_devices/branch/VISAinstr\" rel=\"nofollow\">VISAinstr branch</a> of my fork that I would like to contribute upstream to help widen device support for labscript. I've talked to Chris about this in person but figured I should open up the audience before sending pull requests directly to the repository. The obvious issue is that you need to be careful about having code in the repository that you can't test directly. </p>\n<p>Could I suggest at least a third-party subfolder in the labscript_devices repo or maybe even a separate repository for holding such contributed devices? The idea is to make it easy (and obvious how) to contribute back while also making it clear the devices are not directly supported.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-07-17T16:14:03.999279+00:00", "milestone": null, "updated_on": "2018-10-29T16:29:17.964480+00:00", "type": "issue", "id": 22}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/23/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/23/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/23/pulseblaster-with-2323-firmware-turns-off"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/23/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Pulseblaster with 2323 firmware turns off all outputs during programming", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We have two pulseblasters in the lab with firmwares 2323 and 3338. For whatever reason the 2323 firmware version disables all digital outputs when pb_start_programming() is called and it appears they don't re-enable until pb_start(). There isn't really anything we can do about that in particular, but it would be nice if pb_start_programming() wasn't called unnecessarily (for the sake of compatibility with the STOP programming method) so my digital lines could stay high between most of my shots, keeping the experiment warm.\r\n\r\nI'm using the following diff without issue so far. Am I missing any other edge cases?\r\n```\r\n#!diff\r\n\r\n@@ -341,18 +341,13 @@\r\n             pulse_program = group['PULSE_PROGRAM'][2:]\r\n             \r\n             #Let's get the final state of the pulseblaster. z's are the args we don't need:\r\n-            flags,z,z,z = pulse_program[-1]\r\n-            \r\n-            # Always call start_programming regardless of whether we are going to do any\r\n-            # programming or not. This is so that is the programming_scheme is 'pb_stop_programming/STOP'\r\n-            # we are ready to be triggered by a call to pb_stop_programming() even if no programming\r\n-            # occurred due to smart programming:\r\n-            pb_start_programming(PULSE_PROGRAM)\r\n+            flags,z,z,z = pulse_program[-1]                \r\n             \r\n             if fresh or (self.smart_cache['initial_values'] != initial_values) or \\\r\n                 (len(self.smart_cache['pulse_program']) != len(pulse_program)) or \\\r\n                 (self.smart_cache['pulse_program'] != pulse_program).any() or \\\r\n                 not self.smart_cache['ready_to_go']:\r\n+                pb_start_programming(PULSE_PROGRAM)\r\n             \r\n                 self.smart_cache['ready_to_go'] = True\r\n                 self.smart_cache['initial_values'] = initial_values\r\n@@ -385,17 +380,22 @@\r\n                     for args in pulse_program:\r\n                         pb_inst_pbonly(*args)\r\n                         \r\n-            if self.programming_scheme == 'pb_start/BRANCH':\r\n-                # We will be triggered by pb_start() if we are are the master pseudoclock or a single hardware trigger\r\n-                # from the master if we are not:\r\n-                pb_stop_programming()\r\n+                if self.programming_scheme == 'pb_start/BRANCH':\r\n+                    # We will be triggered by pb_start() if we are are the master pseudoclock or a single hardware trigger\r\n+                    # from the master if we are not:\r\n+                    pb_stop_programming()\r\n+                elif self.programming_scheme == 'pb_stop_programming/STOP':\r\n+                    # Don't call pb_stop_programming(). We don't want to pulseblaster to respond to hardware\r\n+                    # triggers (such as 50/60Hz line triggers) until we are ready to run.\r\n+                    # Our start_method will call pb_stop_programming() when we are ready\r\n+                    pass\r\n+                else:\r\n+                    raise ValueError('invalid programming_scheme %s'%str(self.programming_scheme))\r\n             elif self.programming_scheme == 'pb_stop_programming/STOP':\r\n-                # Don't call pb_stop_programming(). We don't want to pulseblaster to respond to hardware\r\n-                # triggers (such as 50/60Hz line triggers) until we are ready to run.\r\n-                # Our start_method will call pb_stop_programming() when we are ready\r\n-                pass\r\n-            else:\r\n-                raise ValueError('invalid programming_scheme %s'%str(self.programming_scheme))\r\n+                # Ensure start_programming called if the programming_scheme is 'pb_stop_programming/STOP'\r\n+                # so we are ready to be triggered by a call to pb_stop_programming() \r\n+                # even if no programming occurred due to smart programming:\r\n+                pb_start_programming(PULSE_PROGRAM)\r\n             \r\n             # Are there waits in use in this experiment? The monitor waiting for the end of\r\n             # the experiment will need to know:\r\n\r\n```", "markup": "markdown", "html": "<p>We have two pulseblasters in the lab with firmwares 2323 and 3338. For whatever reason the 2323 firmware version disables all digital outputs when pb_start_programming() is called and it appears they don't re-enable until pb_start(). There isn't really anything we can do about that in particular, but it would be nice if pb_start_programming() wasn't called unnecessarily (for the sake of compatibility with the STOP programming method) so my digital lines could stay high between most of my shots, keeping the experiment warm.</p>\n<p>I'm using the following diff without issue so far. Am I missing any other edge cases?</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -341,18 +341,13 @@</span>\n             pulse_program = group[&#39;PULSE_PROGRAM&#39;][2:]\n\n             #Let&#39;s get the final state of the pulseblaster. z&#39;s are the args we don&#39;t need:\n<span class=\"gd\">-            flags,z,z,z = pulse_program[-1]</span>\n<span class=\"gd\">-            </span>\n<span class=\"gd\">-            # Always call start_programming regardless of whether we are going to do any</span>\n<span class=\"gd\">-            # programming or not. This is so that is the programming_scheme is &#39;pb_stop_programming/STOP&#39;</span>\n<span class=\"gd\">-            # we are ready to be triggered by a call to pb_stop_programming() even if no programming</span>\n<span class=\"gd\">-            # occurred due to smart programming:</span>\n<span class=\"gd\">-            pb_start_programming(PULSE_PROGRAM)</span>\n<span class=\"gi\">+            flags,z,z,z = pulse_program[-1]                </span>\n\n             if fresh or (self.smart_cache[&#39;initial_values&#39;] != initial_values) or \\\n                 (len(self.smart_cache[&#39;pulse_program&#39;]) != len(pulse_program)) or \\\n                 (self.smart_cache[&#39;pulse_program&#39;] != pulse_program).any() or \\\n                 not self.smart_cache[&#39;ready_to_go&#39;]:\n<span class=\"gi\">+                pb_start_programming(PULSE_PROGRAM)</span>\n\n                 self.smart_cache[&#39;ready_to_go&#39;] = True\n                 self.smart_cache[&#39;initial_values&#39;] = initial_values\n<span class=\"gu\">@@ -385,17 +380,22 @@</span>\n                     for args in pulse_program:\n                         pb_inst_pbonly(*args)\n\n<span class=\"gd\">-            if self.programming_scheme == &#39;pb_start/BRANCH&#39;:</span>\n<span class=\"gd\">-                # We will be triggered by pb_start() if we are are the master pseudoclock or a single hardware trigger</span>\n<span class=\"gd\">-                # from the master if we are not:</span>\n<span class=\"gd\">-                pb_stop_programming()</span>\n<span class=\"gi\">+                if self.programming_scheme == &#39;pb_start/BRANCH&#39;:</span>\n<span class=\"gi\">+                    # We will be triggered by pb_start() if we are are the master pseudoclock or a single hardware trigger</span>\n<span class=\"gi\">+                    # from the master if we are not:</span>\n<span class=\"gi\">+                    pb_stop_programming()</span>\n<span class=\"gi\">+                elif self.programming_scheme == &#39;pb_stop_programming/STOP&#39;:</span>\n<span class=\"gi\">+                    # Don&#39;t call pb_stop_programming(). We don&#39;t want to pulseblaster to respond to hardware</span>\n<span class=\"gi\">+                    # triggers (such as 50/60Hz line triggers) until we are ready to run.</span>\n<span class=\"gi\">+                    # Our start_method will call pb_stop_programming() when we are ready</span>\n<span class=\"gi\">+                    pass</span>\n<span class=\"gi\">+                else:</span>\n<span class=\"gi\">+                    raise ValueError(&#39;invalid programming_scheme %s&#39;%str(self.programming_scheme))</span>\n             elif self.programming_scheme == &#39;pb_stop_programming/STOP&#39;:\n<span class=\"gd\">-                # Don&#39;t call pb_stop_programming(). We don&#39;t want to pulseblaster to respond to hardware</span>\n<span class=\"gd\">-                # triggers (such as 50/60Hz line triggers) until we are ready to run.</span>\n<span class=\"gd\">-                # Our start_method will call pb_stop_programming() when we are ready</span>\n<span class=\"gd\">-                pass</span>\n<span class=\"gd\">-            else:</span>\n<span class=\"gd\">-                raise ValueError(&#39;invalid programming_scheme %s&#39;%str(self.programming_scheme))</span>\n<span class=\"gi\">+                # Ensure start_programming called if the programming_scheme is &#39;pb_stop_programming/STOP&#39;</span>\n<span class=\"gi\">+                # so we are ready to be triggered by a call to pb_stop_programming() </span>\n<span class=\"gi\">+                # even if no programming occurred due to smart programming:</span>\n<span class=\"gi\">+                pb_start_programming(PULSE_PROGRAM)</span>\n\n             # Are there waits in use in this experiment? The monitor waiting for the end of\n             # the experiment will need to know:\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-10-20T20:22:45.698736+00:00", "milestone": null, "updated_on": "2017-10-20T20:22:45.698736+00:00", "type": "issue", "id": 23}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/24/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/24.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/24/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/24/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/24/backwards-compatible-connection-table"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/24/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Backwards compatible connection table comparisons between different versions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "As discussed in [labscript_devices pull request 27](#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/) and [labscript issue 45](#!/labscript_suite/labscript/issues/45/restructure-properties-and-blacs) we would like a way to ensure that new connection_table_properties in devices does not invalidate connection tables if possible.\r\n\r\nI think that this may be best solved by a new class in each labscript_devices device file that can be invoked by connection table comparison code in order to determine whether a connection_table_properties dictionary is identical if it was compiled with a different version of labscript_devices.\r\n\r\nThis would also require storing the labscript suite versions used when producing the connection table as attributes to the connection table.\r\n\r\nIt also requires development of some sort of syntax (maybe a dictionary structure of some kind?) that allows us to keep track of changes between different versions of labscript_devices and informs how comparisons should be made. This will probably have to evolve with time as we come across new use cases, but I don't see a problem with that. It might sound complicated, but I think it's doable (as similar/tangential example, the Django project has an automated tool that keeps track of database schema changes and can roll database schemas forward/backward in time which sounds way more complicated than this!)", "markup": "markdown", "html": "<p>As discussed in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/27/novatech-synchronous-workaround/\" rel=\"nofollow\">labscript_devices pull request 27</a> and <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/issues/45/restructure-properties-and-blacs\" rel=\"nofollow\">labscript issue 45</a> we would like a way to ensure that new connection_table_properties in devices does not invalidate connection tables if possible.</p>\n<p>I think that this may be best solved by a new class in each labscript_devices device file that can be invoked by connection table comparison code in order to determine whether a connection_table_properties dictionary is identical if it was compiled with a different version of labscript_devices.</p>\n<p>This would also require storing the labscript suite versions used when producing the connection table as attributes to the connection table.</p>\n<p>It also requires development of some sort of syntax (maybe a dictionary structure of some kind?) that allows us to keep track of changes between different versions of labscript_devices and informs how comparisons should be made. This will probably have to evolve with time as we come across new use cases, but I don't see a problem with that. It might sound complicated, but I think it's doable (as similar/tangential example, the Django project has an automated tool that keeps track of database schema changes and can roll database schemas forward/backward in time which sounds way more complicated than this!)</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-03-12T23:36:30.942554+00:00", "milestone": null, "updated_on": "2018-03-12T23:59:56.437204+00:00", "type": "issue", "id": 24}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/25/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/25/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/25/extract_measurements-of-ni-cards"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/25/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "extract_measurements of NI cards incompatible with numpy >= 1.12", "component": null, "votes": 0, "watches": 1, "content": {"raw": "As of [numpy 1.12](https://docs.scipy.org/doc/numpy-1.12.0/release.html#deprecationwarning-to-error), indexing with floats raises `IndexError`. This occurs in [`extract_measurements`](#!/labscript_suite/labscript_devices/src/7be55cfdadbfd5523326754d3ae71025943b69a3/NI_PCIe_6363.py?at=default&fileviewer=file-view-default#NI_PCIe_6363.py-587), as `numpy.floor` and `numpy.ceil` (used to define `start_index` and `stop_index`) return floats.", "markup": "markdown", "html": "<p>As of <a data-is-external-link=\"true\" href=\"https://docs.scipy.org/doc/numpy-1.12.0/release.html#deprecationwarning-to-error\" rel=\"nofollow\">numpy 1.12</a>, indexing with floats raises <code>IndexError</code>. This occurs in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/src/7be55cfdadbfd5523326754d3ae71025943b69a3/NI_PCIe_6363.py?at=default&amp;fileviewer=file-view-default#NI_PCIe_6363.py-587\" rel=\"nofollow\"><code>extract_measurements</code></a>, as <code>numpy.floor</code> and <code>numpy.ceil</code> (used to define <code>start_index</code> and <code>stop_index</code>) return floats.</p>", "type": "rendered"}, "assignee": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-05-30T02:31:03.715745+00:00", "milestone": null, "updated_on": "2018-05-30T02:35:13.560058+00:00", "type": "issue", "id": 25}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/26/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/26.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/26/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/26/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/26/pulseblaster-flags-being-stored-as-unicode"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/26/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Pulseblaster flags being stored as unicode string instead of int?", "component": null, "votes": 0, "watches": 2, "content": {"raw": "Having just updated to the latest version of everything (after a long time on an older version), I get the following error whenever pulseblasters are programmed:\r\n\r\n\r\n```\r\n#!python\r\n\r\n2018-07-31 14:41:42,987 ERROR BLACS.pulseblaster_1_main_worker.worker: Exception in job:\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\labscript_devices\\PulseBlaster.py\", line 861, in program_manual\r\n    pb_inst_dds2(0,0,0,values['dds 0']['gate'],0,0,0,0,values['dds 1']['gate'],0,flags, WAIT, 0, 100)\r\n  File \"C:\\Anaconda2\\lib\\site-packages\\spinapi\\spinapi.py\", line 216, in pb_inst_dds2\r\n    ctypes.c_int(flags),ctypes.c_int(inst),\r\nTypeError: an integer is required\r\n```\r\n\r\nIt seems as though \"flags\" is stored as unicode rather than an integer. Adding in a line to convert it to an int resolves this issue.\r\nIs there a reason why the flags are stored this way? Or am I just on an old version of SpinAPI (3.1.1)? I assume that someone has tested the pulseblaster since the Python 3 conversion?", "markup": "markdown", "html": "<p>Having just updated to the latest version of everything (after a long time on an older version), I get the following error whenever pulseblasters are programmed:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"mi\">2018</span><span class=\"o\">-</span><span class=\"mo\">07</span><span class=\"o\">-</span><span class=\"mi\">31</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">41</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"mi\">987</span> <span class=\"n\">ERROR</span> <span class=\"n\">BLACS</span><span class=\"o\">.</span><span class=\"n\">pulseblaster_1_main_worker</span><span class=\"o\">.</span><span class=\"n\">worker</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span> <span class=\"ow\">in</span> <span class=\"n\">job</span><span class=\"p\">:</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_devices\\PulseBlaster.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">861</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">program_manual</span>\n    <span class=\"n\">pb_inst_dds2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s1\">&#39;dds 0&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;gate&#39;</span><span class=\"p\">],</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"s1\">&#39;dds 1&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;gate&#39;</span><span class=\"p\">],</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">flags</span><span class=\"p\">,</span> <span class=\"n\">WAIT</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\Anaconda2\\lib\\site-packages\\spinapi\\spinapi.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">216</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">pb_inst_dds2</span>\n    <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_int</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">),</span><span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_int</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">),</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">an</span> <span class=\"n\">integer</span> <span class=\"ow\">is</span> <span class=\"n\">required</span>\n</pre></div>\n\n\n<p>It seems as though \"flags\" is stored as unicode rather than an integer. Adding in a line to convert it to an int resolves this issue.\nIs there a reason why the flags are stored this way? Or am I just on an old version of SpinAPI (3.1.1)? I assume that someone has tested the pulseblaster since the Python 3 conversion?</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-07-31T04:50:14.886634+00:00", "milestone": null, "updated_on": "2018-08-01T02:13:17.946290+00:00", "type": "issue", "id": 26}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/27/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/27/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/27/pulseblaster-phase-resets"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/27/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Pulseblaster phase resets", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The DDS outputs on pulseblasters support phase resets, where the absolute phase of the output is reset. As far as I can tell, we do not use this at all, and so there is no phase stability shot-to-shot (unless the phase resets at the start of the experiment, but I don't see that happening explicitly?). Furthermore, the DDS phase does not seem to be stable over long periods, so resetting at the start of an experiment can lead to phase jitter in pulses several seconds later.\r\n\r\nI propose that we implement a \"phase reset\" function. The reset works by setting the reset flag to True, which holds the DDS output at a constant value corresponding to the starting value due to the current phase register, then disabling the reset again (at the next instruction) after which the DDS begins accumulating phase as usual, outputting rf.\r\n\r\nI've tested that this produces consistent phases in pulses by manually editing instructions in the pulse program written in the H5 file. I'm not sure what the best labscript implementation would be, as the reset takes 2 instructions, and so has a finite time during which the DDS output is frozen.", "markup": "markdown", "html": "<p>The DDS outputs on pulseblasters support phase resets, where the absolute phase of the output is reset. As far as I can tell, we do not use this at all, and so there is no phase stability shot-to-shot (unless the phase resets at the start of the experiment, but I don't see that happening explicitly?). Furthermore, the DDS phase does not seem to be stable over long periods, so resetting at the start of an experiment can lead to phase jitter in pulses several seconds later.</p>\n<p>I propose that we implement a \"phase reset\" function. The reset works by setting the reset flag to True, which holds the DDS output at a constant value corresponding to the starting value due to the current phase register, then disabling the reset again (at the next instruction) after which the DDS begins accumulating phase as usual, outputting rf.</p>\n<p>I've tested that this produces consistent phases in pulses by manually editing instructions in the pulse program written in the H5 file. I'm not sure what the best labscript implementation would be, as the reset takes 2 instructions, and so has a finite time during which the DDS output is frozen.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-08-21T07:44:10.940434+00:00", "milestone": null, "updated_on": "2019-06-03T13:43:31.686679+00:00", "type": "issue", "id": 27}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/28/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/28.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/28/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/28/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/28/pulseblaster-long-delay-instructions-only"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/28/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "PulseBlaster long delay instructions only work for PulseBlaster devices with a 13.33ns resolution", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We have a bunch of hard-coded instances of 55 seconds in the PulseBlaster labscript class. This number is used to determine when to switch between normal delay and long delay instructions. That code is used by all the other PulseBlaster variants (via subclassing), however the 55 second number is actually 13.333ns * 2^32, where 2^32 indicates that the instruction delay is actually stored as a 32-bit integer inside the PulseBlaster (corroborated by the manual) and 13.333ns is half of the `clock_resolution` attribute of `PseudoclockDevice`s.\r\n\r\nWe should update the code to handle the switch between normal delay and long delay instructions based on the instruction length going over `2**32*self.clock_resolution/2` rather than 55 seconds.\r\n\r\nWe should probably also note that I think Shaun has been wanting PulseBlasters which only use internal outputs (and not `ClockLines`) to be able to have a clock resolution of half that specified at the moment, and so a fix for this may conflict with any parallel changes that Shaun works on.", "markup": "markdown", "html": "<p>We have a bunch of hard-coded instances of 55 seconds in the PulseBlaster labscript class. This number is used to determine when to switch between normal delay and long delay instructions. That code is used by all the other PulseBlaster variants (via subclassing), however the 55 second number is actually 13.333ns * 2^32, where 2^32 indicates that the instruction delay is actually stored as a 32-bit integer inside the PulseBlaster (corroborated by the manual) and 13.333ns is half of the <code>clock_resolution</code> attribute of <code>PseudoclockDevice</code>s.</p>\n<p>We should update the code to handle the switch between normal delay and long delay instructions based on the instruction length going over <code>2**32*self.clock_resolution/2</code> rather than 55 seconds.</p>\n<p>We should probably also note that I think Shaun has been wanting PulseBlasters which only use internal outputs (and not <code>ClockLines</code>) to be able to have a clock resolution of half that specified at the moment, and so a fix for this may conflict with any parallel changes that Shaun works on.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-09-30T05:27:28.094554+00:00", "milestone": null, "updated_on": "2018-09-30T05:27:28.094554+00:00", "type": "issue", "id": 28}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/29/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/29/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/29/device-base-classes-should-save-class"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/29/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Device base classes should save class attributes in device/connection table properties", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We should save all of the device attributes if they are relevant down stream. For example, things like `clock_resolution`, `wait_delay`, `trigger_delay`, etc. of `PseudoclockDevice`s should be stored so that they can be accessed by runmanager. I think these should probably be stored in the device properties in the base class definitions (`PseudoclockDevice` and `IntermediateDevice`), leaving it up to the device class maintainer to decide if they should also be saved in the connection table properties (which would force connection table recompilation and prevention of old shots from being re-run if something in the class was updated).\r\n\r\nrunviewer and BLACS would then access this information rather than relying on the labscript using the same version of the device class, with the same parameters, as runviewer and BLACS (which could even be running on separate PC's)", "markup": "markdown", "html": "<p>We should save all of the device attributes if they are relevant down stream. For example, things like <code>clock_resolution</code>, <code>wait_delay</code>, <code>trigger_delay</code>, etc. of <code>PseudoclockDevice</code>s should be stored so that they can be accessed by runmanager. I think these should probably be stored in the device properties in the base class definitions (<code>PseudoclockDevice</code> and <code>IntermediateDevice</code>), leaving it up to the device class maintainer to decide if they should also be saved in the connection table properties (which would force connection table recompilation and prevention of old shots from being re-run if something in the class was updated).</p>\n<p>runviewer and BLACS would then access this information rather than relying on the labscript using the same version of the device class, with the same parameters, as runviewer and BLACS (which could even be running on separate PC's)</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-10-30T03:53:01.590607+00:00", "milestone": null, "updated_on": "2018-10-30T03:53:01.590607+00:00", "type": "issue", "id": 29}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/30/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/30.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/30/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/30/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/30/device-code-should-have-a-version"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/30/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Device code should have a version associated with it", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In moving towards a more siloed set of device code, that may or may not be housed within labscript_devices module and/or may not be committed to the labscript_devices master repository, I think that we should tag devices code with versions. I think preferably, this would be a semver string or tuple as an attribute of the relevant class that labscript/BLACS(GUI/Worker)/runviewer instantiates (I think all classes in a given commit would be expected to have the same version). Labscript would be expected to save this information in the connection table properties.\r\n\r\nWe could then use standard semver logic to determine shot compatibility (although, it could be argued that you might want to restrict shots from running if they were compiled using a different version due to the potential interplay of a bug fix applied only to one side of labscript and BLACS, in which case perhaps the strictness of the comparison should be configurable via the connection table plugin preferences window)", "markup": "markdown", "html": "<p>In moving towards a more siloed set of device code, that may or may not be housed within labscript_devices module and/or may not be committed to the labscript_devices master repository, I think that we should tag devices code with versions. I think preferably, this would be a semver string or tuple as an attribute of the relevant class that labscript/BLACS(GUI/Worker)/runviewer instantiates (I think all classes in a given commit would be expected to have the same version). Labscript would be expected to save this information in the connection table properties.</p>\n<p>We could then use standard semver logic to determine shot compatibility (although, it could be argued that you might want to restrict shots from running if they were compiled using a different version due to the potential interplay of a bug fix applied only to one side of labscript and BLACS, in which case perhaps the strictness of the comparison should be configurable via the connection table plugin preferences window)</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-10-30T04:04:04.701673+00:00", "milestone": null, "updated_on": "2018-10-30T15:15:27.068466+00:00", "type": "issue", "id": 30}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/31/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/31.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/31/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/31/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/31/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "imaqdx camera server makes model-specific assumptions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I was setting up a Point Grey Flea 3 camera with the imaqdx camera server, and a bunch of the attributes have different names than what the server assumes.\r\n\r\nI'm not 100% sure how to go about fixing this, but I'm told perhaps some sub-part of the attribute string is universal, so perhaps the correct attribute can be found for a particular model by looking at all attributes and looking for that sub-part.\r\n\r\nHere's the changes I had to make to get it working. The exposure time attribute has no parts of the string in common with what the server was previously assuming it to be, though I haven't confirmed I can actually change the exposure time with this attribute, haven't gotten that far yet.\r\n\r\nAnyhow flagging this as inadequate, we need a better solution, hopefully something better than hard-coding attribute lists by camera model.\r\n\r\n\r\n```diff\r\n@@ -312,7 +316,7 @@\r\n \r\n         # Set the camera properties\r\n         timeout_attr = 'AcquisitionAttributes::Timeout'\r\n-        exposure_attr = 'CameraAttributes::Controls::Exposure::ExposureTimeAbs'\r\n+        exposure_attr = 'CameraAttributes::Shutter::Value'\r\n         if timeout_attr not in imaqdx_properties:\r\n             # Set acquisition timeout to fixed value\r\n             print('Setting {} to {:.3f}s'.format(timeout_attr, stop_time + 5))\r\n@@ -329,11 +333,11 @@\r\n \r\n         # Get the camera properties\r\n         self.exposure_time = self.camera.get_attribute(exposure_attr)\r\n-        self.width = self.camera.get_attribute('CameraAttributes::ImageFormat::Width')\r\n-        self.height = self.camera.get_attribute('CameraAttributes::ImageFormat::Height')\r\n+        self.width = self.camera.get_attribute('AcquisitionAttributes::Width')\r\n+        self.height = self.camera.get_attribute('AcquisitionAttributes::Height')\r\n         self.binning_horizontal = self.camera.get_attribute('CameraAttributes::ImageMode::BinningHorizontal')\r\n         self.binning_vertical = self.camera.get_attribute('CameraAttributes::ImageMode::BinningVertical')\r\n-        self.pixel_format = self.camera.get_attribute('CameraAttributes::ImageFormat::PixelFormat')\r\n+        self.pixel_format = self.camera.get_attribute('AcquisitionAttributes::PixelFormat')\r\n \r\n \r\n         print(f'Configuring camera for {self.n_images} images.')\r\n```", "markup": "markdown", "html": "<p>I was setting up a Point Grey Flea 3 camera with the imaqdx camera server, and a bunch of the attributes have different names than what the server assumes.</p>\n<p>I'm not 100% sure how to go about fixing this, but I'm told perhaps some sub-part of the attribute string is universal, so perhaps the correct attribute can be found for a particular model by looking at all attributes and looking for that sub-part.</p>\n<p>Here's the changes I had to make to get it working. The exposure time attribute has no parts of the string in common with what the server was previously assuming it to be, though I haven't confirmed I can actually change the exposure time with this attribute, haven't gotten that far yet.</p>\n<p>Anyhow flagging this as inadequate, we need a better solution, hopefully something better than hard-coding attribute lists by camera model.</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -312,7 +316,7 @@</span>\n\n         # Set the camera properties\n         timeout_attr = &#39;AcquisitionAttributes::Timeout&#39;\n<span class=\"gd\">-        exposure_attr = &#39;CameraAttributes::Controls::Exposure::ExposureTimeAbs&#39;</span>\n<span class=\"gi\">+        exposure_attr = &#39;CameraAttributes::Shutter::Value&#39;</span>\n         if timeout_attr not in imaqdx_properties:\n             # Set acquisition timeout to fixed value\n             print(&#39;Setting {} to {:.3f}s&#39;.format(timeout_attr, stop_time + 5))\n<span class=\"gu\">@@ -329,11 +333,11 @@</span>\n\n         # Get the camera properties\n         self.exposure_time = self.camera.get_attribute(exposure_attr)\n<span class=\"gd\">-        self.width = self.camera.get_attribute(&#39;CameraAttributes::ImageFormat::Width&#39;)</span>\n<span class=\"gd\">-        self.height = self.camera.get_attribute(&#39;CameraAttributes::ImageFormat::Height&#39;)</span>\n<span class=\"gi\">+        self.width = self.camera.get_attribute(&#39;AcquisitionAttributes::Width&#39;)</span>\n<span class=\"gi\">+        self.height = self.camera.get_attribute(&#39;AcquisitionAttributes::Height&#39;)</span>\n         self.binning_horizontal = self.camera.get_attribute(&#39;CameraAttributes::ImageMode::BinningHorizontal&#39;)\n         self.binning_vertical = self.camera.get_attribute(&#39;CameraAttributes::ImageMode::BinningVertical&#39;)\n<span class=\"gd\">-        self.pixel_format = self.camera.get_attribute(&#39;CameraAttributes::ImageFormat::PixelFormat&#39;)</span>\n<span class=\"gi\">+        self.pixel_format = self.camera.get_attribute(&#39;AcquisitionAttributes::PixelFormat&#39;)</span>\n\n\n         print(f&#39;Configuring camera for {self.n_images} images.&#39;)\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-01-17T22:51:20.123010+00:00", "milestone": null, "updated_on": "2019-04-16T13:07:07.502385+00:00", "type": "issue", "id": 31}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/32/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/32.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/32/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/32/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/32/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "imaqdx_server should optionally propagate exceptions if it cannot acquire images", "component": null, "votes": 0, "watches": 1, "content": {"raw": "It might sometimes be the desired behaviour to keep going if images weren't acquired, but I think the default should be to crash loudly.\r\n\r\nWhere transition_to_static has the prinline:\r\n\r\n```\r\nprint('Acquisition not finished before transition_to_static. Aborting.')\r\n```\r\nafter which it returns, it should instead raise an exception such that it will be re-raised in BLACS.", "markup": "markdown", "html": "<p>It might sometimes be the desired behaviour to keep going if images weren't acquired, but I think the default should be to crash loudly.</p>\n<p>Where transition_to_static has the prinline:</p>\n<div class=\"codehilite\"><pre><span></span>print(&#39;Acquisition not finished before transition_to_static. Aborting.&#39;)\n</pre></div>\n\n\n<p>after which it returns, it should instead raise an exception such that it will be re-raised in BLACS.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-01-17T23:18:52.283174+00:00", "milestone": null, "updated_on": "2019-06-03T13:47:33.773939+00:00", "type": "issue", "id": 32}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/33/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/33.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/33/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/33/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/33/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Setting pulseblaster pulse_width has incorrect results; spurious error.", "component": null, "votes": 0, "watches": 2, "content": {"raw": "If the PulseBlaster's `pulse_width` keyword argument is used, the shot ends up being approximately twice as long as it should be:\r\n\r\n```python\r\nfrom labscript import start, stop, ClockLine, labscript_init\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\n\r\nlabscript_init('test.h5', new=True, overwrite=True)\r\nPulseBlaster('pulseblaster', pulse_width=1e-6)\r\nClockLine('clockline', pseudoclock=pulseblaster.pseudoclock, connection='flag 0')\r\n\r\n\r\nstart()\r\nstop(3)\r\n\r\nimport h5py\r\nwith h5py.File('test.h5') as f:\r\n    duration = f['devices/pulseblaster/PULSE_PROGRAM']['length'].sum() / 1e9\r\n    print(duration)\r\n```\r\n\r\nThis prints `6.000053678714858` as the total duration of PulseBlaster instructions, although the requested stop time was 3 seconds.\r\n\r\nThis is a regression introduced by 33d843a057e1. If I backout that changeset, the above prints the more expected value `3.0000429429718882`.\r\n\r\nBacking out the changeset had a minor merge conflict. It was trivial, but for what it's worth [here](#!/cbillington/labscript_devices/commits/729c72a6692b3a45021a05255fc4b528f481aa2a) is a commit that backs it out, if you want to see the diff without all the noise of what happened in between then and now.\r\n\r\nThere is also a spurious error raised if there is a single segment of the experiment in which no non-external clocks tick. The error is clearly intended to prevent you using pulse_width when there are *no* external clocks in use, but it is being tested on a per-instruction basis. It almost looks like the error checking can be removed with no consequence.\r\n\r\n```python\r\nfrom labscript import start, stop, ClockLine, labscript_init, DigitalOut, DDS\r\nfrom labscript_devices.PulseBlaster import PulseBlaster\r\nfrom labscript_devices.NovaTechDDS9M import NovaTechDDS9M\r\n\r\nlabscript_init('test.h5', new=True, overwrite=True)\r\nPulseBlaster('pulseblaster', pulse_width=1e-6)\r\nClockLine('clockline', pseudoclock=pulseblaster.pseudoclock, connection='flag 0')\r\nNovaTechDDS9M('novatech', parent_device=clockline)\r\nDDS('NTDDS', parent_device=novatech, connection='channel 1')\r\nDigitalOut('DO', parent_device=pulseblaster.direct_outputs, connection='flag 1')\r\n\r\nstart()\r\n\r\nDO.go_high(0.1)\r\nNTDDS.setamp(0.2, 1.0)\r\n\r\nstop(3)\r\n```\r\n```python\r\nTraceback (most recent call last):\r\n  File \"261.py\", line 17, in <module>\r\n    stop(3)\r\n  File \"/home/bilbo/labscript_suite/labscript/labscript.py\", line 2337, in stop\r\n    generate_code()\r\n  File \"/home/bilbo/labscript_suite/labscript/labscript.py\", line 2213, in generate_code\r\n    device.generate_code(hdf5_file)\r\n  File \"/home/bilbo/labscript_suite/labscript_devices/PulseBlaster.py\", line 579, in generate_code\r\n    pb_inst = self.convert_to_pb_inst(dig_outputs, dds_outputs, freqs, amps, phases)\r\n  File \"/home/bilbo/labscript_suite/labscript_devices/PulseBlaster.py\", line 405, in convert_to_pb_inst\r\n    raise LabscriptError('You cannot set a pulse_width for %s (%s) if it is not used as a pseudoclock for another device'%(self.name, self.description))\r\nlabscript.labscript.LabscriptError: You cannot set a pulse_width for pulseblaster (PB-DDSII-300) if it is not used as a pseudoclock for another device\r\n```", "markup": "markdown", "html": "<p>If the PulseBlaster's <code>pulse_width</code> keyword argument is used, the shot ends up being approximately twice as long as it should be:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">ClockLine</span><span class=\"p\">,</span> <span class=\"n\">labscript_init</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n\n<span class=\"n\">labscript_init</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.h5&#39;</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster&#39;</span><span class=\"p\">,</span> <span class=\"n\">pulse_width</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span><span class=\"s1\">&#39;clockline&#39;</span><span class=\"p\">,</span> <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulseblaster</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;devices/pulseblaster/PULSE_PROGRAM&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"mf\">1e9</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>This prints <code>6.000053678714858</code> as the total duration of PulseBlaster instructions, although the requested stop time was 3 seconds.</p>\n<p>This is a regression introduced by <a href=\"#!/labscript_suite/labscript_devices/commits/33d843a057e1\" rel=\"nofollow\" class=\"ap-connect-link\">33d843a057e1</a>. If I backout that changeset, the above prints the more expected value <code>3.0000429429718882</code>.</p>\n<p>Backing out the changeset had a minor merge conflict. It was trivial, but for what it's worth <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_devices/commits/729c72a6692b3a45021a05255fc4b528f481aa2a\" rel=\"nofollow\">here</a> is a commit that backs it out, if you want to see the diff without all the noise of what happened in between then and now.</p>\n<p>There is also a spurious error raised if there is a single segment of the experiment in which no non-external clocks tick. The error is clearly intended to prevent you using pulse_width when there are <em>no</em> external clocks in use, but it is being tested on a per-instruction basis. It almost looks like the error checking can be removed with no consequence.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">,</span> <span class=\"n\">ClockLine</span><span class=\"p\">,</span> <span class=\"n\">labscript_init</span><span class=\"p\">,</span> <span class=\"n\">DigitalOut</span><span class=\"p\">,</span> <span class=\"n\">DDS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NovaTechDDS9M</span> <span class=\"kn\">import</span> <span class=\"n\">NovaTechDDS9M</span>\n\n<span class=\"n\">labscript_init</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.h5&#39;</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster&#39;</span><span class=\"p\">,</span> <span class=\"n\">pulse_width</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">)</span>\n<span class=\"n\">ClockLine</span><span class=\"p\">(</span><span class=\"s1\">&#39;clockline&#39;</span><span class=\"p\">,</span> <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulseblaster</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">NovaTechDDS9M</span><span class=\"p\">(</span><span class=\"s1\">&#39;novatech&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">clockline</span><span class=\"p\">)</span>\n<span class=\"n\">DDS</span><span class=\"p\">(</span><span class=\"s1\">&#39;NTDDS&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">novatech</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;channel 1&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">DigitalOut</span><span class=\"p\">(</span><span class=\"s1\">&#39;DO&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 1&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">DO</span><span class=\"o\">.</span><span class=\"n\">go_high</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n<span class=\"n\">NTDDS</span><span class=\"o\">.</span><span class=\"n\">setamp</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;261.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/labscript_suite/labscript/labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2337</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">stop</span>\n    <span class=\"n\">generate_code</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/labscript_suite/labscript/labscript.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2213</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">generate_code</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/labscript_suite/labscript_devices/PulseBlaster.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">579</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">generate_code</span>\n    <span class=\"n\">pb_inst</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">convert_to_pb_inst</span><span class=\"p\">(</span><span class=\"n\">dig_outputs</span><span class=\"p\">,</span> <span class=\"n\">dds_outputs</span><span class=\"p\">,</span> <span class=\"n\">freqs</span><span class=\"p\">,</span> <span class=\"n\">amps</span><span class=\"p\">,</span> <span class=\"n\">phases</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/bilbo/labscript_suite/labscript_devices/PulseBlaster.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">405</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">convert_to_pb_inst</span>\n    <span class=\"k\">raise</span> <span class=\"n\">LabscriptError</span><span class=\"p\">(</span><span class=\"s1\">&#39;You cannot set a pulse_width for </span><span class=\"si\">%s</span><span class=\"s1\"> (</span><span class=\"si\">%s</span><span class=\"s1\">) if it is not used as a pseudoclock for another device&#39;</span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">))</span>\n<span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">LabscriptError</span><span class=\"p\">:</span> <span class=\"n\">You</span> <span class=\"n\">cannot</span> <span class=\"nb\">set</span> <span class=\"n\">a</span> <span class=\"n\">pulse_width</span> <span class=\"k\">for</span> <span class=\"n\">pulseblaster</span> <span class=\"p\">(</span><span class=\"n\">PB</span><span class=\"o\">-</span><span class=\"n\">DDSII</span><span class=\"o\">-</span><span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">it</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">used</span> <span class=\"k\">as</span> <span class=\"n\">a</span> <span class=\"n\">pseudoclock</span> <span class=\"k\">for</span> <span class=\"n\">another</span> <span class=\"n\">device</span>\n</pre></div>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-05-14T20:36:54.582969+00:00", "milestone": null, "updated_on": "2019-06-01T16:36:22.223683+00:00", "type": "issue", "id": 33}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/34/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/34/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/34/port-imaqdxcamera-to-other-backends"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/34/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Port IMAQdxCamera to other backends", "component": null, "votes": 0, "watches": 3, "content": {"raw": "So have used a wide variety of cameras with labscript in the past, but have never wanted to spring for the NI Vision Development software necessary to use the universal IMAQdx driver. This has led me to make old-style camera\\_servers using different, freely available, SDK backends provided by the manufacturers \\(Pylon, FlyCapture2, AndorSDK3, and PICAM so far\\). As such, I could fairly easily port the backend of the new IMAQdxCamera class to these other SDKs to open up some other options for camera integration. General thoughts? \r\n\r\nI have two specific questions to start with:\r\n\r\nI\u2019ve already made a first pass at a port to [Basler\u2019s PyPylon](https://pypi.org/project/pypylon/#description). Manual mode operation is tested and functioning well. Still need to test buffered shots but I expect that to be fine since most of the heavy lifting has already been done by @cbillington in IMAQdxCamera. In keeping with the discussion at Issue #22, should this be mainlined or do I send it to our lab\u2019s devices [repo](https://bitbucket.org/dihm/naqslab_devices/src/default/) instead?\r\n\r\nGenerally speaking, the IMAQdxCamera class is very easy to subclass when porting over to a new SDK with one glaring exception: the camera properties dictionaries all contain \u2018imaqdx\u2019 in their variable names. While I could just use those names and live with the inevitable confusion about why you set imaqdx properties for a PylonCamera, I\u2019d rather not. As such, there is a bunch of unnecessary subclassing, particularly in the blacs\\_tab and labscript\\_device, just to rename these variables. Would it be too much to ask to make IMAQdxCamera a little more agnostic? I suppose the ideal would be to make a common parent class that IMAQdx also inherits from\u2026", "markup": "markdown", "html": "<p>So have used a wide variety of cameras with labscript in the past, but have never wanted to spring for the NI Vision Development software necessary to use the universal IMAQdx driver. This has led me to make old-style camera_servers using different, freely available, SDK backends provided by the manufacturers (Pylon, FlyCapture2, AndorSDK3, and PICAM so far). As such, I could fairly easily port the backend of the new IMAQdxCamera class to these other SDKs to open up some other options for camera integration. General thoughts? </p>\n<p>I have two specific questions to start with:</p>\n<p>I\u2019ve already made a first pass at a port to <a data-is-external-link=\"true\" href=\"https://pypi.org/project/pypylon/#description\" rel=\"nofollow\">Basler\u2019s PyPylon</a>. Manual mode operation is tested and functioning well. Still need to test buffered shots but I expect that to be fine since most of the heavy lifting has already been done by @cbillington in IMAQdxCamera. In keeping with the discussion at Issue <a href=\"#!/labscript_suite/labscript_devices/issues/22/third-party-devices\" rel=\"nofollow\" title=\"Third-Party Devices\" class=\"ap-connect-link\">#22</a>, should this be mainlined or do I send it to our lab\u2019s devices <a data-is-external-link=\"true\" href=\"https://bitbucket.org/dihm/naqslab_devices/src/default/\" rel=\"nofollow\">repo</a> instead?</p>\n<p>Generally speaking, the IMAQdxCamera class is very easy to subclass when porting over to a new SDK with one glaring exception: the camera properties dictionaries all contain \u2018imaqdx\u2019 in their variable names. While I could just use those names and live with the inevitable confusion about why you set imaqdx properties for a PylonCamera, I\u2019d rather not. As such, there is a bunch of unnecessary subclassing, particularly in the blacs_tab and labscript_device, just to rename these variables. Would it be too much to ask to make IMAQdxCamera a little more agnostic? I suppose the ideal would be to make a common parent class that IMAQdx also inherits from\u2026</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-05-16T16:34:58.828173+00:00", "milestone": null, "updated_on": "2019-06-01T17:16:38.133641+00:00", "type": "issue", "id": 34}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/35/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/35.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/35/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/35/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/35/novatech-dds9m-digital-gate-being"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/35/vote"}}, "reporter": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "title": "Novatech DDS9m digital-gate being inappropriately held to DDS table pseudoclock", "component": null, "votes": 0, "watches": 3, "content": {"raw": "# Background\r\n\r\nOur novatech dds9m based DDS devices \\(supernovae et al\\) have  \r\nfreq/amp/phase points stepped through by a pseudoclock. This  \r\npseudoclock is rate-limited to 9990 updates/sec, and labscript  \r\nenforces this.\r\n\r\nUnlike our other DDSes, our novatech boxes have a TTL enable line,  \r\nwhich gates the output rf. This is NOT necessarily off the same  \r\npseudoclock, and for example could come from an NI DO clocked off a  \r\nfaster pseudoclock.\r\n\r\nThe digital line connected to enable is set in the connection table  \r\nconstructor line as a dict-kwarg with key 'digital\\_gate'.\r\n\r\nThis allows the labscript DDS-object to have a enable/disable  \r\nmethods. For example `MOT.enable()`.\r\n\r\n# Issue\r\n\r\nIn \"previous versions\" \\(under python 2, and before recent py3isation\\)  \r\nthe enable/disable methods could be called with less than 100us  \r\nbetween them. Calling .setfreq\\(\\), .setamp\\(\\) or .setphase\\(\\) with <100us  \r\nspacing did raise a Labscript exception.\r\n\r\nHowever, with latest labscript and latest labscript\\_devices, having a  \r\n10us delay between MOT.enable\\(\\) and MOT.disable\\(\\) triggers a timing  \r\nerror \\(pseudoclock ticking too fast\\):\r\n\r\n```\r\n'One or more connected devices on ClockLine %s cannot support\r\nupdate delays shorter than %s sec.'%(clock_line.name,\r\nstr(1.0/clock_line.clock_limit))) labscript.labscript.LabscriptError:\r\nCommands have been issued to devices attached to\r\npulseblaster_0_pseudoclock at t= 19.9632 s and 19.9633 s. One or more\r\nconnected devices on ClockLine pulseblaster_0_novatech_clock cannot\r\nsupport update delays shorter than 0.0001001001001001001 sec.\r\n```", "markup": "markdown", "html": "<h1 id=\"markdown-header-background\">Background</h1>\n<p>Our novatech dds9m based DDS devices (supernovae et al) have<br />\nfreq/amp/phase points stepped through by a pseudoclock. This<br />\npseudoclock is rate-limited to 9990 updates/sec, and labscript<br />\nenforces this.</p>\n<p>Unlike our other DDSes, our novatech boxes have a TTL enable line,<br />\nwhich gates the output rf. This is NOT necessarily off the same<br />\npseudoclock, and for example could come from an NI DO clocked off a<br />\nfaster pseudoclock.</p>\n<p>The digital line connected to enable is set in the connection table<br />\nconstructor line as a dict-kwarg with key 'digital_gate'.</p>\n<p>This allows the labscript DDS-object to have a enable/disable<br />\nmethods. For example <code>MOT.enable()</code>.</p>\n<h1 id=\"markdown-header-issue\">Issue</h1>\n<p>In \"previous versions\" (under python 2, and before recent py3isation)<br />\nthe enable/disable methods could be called with less than 100us<br />\nbetween them. Calling .setfreq(), .setamp() or .setphase() with &lt;100us<br />\nspacing did raise a Labscript exception.</p>\n<p>However, with latest labscript and latest labscript_devices, having a<br />\n10us delay between MOT.enable() and MOT.disable() triggers a timing<br />\nerror (pseudoclock ticking too fast):</p>\n<div class=\"codehilite\"><pre><span></span>&#39;One or more connected devices on ClockLine %s cannot support\nupdate delays shorter than %s sec.&#39;%(clock_line.name,\nstr(1.0/clock_line.clock_limit))) labscript.labscript.LabscriptError:\nCommands have been issued to devices attached to\npulseblaster_0_pseudoclock at t= 19.9632 s and 19.9633 s. One or more\nconnected devices on ClockLine pulseblaster_0_novatech_clock cannot\nsupport update delays shorter than 0.0001001001001001001 sec.\n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-06-20T04:02:50.925296+00:00", "milestone": null, "updated_on": "2019-06-25T06:36:02.585900+00:00", "type": "issue", "id": 35}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/36/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/36/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/36/blacs-hang-with-continuous-camera"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/36/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "BLACS hang with continuous camera acquisitions", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I again ran in to an issue I first saw working on PR #69 where fast continuous acquisitions with the PylonCamera would cause a complete lock up of the BLACS main process. With further testing and I can now reproduce the issue using the Mock Camera applying the following diff to the IMAQdxCamera blacs\\_workers.py\r\n\r\n```diff\r\n@@ -95,5 +95,5 @@\r\n         print(f\"Got {len(images)} of {n_images} (mock) images.\")\r\n \r\n     def snap(self):\r\n-        N = 500\r\n+        N = 100\r\n         A = 500\r\n@@ -99,6 +99,6 @@\r\n         A = 500\r\n-        x = np.linspace(-5, 5, 500)\r\n+        x = np.linspace(-5, 5, N)\r\n         y = x.reshape((N, 1))\r\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\r\n \r\n         # Write text on the image that says \"NOT REAL DATA\"\r\n@@ -101,6 +101,6 @@\r\n         y = x.reshape((N, 1))\r\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\r\n \r\n         # Write text on the image that says \"NOT REAL DATA\"\r\n-        from PIL import Image, ImageDraw, ImageFont\r\n+        #from PIL import Image, ImageDraw, ImageFont\r\n \r\n@@ -106,9 +106,9 @@\r\n \r\n-        font = ImageFont.load_default()\r\n-        canvas = Image.new('L', [N // 5, N // 5], (0,))\r\n-        draw = ImageDraw.Draw(canvas)\r\n-        draw.text((10, 20), \"NOT REAL DATA\", font=font, fill=1)\r\n-        clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))\r\n+        #font = ImageFont.load_default()\r\n+        #canvas = Image.new('L', [N // 5, N // 5], (0,))\r\n+        #draw = ImageDraw.Draw(canvas)\r\n+        #draw.text((10, 20), \"NOT REAL DATA\", font=font, fill=1)\r\n+        #clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))\r\n         return np.random.poisson(clean_image)\r\n \r\n     def stop_acquisition(self):\r\n```\r\n\r\n\u200c\r\n\r\nBasically, you need to get the fps way up to see the issue, which occurs around iteration #330 on my machine. The PylonCamera shows the same behavior, but it occurs at lower fps \\(25 fps\\) and sooner \\(~130\\). It does not appear to occur if the randomizer is turned off on the mock camera images \\(ie `return clean_image` only\\). \r\n\r\nBest guess at the moment is that the histogram updates of pyqtgraph are causing issues. Is it possible that those updates are non-blocking and can stack up somehow? That doesn\u2019t seem likely but I\u2019m not sure what else it could be at this point.", "markup": "markdown", "html": "<p>I again ran in to an issue I first saw working on <a href=\"#!/labscript_suite/labscript_devices/pull-requests/69/pylon-backend-for-imaqdxcamera-class\" rel=\"nofollow\" class=\"ap-connect-link\">PR #69</a> where fast continuous acquisitions with the PylonCamera would cause a complete lock up of the BLACS main process. With further testing and I can now reproduce the issue using the Mock Camera applying the following diff to the IMAQdxCamera blacs_workers.py</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -95,5 +95,5 @@</span>\n         print(f&quot;Got {len(images)} of {n_images} (mock) images.&quot;)\n\n     def snap(self):\n<span class=\"gd\">-        N = 500</span>\n<span class=\"gi\">+        N = 100</span>\n         A = 500\n<span class=\"gu\">@@ -99,6 +99,6 @@</span>\n         A = 500\n<span class=\"gd\">-        x = np.linspace(-5, 5, 500)</span>\n<span class=\"gi\">+        x = np.linspace(-5, 5, N)</span>\n         y = x.reshape((N, 1))\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\n\n         # Write text on the image that says &quot;NOT REAL DATA&quot;\n<span class=\"gu\">@@ -101,6 +101,6 @@</span>\n         y = x.reshape((N, 1))\n         clean_image = A * (1 - 0.5 * np.exp(-(x ** 2 + y ** 2)))\n\n         # Write text on the image that says &quot;NOT REAL DATA&quot;\n<span class=\"gd\">-        from PIL import Image, ImageDraw, ImageFont</span>\n<span class=\"gi\">+        #from PIL import Image, ImageDraw, ImageFont</span>\n\n<span class=\"gu\">@@ -106,9 +106,9 @@</span>\n\n<span class=\"gd\">-        font = ImageFont.load_default()</span>\n<span class=\"gd\">-        canvas = Image.new(&#39;L&#39;, [N // 5, N // 5], (0,))</span>\n<span class=\"gd\">-        draw = ImageDraw.Draw(canvas)</span>\n<span class=\"gd\">-        draw.text((10, 20), &quot;NOT REAL DATA&quot;, font=font, fill=1)</span>\n<span class=\"gd\">-        clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))</span>\n<span class=\"gi\">+        #font = ImageFont.load_default()</span>\n<span class=\"gi\">+        #canvas = Image.new(&#39;L&#39;, [N // 5, N // 5], (0,))</span>\n<span class=\"gi\">+        #draw = ImageDraw.Draw(canvas)</span>\n<span class=\"gi\">+        #draw.text((10, 20), &quot;NOT REAL DATA&quot;, font=font, fill=1)</span>\n<span class=\"gi\">+        #clean_image += 0.2 * A * np.asarray(canvas.resize((N, N)).rotate(20))</span>\n         return np.random.poisson(clean_image)\n\n     def stop_acquisition(self):\n</pre></div>\n\n\n<p>\u200c</p>\n<p>Basically, you need to get the fps way up to see the issue, which occurs around iteration #330 on my machine. The PylonCamera shows the same behavior, but it occurs at lower fps (25 fps) and sooner (~130). It does not appear to occur if the randomizer is turned off on the mock camera images (ie <code>return clean_image</code> only). </p>\n<p>Best guess at the moment is that the histogram updates of pyqtgraph are causing issues. Is it possible that those updates are non-blocking and can stack up somehow? That doesn\u2019t seem likely but I\u2019m not sure what else it could be at this point.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-06-27T19:13:56.099356+00:00", "milestone": null, "updated_on": "2019-09-23T16:31:57.594124+00:00", "type": "issue", "id": 36}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/37/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/37.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/37/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/37/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/37/novatech-dds-transition-to-manual"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/37/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Novatech DDS transition to manual strangeness", "component": null, "votes": 0, "watches": 1, "content": {"raw": "We\u2019ve been working on some triggering issues with our 409B-AC devices \\(packaged versions of the DDS9m\\) and I\u2019ve observed inconsistent behavior when transitioning to manual. Depending on the trigger mode used \\(async vs. sync\\) the buffered outputs would blank between shots.\r\n\r\nI was able to fix it by placing an \u201cM 0\u201d command in transition to manual. I ended up calling the guy at Novatech and he confirmed that the phase alignment commands \u201cM a/n\u201d do not replace the function of \u201cM 0\u201d when going from table mode to single tone mode, so the change made with the double clutch that removed \u201cM 0\u201d from both transitions seems to be the rub. \r\n\r\nI propose changing the phase alignment commands in the transition functions back to \u201cM 0\u201d and making the default phase alignment keyword point to continuous.", "markup": "markdown", "html": "<p>We\u2019ve been working on some triggering issues with our 409B-AC devices (packaged versions of the DDS9m) and I\u2019ve observed inconsistent behavior when transitioning to manual. Depending on the trigger mode used (async vs. sync) the buffered outputs would blank between shots.</p>\n<p>I was able to fix it by placing an \u201cM 0\u201d command in transition to manual. I ended up calling the guy at Novatech and he confirmed that the phase alignment commands \u201cM a/n\u201d do not replace the function of \u201cM 0\u201d when going from table mode to single tone mode, so the change made with the double clutch that removed \u201cM 0\u201d from both transitions seems to be the rub. </p>\n<p>I propose changing the phase alignment commands in the transition functions back to \u201cM 0\u201d and making the default phase alignment keyword point to continuous.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-08-07T23:25:46.867656+00:00", "milestone": null, "updated_on": "2019-12-10T18:26:34.880094+00:00", "type": "issue", "id": 37}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/38/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/38.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/38/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/38/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/38/andorcamera-lacks-a-docstring"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/38/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "AndorCamera lacks a docstring", "component": null, "votes": 0, "watches": 1, "content": {"raw": "AndorCamera would benefit greatly from a docstring listing what `camera_attributes` options it supports.\r\n\r\nNot super important, just getting this down so we don't completely forget about it, and so that the main PR for the AndorCamera could be merged before we move to github.", "markup": "markdown", "html": "<p>AndorCamera would benefit greatly from a docstring listing what <code>camera_attributes</code> options it supports.</p>\n<p>Not super important, just getting this down so we don't completely forget about it, and so that the main PR for the AndorCamera could be merged before we move to github.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2020-01-28T21:26:33.524223+00:00", "milestone": null, "updated_on": "2020-01-28T21:26:33.524223+00:00", "type": "issue", "id": 38}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/39/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/issues/39.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/39/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/issues/39/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/issues/39/in-blacs-zaber-stage-does-not-obviously"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/issues/39/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "in BLACS, Zaber stage does not obviously handle when device is not homed", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Copying and pasting from [a comment on PR #85](#!/labscript_suite/labscript_devices/pull-requests/85#comment-133514574):\r\n\r\n> The check-if-homed functionality is tricky.\r\n\r\n> As it stands, if not homed, one gets an error saying that the position is not as expected (remote value check reports the max position if not homed), and one can say \u2018keep remote value\u2019 then tell the device to go to position 0 in the GUI to actually home it.\r\n\r\n> I\u2019ve been playing with ways of getting it to explicitly say \u2018hey the device isn\u2019t homed', but have been fighting BLACS' state machine to do so, it\u2019s not really fitting in neatly. I\u2019ll file a separate issue for it and merge this for now.", "markup": "markdown", "html": "<p>Copying and pasting from <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/85#comment-133514574\" rel=\"nofollow\">a comment on PR #85</a>:</p>\n<blockquote>\n<p>The check-if-homed functionality is tricky.</p>\n<p>As it stands, if not homed, one gets an error saying that the position is not as expected (remote value check reports the max position if not homed), and one can say \u2018keep remote value\u2019 then tell the device to go to position 0 in the GUI to actually home it.</p>\n<p>I\u2019ve been playing with ways of getting it to explicitly say \u2018hey the device isn\u2019t homed', but have been fighting BLACS' state machine to do so, it\u2019s not really fitting in neatly. I\u2019ll file a separate issue for it and merge this for now.</p>\n</blockquote>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2020-01-28T21:39:13.642747+00:00", "milestone": null, "updated_on": "2020-01-28T21:39:13.642747+00:00", "type": "issue", "id": 39}], "page": 1, "size": 39}