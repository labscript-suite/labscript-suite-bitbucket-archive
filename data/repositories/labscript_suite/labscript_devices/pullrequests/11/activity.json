{"pagelen": 50, "values": [{"update": {"description": "This fix works on my system for my use case (a single wait before acquisition start), but has not been tested extensively. \r\n\r\nIt should properly account for multiple waits that start both before and/or during an acquisition. I'm not 100% certain that is desirable functionality but I could envisage as use case for it. I could also see it being difficult to implement directly in the new NIDAQmx class.\r\n\r\nAssuming all is well I'd be happy to update the other classes.", "title": "Fixes issue #19, where acquisition after wait is not handled properly", "destination": {"commit": {"hash": "6bfbfe045529", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/6bfbfe045529.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/6bfbfe045529"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "05f1f528780f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/05f1f528780f"}, "html": {"href": "#!/dihm/labscript_devices/commits/05f1f528780f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "AcqAfterWait"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-04-27T04:24:49.073172+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35787752.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35787752"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "Ah, I see! Thanks for digging up the old conversation. Yeah, I'm not sure what I was thinking, being able to acquire across a wait is obviously useful - I think one of the first applications of waits we discussed was being able to servo the MOT load, so if you wanted a trace of the fluorescence, it would be during a wait.\n\nI don't see any code in labscript preventing acquisitions from happening across a wait, the requested acquisition start and stop times are not touched until extract_measurements() looks at them. So I suspect this ought to work with no further changes.", "markup": "markdown", "html": "<p>Ah, I see! Thanks for digging up the old conversation. Yeah, I'm not sure what I was thinking, being able to acquire across a wait is obviously useful - I think one of the first applications of waits we discussed was being able to servo the MOT load, so if you wanted a trace of the fluorescence, it would be during a wait.</p>\n<p>I don't see any code in labscript preventing acquisitions from happening across a wait, the requested acquisition start and stop times are not touched until extract_measurements() looks at them. So I suspect this ought to work with no further changes.</p>", "type": "rendered"}, "created_on": "2017-04-27T04:24:38.568395+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-04-27T04:24:38.571193+00:00", "type": "pullrequest_comment", "id": 35787752}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"approval": {"date": "2017-04-27T02:13:36.680117+00:00", "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35784133.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35784133"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "So (that we have a complete record of prior discussions), I had a look at our old redmine issue tracker. We discussed this previously.\n\nI wrote (19 Feb, 2013):\n\n>So I was talking to Chris today, and he disagrees with what I'm about to write, but I want to put it up for discussion anyway!\n\n>Definitions\n>Labscript Time: The t variable in your labscript\n>Experiment Time: The real time that passes from tart to end of the experiment\n\n>Currently you cannot request (in labscript) one acquisition that starts acquiring before a WAIT and ends acquiring some time after a WAIT has finished. Instead, you must acquire from your start time, until the WAIT, then request another acquisition during the WAIT, and the another one after it until your end time. (If that example isn't clear, let me know!)\n\n>The current reasoning behind this is that acquisitions/traces should be in labscript time, but WAITS take effectively 0 time, so you have to request them separately.\n\n>I would argue that actually want acquisitions in experiment time. If we need to use the acquisition with something in labscript time (eg to compare with hardware instructions) then we can use the information about the WAITs stored in the labscript to convert (I assume we are storing when and how long each WAIT is?). This would the simplify the acquisition syntax when acquiring across WAITs and make it easy to add waits in the middle of an existing acquisition without having to recode that particular section. This last point is actually my biggest gripe, in that it is not a trivial matter to insert a WAIT and you have to actively manage your acquisition calls depending on whether you are inserting a WAIT or not.\n\n>Thoughts?\n\n>This question should be addressed, and a consensus reached (either way) before time is invested into the trace chunking code in the ni_pcie_6363 acquisition worker class in BLACS.\n\n@cbillington wrote:\n\n>Mmm, yes, so my contention on this is that acquisitions should not be able to overlap a wait. This is only because I think the time axes of the resulting traces should be in labscript time, not in experiment time.\n\n>Being in labscript time is useful because comparisons with globals pertaining to time is simpler, as the start and end times in the axis match the start and end times you put in in the labscript code. They are also the same from shot to shot even if the wait durations were not. I suspect analysis would be complicated by this not being the case, and if a user was going to have to analyse a trace in a way that depends on how long a wait was, their first port of call would probably be to chunk it up into pre,during and post wait segments anyhow.\n\n>That is what the 'wait_label' keyword argument in AnalogIn.acquire is intended to be for. If it is unset, the start time and duration of the acquisition (the 'start_time' and 'duration'arguments) are in labscript time, as is the time axis of the trace you get back. If it is set to the name of a wait, start_time and duration could instead refer to times from the beginning of the wait. Or they could be optional, since you'd normally want to acquire for the whole duration of the wait. And of course you might not get the whole range you asked for if you set the duration, because the wait might not last that long. You might not even get any points back at all. But if you do, the time axis of the trace would be not in labscript or experiment time, but in time since the start of the wait. So if you acquire the whole wait, it'll start at zero and go up to the duration of the wait.\n\n>I don't see this limitation as too limiting, since waits are qualitatively different from the surrounding experiment, and so it seems unlikely that you would actually want to acquire across a wait.\n\n>Apart from making the start_time and duration arguments optional in the case that a wait is specified, both phil's scheme and mine are consistent with what I've implemented already - the data chunking in the NI 6363's extract_measurements is what will implement whichever scheme is decided on.\n\n>Interested in others weighing in! I won't comment any more until I'm in germany...\n\nSo it seems historically I agree with the code in this pull request, so I guess I'm happy with the change. I don't think it will affect anyone since it's been broken until now.\nWe could potentially revisit the possibility of having acquisitions across waits with this change. I'll leave you @cbillington to merge it in.", "markup": "markdown", "html": "<p>So (that we have a complete record of prior discussions), I had a look at our old redmine issue tracker. We discussed this previously.</p>\n<p>I wrote (19 Feb, 2013):</p>\n<blockquote>\n<p>So I was talking to Chris today, and he disagrees with what I'm about to write, but I want to put it up for discussion anyway!</p>\n<p>Definitions\nLabscript Time: The t variable in your labscript\nExperiment Time: The real time that passes from tart to end of the experiment</p>\n<p>Currently you cannot request (in labscript) one acquisition that starts acquiring before a WAIT and ends acquiring some time after a WAIT has finished. Instead, you must acquire from your start time, until the WAIT, then request another acquisition during the WAIT, and the another one after it until your end time. (If that example isn't clear, let me know!)</p>\n<p>The current reasoning behind this is that acquisitions/traces should be in labscript time, but WAITS take effectively 0 time, so you have to request them separately.</p>\n<p>I would argue that actually want acquisitions in experiment time. If we need to use the acquisition with something in labscript time (eg to compare with hardware instructions) then we can use the information about the WAITs stored in the labscript to convert (I assume we are storing when and how long each WAIT is?). This would the simplify the acquisition syntax when acquiring across WAITs and make it easy to add waits in the middle of an existing acquisition without having to recode that particular section. This last point is actually my biggest gripe, in that it is not a trivial matter to insert a WAIT and you have to actively manage your acquisition calls depending on whether you are inserting a WAIT or not.</p>\n<p>Thoughts?</p>\n<p>This question should be addressed, and a consensus reached (either way) before time is invested into the trace chunking code in the ni_pcie_6363 acquisition worker class in BLACS.</p>\n</blockquote>\n<p>@cbillington wrote:</p>\n<blockquote>\n<p>Mmm, yes, so my contention on this is that acquisitions should not be able to overlap a wait. This is only because I think the time axes of the resulting traces should be in labscript time, not in experiment time.</p>\n<p>Being in labscript time is useful because comparisons with globals pertaining to time is simpler, as the start and end times in the axis match the start and end times you put in in the labscript code. They are also the same from shot to shot even if the wait durations were not. I suspect analysis would be complicated by this not being the case, and if a user was going to have to analyse a trace in a way that depends on how long a wait was, their first port of call would probably be to chunk it up into pre,during and post wait segments anyhow.</p>\n<p>That is what the 'wait_label' keyword argument in AnalogIn.acquire is intended to be for. If it is unset, the start time and duration of the acquisition (the 'start_time' and 'duration'arguments) are in labscript time, as is the time axis of the trace you get back. If it is set to the name of a wait, start_time and duration could instead refer to times from the beginning of the wait. Or they could be optional, since you'd normally want to acquire for the whole duration of the wait. And of course you might not get the whole range you asked for if you set the duration, because the wait might not last that long. You might not even get any points back at all. But if you do, the time axis of the trace would be not in labscript or experiment time, but in time since the start of the wait. So if you acquire the whole wait, it'll start at zero and go up to the duration of the wait.</p>\n<p>I don't see this limitation as too limiting, since waits are qualitatively different from the surrounding experiment, and so it seems unlikely that you would actually want to acquire across a wait.</p>\n<p>Apart from making the start_time and duration arguments optional in the case that a wait is specified, both phil's scheme and mine are consistent with what I've implemented already - the data chunking in the NI 6363's extract_measurements is what will implement whichever scheme is decided on.</p>\n<p>Interested in others weighing in! I won't comment any more until I'm in germany...</p>\n</blockquote>\n<p>So it seems historically I agree with the code in this pull request, so I guess I'm happy with the change. I don't think it will affect anyone since it's been broken until now.\nWe could potentially revisit the possibility of having acquisitions across waits with this change. I'll leave you @cbillington to merge it in.</p>", "type": "rendered"}, "created_on": "2017-04-27T02:13:29.049965+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-04-27T02:13:29.058139+00:00", "type": "pullrequest_comment", "id": 35784133}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35781194.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35781194"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "You're right that that was the original design, but I am now wondering if it was the right one. If we save a time array that is in \"labscript time\", then we either:\n\n- disallow asking for an acqisition across a wait, or\n- allow asking for the acquisition, but cut out the data that was acquired whilst the experiment was waiting, or\n- return all the data but have the time array contain repeated, non-increasing values for the duration of the wait.\n\nWe could also save multiple arrays, but I think the behaviour that David's patch provides is the most general if we are to save only one. Most of the time people are interested in relative times, and if they want details about what the waits did, if this affects their interpretation of the acquired data, then they can read the wait times and durations from the HDF5 file as part of their analysis.\n\nConceptually, it's as if you asked for acquisition between two times in \"labscript time\", and the experiment is returning the results - part of those results is the data itself, and part is what times they ended up being.\n\nI'm not totally sold on this being the specced behaviour, but I don't mind it. It's better than disallowing acquisition across a wait or having the time array have repeated values during a wait. It should be documented in the docstring for AnalogIn.acquire() though that \"experiment time\" arrays are saved. If at some point in the future people are doing lots of munging of time arrays (I doubt this will  happen), we could also provide a (lyse?) function for converting times between labscript time and experiment time for a given shot, rather than saving them both.", "markup": "markdown", "html": "<p>You're right that that was the original design, but I am now wondering if it was the right one. If we save a time array that is in \"labscript time\", then we either:</p>\n<ul>\n<li>disallow asking for an acqisition across a wait, or</li>\n<li>allow asking for the acquisition, but cut out the data that was acquired whilst the experiment was waiting, or</li>\n<li>return all the data but have the time array contain repeated, non-increasing values for the duration of the wait.</li>\n</ul>\n<p>We could also save multiple arrays, but I think the behaviour that David's patch provides is the most general if we are to save only one. Most of the time people are interested in relative times, and if they want details about what the waits did, if this affects their interpretation of the acquired data, then they can read the wait times and durations from the HDF5 file as part of their analysis.</p>\n<p>Conceptually, it's as if you asked for acquisition between two times in \"labscript time\", and the experiment is returning the results - part of those results is the data itself, and part is what times they ended up being.</p>\n<p>I'm not totally sold on this being the specced behaviour, but I don't mind it. It's better than disallowing acquisition across a wait or having the time array have repeated values during a wait. It should be documented in the docstring for AnalogIn.acquire() though that \"experiment time\" arrays are saved. If at some point in the future people are doing lots of munging of time arrays (I doubt this will  happen), we could also provide a (lyse?) function for converting times between labscript time and experiment time for a given shot, rather than saving them both.</p>", "type": "rendered"}, "created_on": "2017-04-27T00:36:37.476656+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-04-27T00:36:37.478631+00:00", "type": "pullrequest_comment", "id": 35781194}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35779384.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35779384"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "Ok, so I had thought that the spinor lab might have fixed this already in their fork, but apparently not.\n\nI do have one concern with the fix, which I think is the reason why it was broken in the first place. I suspect the original plan with this code was that the `time` array for the acquisition that is stored in the H5 file would contain times in \"labscript\" time (where lengths of waits=0), rather than \"real experiment\" time. Maybe this was an erroneous decision, but if we change it I think we're changing the original intended behaviour. We could consider saving two time arrays, one that takes into account waits and one that doesn't?\n\nHowever, either way there was a bug because we were chunking up data in \"real experiment\" time using points in \"labscript\" time, so this fix should be merged once we decide whether we need to try and preserve the previous behaviour of the time array or not given that it's always been broken anyway.\n\nI'll tag in @rpanderson and @lincolnturner in case they want to weigh in", "markup": "markdown", "html": "<p>Ok, so I had thought that the spinor lab might have fixed this already in their fork, but apparently not.</p>\n<p>I do have one concern with the fix, which I think is the reason why it was broken in the first place. I suspect the original plan with this code was that the <code>time</code> array for the acquisition that is stored in the H5 file would contain times in \"labscript\" time (where lengths of waits=0), rather than \"real experiment\" time. Maybe this was an erroneous decision, but if we change it I think we're changing the original intended behaviour. We could consider saving two time arrays, one that takes into account waits and one that doesn't?</p>\n<p>However, either way there was a bug because we were chunking up data in \"real experiment\" time using points in \"labscript\" time, so this fix should be merged once we decide whether we need to try and preserve the previous behaviour of the time array or not given that it's always been broken anyway.</p>\n<p>I'll tag in @rpanderson and @lincolnturner in case they want to weigh in</p>", "type": "rendered"}, "created_on": "2017-04-26T23:40:05.732832+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-04-26T23:40:05.757693+00:00", "type": "pullrequest_comment", "id": 35779384}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35776040.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35776040"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "I've added the same fix to NI_PCIe_6363.", "markup": "markdown", "html": "<p>I've added the same fix to NI_PCIe_6363.</p>", "type": "rendered"}, "created_on": "2017-04-26T22:12:25.621369+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2017-04-26T22:12:25.667913+00:00", "type": "pullrequest_comment", "id": 35776040}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"update": {"description": "This fix works on my system for my use case (a single wait before acquisition start), but has not been tested extensively. \r\n\r\nIt should properly account for multiple waits that start both before and/or during an acquisition. I'm not 100% certain that is desirable functionality but I could envisage as use case for it. I could also see it being difficult to implement directly in the new NIDAQmx class.\r\n\r\nAssuming all is well I'd be happy to update the other classes.", "title": "Fixes issue #19, where acquisition after wait is not handled properly", "destination": {"commit": {"hash": "6bfbfe045529", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/6bfbfe045529.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/6bfbfe045529"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "05f1f528780f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/05f1f528780f"}, "html": {"href": "#!/dihm/labscript_devices/commits/05f1f528780f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "AcqAfterWait"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2017-04-26T22:05:37.572980+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35772779.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35772779"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "Ok, I'll hold off for the moment.", "markup": "markdown", "html": "<p>Ok, I'll hold off for the moment.</p>", "type": "rendered"}, "created_on": "2017-04-26T21:09:38.088826+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-04-26T21:09:38.091721+00:00", "type": "pullrequest_comment", "id": 35772779}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35772672.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35772672"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "I'd like to compare this to the monashspinor fork before merging", "markup": "markdown", "html": "<p>I'd like to compare this to the monashspinor fork before merging</p>", "type": "rendered"}, "created_on": "2017-04-26T21:07:53.701061+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-04-26T21:07:53.703228+00:00", "type": "pullrequest_comment", "id": 35772672}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35771970.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35771970"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "Excellent, this looks good to me, thanks for the fix!\n\nFeel free to apply it to the other classes - if you make additional commits in this branch they will show up in this pull request and I'll merge them all at once. I'll make sure to apply the fix to the \"unified\" NI DAQmx class that hasn't been merged into the main repository yet.", "markup": "markdown", "html": "<p>Excellent, this looks good to me, thanks for the fix!</p>\n<p>Feel free to apply it to the other classes - if you make additional commits in this branch they will show up in this pull request and I'll merge them all at once. I'll make sure to apply the fix to the \"unified\" NI DAQmx class that hasn't been merged into the main repository yet.</p>", "type": "rendered"}, "created_on": "2017-04-26T20:55:55.910813+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-04-26T20:55:55.913150+00:00", "type": "pullrequest_comment", "id": 35771970}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"approval": {"date": "2017-04-26T20:55:50.132839+00:00", "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"update": {"description": "This fix works on my system for my use case (a single wait before acquisition start), but has not been tested extensively. \r\n\r\nIt should properly account for multiple waits that start both before and/or during an acquisition. I'm not 100% certain that is desirable functionality but I could envisage as use case for it. I could also see it being difficult to implement directly in the new NIDAQmx class.\r\n\r\nAssuming all is well I'd be happy to update the other classes.", "title": "Fixes issue #19, where acquisition after wait is not handled properly", "destination": {"commit": {"hash": "6bfbfe045529", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/6bfbfe045529.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/6bfbfe045529"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "557d2bd212bc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/557d2bd212bc"}, "html": {"href": "#!/dihm/labscript_devices/commits/557d2bd212bc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "AcqAfterWait"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2017-04-26T19:55:56.218646+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}, {"update": {"description": "This fix works on my system for my use case (a single wait before acquisition start), but has not been tested extensively. \r\n\r\nIt should properly account for multiple waits that start both before and/or during an acquisition. I'm not 100% certain that is desirable functionality but I could envisage as use case for it. I could also see it being difficult to implement directly in the new NIDAQmx class.\r\n\r\nAssuming all is well I'd be happy to update the other classes.", "title": "Fixes issue #19, where acquisition after wait is not handled properly", "destination": {"commit": {"hash": "6bfbfe045529", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/6bfbfe045529.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/6bfbfe045529"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "557d2bd212bc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/557d2bd212bc"}, "html": {"href": "#!/dihm/labscript_devices/commits/557d2bd212bc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "AcqAfterWait"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2017-04-26T19:55:56.163275+00:00"}, "pull_request": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}}]}