{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11/comments/35784133.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11/_/diff#comment-35784133"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 11, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/11.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/11"}}, "title": "Fixes issue #19, where acquisition after wait is not handled properly"}, "content": {"raw": "So (that we have a complete record of prior discussions), I had a look at our old redmine issue tracker. We discussed this previously.\n\nI wrote (19 Feb, 2013):\n\n>So I was talking to Chris today, and he disagrees with what I'm about to write, but I want to put it up for discussion anyway!\n\n>Definitions\n>Labscript Time: The t variable in your labscript\n>Experiment Time: The real time that passes from tart to end of the experiment\n\n>Currently you cannot request (in labscript) one acquisition that starts acquiring before a WAIT and ends acquiring some time after a WAIT has finished. Instead, you must acquire from your start time, until the WAIT, then request another acquisition during the WAIT, and the another one after it until your end time. (If that example isn't clear, let me know!)\n\n>The current reasoning behind this is that acquisitions/traces should be in labscript time, but WAITS take effectively 0 time, so you have to request them separately.\n\n>I would argue that actually want acquisitions in experiment time. If we need to use the acquisition with something in labscript time (eg to compare with hardware instructions) then we can use the information about the WAITs stored in the labscript to convert (I assume we are storing when and how long each WAIT is?). This would the simplify the acquisition syntax when acquiring across WAITs and make it easy to add waits in the middle of an existing acquisition without having to recode that particular section. This last point is actually my biggest gripe, in that it is not a trivial matter to insert a WAIT and you have to actively manage your acquisition calls depending on whether you are inserting a WAIT or not.\n\n>Thoughts?\n\n>This question should be addressed, and a consensus reached (either way) before time is invested into the trace chunking code in the ni_pcie_6363 acquisition worker class in BLACS.\n\n@cbillington wrote:\n\n>Mmm, yes, so my contention on this is that acquisitions should not be able to overlap a wait. This is only because I think the time axes of the resulting traces should be in labscript time, not in experiment time.\n\n>Being in labscript time is useful because comparisons with globals pertaining to time is simpler, as the start and end times in the axis match the start and end times you put in in the labscript code. They are also the same from shot to shot even if the wait durations were not. I suspect analysis would be complicated by this not being the case, and if a user was going to have to analyse a trace in a way that depends on how long a wait was, their first port of call would probably be to chunk it up into pre,during and post wait segments anyhow.\n\n>That is what the 'wait_label' keyword argument in AnalogIn.acquire is intended to be for. If it is unset, the start time and duration of the acquisition (the 'start_time' and 'duration'arguments) are in labscript time, as is the time axis of the trace you get back. If it is set to the name of a wait, start_time and duration could instead refer to times from the beginning of the wait. Or they could be optional, since you'd normally want to acquire for the whole duration of the wait. And of course you might not get the whole range you asked for if you set the duration, because the wait might not last that long. You might not even get any points back at all. But if you do, the time axis of the trace would be not in labscript or experiment time, but in time since the start of the wait. So if you acquire the whole wait, it'll start at zero and go up to the duration of the wait.\n\n>I don't see this limitation as too limiting, since waits are qualitatively different from the surrounding experiment, and so it seems unlikely that you would actually want to acquire across a wait.\n\n>Apart from making the start_time and duration arguments optional in the case that a wait is specified, both phil's scheme and mine are consistent with what I've implemented already - the data chunking in the NI 6363's extract_measurements is what will implement whichever scheme is decided on.\n\n>Interested in others weighing in! I won't comment any more until I'm in germany...\n\nSo it seems historically I agree with the code in this pull request, so I guess I'm happy with the change. I don't think it will affect anyone since it's been broken until now.\nWe could potentially revisit the possibility of having acquisitions across waits with this change. I'll leave you @cbillington to merge it in.", "markup": "markdown", "html": "<p>So (that we have a complete record of prior discussions), I had a look at our old redmine issue tracker. We discussed this previously.</p>\n<p>I wrote (19 Feb, 2013):</p>\n<blockquote>\n<p>So I was talking to Chris today, and he disagrees with what I'm about to write, but I want to put it up for discussion anyway!</p>\n<p>Definitions\nLabscript Time: The t variable in your labscript\nExperiment Time: The real time that passes from tart to end of the experiment</p>\n<p>Currently you cannot request (in labscript) one acquisition that starts acquiring before a WAIT and ends acquiring some time after a WAIT has finished. Instead, you must acquire from your start time, until the WAIT, then request another acquisition during the WAIT, and the another one after it until your end time. (If that example isn't clear, let me know!)</p>\n<p>The current reasoning behind this is that acquisitions/traces should be in labscript time, but WAITS take effectively 0 time, so you have to request them separately.</p>\n<p>I would argue that actually want acquisitions in experiment time. If we need to use the acquisition with something in labscript time (eg to compare with hardware instructions) then we can use the information about the WAITs stored in the labscript to convert (I assume we are storing when and how long each WAIT is?). This would the simplify the acquisition syntax when acquiring across WAITs and make it easy to add waits in the middle of an existing acquisition without having to recode that particular section. This last point is actually my biggest gripe, in that it is not a trivial matter to insert a WAIT and you have to actively manage your acquisition calls depending on whether you are inserting a WAIT or not.</p>\n<p>Thoughts?</p>\n<p>This question should be addressed, and a consensus reached (either way) before time is invested into the trace chunking code in the ni_pcie_6363 acquisition worker class in BLACS.</p>\n</blockquote>\n<p>@cbillington wrote:</p>\n<blockquote>\n<p>Mmm, yes, so my contention on this is that acquisitions should not be able to overlap a wait. This is only because I think the time axes of the resulting traces should be in labscript time, not in experiment time.</p>\n<p>Being in labscript time is useful because comparisons with globals pertaining to time is simpler, as the start and end times in the axis match the start and end times you put in in the labscript code. They are also the same from shot to shot even if the wait durations were not. I suspect analysis would be complicated by this not being the case, and if a user was going to have to analyse a trace in a way that depends on how long a wait was, their first port of call would probably be to chunk it up into pre,during and post wait segments anyhow.</p>\n<p>That is what the 'wait_label' keyword argument in AnalogIn.acquire is intended to be for. If it is unset, the start time and duration of the acquisition (the 'start_time' and 'duration'arguments) are in labscript time, as is the time axis of the trace you get back. If it is set to the name of a wait, start_time and duration could instead refer to times from the beginning of the wait. Or they could be optional, since you'd normally want to acquire for the whole duration of the wait. And of course you might not get the whole range you asked for if you set the duration, because the wait might not last that long. You might not even get any points back at all. But if you do, the time axis of the trace would be not in labscript or experiment time, but in time since the start of the wait. So if you acquire the whole wait, it'll start at zero and go up to the duration of the wait.</p>\n<p>I don't see this limitation as too limiting, since waits are qualitatively different from the surrounding experiment, and so it seems unlikely that you would actually want to acquire across a wait.</p>\n<p>Apart from making the start_time and duration arguments optional in the case that a wait is specified, both phil's scheme and mine are consistent with what I've implemented already - the data chunking in the NI 6363's extract_measurements is what will implement whichever scheme is decided on.</p>\n<p>Interested in others weighing in! I won't comment any more until I'm in germany...</p>\n</blockquote>\n<p>So it seems historically I agree with the code in this pull request, so I guess I'm happy with the change. I don't think it will affect anyone since it's been broken until now.\nWe could potentially revisit the possibility of having acquisitions across waits with this change. I'll leave you @cbillington to merge it in.</p>", "type": "rendered"}, "created_on": "2017-04-27T02:13:29.049965+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-04-27T02:13:29.058139+00:00", "type": "pullrequest_comment", "id": 35784133}