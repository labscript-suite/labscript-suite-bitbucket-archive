{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/15/comments/49424736.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/15/_/diff#comment-49424736"}}, "parent": {"id": 48969811, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/15/comments/48969811.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/15/_/diff#comment-48969811"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 15, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/15.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/15"}}, "title": "JQI generic NI board class"}, "content": {"raw": "I prefer to put the int() wrapper on line 882 where it's necessary. There's a bug that collapses all data to a single time point for short acquisitions that is fixed by a __future__ import, so I decided to keep it as a float until the division is done (although this is probably unnecessary).\n\n\n```\n#!diff\n@@ -11,6 +11,7 @@\n \n+from __future__ import division\n from labscript import LabscriptError, set_passed_properties, config\n from labscript import IntermediateDevice, AnalogOut, StaticAnalogOut, DigitalOut, StaticDigitalOut, AnalogIn\n from labscript_devices import labscript_device, BLACS_tab, BLACS_worker, runviewer_parser\n@@ -336,7 +337,7 @@\n         # TODO: Currently labscript only supports one DO port, easy to add more\n         # by passing a suitable structure of DO ports\n         # I verified above that num['num_DO'] is a factor of 8\n-        for i in range(self.num['num_DO']/8):\n+        for i in range(int(self.num['num_DO']/8)):\n             self.do_task.CreateDOChan(self.MAX_name+\"/port0/line%d:%d\"%(8*i,8*i+7),\"\", DAQmx_Val_ChanForAllLines)\n         \n         # currently do not allow direct access to PFI ports.  In the future can refer to NU_USB6346 code for an example\n@@ -878,7 +879,7 @@\n                 times = numpy.linspace(acquisition_start_time, acquisition_end_time, \n                                        end_index-start_index+1,\n                                        endpoint=True)\n-                values = self.buffered_data[connection][start_index:end_index+1]\n+                values = self.buffered_data[connection][int(start_index):int(end_index+1)]\n                 dtypes = [('t', numpy.float64),('values', numpy.float32)]\n                 data = numpy.empty(len(values),dtype=dtypes)\n                 data['t'] = times\n\n```\n", "markup": "markdown", "html": "<p>I prefer to put the int() wrapper on line 882 where it's necessary. There's a bug that collapses all data to a single time point for short acquisitions that is fixed by a <strong>future</strong> import, so I decided to keep it as a float until the division is done (although this is probably unnecessary).</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -11,6 +11,7 @@</span>\n\n<span class=\"gi\">+from __future__ import division</span>\n from labscript import LabscriptError, set_passed_properties, config\n from labscript import IntermediateDevice, AnalogOut, StaticAnalogOut, DigitalOut, StaticDigitalOut, AnalogIn\n from labscript_devices import labscript_device, BLACS_tab, BLACS_worker, runviewer_parser\n<span class=\"gu\">@@ -336,7 +337,7 @@</span>\n         # TODO: Currently labscript only supports one DO port, easy to add more\n         # by passing a suitable structure of DO ports\n         # I verified above that num[&#39;num_DO&#39;] is a factor of 8\n<span class=\"gd\">-        for i in range(self.num[&#39;num_DO&#39;]/8):</span>\n<span class=\"gi\">+        for i in range(int(self.num[&#39;num_DO&#39;]/8)):</span>\n             self.do_task.CreateDOChan(self.MAX_name+&quot;/port0/line%d:%d&quot;%(8*i,8*i+7),&quot;&quot;, DAQmx_Val_ChanForAllLines)\n\n         # currently do not allow direct access to PFI ports.  In the future can refer to NU_USB6346 code for an example\n<span class=\"gu\">@@ -878,7 +879,7 @@</span>\n                 times = numpy.linspace(acquisition_start_time, acquisition_end_time, \n                                        end_index-start_index+1,\n                                        endpoint=True)\n<span class=\"gd\">-                values = self.buffered_data[connection][start_index:end_index+1]</span>\n<span class=\"gi\">+                values = self.buffered_data[connection][int(start_index):int(end_index+1)]</span>\n                 dtypes = [(&#39;t&#39;, numpy.float64),(&#39;values&#39;, numpy.float32)]\n                 data = numpy.empty(len(values),dtype=dtypes)\n                 data[&#39;t&#39;] = times\n</pre></div>", "type": "rendered"}, "created_on": "2017-11-13T14:49:06.460395+00:00", "user": {"display_name": "Daniel Barker", "uuid": "{6f3f4446-92ab-4af6-83ed-bb2906b3a304}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6f3f4446-92ab-4af6-83ed-bb2906b3a304%7D"}, "html": {"href": "https://bitbucket.org/%7B6f3f4446-92ab-4af6-83ed-bb2906b3a304%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fbcf4c479308ad530548be5884a7c70fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDB-4.png"}}, "nickname": "dsbarker", "type": "user", "account_id": "557058:02be919f-267c-4793-9e86-ef07d163b58b"}, "updated_on": "2017-11-13T14:49:06.604048+00:00", "type": "pullrequest_comment", "id": 49424736}