{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/41/comments/69966990.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/41/_/diff#comment-69966990"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 41, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/41.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/41"}}, "title": "Support for AlazarTech data acquisition cards (ATS9462 and potentially others)"}, "content": {"raw": "Excellent!\n\nCould you replace line 225:\n\n```python\nfrom Queue import Queue # TODO: Python 3 compat required\n```\nwith\n```python\nfrom labscript_utils import PY2\nif PY2:\n    from Queue import Queue\nelse:\n    from queue import Queue\n```\n\nIt would also be good to get the commented-out `unicode_literals` import working to ensure the same datatypes are being used in both Python 2 and 3. Was the problem with creating the numpy array with a compound datatype (line 159)? This is a bug in numpy that makes it hard to write code that works on both Python 2 and 3 using compound datatypes. [The bug is fixed](https://github.com/numpy/numpy/pull/10672) but the fix not released yet. We're using a workaround for now to port things to Python 3. To use the workaround, add the following import:\n```python\nfrom labscript_utils.numpy_dtype_workaround import dtype_workaround\n```\nand then replace line 159:\n```python\nacquisition_table= np.empty(len(acquisitions), dtype=acquisitions_table_dtypes) \n```\nwith:\n```python\nacquisition_table= np.empty(len(acquisitions), dtype=dtype_workaround(acquisitions_table_dtypes)) \n```\n\nIf this was the only problem caused by `unicode_literals`, then we're golden. I don't see any other obvious things that would cause problems with `unicode_literals`\n\nDon't worry about the documentation comment, it's ripe for sphinxifying but so are many things - when I get sphinx in place I'll do a first pass to pull in as many existing comments as possible, including this one.", "markup": "markdown", "html": "<p>Excellent!</p>\n<p>Could you replace line 225:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">Queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span> <span class=\"c1\"># TODO: Python 3 compat required</span>\n</pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils</span> <span class=\"kn\">import</span> <span class=\"n\">PY2</span>\n<span class=\"k\">if</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">Queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n</pre></div>\n\n\n<p>It would also be good to get the commented-out <code>unicode_literals</code> import working to ensure the same datatypes are being used in both Python 2 and 3. Was the problem with creating the numpy array with a compound datatype (line 159)? This is a bug in numpy that makes it hard to write code that works on both Python 2 and 3 using compound datatypes. <a data-is-external-link=\"true\" href=\"https://github.com/numpy/numpy/pull/10672\" rel=\"nofollow\">The bug is fixed</a> but the fix not released yet. We're using a workaround for now to port things to Python 3. To use the workaround, add the following import:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.numpy_dtype_workaround</span> <span class=\"kn\">import</span> <span class=\"n\">dtype_workaround</span>\n</pre></div>\n\n\n<p>and then replace line 159:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">acquisition_table</span><span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">acquisitions</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">acquisitions_table_dtypes</span><span class=\"p\">)</span> \n</pre></div>\n\n\n<p>with:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">acquisition_table</span><span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">acquisitions</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dtype_workaround</span><span class=\"p\">(</span><span class=\"n\">acquisitions_table_dtypes</span><span class=\"p\">))</span> \n</pre></div>\n\n\n<p>If this was the only problem caused by <code>unicode_literals</code>, then we're golden. I don't see any other obvious things that would cause problems with <code>unicode_literals</code></p>\n<p>Don't worry about the documentation comment, it's ripe for sphinxifying but so are many things - when I get sphinx in place I'll do a first pass to pull in as many existing comments as possible, including this one.</p>", "type": "rendered"}, "created_on": "2018-07-15T02:54:55.609802+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-15T02:54:55.615872+00:00", "type": "pullrequest_comment", "id": 69966990}