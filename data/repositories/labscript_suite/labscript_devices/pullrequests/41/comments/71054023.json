{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/41/comments/71054023.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/41/_/diff#comment-71054023"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 41, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/41.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/41"}}, "title": "Support for AlazarTech data acquisition cards (ATS9462 and potentially others)"}, "content": {"raw": "Hi Lincoln,\n\nInterested in getting this merged. Could you `hg pull --branch AlazarTech #!/cbillington/labscript_devices` to get the following changes, which attempt to make the code Python 3 compatible?\n\nIf you could test and let me know what still breaks, if anything, about the unicode_literals, I'd be happy to help fix it.\n\nAfter that and removing the redundant `if __name__ != \"__main__\":` I think this would be good to merge.\n\n```diff\ndiff -r cdb12a187ea1 -r ff4b7008a07b AlazarTechBoard.py\n--- a/AlazarTechBoard.py\tTue Jul 17 15:56:27 2018 +1000\n+++ b/AlazarTechBoard.py\tWed Jul 25 16:12:46 2018 -0400\n@@ -3,7 +3,7 @@\n #\n # Copyright (c) Monash University 2017\n from __future__ import division\n-# from __future__ import  unicode_literals # seems oddly problematic\n+from __future__ import  unicode_literals\n from __future__ import print_function\n import ctypes\n import numpy as np\n@@ -12,6 +12,10 @@\n import time\n from tqdm import tqdm\n \n+from labscript_utils import PY2\n+if PY2:\n+    str = unicode\n+    \n # Install atsapi.py into site-packages for this to work\n # or keep in local directory.\n import atsapi as ats\n@@ -228,9 +232,7 @@\n         clocks_allowed = np.arange(150*meg, 181*meg, 1*meg)\n         clock, divider = find_clock_and_r(f, clocks_allowed)\n         if divider > rlimit:\n-            raise LabscriptError,\\\n-                \"Required clock divisor {:d} exceeds maximum value of {:d}\".\\\n-                format(div, rlimit)\n+            raise LabscriptError( \"Required clock divisor {:d} exceeds maximum value of {:d}\".format(div, rlimit))\n         if clock % divider != 0:\n             warning = \"Warning: Couldn't match requested sample rate {:d} SPS! Using the slightly greater value of {:d} SPS...\".format(f, clock//divider)\n             print(warning, file=sys.stderr)\n@@ -340,17 +342,17 @@\n                 print('Internally clock at {:.0f} samples per second ({:.1f} MS/s), from external 10MHz reference ({:d}MHz PLL divided by {:d}).'.\\\n                     format(actual_acquisition_rate,actual_acquisition_rate/1e6, atsSamplesPerSec_or_id//1000000, divisor))\n             elif clock_source_id == ats.FAST_EXTERNAL_CLOCK:\n-                raise LabscriptError, \"Requested capture clock type FAST_EXTERNAL_CLOCK is not implemented\"           \n+                raise LabscriptError(\"Requested capture clock type FAST_EXTERNAL_CLOCK is not implemented\")          \n             elif clock_source_id == ats.MEDIUM_EXTERNAL_CLOCK:\n-                raise LabscriptError, \"Requested capture clock type MEDIUM_EXTERNAL_CLOCK is not implemented\"\n+                raise LabscriptError(\"Requested capture clock type MEDIUM_EXTERNAL_CLOCK is not implemented\")\n             elif clock_source_id == ats.SLOW_EXTERNAL_CLOCK:\n-                raise LabscriptError, \"Requested capture clock type SLOW_EXTERNAL_CLOCK is not implemented\"\n+                raise LabscriptError(\"Requested capture clock type SLOW_EXTERNAL_CLOCK is not implemented\")\n             elif clock_source_id == ats.EXTERNAL_CLOCK_AC:\n-                raise LabscriptError, \"Requested capture clock type EXTERNAL_CLOCK_AC is not implemented\"\n+                raise LabscriptError(\"Requested capture clock type EXTERNAL_CLOCK_AC is not implemented\")\n             elif clock_source_id == ats.EXTERNAL_CLOCK_DC:\n-                raise LabscriptError, \"Requested capture clock type EXTERNAL_CLOCK_DC is not implemented\"\n+                raise LabscriptError(\"Requested capture clock type EXTERNAL_CLOCK_DC is not implemented\")\n             else:\n-                raise LabscriptError, \"Requested capture clock type with code {:d} is not recognised\".format(atsparam['clock_source_id'])\n+                raise LabscriptError(\"Requested capture clock type with code {:d} is not recognised\".format(atsparam['clock_source_id']))\n             # The clock_edge_id parameter is not needed for INTERNAL_CLOCK and EXTERNAL_CLOCK_10MHz_REF modes but is here for future extension\n             try:\n                 self.board.setCaptureClock(atsparam['clock_source_id'], atsSamplesPerSec_or_id, clock_edge_id, decimation)    \n@@ -428,7 +430,7 @@\n             #channels = ats.CHANNEL_A | ats.CHANNEL_B\n             self.channels = atsparam['channels']\n             if not (self.channels & ats.CHANNEL_A or self.channels & ats.CHANNEL_B):\n-                raise LabscriptError, \"You must select either Channel-A or Channel-B, or both. Zero or >2 channels not supported.\"\n+                raise LabscriptError(\"You must select either Channel-A or Channel-B, or both. Zero or >2 channels not supported.\")\n             self.channelCount = 0\n             for c in ats.channels:\n                 self.channelCount += (c & self.channels == c)\n```", "markup": "markdown", "html": "<p>Hi Lincoln,</p>\n<p>Interested in getting this merged. Could you <code>hg pull --branch AlazarTech #!/cbillington/labscript_devices</code> to get the following changes, which attempt to make the code Python 3 compatible?</p>\n<p>If you could test and let me know what still breaks, if anything, about the unicode_literals, I'd be happy to help fix it.</p>\n<p>After that and removing the redundant <code>if __name__ != \"__main__\":</code> I think this would be good to merge.</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r cdb12a187ea1 -r ff4b7008a07b AlazarTechBoard.py</span>\n<span class=\"gd\">--- a/AlazarTechBoard.py    Tue Jul 17 15:56:27 2018 +1000</span>\n<span class=\"gi\">+++ b/AlazarTechBoard.py    Wed Jul 25 16:12:46 2018 -0400</span>\n<span class=\"gu\">@@ -3,7 +3,7 @@</span>\n #\n # Copyright (c) Monash University 2017\n from __future__ import division\n<span class=\"gd\">-# from __future__ import  unicode_literals # seems oddly problematic</span>\n<span class=\"gi\">+from __future__ import  unicode_literals</span>\n from __future__ import print_function\n import ctypes\n import numpy as np\n<span class=\"gu\">@@ -12,6 +12,10 @@</span>\n import time\n from tqdm import tqdm\n\n<span class=\"gi\">+from labscript_utils import PY2</span>\n<span class=\"gi\">+if PY2:</span>\n<span class=\"gi\">+    str = unicode</span>\n<span class=\"gi\">+    </span>\n # Install atsapi.py into site-packages for this to work\n # or keep in local directory.\n import atsapi as ats\n<span class=\"gu\">@@ -228,9 +232,7 @@</span>\n         clocks_allowed = np.arange(150*meg, 181*meg, 1*meg)\n         clock, divider = find_clock_and_r(f, clocks_allowed)\n         if divider &gt; rlimit:\n<span class=\"gd\">-            raise LabscriptError,\\</span>\n<span class=\"gd\">-                &quot;Required clock divisor {:d} exceeds maximum value of {:d}&quot;.\\</span>\n<span class=\"gd\">-                format(div, rlimit)</span>\n<span class=\"gi\">+            raise LabscriptError( &quot;Required clock divisor {:d} exceeds maximum value of {:d}&quot;.format(div, rlimit))</span>\n         if clock % divider != 0:\n             warning = &quot;Warning: Couldn&#39;t match requested sample rate {:d} SPS! Using the slightly greater value of {:d} SPS...&quot;.format(f, clock//divider)\n             print(warning, file=sys.stderr)\n<span class=\"gu\">@@ -340,17 +342,17 @@</span>\n                 print(&#39;Internally clock at {:.0f} samples per second ({:.1f} MS/s), from external 10MHz reference ({:d}MHz PLL divided by {:d}).&#39;.\\\n                     format(actual_acquisition_rate,actual_acquisition_rate/1e6, atsSamplesPerSec_or_id//1000000, divisor))\n             elif clock_source_id == ats.FAST_EXTERNAL_CLOCK:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type FAST_EXTERNAL_CLOCK is not implemented&quot;           </span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type FAST_EXTERNAL_CLOCK is not implemented&quot;)          </span>\n             elif clock_source_id == ats.MEDIUM_EXTERNAL_CLOCK:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type MEDIUM_EXTERNAL_CLOCK is not implemented&quot;</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type MEDIUM_EXTERNAL_CLOCK is not implemented&quot;)</span>\n             elif clock_source_id == ats.SLOW_EXTERNAL_CLOCK:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type SLOW_EXTERNAL_CLOCK is not implemented&quot;</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type SLOW_EXTERNAL_CLOCK is not implemented&quot;)</span>\n             elif clock_source_id == ats.EXTERNAL_CLOCK_AC:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type EXTERNAL_CLOCK_AC is not implemented&quot;</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type EXTERNAL_CLOCK_AC is not implemented&quot;)</span>\n             elif clock_source_id == ats.EXTERNAL_CLOCK_DC:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type EXTERNAL_CLOCK_DC is not implemented&quot;</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type EXTERNAL_CLOCK_DC is not implemented&quot;)</span>\n             else:\n<span class=\"gd\">-                raise LabscriptError, &quot;Requested capture clock type with code {:d} is not recognised&quot;.format(atsparam[&#39;clock_source_id&#39;])</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;Requested capture clock type with code {:d} is not recognised&quot;.format(atsparam[&#39;clock_source_id&#39;]))</span>\n             # The clock_edge_id parameter is not needed for INTERNAL_CLOCK and EXTERNAL_CLOCK_10MHz_REF modes but is here for future extension\n             try:\n                 self.board.setCaptureClock(atsparam[&#39;clock_source_id&#39;], atsSamplesPerSec_or_id, clock_edge_id, decimation)    \n<span class=\"gu\">@@ -428,7 +430,7 @@</span>\n             #channels = ats.CHANNEL_A | ats.CHANNEL_B\n             self.channels = atsparam[&#39;channels&#39;]\n             if not (self.channels &amp; ats.CHANNEL_A or self.channels &amp; ats.CHANNEL_B):\n<span class=\"gd\">-                raise LabscriptError, &quot;You must select either Channel-A or Channel-B, or both. Zero or &gt;2 channels not supported.&quot;</span>\n<span class=\"gi\">+                raise LabscriptError(&quot;You must select either Channel-A or Channel-B, or both. Zero or &gt;2 channels not supported.&quot;)</span>\n             self.channelCount = 0\n             for c in ats.channels:\n                 self.channelCount += (c &amp; self.channels == c)\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-25T20:19:16.167305+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-25T20:19:16.183736+00:00", "type": "pullrequest_comment", "id": 71054023}