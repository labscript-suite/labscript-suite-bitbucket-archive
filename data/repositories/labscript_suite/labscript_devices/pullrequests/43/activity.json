{"pagelen": 50, "values": [{"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "48efc6613fed", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/48efc6613fed.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/48efc6613fed"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "96302b61384d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/96302b61384d"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/96302b61384d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T17:42:51.791252+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "48efc6613fed", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/48efc6613fed.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/48efc6613fed"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "96302b61384d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/96302b61384d"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/96302b61384d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T17:42:51.142361+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/104182160.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-104182160"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "This is working code that is in use, so I am merging it. Further fixes and enhancements can come in more pull requests!\n\nWill add a commit to depend on labscript_utils changes for PY3 compatibility in the image output widget.", "markup": "markdown", "html": "<p>This is working code that is in use, so I am merging it. Further fixes and enhancements can come in more pull requests!</p>\n<p>Will add a commit to depend on labscript_utils changes for PY3 compatibility in the image output widget.</p>", "type": "rendered"}, "created_on": "2019-06-01T17:42:45.653993+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-01T17:42:45.660600+00:00", "type": "pullrequest_comment", "id": 104182160}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/102952679.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-102952679"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Given the hardware requirement of longer pseudo-clocks triggers for this device, consider checking that the clock line providing triggers is configured for sufficiently long pulses.", "markup": "markdown", "html": "<p>Given the hardware requirement of longer pseudo-clocks triggers for this device, consider checking that the clock line providing triggers is configured for sufficiently long pulses.</p>", "type": "rendered"}, "created_on": "2019-05-22T10:19:19.221652+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2019-05-22T10:19:19.244317+00:00", "type": "pullrequest_comment", "id": 102952679}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "96302b61384d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/96302b61384d"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/96302b61384d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-21T21:18:07.470694+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4803df024254", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/4803df024254"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/4803df024254"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-14T21:32:55.854341+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/101826290.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-101826290"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Paco and I have some Python 3 compat changes for the image ouput widget in labscript_utils coming, then I still need to check in with the RbK lab to see if they have made changes, possibly in relation to Ian's comments above. But at some point we can merge this and then consider further changes to be bugfixes on top, so we won't leave this unmerged for much longer.", "markup": "markdown", "html": "<p>Paco and I have some Python 3 compat changes for the image ouput widget in labscript_utils coming, then I still need to check in with the RbK lab to see if they have made changes, possibly in relation to Ian's comments above. But at some point we can merge this and then consider further changes to be bugfixes on top, so we won't leave this unmerged for much longer.</p>", "type": "rendered"}, "created_on": "2019-05-13T16:37:06.258648+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-13T16:37:06.290428+00:00", "type": "pullrequest_comment", "id": 101826290}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e8f550adbf7e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/e8f550adbf7e"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/e8f550adbf7e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-12T22:59:58.870636+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "ab5dc8e458ac", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ab5dc8e458ac.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ab5dc8e458ac"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "54d199ff1a0e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/54d199ff1a0e"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/54d199ff1a0e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-10T04:00:12.057895+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/101241472.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-101241472"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "We have a minor Python 3 compat change, and I\u2019ll confirm that there haven\u2019t been any other changes other than spielman-fork-compatibility ones in the other lab, then we can get this merged.\n\nWill also change the BLACS tab to check for BLACS 2.6.0 for image output support.", "markup": "markdown", "html": "<p>We have a minor Python 3 compat change, and I\u2019ll confirm that there haven\u2019t been any other changes other than spielman-fork-compatibility ones in the other lab, then we can get this merged.</p>\n<p>Will also change the BLACS tab to check for BLACS 2.6.0 for image output support.</p>", "type": "rendered"}, "created_on": "2019-05-08T04:04:35.835318+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-08T04:04:35.844245+00:00", "type": "pullrequest_comment", "id": 101241472}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/100542717.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-100542717"}}, "parent": {"id": 100542652, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/100542652.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-100542652"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "There have been no further improvements, but the code as it is below \\(with minor changes for spielman-fork compatibility only\\) has been in use for the last month, and was deployed today on a mainline labscript setup as well, so will get some more data.\n\nI believe the people using it \\(I am not one of them\\) have learned a bit more about it, so I will prod them for whether anything should be changed.", "markup": "markdown", "html": "<p>There have been no further improvements, but the code as it is below (with minor changes for spielman-fork compatibility only) has been in use for the last month, and was deployed today on a mainline labscript setup as well, so will get some more data.</p>\n<p>I believe the people using it (I am not one of them) have learned a bit more about it, so I will prod them for whether anything should be changed.</p>", "type": "rendered"}, "created_on": "2019-05-01T01:41:52.691902+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-01T01:41:52.700628+00:00", "type": "pullrequest_comment", "id": 100542717}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/100542652.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-100542652"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "@cbillington , what is the latest on the deployment of this device at NIST? If there have been further improvements made to the code, can you push them across to the monashkrb branch to keep this pull request updated?\n\nI haven\u2019t done anything with it on this end, but would be good to get this and the corresponding BLACS pull request polished up and merged.", "markup": "markdown", "html": "<p>@cbillington , what is the latest on the deployment of this device at NIST? If there have been further improvements made to the code, can you push them across to the monashkrb branch to keep this pull request updated?</p>\n<p>I haven\u2019t done anything with it on this end, but would be good to get this and the corresponding BLACS pull request polished up and merged.</p>", "type": "rendered"}, "created_on": "2019-05-01T01:39:42.571896+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": "2019-05-01T01:39:42.590118+00:00", "type": "pullrequest_comment", "id": 100542652}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/95963895.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-95963895"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Hi Shaun,\n\nI\u2019ve pushed a few changes to your fork, I hope you don\u2019t mind. They fix an issue we saw in the RbK lab here at NIST, and some other things.\n\nThey:\n\n* add a \\`set\\_array\\` function that lets you set a numpy array instead of a BMP image\n* generate the blank\\_bmp programatically instead of hard-coding a raw BMP in the source code\n* When programming the DMD, always sending a number of images that is a multiple of four - even if there are not going to be enough triggers for all of them. This is done just by sending the final image repeatedly until the total number of images sent is a multiple of four.\n* Fixing an incorrect command constant - though we\u2019re not using it we noticed it was not as in the documentation.\n* Setting the exposure time to zero in line with Ian\u2019s above comment\n\nSending a multiple of four images seemed to fix the issues Amilson was having - remains to be seen if Ian\u2019s speculation about the us of Display Pattern is causing further issues.\n\nBecause Bitbucket won\u2019t not rendering the diff due to the large file size, here it is with the BMP replaced by placeholder text:\n\n\u200c\n\n```diff\ndiff -r 4a504301a4b0 -r 7fb00e82aea5 LightCrafterDMD.py\n--- a/LightCrafterDMD.py    Tue Jul 31 17:24:12 2018 +1000\n+++ b/LightCrafterDMD.py    Thu Mar 21 17:58:32 2019 -0400\n@@ -1,6 +1,6 @@\n #####################################################################\n #                                                                   #\n-# /LightCrafterDMD.py                                                  #\n+# /LightCrafterDMD.py                                               #\n #                                                                   #\n # Copyright 2017, Monash University                                 #\n #                                                                   #\n@@ -15,7 +15,6 @@\n if PY2:\n     str = unicode\n\n-\n # COMMON IMPORTS\n import base64\n import os\n@@ -29,6 +28,12 @@\n # LABSCRIPT IMPORTS\n from labscript import Device, IntermediateDevice, LabscriptError, Output, config\n import numpy as np\n+import PIL\n+if PY2:\n+    from StringIO import StringIO as BytesIO\n+else:\n+    from io import BytesIO\n+\n\n # BLACS IMPORTS\n from blacs.tab_base_classes import Worker, define_state\n@@ -41,27 +46,38 @@\n from qtutils.qt.QtCore import pyqtSignal as Signal\n\n\n-blank_bmp = b'<BMP_RAW_DATA_WAS_HERE>'\n-            \n+def arr_to_bmp(arr):\n+    \"\"\"Convert array to 1 bit BMP, white wherever the array is nonzero, and return a\n+    bytestring of the BMP data\"\"\"\n+    binary_arr = 255 * (arr != 0).astype(np.uint8)\n+    im = PIL.Image.fromarray(binary_arr, mode='L').convert('1')\n+    with BytesIO() as f:\n+        im.save(f, \"BMP\")\n+        return f.getvalue()\n+\n+\n+WIDTH = 608\n+HEIGHT = 684\n+BLANK_BMP = arr_to_bmp(np.zeros((HEIGHT, WIDTH)))\n+\n+\n class ImageSet(Output):\n     description = 'A set of images to be displayed on an SLM or DMD'\n-    width = 608\n-    height = 684\n-    \n+    width = WIDTH\n+    height = HEIGHT\n     # Set default value to be a black image. Here's a raw BMP!\n-    default_value = blank_bmp\n-    \n-    \n+    default_value = BLANK_BMP\n\n     def __init__(self, name, parent_device, connection = 'Mirror'):\n         Output.__init__(self, name, parent_device, connection)\n\n-        \n+    def set_array(self, t, arr):\n+        self.set_image(t, raw=arr_to_bmp(arr))\n\n-    def set_image(self, t, path = None, raw = None):\n-        \n-        \n-        if raw:\n+    def set_image(self, t, path=None, raw=None):\n+        \"\"\"set an image at the given time, either by a filepath to a bmp file,\n+        or by a bytestring of bmp data\"\"\"\n+        if raw is not None:\n             raw_data = raw\n         else:\n             if not os.path.exists(path):\n@@ -69,7 +85,6 @@\n             # First rough check that the path leads to a .bmp file\n             if len(path) < 5 or path[-4:] != '.bmp':\n                 raise LabscriptError('Error loading image for DMD output %s: The image does not appear to be in bmp format(path: %s) Length: %s, end: %s'%(self.name, path, len(path),path[-4:] ))\n-            raw_data = ''        \n             with open(path, 'rb') as f:\n                 raw_data = f.read()\n         # Check that the image is a BMP, first two bytes should be \"BM\"\n@@ -110,8 +125,8 @@\n     # I'm assuming that we'll only be using the device for black & white images with bitdepth of 1.\n     max_instructions = 96\n     clock_limit = 4000\n-    width = 608\n-    height = 684\n+    width = WIDTH\n+    height = HEIGHT\n\n     def __init__(self, name, parent_device, server = '192.168.1.100', port=21845):\n         IntermediateDevice.__init__(self, name, parent_device)\n@@ -193,7 +208,7 @@\n                 'pattern_definition':   b'\\x04\\x01',\n                 'start_pattern_sequence': b'\\x04\\x02',\n                 'display_pattern' :     b'\\x04\\x05',\n-                'advance_pattern_sequence' : b'\\x04\\x02',\n+                'advance_pattern_sequence' : b'\\x04\\x03',\n                 }\n     send_packet_type = {   'read': b'\\x04',\n                             'write': b'\\x02',\n@@ -300,7 +315,7 @@\n             data = base64.b64decode(data)\n         # Replace empty data with the black picture\n         if not data:\n-            data = blank_bmp\n+            data = BLANK_BMP\n         ## Check to see if it's a BMP\n\n\n@@ -322,13 +337,20 @@\n             oldtable = self.smart_cache['IMAGE_TABLE']\n             self.send(self.send_packet_type['write'], self.command['display_mode'], self.display_mode['pattern'])\n             num_of_patterns = len(table_data)\n+            # We will pad the images we send up to a multiple of four:\n+            padded_num_of_patterns = num_of_patterns + (-num_of_patterns % 4)\n\n             # bit depth, number of patterns, invert patterns?, trigger type, trigger delay (4 bytes), trigger period (4 bytes), exposure time (4 bytes), led select\n-            self.send(self.send_packet_type['write'], self.command['sequence_setting'],  struct.pack('<BBBBiiiB',1,num_of_patterns,0,2,0,0,250,0))\n+            self.send(self.send_packet_type['write'], self.command['sequence_setting'],  struct.pack('<BBBBiiiB',1,padded_num_of_patterns,0,2,0,0,0,0))\n             if fresh or len(oldtable)!=len(table_data) or (oldtable != table_data).any():\n-                for i, im in enumerate(table_data):\n+                for i in range(padded_num_of_patterns):\n+                    if i < num_of_patterns:\n+                        im = table_data[i]\n+                    else:\n+                        # Padding uses the final image:\n+                        im = table_data[-1]\n                     self.send(self.send_packet_type['write'], self.command['pattern_definition'], struct.pack('<B',i) + im.tostring())\n-            \n+                \n             self.send(self.send_packet_type['write'], self.command['display_pattern'], struct.pack('<H',0))\n             self.send(self.send_packet_type['write'], self.command['start_pattern_sequence'], struct.pack('<B',1))\n             self.smart_cache['IMAGE_TABLE'] = table_data\n@@ -361,4 +383,4 @@\n         return self.abort()\n\n     def shutdown(self):\n-        self.sock.close()\n\\ No newline at end of file\n+        self.sock.close()\n```\n\n\u200c", "markup": "markdown", "html": "<p>Hi Shaun,</p>\n<p>I\u2019ve pushed a few changes to your fork, I hope you don\u2019t mind. They fix an issue we saw in the RbK lab here at NIST, and some other things.</p>\n<p>They:</p>\n<ul>\n<li>add a `set_array` function that lets you set a numpy array instead of a BMP image</li>\n<li>generate the blank_bmp programatically instead of hard-coding a raw BMP in the source code</li>\n<li>When programming the DMD, always sending a number of images that is a multiple of four - even if there are not going to be enough triggers for all of them. This is done just by sending the final image repeatedly until the total number of images sent is a multiple of four.</li>\n<li>Fixing an incorrect command constant - though we\u2019re not using it we noticed it was not as in the documentation.</li>\n<li>Setting the exposure time to zero in line with Ian\u2019s above comment</li>\n</ul>\n<p>Sending a multiple of four images seemed to fix the issues Amilson was having - remains to be seen if Ian\u2019s speculation about the us of Display Pattern is causing further issues.</p>\n<p>Because Bitbucket won\u2019t not rendering the diff due to the large file size, here it is with the BMP replaced by placeholder text:</p>\n<p>\u200c</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 4a504301a4b0 -r 7fb00e82aea5 LightCrafterDMD.py</span>\n<span class=\"gd\">--- a/LightCrafterDMD.py    Tue Jul 31 17:24:12 2018 +1000</span>\n<span class=\"gi\">+++ b/LightCrafterDMD.py    Thu Mar 21 17:58:32 2019 -0400</span>\n<span class=\"gu\">@@ -1,6 +1,6 @@</span>\n #####################################################################\n #                                                                   #\n<span class=\"gd\">-# /LightCrafterDMD.py                                                  #</span>\n<span class=\"gi\">+# /LightCrafterDMD.py                                               #</span>\n #                                                                   #\n # Copyright 2017, Monash University                                 #\n #                                                                   #\n<span class=\"gu\">@@ -15,7 +15,6 @@</span>\n if PY2:\n     str = unicode\n\n<span class=\"gd\">-</span>\n # COMMON IMPORTS\n import base64\n import os\n<span class=\"gu\">@@ -29,6 +28,12 @@</span>\n # LABSCRIPT IMPORTS\n from labscript import Device, IntermediateDevice, LabscriptError, Output, config\n import numpy as np\n<span class=\"gi\">+import PIL</span>\n<span class=\"gi\">+if PY2:</span>\n<span class=\"gi\">+    from StringIO import StringIO as BytesIO</span>\n<span class=\"gi\">+else:</span>\n<span class=\"gi\">+    from io import BytesIO</span>\n<span class=\"gi\">+</span>\n\n # BLACS IMPORTS\n from blacs.tab_base_classes import Worker, define_state\n<span class=\"gu\">@@ -41,27 +46,38 @@</span>\n from qtutils.qt.QtCore import pyqtSignal as Signal\n\n\n<span class=\"gd\">-blank_bmp = b&#39;&lt;BMP_RAW_DATA_WAS_HERE&gt;&#39;</span>\n<span class=\"gd\">-            </span>\n<span class=\"gi\">+def arr_to_bmp(arr):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;Convert array to 1 bit BMP, white wherever the array is nonzero, and return a</span>\n<span class=\"gi\">+    bytestring of the BMP data&quot;&quot;&quot;</span>\n<span class=\"gi\">+    binary_arr = 255 * (arr != 0).astype(np.uint8)</span>\n<span class=\"gi\">+    im = PIL.Image.fromarray(binary_arr, mode=&#39;L&#39;).convert(&#39;1&#39;)</span>\n<span class=\"gi\">+    with BytesIO() as f:</span>\n<span class=\"gi\">+        im.save(f, &quot;BMP&quot;)</span>\n<span class=\"gi\">+        return f.getvalue()</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+WIDTH = 608</span>\n<span class=\"gi\">+HEIGHT = 684</span>\n<span class=\"gi\">+BLANK_BMP = arr_to_bmp(np.zeros((HEIGHT, WIDTH)))</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n class ImageSet(Output):\n     description = &#39;A set of images to be displayed on an SLM or DMD&#39;\n<span class=\"gd\">-    width = 608</span>\n<span class=\"gd\">-    height = 684</span>\n<span class=\"gd\">-    </span>\n<span class=\"gi\">+    width = WIDTH</span>\n<span class=\"gi\">+    height = HEIGHT</span>\n     # Set default value to be a black image. Here&#39;s a raw BMP!\n<span class=\"gd\">-    default_value = blank_bmp</span>\n<span class=\"gd\">-    </span>\n<span class=\"gd\">-    </span>\n<span class=\"gi\">+    default_value = BLANK_BMP</span>\n\n     def __init__(self, name, parent_device, connection = &#39;Mirror&#39;):\n         Output.__init__(self, name, parent_device, connection)\n\n<span class=\"gd\">-        </span>\n<span class=\"gi\">+    def set_array(self, t, arr):</span>\n<span class=\"gi\">+        self.set_image(t, raw=arr_to_bmp(arr))</span>\n\n<span class=\"gd\">-    def set_image(self, t, path = None, raw = None):</span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        if raw:</span>\n<span class=\"gi\">+    def set_image(self, t, path=None, raw=None):</span>\n<span class=\"gi\">+        &quot;&quot;&quot;set an image at the given time, either by a filepath to a bmp file,</span>\n<span class=\"gi\">+        or by a bytestring of bmp data&quot;&quot;&quot;</span>\n<span class=\"gi\">+        if raw is not None:</span>\n             raw_data = raw\n         else:\n             if not os.path.exists(path):\n<span class=\"gu\">@@ -69,7 +85,6 @@</span>\n             # First rough check that the path leads to a .bmp file\n             if len(path) &lt; 5 or path[-4:] != &#39;.bmp&#39;:\n                 raise LabscriptError(&#39;Error loading image for DMD output %s: The image does not appear to be in bmp format(path: %s) Length: %s, end: %s&#39;%(self.name, path, len(path),path[-4:] ))\n<span class=\"gd\">-            raw_data = &#39;&#39;        </span>\n             with open(path, &#39;rb&#39;) as f:\n                 raw_data = f.read()\n         # Check that the image is a BMP, first two bytes should be &quot;BM&quot;\n<span class=\"gu\">@@ -110,8 +125,8 @@</span>\n     # I&#39;m assuming that we&#39;ll only be using the device for black &amp; white images with bitdepth of 1.\n     max_instructions = 96\n     clock_limit = 4000\n<span class=\"gd\">-    width = 608</span>\n<span class=\"gd\">-    height = 684</span>\n<span class=\"gi\">+    width = WIDTH</span>\n<span class=\"gi\">+    height = HEIGHT</span>\n\n     def __init__(self, name, parent_device, server = &#39;192.168.1.100&#39;, port=21845):\n         IntermediateDevice.__init__(self, name, parent_device)\n<span class=\"gu\">@@ -193,7 +208,7 @@</span>\n                 &#39;pattern_definition&#39;:   b&#39;\\x04\\x01&#39;,\n                 &#39;start_pattern_sequence&#39;: b&#39;\\x04\\x02&#39;,\n                 &#39;display_pattern&#39; :     b&#39;\\x04\\x05&#39;,\n<span class=\"gd\">-                &#39;advance_pattern_sequence&#39; : b&#39;\\x04\\x02&#39;,</span>\n<span class=\"gi\">+                &#39;advance_pattern_sequence&#39; : b&#39;\\x04\\x03&#39;,</span>\n                 }\n     send_packet_type = {   &#39;read&#39;: b&#39;\\x04&#39;,\n                             &#39;write&#39;: b&#39;\\x02&#39;,\n<span class=\"gu\">@@ -300,7 +315,7 @@</span>\n             data = base64.b64decode(data)\n         # Replace empty data with the black picture\n         if not data:\n<span class=\"gd\">-            data = blank_bmp</span>\n<span class=\"gi\">+            data = BLANK_BMP</span>\n         ## Check to see if it&#39;s a BMP\n\n\n<span class=\"gu\">@@ -322,13 +337,20 @@</span>\n             oldtable = self.smart_cache[&#39;IMAGE_TABLE&#39;]\n             self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;display_mode&#39;], self.display_mode[&#39;pattern&#39;])\n             num_of_patterns = len(table_data)\n<span class=\"gi\">+            # We will pad the images we send up to a multiple of four:</span>\n<span class=\"gi\">+            padded_num_of_patterns = num_of_patterns + (-num_of_patterns % 4)</span>\n\n             # bit depth, number of patterns, invert patterns?, trigger type, trigger delay (4 bytes), trigger period (4 bytes), exposure time (4 bytes), led select\n<span class=\"gd\">-            self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;sequence_setting&#39;],  struct.pack(&#39;&lt;BBBBiiiB&#39;,1,num_of_patterns,0,2,0,0,250,0))</span>\n<span class=\"gi\">+            self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;sequence_setting&#39;],  struct.pack(&#39;&lt;BBBBiiiB&#39;,1,padded_num_of_patterns,0,2,0,0,0,0))</span>\n             if fresh or len(oldtable)!=len(table_data) or (oldtable != table_data).any():\n<span class=\"gd\">-                for i, im in enumerate(table_data):</span>\n<span class=\"gi\">+                for i in range(padded_num_of_patterns):</span>\n<span class=\"gi\">+                    if i &lt; num_of_patterns:</span>\n<span class=\"gi\">+                        im = table_data[i]</span>\n<span class=\"gi\">+                    else:</span>\n<span class=\"gi\">+                        # Padding uses the final image:</span>\n<span class=\"gi\">+                        im = table_data[-1]</span>\n                     self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;pattern_definition&#39;], struct.pack(&#39;&lt;B&#39;,i) + im.tostring())\n<span class=\"gd\">-            </span>\n<span class=\"gi\">+                </span>\n             self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;display_pattern&#39;], struct.pack(&#39;&lt;H&#39;,0))\n             self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;start_pattern_sequence&#39;], struct.pack(&#39;&lt;B&#39;,1))\n             self.smart_cache[&#39;IMAGE_TABLE&#39;] = table_data\n<span class=\"gu\">@@ -361,4 +383,4 @@</span>\n         return self.abort()\n\n     def shutdown(self):\n<span class=\"gd\">-        self.sock.close()</span>\n\\ No newline at end of file\n<span class=\"gi\">+        self.sock.close()</span>\n</pre></div>\n\n\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-03-21T22:15:50.680779+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-21T22:17:54.025738+00:00", "type": "pullrequest_comment", "id": 95963895}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "a669226f0fbb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/a669226f0fbb.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/a669226f0fbb"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "36370b9cbae5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/36370b9cbae5"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/36370b9cbae5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-21T22:07:54.356293+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/95880405.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-95880405"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "In our deployment @ NIST we can\u2019t seem to get consistent updating with 250 us triggers like should be possibly, but if the delay is increased to 18 ms  between triggers, it seems fine.  From Amilson who is the postdoc working on this he notes: \u201c\\(18ms looks familiar as the minimum trigger length for the _Extended Pattern Sequences_ - pg 43 user\u2019s guide\\).\u201d  I am reading the DLP\u00ae LightCrafter\u2122 DM365 Command Interface Guide, and I am concerned about the use of \u201cDisplay Pattern \\(0x04 0x05\\)\u201d to set the initial image as a static frame on line 332.  It seems that this might be moving the DMD into the Extended Pattern Sequence mode \\(because it accepts frames with index up to 1500, which is the  Extended Pattern Sequence limit\\).   I don\u2019t have time to debug, but after sending the Display Pattern code perhaps we have to resend \u201cPattern Sequence Setting \\(0x04 0x00\\)\u201d", "markup": "markdown", "html": "<p>In our deployment @ NIST we can\u2019t seem to get consistent updating with 250 us triggers like should be possibly, but if the delay is increased to 18 ms  between triggers, it seems fine.  From Amilson who is the postdoc working on this he notes: \u201c(18ms looks familiar as the minimum trigger length for the <em>Extended Pattern Sequences</em> - pg 43 user\u2019s guide).\u201d  I am reading the DLP\u00ae LightCrafter\u2122 DM365 Command Interface Guide, and I am concerned about the use of \u201cDisplay Pattern (0x04 0x05)\u201d to set the initial image as a static frame on line 332.  It seems that this might be moving the DMD into the Extended Pattern Sequence mode (because it accepts frames with index up to 1500, which is the  Extended Pattern Sequence limit).   I don\u2019t have time to debug, but after sending the Display Pattern code perhaps we have to resend \u201cPattern Sequence Setting (0x04 0x00)\u201d</p>", "type": "rendered"}, "created_on": "2019-03-21T13:02:22.805348+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2019-03-21T13:02:22.817249+00:00", "type": "pullrequest_comment", "id": 95880405}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/95584662.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-95584662"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "I will look at this in the lab today, but it looks like there is a small bug:\n\n```\n+            # bit depth, number of patterns, invert patterns?, trigger type, trigger delay (4 bytes), trigger period (4 bytes), exposure time (4 bytes), led select\n+            self.send(self.send_packet_type['write'], self.command['sequence_setting'],  struct.pack('<BBBBiiiB',1,num_of_patterns,0,2,0,0,250,0))\n```\n\n  \nNotice that exposure time is set to 250 us.  According to the documentation this has the property \u201cExposure time: number of microseconds the pattern is displayed. Input 0 to display the pattern through the whole trigger period.\u201d From page 36 of dlpu006e.pdf.  It would seem that this should be 0 rather than 250 us.", "markup": "markdown", "html": "<p>I will look at this in the lab today, but it looks like there is a small bug:</p>\n<div class=\"codehilite\"><pre><span></span>+            # bit depth, number of patterns, invert patterns?, trigger type, trigger delay (4 bytes), trigger period (4 bytes), exposure time (4 bytes), led select\n+            self.send(self.send_packet_type[&#39;write&#39;], self.command[&#39;sequence_setting&#39;],  struct.pack(&#39;&lt;BBBBiiiB&#39;,1,num_of_patterns,0,2,0,0,250,0))\n</pre></div>\n\n\n<p>Notice that exposure time is set to 250 us.  According to the documentation this has the property \u201cExposure time: number of microseconds the pattern is displayed. Input 0 to display the pattern through the whole trigger period.\u201d From page 36 of dlpu006e.pdf.  It would seem that this should be 0 rather than 250 us.</p>", "type": "rendered"}, "created_on": "2019-03-19T16:10:39.214296+00:00", "user": {"display_name": "Ian B. Spielman", "uuid": "{bff0d3df-2ed5-4ff6-b13d-ce6cd935edb1}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D"}, "html": {"href": "https://bitbucket.org/%7Bbff0d3df-2ed5-4ff6-b13d-ce6cd935edb1%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/54beee087619e1a612011791e203f277d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsIS-0.png"}}, "nickname": "Ian Spielman", "type": "user", "account_id": "557058:b0e98d01-12e7-4a9d-a274-a195def255d2"}, "updated_on": "2019-03-19T16:10:39.226043+00:00", "type": "pullrequest_comment", "id": 95584662}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/78862474.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-78862474"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "I was looking at this again today.\n\n`ImageSet.expand_timeseries` needs fixing as per your comment \\(in the code\\) suggesting it will break if you ramp on another channel at the same time as updating the image. \n\nI'm not sure whether we should try and risk modifying `fastflatten` \\(which would mean replacing the two calls to `iterable(element)` with `isinstance(element, (array, list))`\\) or just add more logic to `ImageSet.expand_timeseries` following the base class implementation, but ignoring the section for when the instruction is a `dict` and modifying the remaining code to not need to use fastflatten \\(which probably means extending a numpy array dynamically within a loop over `all_times`\\).\n\nThe first option is probably better, but maybe @cbillington could say whether he sees any unforseen consequences of doing what I suggest?  \n\nAlso, you should set the dtype attribute of `ImageSet`. That probably depends on the size of the image though, so maybe should also be set by the parent in `add_device`?", "markup": "markdown", "html": "<p>I was looking at this again today.</p>\n<p><code>ImageSet.expand_timeseries</code> needs fixing as per your comment (in the code) suggesting it will break if you ramp on another channel at the same time as updating the image. </p>\n<p>I'm not sure whether we should try and risk modifying <code>fastflatten</code> (which would mean replacing the two calls to <code>iterable(element)</code> with <code>isinstance(element, (array, list))</code>) or just add more logic to <code>ImageSet.expand_timeseries</code> following the base class implementation, but ignoring the section for when the instruction is a <code>dict</code> and modifying the remaining code to not need to use fastflatten (which probably means extending a numpy array dynamically within a loop over <code>all_times</code>).</p>\n<p>The first option is probably better, but maybe @cbillington could say whether he sees any unforseen consequences of doing what I suggest?  </p>\n<p>Also, you should set the dtype attribute of <code>ImageSet</code>. That probably depends on the size of the image though, so maybe should also be set by the parent in <code>add_device</code>?</p>", "type": "rendered"}, "created_on": "2018-10-12T01:06:48.638777+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-10-12T01:06:48.652536+00:00", "type": "pullrequest_comment", "id": 78862474}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71747559.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71747559"}}, "parent": {"id": 71614784, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71614784.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71614784"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Ah, right.\n\nWell, doing things programmatically and depending on Pill/Pillow/whatever isn't the end of the world, also I believe there are functions in matplotlib for image loading and saving (that use PIL anyway I think), you could use them.", "markup": "markdown", "html": "<p>Ah, right.</p>\n<p>Well, doing things programmatically and depending on Pill/Pillow/whatever isn't the end of the world, also I believe there are functions in matplotlib for image loading and saving (that use PIL anyway I think), you could use them.</p>", "type": "rendered"}, "created_on": "2018-08-02T00:52:48.258586+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-08-02T00:52:48.265341+00:00", "type": "pullrequest_comment", "id": 71747559}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71614784.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71614784"}}, "parent": {"id": 71551913, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71551913.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71551913"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "My main concern was that if we are making the function general we\u2019d need to be able to output blank bmps for any resolution \\(and potentially bit depth\\).\n\nOne potential option is to change the way we store the data in the h5 file. I used strings containing bmp files for convenience, as this is the format that the LightCrafter takes, and it\u2019s easy to have an array of strings as the table data in the h5 file. Alternatively, we could store the images as arrays, with a 3D array of time and image frames, and BLACS can do the conversion to BMP when it programs the device. In that case we may just need to override Output.add\\_instruction for this output type \\(or add an extra if statement for array instructions\\) to check that the array has the correct dimensions/range of individual values rather than check if it\u2019s within the device limits.", "markup": "markdown", "html": "<p>My main concern was that if we are making the function general we\u2019d need to be able to output blank bmps for any resolution (and potentially bit depth).</p>\n<p>One potential option is to change the way we store the data in the h5 file. I used strings containing bmp files for convenience, as this is the format that the LightCrafter takes, and it\u2019s easy to have an array of strings as the table data in the h5 file. Alternatively, we could store the images as arrays, with a 3D array of time and image frames, and BLACS can do the conversion to BMP when it programs the device. In that case we may just need to override Output.add_instruction for this output type (or add an extra if statement for array instructions) to check that the array has the correct dimensions/range of individual values rather than check if it\u2019s within the device limits.</p>", "type": "rendered"}, "created_on": "2018-08-01T02:30:26.597318+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": "2018-08-01T02:30:26.604374+00:00", "type": "pullrequest_comment", "id": 71614784}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71551913.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71551913"}}, "parent": {"id": 71494856, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71494856.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71494856"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "I don't mind embedding the BMP, but you could compress it:\n\n```python\nif PY2:\n    from StringIO import StringIO as BytesIO\nelse:\n    from io import BytesIO\nimport gzip\nblank_bmp = gzip.GzipFile(fileobj=BytesIO(\n    b'\\x1f\\x8b\\x08\\x00\\x8an`[\\x02\\xff\\xed\\xc91\\x11\\x80@\\x10\\x04\\xc1' +\n    b'\\x03\\x05\\xc8@\\x05\\x01\\xf9\\xa3\\xe1\\x05\\xbe\\x13D\\x1d\\x07E\\x84\\x01' + \n    b'\\x92\\xee\\xad\\x89vo\\xc7\\x19\\x8f\\xadZ\\xab>G\\x8cj\\xaa\\xdd\\x96\\xf7' +\n    b'\\xff\\xca\\xcc\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' +\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' +\n    b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' +\n    b'\\x00\\x00\\x00\\x00\\x00\\xe0_\\x17\\xf1\\xce\\xcehN\\xcb\\x00\\x00')).read()\n```", "markup": "markdown", "html": "<p>I don't mind embedding the BMP, but you could compress it:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">StringIO</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span> <span class=\"k\">as</span> <span class=\"n\">BytesIO</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gzip</span>\n<span class=\"n\">blank_bmp</span> <span class=\"o\">=</span> <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">GzipFile</span><span class=\"p\">(</span><span class=\"n\">fileobj</span><span class=\"o\">=</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x1f\\x8b\\x08\\x00\\x8a</span><span class=\"s1\">n`[</span><span class=\"se\">\\x02\\xff\\xed\\xc9</span><span class=\"s1\">1</span><span class=\"se\">\\x11\\x80</span><span class=\"s1\">@</span><span class=\"se\">\\x10\\x04\\xc1</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x03\\x05\\xc8</span><span class=\"s1\">@</span><span class=\"se\">\\x05\\x01\\xf9\\xa3\\xe1\\x05\\xbe\\x13</span><span class=\"s1\">D</span><span class=\"se\">\\x1d\\x07</span><span class=\"s1\">E</span><span class=\"se\">\\x84\\x01</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span> \n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x92\\xee\\xad\\x89</span><span class=\"s1\">vo</span><span class=\"se\">\\xc7\\x19\\x8f\\xad</span><span class=\"s1\">Z</span><span class=\"se\">\\xab</span><span class=\"s1\">&gt;G</span><span class=\"se\">\\x8c</span><span class=\"s1\">j</span><span class=\"se\">\\xaa\\xdd\\x96\\xf7</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\xff\\xca\\xcc\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">&#39;</span> <span class=\"o\">+</span>\n    <span class=\"sa\">b</span><span class=\"s1\">&#39;</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\xe0</span><span class=\"s1\">_</span><span class=\"se\">\\x17\\xf1\\xce\\xce</span><span class=\"s1\">hN</span><span class=\"se\">\\xcb\\x00\\x00</span><span class=\"s1\">&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-07-31T14:23:58.990646+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-31T14:23:59.002846+00:00", "type": "pullrequest_comment", "id": 71551913}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71494856.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71494856"}}, "parent": {"id": 71491997, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71491997.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71491997"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Yeah, that makes sense for the long term. It shouldn\u2019t be hard to generalise ImageSet. Things like the width & height should be set by the parent device anyway, not within ImageSet. The bitdepth could also be a parameter rather than being hard coded to 1. Not sure about the default value, which is \u201cblank\\_bmp,\u201d a string containing a black 1-bit BMP image with the correct dimensions for the LightCrafter. Perhaps instead we should pragmatically generate a black image with the correct dimensions, though this would introduce a dependency such as PIL that labscript otherwise doesn\u2019t really need.", "markup": "markdown", "html": "<p>Yeah, that makes sense for the long term. It shouldn\u2019t be hard to generalise ImageSet. Things like the width &amp; height should be set by the parent device anyway, not within ImageSet. The bitdepth could also be a parameter rather than being hard coded to 1. Not sure about the default value, which is \u201cblank_bmp,\u201d a string containing a black 1-bit BMP image with the correct dimensions for the LightCrafter. Perhaps instead we should pragmatically generate a black image with the correct dimensions, though this would introduce a dependency such as PIL that labscript otherwise doesn\u2019t really need.</p>", "type": "rendered"}, "created_on": "2018-07-31T07:55:02.294953+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": "2018-07-31T07:55:02.321489+00:00", "type": "pullrequest_comment", "id": 71494856}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71492765.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71492765"}}, "parent": {"id": 71487733, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71487733.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71487733"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "fixed!", "markup": "markdown", "html": "<p>fixed!</p>", "type": "rendered"}, "created_on": "2018-07-31T07:38:25.720424+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": "2018-07-31T07:38:25.737141+00:00", "type": "pullrequest_comment", "id": 71492765}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "52f0e264f612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/52f0e264f612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/52f0e264f612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4a504301a4b0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/4a504301a4b0"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/4a504301a4b0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "date": "2018-07-31T07:37:04.999297+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71491997.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71491997"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "We should also create an issue on the issue tracker for generalising `ImageSet` for use across DMD/SLMs. This should actually probably be in the labscript repository\u2026\n\nI would think a generalised solution would be a combination of the `ImageSet` class which can support multiple images during a shot and my `SLMSegment` class which supports multiple independently controlled regions of a single device.", "markup": "markdown", "html": "<p>We should also create an issue on the issue tracker for generalising <code>ImageSet</code> for use across DMD/SLMs. This should actually probably be in the labscript repository\u2026</p>\n<p>I would think a generalised solution would be a combination of the <code>ImageSet</code> class which can support multiple images during a shot and my <code>SLMSegment</code> class which supports multiple independently controlled regions of a single device.</p>", "type": "rendered"}, "created_on": "2018-07-31T07:31:36.658558+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-07-31T07:31:36.674311+00:00", "type": "pullrequest_comment", "id": 71491997}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43/comments/71487733.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43/_/diff#comment-71487733"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}, "content": {"raw": "Some thoughts:\n\n* The commented out Qt imports should be removed\n* There are some error messages in `ImageSet` which seem to not have been updated from when the code was copied from my SLM segment class.\n* Maybe the file and labscript class should be renamed `LightCrafterDMD`? I know that\u2019s a pain so maybe we don\u2019t bother\u2026\n\n", "markup": "markdown", "html": "<p>Some thoughts:</p>\n<ul>\n<li>The commented out Qt imports should be removed</li>\n<li>There are some error messages in <code>ImageSet</code> which seem to not have been updated from when the code was copied from my SLM segment class.</li>\n<li>Maybe the file and labscript class should be renamed <code>LightCrafterDMD</code>? I know that\u2019s a pain so maybe we don\u2019t bother\u2026</li>\n</ul>", "type": "rendered"}, "created_on": "2018-07-31T06:57:15.713013+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-07-31T06:57:15.725050+00:00", "type": "pullrequest_comment", "id": 71487733}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "52f0e264f612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/52f0e264f612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/52f0e264f612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79aa79527967", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/79aa79527967"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/79aa79527967"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "date": "2018-07-31T06:30:23.915080+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}, {"update": {"description": "A basic implementation of a DLP LighCrafter Digital Micromirror Device evaluation board. Allows 1-bit bmps to be displayed on the DMD in manual mode, and a sequence of images to be loaded to step through in buffered mode.\r\n\r\nHas been tested on up to date versions of BLACS & labscript\\_devices, and I have attempted to implement the Python 3 forwards compatibility patches that are being rolled out to other devices.\r\n\r\nRequires [BLACS pull request 48 \u201cAdd basic support for Image output types\u201d](#!/labscript_suite/blacs/pull-requests/48/add-basic-support-for-image-output-types/diff)", "title": "LightCrafter", "destination": {"commit": {"hash": "52f0e264f612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/52f0e264f612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/52f0e264f612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "79aa79527967", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/79aa79527967"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/79aa79527967"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "LightCrafter"}}, "state": "OPEN", "author": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "date": "2018-07-31T06:30:23.842849+00:00"}, "pull_request": {"type": "pullrequest", "id": 43, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/43.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/43"}}, "title": "LightCrafter"}}]}