{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77421467.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77421467"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 51, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}}, "title": "Arbitrary subfolders for device code within labscript_devices"}, "content": {"raw": "Thoughts:  \n\n* The removal of the `@labscript_device` decorator means that you are no longer checking that the labscript class name matches the file \\(or in this case folder\\) name. Doesn't this have implications for what gets saved in the connection table since we currently save `object.__class__.__name__` and this needs to match the name specified as the first argument to `register_classes()` in order to look up the BLACS/runviewer classes?   \n* If we aren't enforcing folder name = labscript device name anymore \\(so that each folder can hold multiple devices\\) then `register_classes` needs a check to ensure that we don\u2019t have conflicting device names across multiple folders \\(aka, don\u2019t overwrite existing dictionary entries if something with that device name has already been registered!\\)  \n* The current way you import the BLACS and runviewer classes I think results in the labscript class also being imported \\(thus making BLACS, remote worker processes, and runviewer depend on labscript\\), which we probably don\u2019t want. Possibly `_import_class_by_fullname` should be updated to import in the same way as `register_classes` so that it doesn't run `__init__.py`?  \n* It's a shame that the call to `register_classes` can't be in `__init__.py` but I guess that is the price we pay for keeping backwards compatibility with the historical device imports in experiment logic files.  \n* I think it would be good to come up with some conventions regarding filenames. For instance, filenames that indicate which program the contents are for would be helpful \\(so that you don't have to look it up in `register_classes`\\). So say, \u201cBLACSTab.py\u201d or \u201clabscript\\_class.py\u201d or something like that. Will just make it faster to figure out where relevant code is stored, and will help new people understand the code structure a bit better \\(because this proposal technically means you can do whatever you like, for example have 7 unrelated devices contained within a single folder with filenames that come from a random password generator! So conventions will help ensure we don\u2019t get a giant mess of contributed device code in the future\\).\n\n\u200c\n\nI also think it would be prudent to go slow on the porting of other devices to the new structure so that we can tweak the implementation as we go if things crop up for particular device implementations \\(DummyPseudoclock is not exactly the most complex of devices!\\)", "markup": "markdown", "html": "<p>Thoughts:  </p>\n<ul>\n<li>The removal of the <code>@labscript_device</code> decorator means that you are no longer checking that the labscript class name matches the file (or in this case folder) name. Doesn't this have implications for what gets saved in the connection table since we currently save <code>object.__class__.__name__</code> and this needs to match the name specified as the first argument to <code>register_classes()</code> in order to look up the BLACS/runviewer classes?   </li>\n<li>If we aren't enforcing folder name = labscript device name anymore (so that each folder can hold multiple devices) then <code>register_classes</code> needs a check to ensure that we don\u2019t have conflicting device names across multiple folders (aka, don\u2019t overwrite existing dictionary entries if something with that device name has already been registered!)  </li>\n<li>The current way you import the BLACS and runviewer classes I think results in the labscript class also being imported (thus making BLACS, remote worker processes, and runviewer depend on labscript), which we probably don\u2019t want. Possibly <code>_import_class_by_fullname</code> should be updated to import in the same way as <code>register_classes</code> so that it doesn't run <code>__init__.py</code>?  </li>\n<li>It's a shame that the call to <code>register_classes</code> can't be in <code>__init__.py</code> but I guess that is the price we pay for keeping backwards compatibility with the historical device imports in experiment logic files.  </li>\n<li>I think it would be good to come up with some conventions regarding filenames. For instance, filenames that indicate which program the contents are for would be helpful (so that you don't have to look it up in <code>register_classes</code>). So say, \u201cBLACSTab.py\u201d or \u201clabscript_class.py\u201d or something like that. Will just make it faster to figure out where relevant code is stored, and will help new people understand the code structure a bit better (because this proposal technically means you can do whatever you like, for example have 7 unrelated devices contained within a single folder with filenames that come from a random password generator! So conventions will help ensure we don\u2019t get a giant mess of contributed device code in the future).</li>\n</ul>\n<p>\u200c</p>\n<p>I also think it would be prudent to go slow on the porting of other devices to the new structure so that we can tweak the implementation as we go if things crop up for particular device implementations (DummyPseudoclock is not exactly the most complex of devices!)</p>", "type": "rendered"}, "created_on": "2018-09-28T05:30:02.291614+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-09-28T05:30:02.306116+00:00", "type": "pullrequest_comment", "id": 77421467}