{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77496207.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77496207"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 51, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}}, "title": "Arbitrary subfolders for device code within labscript_devices"}, "content": {"raw": "One can think of examples where you don't want to import the labscript device just because you are importing a BLACS tab. For example, the RFBlaster has compile-time dependencies, one of them even needs a Cython extension compiled, this is a pain in the neck to have on computers when you don't actually need to use it.\n\nThe following three options that have different downsides:\n\n1. Don't import labscript classes into `__init__.py`. Downside: breaks backward compatibility with existing scripts. Also, import lines are getting pretty long in experiment scripts: `from labscript_devices.DummyPseudoclock.labscript_device import Dummy_pseudoclock`.\n2. Do import labscript classes into `__init__.py`. Downside: import-time dependencies must be met on BLACS computer even if they are not needed by BLACS. Imports may need to be hidden in functions instead of at the global scope, which is ugly.\n3. Use some kind of lazy importer that doesn't actually do the import until one of the imported things is accessed. Downside: magic and unexpected.  Surprises experienced Python users and misleads less experienced ones.\n\nActually i suppose there's another option, to do 1, but with some magic that lets you import anything from the `labscript_device` submodule  anyway if you import it as if it was in `__init__.py`, but coughs a deprecation warning telling you the new import line you should use. Downside: this sort of magic can be bug-prone.", "markup": "markdown", "html": "<p>One can think of examples where you don't want to import the labscript device just because you are importing a BLACS tab. For example, the RFBlaster has compile-time dependencies, one of them even needs a Cython extension compiled, this is a pain in the neck to have on computers when you don't actually need to use it.</p>\n<p>The following three options that have different downsides:</p>\n<ol>\n<li>Don't import labscript classes into <code>__init__.py</code>. Downside: breaks backward compatibility with existing scripts. Also, import lines are getting pretty long in experiment scripts: <code>from labscript_devices.DummyPseudoclock.labscript_device import Dummy_pseudoclock</code>.</li>\n<li>Do import labscript classes into <code>__init__.py</code>. Downside: import-time dependencies must be met on BLACS computer even if they are not needed by BLACS. Imports may need to be hidden in functions instead of at the global scope, which is ugly.</li>\n<li>Use some kind of lazy importer that doesn't actually do the import until one of the imported things is accessed. Downside: magic and unexpected.  Surprises experienced Python users and misleads less experienced ones.</li>\n</ol>\n<p>Actually i suppose there's another option, to do 1, but with some magic that lets you import anything from the <code>labscript_device</code> submodule  anyway if you import it as if it was in <code>__init__.py</code>, but coughs a deprecation warning telling you the new import line you should use. Downside: this sort of magic can be bug-prone.</p>", "type": "rendered"}, "created_on": "2018-09-28T15:47:06.884174+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-09-28T15:50:23.832421+00:00", "type": "pullrequest_comment", "id": 77496207}