{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77684121.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77684121"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 51, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}}, "title": "Arbitrary subfolders for device code within labscript_devices"}, "content": {"raw": "Oops, Only saw the first of the 3 messages in my emails \\(did the stupid thing where I don\u2019t scroll down to the bottom to check if there was more than one new email in the thread\u2026anyway\u2026\\)\n\nNew filename guidelines looks good.\n\nDot point answers look good.\n\nRegarding backwards compatibility, how about this. In each `__init__.py` file we add something like this:\n\n    class DummyPseudoclockObject(object):\r\n        def __call__(self, *args, **kwargs):\n            cls = labscript_devices.get_labscript_class('DummyPseudoclock')\r\n            return cls(*args, **kwargs)\r\n    \r\n    \r\n    DummyPseudoclock = DummyPseudoclockObject()\n\nWe then add a `get_labscript_class()` method to `labscript_devices.__init__` that is similar to the others for runviewer/BLACS.\n\nThis does delay the import of the labscript class until it is first used, which is a little bit magical, but maybe not the end of the world? It at least maintains backwards compatibility with current import statements. \n\nWe could also use this to deprecate the current import style \\(by printing a warning\\), however I'm not certain whether it's not best to stick to the standard way of importing rather than making people use the `get_labscript_class()` function directly or a much longer import statement.\n\nNot sure\u2026maybe it\u2019s not the best approach.", "markup": "markdown", "html": "<p>Oops, Only saw the first of the 3 messages in my emails (did the stupid thing where I don\u2019t scroll down to the bottom to check if there was more than one new email in the thread\u2026anyway\u2026)</p>\n<p>New filename guidelines looks good.</p>\n<p>Dot point answers look good.</p>\n<p>Regarding backwards compatibility, how about this. In each <code>__init__.py</code> file we add something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kr\">class</span> <span class=\"nx\">DummyPseudoclockObject</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">)</span><span class=\"o\">:</span>\n    <span class=\"nx\">def</span> <span class=\"nx\">__call__</span><span class=\"p\">(</span><span class=\"nx\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nx\">kwargs</span><span class=\"p\">)</span><span class=\"o\">:</span>\n        <span class=\"nx\">cls</span> <span class=\"o\">=</span> <span class=\"nx\">labscript_devices</span><span class=\"p\">.</span><span class=\"nx\">get_labscript_class</span><span class=\"p\">(</span><span class=\"s1\">&#39;DummyPseudoclock&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nx\">cls</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"nx\">kwargs</span><span class=\"p\">)</span>\n\n\n<span class=\"nx\">DummyPseudoclock</span> <span class=\"o\">=</span> <span class=\"nx\">DummyPseudoclockObject</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>We then add a <code>get_labscript_class()</code> method to <code>labscript_devices.__init__</code> that is similar to the others for runviewer/BLACS.</p>\n<p>This does delay the import of the labscript class until it is first used, which is a little bit magical, but maybe not the end of the world? It at least maintains backwards compatibility with current import statements. </p>\n<p>We could also use this to deprecate the current import style (by printing a warning), however I'm not certain whether it's not best to stick to the standard way of importing rather than making people use the <code>get_labscript_class()</code> function directly or a much longer import statement.</p>\n<p>Not sure\u2026maybe it\u2019s not the best approach.</p>", "type": "rendered"}, "created_on": "2018-10-02T00:57:57.306436+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-10-02T00:57:57.314397+00:00", "type": "pullrequest_comment", "id": 77684121}