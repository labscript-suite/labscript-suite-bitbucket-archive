{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77780230.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77780230"}}, "parent": {"id": 77684121, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77684121.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77684121"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 51, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}}, "title": "Arbitrary subfolders for device code within labscript_devices"}, "content": {"raw": "Yeah, the magic is a little incomplete, in that if you import a device this way and then subclass it instead of instantiate it, you'll get nonsense.\n\nIn Python 3.7 you can define `__getattr__` at the module level and dynamically import something when the name is accessed, rather than when it is instantiated. This would be ok, but is unappealing if you have more than one class defined in `labscript_device`, or other functions and things that you might want to import too - you would have to maintain a potentially growing list of which imports to pull into `__init__.py` as deferred imports vs normal ones. So either kind of magic is unappealing.\n\nI'm leaning towards yes, include magic for backward compatibility. But, since the magic is incomplete and not a nice prospect for long-term maintainability, that it be only for backward compatibility and not a long-term endorsed way of importing things.  So it should have a deprecation warning so that it is not used long-term, and so that the reason for breakage if people are subclassing these things (or whatever else) is more apparent since they may have a deprecation warning in addition to whatever breakage they encounter.\n\nWe don't need to register the labscript class names in advance, we can do something like:\n\n```python\nimport warnings\n\ndef DummyPseudoclock(*args, **kwargs):\n    fullname = 'labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock'\n    warnings.warn(\"This is deprecation warning, please use blah blah import line instead, things may break unexpectedly if you don't\")\n    return labscript_devices.import_class_by_fullname(fullname)(*args, **kwargs)\n```\n\nI can wrap this into a generic function in `labscript_devices` so that you can just do:\n\n```python\nDummyPseudoclock = labscript_devices.deprecated_import_alias('labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock')\n```\n\ninstead in each `__init__.py`\n\nSound ok?", "markup": "markdown", "html": "<p>Yeah, the magic is a little incomplete, in that if you import a device this way and then subclass it instead of instantiate it, you'll get nonsense.</p>\n<p>In Python 3.7 you can define <code>__getattr__</code> at the module level and dynamically import something when the name is accessed, rather than when it is instantiated. This would be ok, but is unappealing if you have more than one class defined in <code>labscript_device</code>, or other functions and things that you might want to import too - you would have to maintain a potentially growing list of which imports to pull into <code>__init__.py</code> as deferred imports vs normal ones. So either kind of magic is unappealing.</p>\n<p>I'm leaning towards yes, include magic for backward compatibility. But, since the magic is incomplete and not a nice prospect for long-term maintainability, that it be only for backward compatibility and not a long-term endorsed way of importing things.  So it should have a deprecation warning so that it is not used long-term, and so that the reason for breakage if people are subclassing these things (or whatever else) is more apparent since they may have a deprecation warning in addition to whatever breakage they encounter.</p>\n<p>We don't need to register the labscript class names in advance, we can do something like:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">DummyPseudoclock</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">fullname</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock&#39;</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">&quot;This is deprecation warning, please use blah blah import line instead, things may break unexpectedly if you don&#39;t&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">labscript_devices</span><span class=\"o\">.</span><span class=\"n\">import_class_by_fullname</span><span class=\"p\">(</span><span class=\"n\">fullname</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I can wrap this into a generic function in <code>labscript_devices</code> so that you can just do:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">DummyPseudoclock</span> <span class=\"o\">=</span> <span class=\"n\">labscript_devices</span><span class=\"o\">.</span><span class=\"n\">deprecated_import_alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>instead in each <code>__init__.py</code></p>\n<p>Sound ok?</p>", "type": "rendered"}, "created_on": "2018-10-02T16:11:24.226610+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-10-02T17:55:46.769491+00:00", "type": "pullrequest_comment", "id": 77780230}