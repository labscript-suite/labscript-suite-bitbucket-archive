{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77792305.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77792305"}}, "parent": {"id": 77780230, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments/77780230.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51/_/diff#comment-77780230"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 51, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}}, "title": "Arbitrary subfolders for device code within labscript_devices"}, "content": {"raw": "Ok, I've gone ahead and implemented this. `DummyPseudoclock/__init__.py` now has:\n\n```python\nfrom labscript_devices import deprecated_import_alias\n\n# For backwards compatibility with old experiment scripts:\nDummyPseudoclock = deprecated_import_alias(\n    \"labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock\"\n)\n```\n\nwhere `deprecated_import_alias()` is defined in `labscript_devices/__init__.py` as:\n\n```python\ndef deprecated_import_alias(fullname):\n    \"\"\"A way of allowing a class to be imported from an old location whilst a) not\n    actually importing it until it is instantiated and b) emitting a warning pointing to\n    the new import location. fullname must be a fully qualified class name with an\n    absolute import path. Use by calling in the module where the class used to be:\n    ClassName = deprecated_import_alias(\"new.path.to.ClassName\")\"\"\"\n    calling_module_name = inspect.getmodule(inspect.stack()[1][0]).__name__\n    cls = []\n    def wrapper(*args, **kwargs):\n        if not cls:\n            cls.append(_import_class_by_fullname(fullname))\n            shortname = fullname.split('.')[-1]\n            newmodule = '.'.join(fullname.split('.')[:-1])\n            msg = \"\"\"Importing %s from %s is deprecated, please instead import it from\n               %s. Importing anyway for backward compatibility, but this may cause some\n               unexpected behaviour.\"\"\"\n            msg = dedent(msg) % (shortname, calling_module_name, newmodule)\n            warnings.warn(msg, stacklevel=2)\n        return cls[0](*args, **kwargs)\n    return wrapper\n```\n\nWith this, the following code:\n```python\nfrom labscript_devices.DummyPseudoclock import DummyPseudoclock\nDummyPseudoclock()\n```\nresults in:\n```\ntest.py:2: UserWarning: Importing DummyPseudoclock from labscript_devices.DummyPseudoclock is deprecated, please instead import it from labscript_devices.DummyPseudoclock.labscript_device. Importing anyway for backward compatibility, but this may cause some unexpected behaviour.\n  DummyPseudoclock()\n```\n\nThe warning is only printed once if you instantiate the class multiple times.\n\nI've also implemented the error if you call `register_classes` twice with the same labscript device name, so as long as you agree with the aliasing/deprecation stuff, I think that's all on the todo list for this pull request.", "markup": "markdown", "html": "<p>Ok, I've gone ahead and implemented this. <code>DummyPseudoclock/__init__.py</code> now has:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_devices</span> <span class=\"kn\">import</span> <span class=\"n\">deprecated_import_alias</span>\n\n<span class=\"c1\"># For backwards compatibility with old experiment scripts:</span>\n<span class=\"n\">DummyPseudoclock</span> <span class=\"o\">=</span> <span class=\"n\">deprecated_import_alias</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;labscript_devices.DummyPseudoclock.labscript_device.DummyPseudoclock&quot;</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n\n<p>where <code>deprecated_import_alias()</code> is defined in <code>labscript_devices/__init__.py</code> as:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">deprecated_import_alias</span><span class=\"p\">(</span><span class=\"n\">fullname</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;A way of allowing a class to be imported from an old location whilst a) not</span>\n<span class=\"sd\">    actually importing it until it is instantiated and b) emitting a warning pointing to</span>\n<span class=\"sd\">    the new import location. fullname must be a fully qualified class name with an</span>\n<span class=\"sd\">    absolute import path. Use by calling in the module where the class used to be:</span>\n<span class=\"sd\">    ClassName = deprecated_import_alias(&quot;new.path.to.ClassName&quot;)&quot;&quot;&quot;</span>\n    <span class=\"n\">calling_module_name</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmodule</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"bp\">cls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">cls</span><span class=\"p\">:</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">_import_class_by_fullname</span><span class=\"p\">(</span><span class=\"n\">fullname</span><span class=\"p\">))</span>\n            <span class=\"n\">shortname</span> <span class=\"o\">=</span> <span class=\"n\">fullname</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">newmodule</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">fullname</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.&#39;</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;Importing </span><span class=\"si\">%s</span><span class=\"s2\"> from </span><span class=\"si\">%s</span><span class=\"s2\"> is deprecated, please instead import it from</span>\n<span class=\"s2\">               </span><span class=\"si\">%s</span><span class=\"s2\">. Importing anyway for backward compatibility, but this may cause some</span>\n<span class=\"s2\">               unexpected behaviour.&quot;&quot;&quot;</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">dedent</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">shortname</span><span class=\"p\">,</span> <span class=\"n\">calling_module_name</span><span class=\"p\">,</span> <span class=\"n\">newmodule</span><span class=\"p\">)</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">](</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n</pre></div>\n\n\n<p>With this, the following code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.DummyPseudoclock</span> <span class=\"kn\">import</span> <span class=\"n\">DummyPseudoclock</span>\n<span class=\"n\">DummyPseudoclock</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>results in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"ne\">UserWarning</span><span class=\"p\">:</span> <span class=\"n\">Importing</span> <span class=\"n\">DummyPseudoclock</span> <span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.DummyPseudoclock</span> <span class=\"nn\">is</span> <span class=\"nn\">deprecated</span><span class=\"p\">,</span> <span class=\"n\">please</span> <span class=\"n\">instead</span> <span class=\"kn\">import</span> <span class=\"nn\">it</span> <span class=\"nn\">from</span> <span class=\"nn\">labscript_devices.DummyPseudoclock.labscript_device.</span> <span class=\"nn\">Importing</span> <span class=\"nn\">anyway</span> <span class=\"nn\">for</span> <span class=\"nn\">backward</span> <span class=\"nn\">compatibility</span><span class=\"o\">,</span> <span class=\"nn\">but</span> <span class=\"nn\">this</span> <span class=\"nn\">may</span> <span class=\"nn\">cause</span> <span class=\"nn\">some</span> <span class=\"nn\">unexpected</span> <span class=\"nn\">behaviour.</span>\n  <span class=\"n\">DummyPseudoclock</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>The warning is only printed once if you instantiate the class multiple times.</p>\n<p>I've also implemented the error if you call <code>register_classes</code> twice with the same labscript device name, so as long as you agree with the aliasing/deprecation stuff, I think that's all on the todo list for this pull request.</p>", "type": "rendered"}, "created_on": "2018-10-02T17:52:52.623647+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-10-02T18:19:03.794184+00:00", "type": "pullrequest_comment", "id": 77792305}