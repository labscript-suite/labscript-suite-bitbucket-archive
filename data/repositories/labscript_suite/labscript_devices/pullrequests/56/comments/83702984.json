{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83702984.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83702984"}}, "parent": {"id": 83671312, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83671312.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83671312"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Excellent, thanks so much for testing and debugging!\n\nAnalog input was the last thing I implemented, so, naturally, I had not tested what happens when there is none of it :p. Thanks for the fix!\n\nAs for the other issues:\n\n* I'll investigate the sample rate of the PCIe-6738. Perhaps it is a bug in DAQmx that it is over-reported, or perhaps we're using it wrong (perhaps confusion between single channel sample rate vs per channel sample rate). If it is just a bug to be fixed with a manual override like this, then I'll do something like make a `capabilties_overrides.json` that will be merged with the introspected capabilities.\n* I should be able to reproduce the digital output issue with a simulated device here at NIST. The most unusual thing about that device that jumps out at me is that the number of lines on port 0 is so small, and is not a multiple of 8. I've seen another device < 8 lines on a port, but it was the last port. So that's something different. It seems the DAQmx API works interchangeably with sending individual ones and zeros as uint8s as we're doing in manual mode, or with packing ones and zeros into integer datatypes as we're doing in buffered mode. But there is no 2-bit integer datatype, uint8 is the minimum. So I wonder if some internal conversion to integer datatypes has the DAQmx API confused. Not sure why it is saying that the data is \"99\".\n* Ah, I had put some effort into waits, so that's a shame that they're not working. Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on (via labconfig) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status. Biggest suspect for waits not working is incorrect detection of whether the card supports 'incomplete sample detection'. I may be able to look into this as there is a PCIe-6363 around here.\n\nEdit: The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.", "markup": "markdown", "html": "<p>Excellent, thanks so much for testing and debugging!</p>\n<p>Analog input was the last thing I implemented, so, naturally, I had not tested what happens when there is none of it :p. Thanks for the fix!</p>\n<p>As for the other issues:</p>\n<ul>\n<li>I'll investigate the sample rate of the PCIe-6738. Perhaps it is a bug in DAQmx that it is over-reported, or perhaps we're using it wrong (perhaps confusion between single channel sample rate vs per channel sample rate). If it is just a bug to be fixed with a manual override like this, then I'll do something like make a <code>capabilties_overrides.json</code> that will be merged with the introspected capabilities.</li>\n<li>I should be able to reproduce the digital output issue with a simulated device here at NIST. The most unusual thing about that device that jumps out at me is that the number of lines on port 0 is so small, and is not a multiple of 8. I've seen another device &lt; 8 lines on a port, but it was the last port. So that's something different. It seems the DAQmx API works interchangeably with sending individual ones and zeros as uint8s as we're doing in manual mode, or with packing ones and zeros into integer datatypes as we're doing in buffered mode. But there is no 2-bit integer datatype, uint8 is the minimum. So I wonder if some internal conversion to integer datatypes has the DAQmx API confused. Not sure why it is saying that the data is \"99\".</li>\n<li>Ah, I had put some effort into waits, so that's a shame that they're not working. Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on (via labconfig) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status. Biggest suspect for waits not working is incorrect detection of whether the card supports 'incomplete sample detection'. I may be able to look into this as there is a PCIe-6363 around here.</li>\n</ul>\n<p>Edit: The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.</p>", "type": "rendered"}, "created_on": "2018-11-27T14:03:05.172003+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-27T16:45:44.586389+00:00", "type": "pullrequest_comment", "id": 83702984}