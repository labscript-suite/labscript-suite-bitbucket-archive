{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83766972.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83766972"}}, "parent": {"id": 83702984, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83702984.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83702984"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "> The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices \\(I forget which\\) where we had control over the PFIs in manual mode.\n\n1. Even though it\u2019s been this way for some time, any modality of inputs/outputs between buffered and manual mode is undesirable.\n2. There is at least one way in which a digital line / PFI can change state during an experiment shot that is not reflected in the device tab after `transition_to_manual`. The `final_values` returned by `program_buffered_DO` \\([blacs\\_workers.py](#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT172)\\) do not account for changes to a wait `timeout_monitor` output. This is the source of a gotchya in the @monashbec , whereby the wait timeout trigger is a PFI line and `wait_trigger_type='falling'`. There's a bootstrapping problem whereby the default value of this output is low, leading to the master psuedoclock \\(a PulseBlaster\\) executing its pulse program indefinitely.\n\n    * In the event that a shot with a wait does get executed \\(despite the PulseBlaster not being in a well defined state prior to the shot\\), the wait timeout trigger may go high \\(trigger rearm state written [here](#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT839) in `start_tasks`\\) but this is not reflected on the device tab after the shot. \\(Thus it is not saved in the blacs front panel and the problem will return upon relaunching blacs.\\)\n    * Changing the output of the timeout trigger to high in manual mode and restarting the PulseBlaster ensures the system is in a well defined \\(static\\) state.\n    \n\nI wonder if we can remedy these issues \\(1: inputs never being outputs and vice versa, and 2: device tab reflects physical state of all outputs after a shot\\) in this PR.", "markup": "markdown", "html": "<blockquote>\n<p>The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.</p>\n</blockquote>\n<ol>\n<li>Even though it\u2019s been this way for some time, any modality of inputs/outputs between buffered and manual mode is undesirable.</li>\n<li>\n<p>There is at least one way in which a digital line / PFI can change state during an experiment shot that is not reflected in the device tab after <code>transition_to_manual</code>. The <code>final_values</code> returned by <code>program_buffered_DO</code> (<a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT172\" rel=\"nofollow\">blacs_workers.py</a>) do not account for changes to a wait <code>timeout_monitor</code> output. This is the source of a gotchya in the @monashbec , whereby the wait timeout trigger is a PFI line and <code>wait_trigger_type='falling'</code>. There's a bootstrapping problem whereby the default value of this output is low, leading to the master psuedoclock (a PulseBlaster) executing its pulse program indefinitely.</p>\n<ul>\n<li>In the event that a shot with a wait does get executed (despite the PulseBlaster not being in a well defined state prior to the shot), the wait timeout trigger may go high (trigger rearm state written <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT839\" rel=\"nofollow\">here</a> in <code>start_tasks</code>) but this is not reflected on the device tab after the shot. (Thus it is not saved in the blacs front panel and the problem will return upon relaunching blacs.)</li>\n<li>Changing the output of the timeout trigger to high in manual mode and restarting the PulseBlaster ensures the system is in a well defined (static) state.</li>\n</ul>\n</li>\n</ol>\n<p>I wonder if we can remedy these issues (1: inputs never being outputs and vice versa, and 2: device tab reflects physical state of all outputs after a shot) in this PR.</p>", "type": "rendered"}, "created_on": "2018-11-27T21:33:14.306488+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2018-11-27T22:10:18.805154+00:00", "type": "pullrequest_comment", "id": 83766972}