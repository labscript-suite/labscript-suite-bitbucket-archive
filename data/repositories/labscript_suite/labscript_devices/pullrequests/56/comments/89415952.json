{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89415952.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89415952"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Fix pushed for the issue where checking that digital outs are not all zero prevents compiling a connection table.\n\nI've now changed it so that if digital outs are all zero, the DO task is simply run as if they were static outputs. So this works around the issue without the user having to add dummy instructions. The only downside is that static outputs are set up in software time at the start of the shot, so if the front panel had a DO on and it is off during the shot, it will turn off in software time prior to the master clock starting. I don't think this is much of an issue but am happy to be convinced otherwise.\n\nAlso the previous fixes had bugs that I've resolved upon some testing. More testing appreciated, as I have only been able to test with simulated devices so far.\n\nRemaining issues (not necessarily blocking getting this merged, but for the sake of keeping track):\n\n* Modality of inputs/outputs. Can we make the clock input and wait monitor input not be configured as outputs during manual mode, even though their ports are added to the output task? I'm not sure how to proceed with this one, since the ports are treated as a whole in order to avoid using WriteDigitalLines and avoid bugs discussed upthread. But worth looking into.\n\n* Update the front panel at the end of a shot to have the wait monitor timeout trigger be in its unarmed state. This should be relatively simple.\n\n* Include a quirk for the max AO rate of the PXI-6738 depending on exactly which AO channels are in use. Will probably just add an if statement to the relevant code in the main class rather than trying to do anything with the subclass. Despite looking like poor form to add a special case, I think this could be a sustainable way to add model-specific quirks, even though it looks like a good use-case for implementing things in subclasses. I don't think it is actually suitable for going the object-oriented route since there is not necessarily going to be a hierarchy that determines which quirks different devices need. ", "markup": "markdown", "html": "<p>Fix pushed for the issue where checking that digital outs are not all zero prevents compiling a connection table.</p>\n<p>I've now changed it so that if digital outs are all zero, the DO task is simply run as if they were static outputs. So this works around the issue without the user having to add dummy instructions. The only downside is that static outputs are set up in software time at the start of the shot, so if the front panel had a DO on and it is off during the shot, it will turn off in software time prior to the master clock starting. I don't think this is much of an issue but am happy to be convinced otherwise.</p>\n<p>Also the previous fixes had bugs that I've resolved upon some testing. More testing appreciated, as I have only been able to test with simulated devices so far.</p>\n<p>Remaining issues (not necessarily blocking getting this merged, but for the sake of keeping track):</p>\n<ul>\n<li>\n<p>Modality of inputs/outputs. Can we make the clock input and wait monitor input not be configured as outputs during manual mode, even though their ports are added to the output task? I'm not sure how to proceed with this one, since the ports are treated as a whole in order to avoid using WriteDigitalLines and avoid bugs discussed upthread. But worth looking into.</p>\n</li>\n<li>\n<p>Update the front panel at the end of a shot to have the wait monitor timeout trigger be in its unarmed state. This should be relatively simple.</p>\n</li>\n<li>\n<p>Include a quirk for the max AO rate of the PXI-6738 depending on exactly which AO channels are in use. Will probably just add an if statement to the relevant code in the main class rather than trying to do anything with the subclass. Despite looking like poor form to add a special case, I think this could be a sustainable way to add model-specific quirks, even though it looks like a good use-case for implementing things in subclasses. I don't think it is actually suitable for going the object-oriented route since there is not necessarily going to be a hierarchy that determines which quirks different devices need. </p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2019-01-26T17:53:38.603906+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-01-26T17:54:45.111758+00:00", "type": "pullrequest_comment", "id": 89415952}