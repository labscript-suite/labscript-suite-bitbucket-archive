{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/81996483.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-81996483"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Note to self: version tag 2.3.0 required after merging.", "markup": "markdown", "html": "<p>Note to self: version tag 2.3.0 required after merging.</p>", "type": "rendered"}, "created_on": "2018-11-10T17:54:16.936868+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-10T17:54:16.943455+00:00", "type": "pullrequest_comment", "id": 81996483}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/81996660.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-81996660"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "The introspection code in this pull request reports that the digital outputs of the PXIe-6535 do not support buffered output. In pull request #9 however, which added code for the PXIe-6535,  it looks like they do support buffered output. @cast7989 could you confirm that they do support buffered output? I do not have a PXIe-6535, so I can only see the behaviour of a simulated device.\n\nI know the NI PXI stuff can be modular. Perhaps the ports only support buffered output if there are additional modules connected? Otherwise, there might be an unwarranted assumption in the introspection code. It looks like this:\n\n```python\ndef port_supports_buffered(device_name, port, clock_terminal='PFI0'):\n    if clock_terminal not in DAQmxGetDevTerminals(device_name):\n        return False\n    npts = 10\n    task = Task()\n    clock_terminal = '/' + device_name + '/' + clock_terminal\n    data = np.zeros(npts, dtype=np.uint8)\n    task.CreateDOChan(\n        device_name + \"/\" + port + '/line0', \"\", c.DAQmx_Val_ChanForAllLines\n    )\n    task.CfgSampClkTiming(\n        clock_terminal, 100, c.DAQmx_Val_Rising, c.DAQmx_Val_FiniteSamps, npts\n    )\n    written = int32()\n    try:\n        task.WriteDigitalLines(\n            npts, False, 10.0, c.DAQmx_Val_GroupByScanNumber, data, byref(written), None\n        )\n    except (\n        PyDAQmx.DAQmxFunctions.BufferedOperationsNotSupportedOnSelectedLinesError,\n        PyDAQmx.DAQmxFunctions.PhysicalChanNotSupportedGivenSampTimingType653xError,\n    ):\n        return False\n    except PyDAQmx.DAQmxFunctions.RouteNotSupportedByHW_RoutingError as e:\n        valid_terms = e.message.split('Suggested Values: ')[1].split('\\n')[0]\n        # Try again with one of the suggested terminals:\n        return port_supports_buffered(device_name, port, valid_terms[0].split(', ')[0])\n    else:\n        return True\n    finally:\n        task.ClearTask()\n\n```\n\nSo the code is attempting to do buffered output on a port and seeing if it gets an error. The only potentially unwarranted assumption that  jumps out to me is the initial check for a terminal called 'PFI0'. If there are devices that can have externally clocked output but do not have a terminal named PFI0, then they would erroneously be considered not to support buffered output.\n\nI will investigate this with the simulated device - perhaps there are different terminal naming patterns on the PXI devices, such that PFI0 is not one of them.", "markup": "markdown", "html": "<p>The introspection code in this pull request reports that the digital outputs of the PXIe-6535 do not support buffered output. In <a href=\"#!/labscript_suite/labscript_devices/pull-requests/9/update-of-niboardpy-for-dio-cards-with\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #9</a> however, which added code for the PXIe-6535,  it looks like they do support buffered output. @cast7989 could you confirm that they do support buffered output? I do not have a PXIe-6535, so I can only see the behaviour of a simulated device.</p>\n<p>I know the NI PXI stuff can be modular. Perhaps the ports only support buffered output if there are additional modules connected? Otherwise, there might be an unwarranted assumption in the introspection code. It looks like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">port_supports_buffered</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"s1\">&#39;PFI0&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">clock_terminal</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">DAQmxGetDevTerminals</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"n\">npts</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">()</span>\n    <span class=\"n\">clock_terminal</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">device_name</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">clock_terminal</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">npts</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">CreateDOChan</span><span class=\"p\">(</span>\n        <span class=\"n\">device_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">port</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;/line0&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">DAQmx_Val_ChanForAllLines</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">CfgSampClkTiming</span><span class=\"p\">(</span>\n        <span class=\"n\">clock_terminal</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">DAQmx_Val_Rising</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">DAQmx_Val_FiniteSamps</span><span class=\"p\">,</span> <span class=\"n\">npts</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">written</span> <span class=\"o\">=</span> <span class=\"n\">int32</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">WriteDigitalLines</span><span class=\"p\">(</span>\n            <span class=\"n\">npts</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">DAQmx_Val_GroupByScanNumber</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">byref</span><span class=\"p\">(</span><span class=\"n\">written</span><span class=\"p\">),</span> <span class=\"bp\">None</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"p\">(</span>\n        <span class=\"n\">PyDAQmx</span><span class=\"o\">.</span><span class=\"n\">DAQmxFunctions</span><span class=\"o\">.</span><span class=\"n\">BufferedOperationsNotSupportedOnSelectedLinesError</span><span class=\"p\">,</span>\n        <span class=\"n\">PyDAQmx</span><span class=\"o\">.</span><span class=\"n\">DAQmxFunctions</span><span class=\"o\">.</span><span class=\"n\">PhysicalChanNotSupportedGivenSampTimingType653xError</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">except</span> <span class=\"n\">PyDAQmx</span><span class=\"o\">.</span><span class=\"n\">DAQmxFunctions</span><span class=\"o\">.</span><span class=\"n\">RouteNotSupportedByHW_RoutingError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_terms</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;Suggested Values: &#39;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"c1\"># Try again with one of the suggested terminals:</span>\n        <span class=\"k\">return</span> <span class=\"n\">port_supports_buffered</span><span class=\"p\">(</span><span class=\"n\">device_name</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">valid_terms</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;, &#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">ClearTask</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>So the code is attempting to do buffered output on a port and seeing if it gets an error. The only potentially unwarranted assumption that  jumps out to me is the initial check for a terminal called 'PFI0'. If there are devices that can have externally clocked output but do not have a terminal named PFI0, then they would erroneously be considered not to support buffered output.</p>\n<p>I will investigate this with the simulated device - perhaps there are different terminal naming patterns on the PXI devices, such that PFI0 is not one of them.</p>", "type": "rendered"}, "created_on": "2018-11-10T18:17:10.877324+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-10T18:21:53.724465+00:00", "type": "pullrequest_comment", "id": 81996660}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/82296973.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-82296973"}}, "parent": {"id": 81996660, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/81996660.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-81996660"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "I've fixed this issue - the code was not correctly iterating over possible clock terminals when checking if a port can support buffered output.\n\nIt now correctly detects that the PXIe-6535 supports buffered output on ports 0-3 but not port 4.", "markup": "markdown", "html": "<p>I've fixed this issue - the code was not correctly iterating over possible clock terminals when checking if a port can support buffered output.</p>\n<p>It now correctly detects that the PXIe-6535 supports buffered output on ports 0-3 but not port 4.</p>", "type": "rendered"}, "created_on": "2018-11-13T21:07:38.298750+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-13T21:07:38.312105+00:00", "type": "pullrequest_comment", "id": 82296973}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83442425.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/cbillington/labscript_devices:c93a9cec48cb..addb7eef22b4?path=NI_DAQmx%2Flabscript_devices.py"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83442425"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "This fails with `TypeError` when there are no analog outputs \\(as `AO_range` is `None`\\). Suggest that call to this method be conditional on `self.analogs`.", "markup": "markdown", "html": "<p>This fails with <code>TypeError</code> when there are no analog outputs (as <code>AO_range</code> is <code>None</code>). Suggest that call to this method be conditional on <code>self.analogs</code>.</p>", "type": "rendered"}, "created_on": "2018-11-24T04:57:53.905793+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "inline": {"to": 281, "from": null, "path": "NI_DAQmx/labscript_devices.py"}, "updated_on": "2018-11-24T04:57:53.912334+00:00", "type": "pullrequest_comment", "id": 83442425}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83442452.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/cbillington/labscript_devices:c93a9cec48cb..addb7eef22b4?path=NI_DAQmx%2Flabscript_devices.py"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83442452"}}, "parent": {"id": 83442425, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83442425.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83442425"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Thanks for catching that! In line with the other error checking functions, I'll have it do `if not analogs: return`", "markup": "markdown", "html": "<p>Thanks for catching that! In line with the other error checking functions, I'll have it do <code>if not analogs: return</code></p>", "type": "rendered"}, "created_on": "2018-11-24T05:11:37.255240+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "inline": {"to": 281, "from": null, "path": "NI_DAQmx/labscript_devices.py"}, "updated_on": "2018-11-24T05:11:37.269985+00:00", "type": "pullrequest_comment", "id": 83442452}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83449998.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/cbillington/labscript_devices:2159560805b5..addb7eef22b4?path=NI_DAQmx%2Flabscript_devices.py"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83449998"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Typo in \u2018number\u2019.", "markup": "markdown", "html": "<p>Typo in \u2018number\u2019.</p>", "type": "rendered"}, "created_on": "2018-11-25T02:58:12.191342+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "inline": {"to": 268, "from": null, "path": "NI_DAQmx/labscript_devices.py"}, "updated_on": "2018-11-25T02:58:12.198590+00:00", "type": "pullrequest_comment", "id": 83449998}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83671312.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83671312"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Tested this today on Swinburne\u2019s quantum\\_gas\\_microscope and in the monashspinor lab. The following procedure worked beautifully:\n\n`$ python NI_DAQmx/models/get_capabilities.py`\n\n`$ python NI_DAQmx/models/generate_subclasses.py`\n\nThe boards I tested were: PXIe-6361, PXIe-6738, PXIe-6535 \\(quantum\\_gas\\_microscope running Python 2\\) and PCIe-6363, PCIe-6733 \\(monashspinor running Python 2 and 3\\).\n\nI\u2019ve fixed a bug which prevented shots from executing when a board supporting analog input had no acquisitions requested \\(see e9e6bfc and 4003ba4\\).\n\nOutstanding issues include:\n\n* Had to manually decrease `max_AO_sample_rate` on the PXIe-6738 from 1 MS/s to 400 kS/s.\n* When configuring DO channels in `setup_manual_mode_tasks` of [blacs\\_workers.py](#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT107), including `'/<MAX_name>/port1/line0:7'` in the call to `DO_task.CreateDOChan` caused the subsequent call to `DO_task.WriteDigitalLines` in `program_manual` to fail with:  \n   `InvalidDigDataWriteError: Attempted writing digital data that is not supported.`\n\n    `Data: 99`\n\n\n\n    `Supported Values: 0, 1`\n\n\n\n    `Task Name: _unnamedTask<1>`\n\n\n\n    `Status Code: -200562`\n\n\n\n    Some observations:\n\n\n\n    * `DO_data` is a list of 10 zeros \\(uint8\\), corresponding to the 2 lines on port0 and 8 lines on port1.\n    * This code works on the other cards tested, even when:\n    \n        * some ports are static; and/or\n        * not all ports have the same number of lines, e.g. the PXIe-6535 which has 8\\+8\\+8\\+8\\+6 lines across port 0-4; and/or\n        * used for PFI lines. \\(This confuses me, since some of these are inputs, e.g. `clock_terminal`.\\)\n        \n    * Calling `DO_task.CreateDOChan` with only the first port `'/<MAX_name>/port0/line0:1'` works \\(using a hard-coded conditional\\), even when using the list of 10 zeros for the value of `DO_data`.\n    \n* Waits don't work \\(at least not as configured with the PCIe-6363 on monashspinor\\). The shot fails to complete, with the PCIe-6363 device tab stuck on `transition_to_manual` \\(`acquisiton_worker`\\). I\u2019ll debug this further another day.\n\nThis is a really great bit of development!", "markup": "markdown", "html": "<p>Tested this today on Swinburne\u2019s quantum_gas_microscope and in the monashspinor lab. The following procedure worked beautifully:</p>\n<p><code>$ python NI_DAQmx/models/get_capabilities.py</code></p>\n<p><code>$ python NI_DAQmx/models/generate_subclasses.py</code></p>\n<p>The boards I tested were: PXIe-6361, PXIe-6738, PXIe-6535 (quantum_gas_microscope running Python 2) and PCIe-6363, PCIe-6733 (monashspinor running Python 2 and 3).</p>\n<p>I\u2019ve fixed a bug which prevented shots from executing when a board supporting analog input had no acquisitions requested (see <a href=\"#!/labscript_suite/labscript_devices/commits/e9e6bfc\" rel=\"nofollow\" class=\"ap-connect-link\">e9e6bfc</a> and <a href=\"#!/labscript_suite/labscript_devices/commits/4003ba4\" rel=\"nofollow\" class=\"ap-connect-link\">4003ba4</a>).</p>\n<p>Outstanding issues include:</p>\n<ul>\n<li>Had to manually decrease <code>max_AO_sample_rate</code> on the PXIe-6738 from 1 MS/s to 400 kS/s.</li>\n<li>\n<p>When configuring DO channels in <code>setup_manual_mode_tasks</code> of <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT107\" rel=\"nofollow\">blacs_workers.py</a>, including <code>'/&lt;MAX_name&gt;/port1/line0:7'</code> in the call to <code>DO_task.CreateDOChan</code> caused the subsequent call to <code>DO_task.WriteDigitalLines</code> in <code>program_manual</code> to fail with:<br />\n<code>InvalidDigDataWriteError: Attempted writing digital data that is not supported.</code></p>\n<p><code>Data: 99</code></p>\n<p><code>Supported Values: 0, 1</code></p>\n<p><code>Task Name: _unnamedTask&lt;1&gt;</code></p>\n<p><code>Status Code: -200562</code></p>\n<p>Some observations:</p>\n<ul>\n<li><code>DO_data</code> is a list of 10 zeros (uint8), corresponding to the 2 lines on port0 and 8 lines on port1.</li>\n<li>\n<p>This code works on the other cards tested, even when:</p>\n<ul>\n<li>some ports are static; and/or</li>\n<li>not all ports have the same number of lines, e.g. the PXIe-6535 which has 8+8+8+8+6 lines across port 0-4; and/or</li>\n<li>used for PFI lines. (This confuses me, since some of these are inputs, e.g. <code>clock_terminal</code>.)</li>\n</ul>\n</li>\n<li>\n<p>Calling <code>DO_task.CreateDOChan</code> with only the first port <code>'/&lt;MAX_name&gt;/port0/line0:1'</code> works (using a hard-coded conditional), even when using the list of 10 zeros for the value of <code>DO_data</code>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Waits don't work (at least not as configured with the PCIe-6363 on monashspinor). The shot fails to complete, with the PCIe-6363 device tab stuck on <code>transition_to_manual</code> (<code>acquisiton_worker</code>). I\u2019ll debug this further another day.</p>\n</li>\n</ul>\n<p>This is a really great bit of development!</p>", "type": "rendered"}, "created_on": "2018-11-27T10:46:19.504578+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2018-11-27T20:43:23.894492+00:00", "type": "pullrequest_comment", "id": 83671312}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83702984.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83702984"}}, "parent": {"id": 83671312, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83671312.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83671312"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Excellent, thanks so much for testing and debugging!\n\nAnalog input was the last thing I implemented, so, naturally, I had not tested what happens when there is none of it :p. Thanks for the fix!\n\nAs for the other issues:\n\n* I'll investigate the sample rate of the PCIe-6738. Perhaps it is a bug in DAQmx that it is over-reported, or perhaps we're using it wrong (perhaps confusion between single channel sample rate vs per channel sample rate). If it is just a bug to be fixed with a manual override like this, then I'll do something like make a `capabilties_overrides.json` that will be merged with the introspected capabilities.\n* I should be able to reproduce the digital output issue with a simulated device here at NIST. The most unusual thing about that device that jumps out at me is that the number of lines on port 0 is so small, and is not a multiple of 8. I've seen another device < 8 lines on a port, but it was the last port. So that's something different. It seems the DAQmx API works interchangeably with sending individual ones and zeros as uint8s as we're doing in manual mode, or with packing ones and zeros into integer datatypes as we're doing in buffered mode. But there is no 2-bit integer datatype, uint8 is the minimum. So I wonder if some internal conversion to integer datatypes has the DAQmx API confused. Not sure why it is saying that the data is \"99\".\n* Ah, I had put some effort into waits, so that's a shame that they're not working. Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on (via labconfig) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status. Biggest suspect for waits not working is incorrect detection of whether the card supports 'incomplete sample detection'. I may be able to look into this as there is a PCIe-6363 around here.\n\nEdit: The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.", "markup": "markdown", "html": "<p>Excellent, thanks so much for testing and debugging!</p>\n<p>Analog input was the last thing I implemented, so, naturally, I had not tested what happens when there is none of it :p. Thanks for the fix!</p>\n<p>As for the other issues:</p>\n<ul>\n<li>I'll investigate the sample rate of the PCIe-6738. Perhaps it is a bug in DAQmx that it is over-reported, or perhaps we're using it wrong (perhaps confusion between single channel sample rate vs per channel sample rate). If it is just a bug to be fixed with a manual override like this, then I'll do something like make a <code>capabilties_overrides.json</code> that will be merged with the introspected capabilities.</li>\n<li>I should be able to reproduce the digital output issue with a simulated device here at NIST. The most unusual thing about that device that jumps out at me is that the number of lines on port 0 is so small, and is not a multiple of 8. I've seen another device &lt; 8 lines on a port, but it was the last port. So that's something different. It seems the DAQmx API works interchangeably with sending individual ones and zeros as uint8s as we're doing in manual mode, or with packing ones and zeros into integer datatypes as we're doing in buffered mode. But there is no 2-bit integer datatype, uint8 is the minimum. So I wonder if some internal conversion to integer datatypes has the DAQmx API confused. Not sure why it is saying that the data is \"99\".</li>\n<li>Ah, I had put some effort into waits, so that's a shame that they're not working. Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on (via labconfig) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status. Biggest suspect for waits not working is incorrect detection of whether the card supports 'incomplete sample detection'. I may be able to look into this as there is a PCIe-6363 around here.</li>\n</ul>\n<p>Edit: The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.</p>", "type": "rendered"}, "created_on": "2018-11-27T14:03:05.172003+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-27T16:45:44.586389+00:00", "type": "pullrequest_comment", "id": 83702984}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83766972.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83766972"}}, "parent": {"id": 83702984, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83702984.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83702984"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "> The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices \\(I forget which\\) where we had control over the PFIs in manual mode.\n\n1. Even though it\u2019s been this way for some time, any modality of inputs/outputs between buffered and manual mode is undesirable.\n2. There is at least one way in which a digital line / PFI can change state during an experiment shot that is not reflected in the device tab after `transition_to_manual`. The `final_values` returned by `program_buffered_DO` \\([blacs\\_workers.py](#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT172)\\) do not account for changes to a wait `timeout_monitor` output. This is the source of a gotchya in the @monashbec , whereby the wait timeout trigger is a PFI line and `wait_trigger_type='falling'`. There's a bootstrapping problem whereby the default value of this output is low, leading to the master psuedoclock \\(a PulseBlaster\\) executing its pulse program indefinitely.\n\n    * In the event that a shot with a wait does get executed \\(despite the PulseBlaster not being in a well defined state prior to the shot\\), the wait timeout trigger may go high \\(trigger rearm state written [here](#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT839) in `start_tasks`\\) but this is not reflected on the device tab after the shot. \\(Thus it is not saved in the blacs front panel and the problem will return upon relaunching blacs.\\)\n    * Changing the output of the timeout trigger to high in manual mode and restarting the PulseBlaster ensures the system is in a well defined \\(static\\) state.\n    \n\nI wonder if we can remedy these issues \\(1: inputs never being outputs and vice versa, and 2: device tab reflects physical state of all outputs after a shot\\) in this PR.", "markup": "markdown", "html": "<blockquote>\n<p>The code working even when a line is a clock input makes sense, as it is only being configured as an output in manual mode. It will be an input in buffered mode. I guess it's bad manners to potentially be putting a voltage across the PulseBlaster's clock output, but this is how it has been set up so far for at least one of our devices (I forget which) where we had control over the PFIs in manual mode.</p>\n</blockquote>\n<ol>\n<li>Even though it\u2019s been this way for some time, any modality of inputs/outputs between buffered and manual mode is undesirable.</li>\n<li>\n<p>There is at least one way in which a digital line / PFI can change state during an experiment shot that is not reflected in the device tab after <code>transition_to_manual</code>. The <code>final_values</code> returned by <code>program_buffered_DO</code> (<a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT172\" rel=\"nofollow\">blacs_workers.py</a>) do not account for changes to a wait <code>timeout_monitor</code> output. This is the source of a gotchya in the @monashbec , whereby the wait timeout trigger is a PFI line and <code>wait_trigger_type='falling'</code>. There's a bootstrapping problem whereby the default value of this output is low, leading to the master psuedoclock (a PulseBlaster) executing its pulse program indefinitely.</p>\n<ul>\n<li>In the event that a shot with a wait does get executed (despite the PulseBlaster not being in a well defined state prior to the shot), the wait timeout trigger may go high (trigger rearm state written <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/56/universal-ni-daqmx-support/diff#LNI_DAQmx/blacs_workers.pyT839\" rel=\"nofollow\">here</a> in <code>start_tasks</code>) but this is not reflected on the device tab after the shot. (Thus it is not saved in the blacs front panel and the problem will return upon relaunching blacs.)</li>\n<li>Changing the output of the timeout trigger to high in manual mode and restarting the PulseBlaster ensures the system is in a well defined (static) state.</li>\n</ul>\n</li>\n</ol>\n<p>I wonder if we can remedy these issues (1: inputs never being outputs and vice versa, and 2: device tab reflects physical state of all outputs after a shot) in this PR.</p>", "type": "rendered"}, "created_on": "2018-11-27T21:33:14.306488+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2018-11-27T22:10:18.805154+00:00", "type": "pullrequest_comment", "id": 83766972}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/84918937.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-84918937"}}, "parent": {"id": 83702984, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83702984.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83702984"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "\u200c\n\n> Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on \\(via labconfig\\) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status.\n\nThe wait completes, even in the event of timeout. Some observations:\n\n* The `wait_monitor_worker` completes `wait_monitor` \\(reporting \u2018All waits finished\u2019\\).\n* The `wait_monitor_worker` never begins `transition_to_manual`, and thus never runs `wait_durations_analysed.post()`.\n* The `acquisition_worker` subsequently hangs on the `wait_durations_analysed.wait()` call in `extract_measurements` \\(during `transition_to_manual`\\). \n\nOn a related note, calls to `zprocess.Event.wait()` should ultimately time out by specifying a reasonable timeout value.", "markup": "markdown", "html": "<p>\u200c</p>\n<blockquote>\n<p>Sounds like maybe the acquisition worker isn't getting the zprocess event from the wait monitor worker indicating that waits are processed. If you're going to debug this further, if you turn on (via labconfig) the progress bar plugin for BLACS, it should indicate whether it's getting stuck on a wait - the progress bar also listens for zprocess events from the wait monitor in order to display waiting status.</p>\n</blockquote>\n<p>The wait completes, even in the event of timeout. Some observations:</p>\n<ul>\n<li>The <code>wait_monitor_worker</code> completes <code>wait_monitor</code> (reporting \u2018All waits finished\u2019).</li>\n<li>The <code>wait_monitor_worker</code> never begins <code>transition_to_manual</code>, and thus never runs <code>wait_durations_analysed.post()</code>.</li>\n<li>The <code>acquisition_worker</code> subsequently hangs on the <code>wait_durations_analysed.wait()</code> call in <code>extract_measurements</code> (during <code>transition_to_manual</code>). </li>\n</ul>\n<p>On a related note, calls to <code>zprocess.Event.wait()</code> should ultimately time out by specifying a reasonable timeout value.</p>", "type": "rendered"}, "created_on": "2018-12-07T09:51:20.119928+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2018-12-07T09:51:20.132443+00:00", "type": "pullrequest_comment", "id": 84918937}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83735302.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83735302"}}, "parent": {"id": 83671312, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83671312.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83671312"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "The PXI-6738 documentation says:\n\n\"You can achieve the maximum sample rate if using up to eight channels, where each channel is on a separate bank.\"\n\nIt has 32 AOs, so presumably a 'bank' is a block of four consecutive AOs. We can put that check in, but I'll have a quick think about where a device-specific check like this should go, or if it's something more general whether it can be introspected, similarly to how there are separate `max_AI_multi_chan_rate` and `max_AI_single_chan_rate` capabilities.", "markup": "markdown", "html": "<p>The PXI-6738 documentation says:</p>\n<p>\"You can achieve the maximum sample rate if using up to eight channels, where each channel is on a separate bank.\"</p>\n<p>It has 32 AOs, so presumably a 'bank' is a block of four consecutive AOs. We can put that check in, but I'll have a quick think about where a device-specific check like this should go, or if it's something more general whether it can be introspected, similarly to how there are separate <code>max_AI_multi_chan_rate</code> and <code>max_AI_single_chan_rate</code> capabilities.</p>", "type": "rendered"}, "created_on": "2018-11-27T16:52:44.798747+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-27T16:52:44.821557+00:00", "type": "pullrequest_comment", "id": 83735302}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83742900.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83742900"}}, "parent": {"id": 83671312, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83671312.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83671312"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "The DO issue with the PXIe-6738 looks like it might be trying to write data from uninitialised memory to the device. The value listed in the error for me is variously 252, 111, 44, and a decent fraction of the time, there is no error (I suppose random memory  is more likely to contain zeros than other values?). So that looks like some random byte from memory. I'd check if the last two binary digits are the values I was actually trying to input to port0, but I can't get the bug to reproduce reliably (presumably because that part of memory is more likely to contain valid values the more the code is run?).\n\nDespite your observation, I'm not sure I buy that the bug depends on whether `'/<MAX_name>/port1/line0:7'` is included, for me it seems probabilistic, presumably based on the values in the uninitialised memory. After restarting BLACS a few times, I'm no longer seeing the error at all, which is a little annoying for trying to debug.", "markup": "markdown", "html": "<p>The DO issue with the PXIe-6738 looks like it might be trying to write data from uninitialised memory to the device. The value listed in the error for me is variously 252, 111, 44, and a decent fraction of the time, there is no error (I suppose random memory  is more likely to contain zeros than other values?). So that looks like some random byte from memory. I'd check if the last two binary digits are the values I was actually trying to input to port0, but I can't get the bug to reproduce reliably (presumably because that part of memory is more likely to contain valid values the more the code is run?).</p>\n<p>Despite your observation, I'm not sure I buy that the bug depends on whether <code>'/&lt;MAX_name&gt;/port1/line0:7'</code> is included, for me it seems probabilistic, presumably based on the values in the uninitialised memory. After restarting BLACS a few times, I'm no longer seeing the error at all, which is a little annoying for trying to debug.</p>", "type": "rendered"}, "created_on": "2018-11-27T17:50:55.759643+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-27T17:50:55.771250+00:00", "type": "pullrequest_comment", "id": 83742900}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83775084.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83775084"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Additional issue: the `_check_digitals_do_something` function, that helps sidestep a bug in DAQmx, makes it tricky to compile connection tables, since generally speaking the outputs in connection tables don't do anything. Perhaps this check should be moved to run-time. Not ideal, but maybe the best move.", "markup": "markdown", "html": "<p>Additional issue: the <code>_check_digitals_do_something</code> function, that helps sidestep a bug in DAQmx, makes it tricky to compile connection tables, since generally speaking the outputs in connection tables don't do anything. Perhaps this check should be moved to run-time. Not ideal, but maybe the best move.</p>", "type": "rendered"}, "created_on": "2018-11-27T23:03:58.779276+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-27T23:03:58.788351+00:00", "type": "pullrequest_comment", "id": 83775084}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83779881.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83779881"}}, "parent": {"id": 83775084, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/83775084.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-83775084"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Yes, this requires adding some dummy instructions for at least one `DigitalOut` \\(or subclass\\) per parent device, in the connection table Python script. This isn't so tricky, but perhaps the requirement could be circumvented with a compilation flag?", "markup": "markdown", "html": "<p>Yes, this requires adding some dummy instructions for at least one <code>DigitalOut</code> (or subclass) per parent device, in the connection table Python script. This isn't so tricky, but perhaps the requirement could be circumvented with a compilation flag?</p>", "type": "rendered"}, "created_on": "2018-11-28T00:20:53.726974+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2018-11-28T00:32:20.407238+00:00", "type": "pullrequest_comment", "id": 83779881}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89379618.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89379618"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Some fixes have been pushed.\n\nThese are:\n\n* Ensuring arrays passed to DAQmx  are contiguous in memory.\n* Explicitly configuring the output buffer size prior to writing buffered digital data, to avoid multiple writes confusing DAQmx about buffer sizes even though all the write calls had the same npts. \n* Avoiding using `WriteDigitalLines` in favour of `WriteDigitalU32` for manual mode to workaround the issue discussed above where `program_manual` was failing sometimes for ports with <8 lines.\n* Avoiding using `WriteDigitalU8` and `WriteDigitalU16` in favour of `WriteDigitalU32` for buffered mode, to work around a bug where some boards reject `WriteDigitalU8` say, even though the port size is 8. I'm under the impression `WriteDigitalU32` should always work even for ports narrower than 32 bits, that it uses the least-significant bits only up to the port size. But it would be nice if anyone could test that this actually produces output on the correct channel, say, that toggling port1/line0 in manual mode works on a device with a port0 of width < 32. I can test at NIST once the US government re-opens.\n* `NI_DAQmxAcquisitionWorker.transition_to_manual` was returning `False` when there were no acquisitions, which means failure and caused a spurious crash. It now returns True.\n* A fix for the waits issue. It was caused by calls to `transition_to_manual` for multiple workers of a single device being called in *serial*. So `NI_DAQmxAcquisitionWorker.transition_to_manual` was running before `NI_DAQmxWaitMonitorWorker.transition_to_manual`, but the former is waiting on the latter to process wait durations, so it is a deadlock. The order they are called is set by the order the workers were created in the BLACS tab `__init__` method. I can see that that order reversed when I re-wrote the code. It's a bit unappealing for this to be what it depends on, but I've just switched the order back again for now. Perhaps we can make BLACS call them in parallel in the future.", "markup": "markdown", "html": "<p>Some fixes have been pushed.</p>\n<p>These are:</p>\n<ul>\n<li>Ensuring arrays passed to DAQmx  are contiguous in memory.</li>\n<li>Explicitly configuring the output buffer size prior to writing buffered digital data, to avoid multiple writes confusing DAQmx about buffer sizes even though all the write calls had the same npts. </li>\n<li>Avoiding using <code>WriteDigitalLines</code> in favour of <code>WriteDigitalU32</code> for manual mode to workaround the issue discussed above where <code>program_manual</code> was failing sometimes for ports with &lt;8 lines.</li>\n<li>Avoiding using <code>WriteDigitalU8</code> and <code>WriteDigitalU16</code> in favour of <code>WriteDigitalU32</code> for buffered mode, to work around a bug where some boards reject <code>WriteDigitalU8</code> say, even though the port size is 8. I'm under the impression <code>WriteDigitalU32</code> should always work even for ports narrower than 32 bits, that it uses the least-significant bits only up to the port size. But it would be nice if anyone could test that this actually produces output on the correct channel, say, that toggling port1/line0 in manual mode works on a device with a port0 of width &lt; 32. I can test at NIST once the US government re-opens.</li>\n<li><code>NI_DAQmxAcquisitionWorker.transition_to_manual</code> was returning <code>False</code> when there were no acquisitions, which means failure and caused a spurious crash. It now returns True.</li>\n<li>A fix for the waits issue. It was caused by calls to <code>transition_to_manual</code> for multiple workers of a single device being called in <em>serial</em>. So <code>NI_DAQmxAcquisitionWorker.transition_to_manual</code> was running before <code>NI_DAQmxWaitMonitorWorker.transition_to_manual</code>, but the former is waiting on the latter to process wait durations, so it is a deadlock. The order they are called is set by the order the workers were created in the BLACS tab <code>__init__</code> method. I can see that that order reversed when I re-wrote the code. It's a bit unappealing for this to be what it depends on, but I've just switched the order back again for now. Perhaps we can make BLACS call them in parallel in the future.</li>\n</ul>", "type": "rendered"}, "created_on": "2019-01-25T17:37:11.573085+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-01-25T17:58:48.900359+00:00", "type": "pullrequest_comment", "id": 89379618}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89416902.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89416902"}}, "parent": {"id": 89379618, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89379618.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89379618"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Tested up to 5572db on monashspinor. Can confirm that waits now work.\nTested shots with a WaitMonitor in the connection table, with and without a\nwait instruction. Analog acquisition occurred before the single wait\ninstruction.", "markup": "markdown", "html": "<p>Tested up to 5572db on monashspinor. Can confirm that waits now work.\nTested shots with a WaitMonitor in the connection table, with and without a\nwait instruction. Analog acquisition occurred before the single wait\ninstruction.</p>", "type": "rendered"}, "created_on": "2019-01-26T20:10:07.604459+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-01-26T20:10:10.677014+00:00", "type": "pullrequest_comment", "id": 89416902}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89415952.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89415952"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Fix pushed for the issue where checking that digital outs are not all zero prevents compiling a connection table.\n\nI've now changed it so that if digital outs are all zero, the DO task is simply run as if they were static outputs. So this works around the issue without the user having to add dummy instructions. The only downside is that static outputs are set up in software time at the start of the shot, so if the front panel had a DO on and it is off during the shot, it will turn off in software time prior to the master clock starting. I don't think this is much of an issue but am happy to be convinced otherwise.\n\nAlso the previous fixes had bugs that I've resolved upon some testing. More testing appreciated, as I have only been able to test with simulated devices so far.\n\nRemaining issues (not necessarily blocking getting this merged, but for the sake of keeping track):\n\n* Modality of inputs/outputs. Can we make the clock input and wait monitor input not be configured as outputs during manual mode, even though their ports are added to the output task? I'm not sure how to proceed with this one, since the ports are treated as a whole in order to avoid using WriteDigitalLines and avoid bugs discussed upthread. But worth looking into.\n\n* Update the front panel at the end of a shot to have the wait monitor timeout trigger be in its unarmed state. This should be relatively simple.\n\n* Include a quirk for the max AO rate of the PXI-6738 depending on exactly which AO channels are in use. Will probably just add an if statement to the relevant code in the main class rather than trying to do anything with the subclass. Despite looking like poor form to add a special case, I think this could be a sustainable way to add model-specific quirks, even though it looks like a good use-case for implementing things in subclasses. I don't think it is actually suitable for going the object-oriented route since there is not necessarily going to be a hierarchy that determines which quirks different devices need. ", "markup": "markdown", "html": "<p>Fix pushed for the issue where checking that digital outs are not all zero prevents compiling a connection table.</p>\n<p>I've now changed it so that if digital outs are all zero, the DO task is simply run as if they were static outputs. So this works around the issue without the user having to add dummy instructions. The only downside is that static outputs are set up in software time at the start of the shot, so if the front panel had a DO on and it is off during the shot, it will turn off in software time prior to the master clock starting. I don't think this is much of an issue but am happy to be convinced otherwise.</p>\n<p>Also the previous fixes had bugs that I've resolved upon some testing. More testing appreciated, as I have only been able to test with simulated devices so far.</p>\n<p>Remaining issues (not necessarily blocking getting this merged, but for the sake of keeping track):</p>\n<ul>\n<li>\n<p>Modality of inputs/outputs. Can we make the clock input and wait monitor input not be configured as outputs during manual mode, even though their ports are added to the output task? I'm not sure how to proceed with this one, since the ports are treated as a whole in order to avoid using WriteDigitalLines and avoid bugs discussed upthread. But worth looking into.</p>\n</li>\n<li>\n<p>Update the front panel at the end of a shot to have the wait monitor timeout trigger be in its unarmed state. This should be relatively simple.</p>\n</li>\n<li>\n<p>Include a quirk for the max AO rate of the PXI-6738 depending on exactly which AO channels are in use. Will probably just add an if statement to the relevant code in the main class rather than trying to do anything with the subclass. Despite looking like poor form to add a special case, I think this could be a sustainable way to add model-specific quirks, even though it looks like a good use-case for implementing things in subclasses. I don't think it is actually suitable for going the object-oriented route since there is not necessarily going to be a hierarchy that determines which quirks different devices need. </p>\n</li>\n</ul>", "type": "rendered"}, "created_on": "2019-01-26T17:53:38.603906+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-01-26T17:54:45.111758+00:00", "type": "pullrequest_comment", "id": 89415952}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89623498.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/cbillington/labscript_devices:2b4ad8422d09..b2aecf92d620?path=NI_DAQmx%2Flabscript_devices.py"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89623498"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "This raises`ValueError: unsupported format character '(' (0x28) at index 10`.  How about just\n\n```python\nmsg = f\"{output.description} {output.name} can only have\" + \\\n    f\"values between {vmin:e} and {vmax:e} Volts, the limit imposed by {self.name}\"\n```", "markup": "markdown", "html": "<p>This raises<code>ValueError: unsupported format character '(' (0x28) at index 10</code>.  How about just</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"s2\">&quot;{output.description} {output.name} can only have&quot;</span> <span class=\"o\">+</span> \\\n    <span class=\"n\">f</span><span class=\"s2\">&quot;values between {vmin:e} and {vmax:e} Volts, the limit imposed by {self.name}&quot;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2019-01-29T09:33:36.184165+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "inline": {"to": 288, "from": null, "path": "NI_DAQmx/labscript_devices.py"}, "updated_on": "2019-01-29T09:33:36.204714+00:00", "type": "pullrequest_comment", "id": 89623498}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89623758.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89623758"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "SUT observed a bug in the message construction of `_check_bounds`\\(see below\\).", "markup": "markdown", "html": "<p>SUT observed a bug in the message construction of <code>_check_bounds</code>(see below).</p>", "type": "rendered"}, "created_on": "2019-01-29T09:34:51.393803+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-01-29T09:34:51.402474+00:00", "type": "pullrequest_comment", "id": 89623758}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89668888.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89668888"}}, "parent": {"id": 89623758, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89623758.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89623758"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Thanks! Fixed. Was just a silly mistake, but staying  away from the `f\"\"` strings for now to retain Python 2 compatibility.", "markup": "markdown", "html": "<p>Thanks! Fixed. Was just a silly mistake, but staying  away from the <code>f\"\"</code> strings for now to retain Python 2 compatibility.</p>", "type": "rendered"}, "created_on": "2019-01-29T13:49:30.512066+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-01-29T13:49:30.528786+00:00", "type": "pullrequest_comment", "id": 89668888}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/89754765.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-89754765"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "I've pushed a fix for updating the wait timeout line at the end of a shot. It's not tested (commit 35c392b286db), but is pretty simple so any errors will probably be trivial.", "markup": "markdown", "html": "<p>I've pushed a fix for updating the wait timeout line at the end of a shot. It's not tested (commit <a href=\"#!/labscript_suite/labscript_devices/commits/35c392b286db\" rel=\"nofollow\" class=\"ap-connect-link\">35c392b286db</a>), but is pretty simple so any errors will probably be trivial.</p>", "type": "rendered"}, "created_on": "2019-01-30T01:34:24.951033+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-01-30T01:34:24.959885+00:00", "type": "pullrequest_comment", "id": 89754765}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/90502753.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-90502753"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "As far as I know, we are at feature parity with the existing classes for this one, and there are no known bugs that do not also exist in the old classes. So this is getting close to being mergeable.\n\nAny chance for testing at Monash, @shjohnst or @lincolndturner ?", "markup": "markdown", "html": "<p>As far as I know, we are at feature parity with the existing classes for this one, and there are no known bugs that do not also exist in the old classes. So this is getting close to being mergeable.</p>\n<p>Any chance for testing at Monash, @shjohnst or @lincolndturner ?</p>", "type": "rendered"}, "created_on": "2019-02-05T16:17:26.077065+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-05T16:17:26.128383+00:00", "type": "pullrequest_comment", "id": 90502753}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/95836681.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-95836681"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "The last update works fine for us for PCI\\_6713 and PCI\\_6251. NI\\_6534 has a problem when seting up the DO channels.\n\nThe error message is the following:  \n\n```\nException in worker - Thu Mar 21, 09:11:56 :\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py\", line 55, in init\r\n    self.start_manual_mode_tasks()\r\n  File \"C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py\", line 114, in start_manual_mode_tasks\r\n    self.DO_task.StartTask()\r\n  File \"<string>\", line 3, in StartTask\r\n  File \"<string>\", line 2, in function\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\PyDAQmx\\DAQmxFunctions.py\", line 62, in mafunction\r\n    raise exception_class(errBuff.value.decode(\"utf-8\"), f.__name__)\r\nPyDAQmx.DAQmxFunctions.InvalidChannelError: Channel is not in the task, and the channel is not a valid global channel.\r\n\r\nMake sure that the channel is in the task or that the channel is a valid global channel. If you explicitly named the virtual channel in DAQmx Create Channel, you must use the name assigned to that channel. Also, check for typing errors.\r\nTask Name: _unnamedTask<0>\r\n\r\nStatus Code: -200087\r\n in function DAQmxStartTask\n```\n\nI had a look in our current NI\\_DAQmx class from @PhyNerd and he initialised the DO\\_channels like this:\n\n```\n# TODO: Currently labscript only supports one DO port, easy to add more\r\n        # by passing a suitable structure of DO ports\r\n        # I verified above that num['num_DO'] is a factor of 8\r\n        for i in range(self.num['num_ports_DO']):\r\n            for j in range(self.num['num_DO']//self.num['num_ports_DO']//8):\r\n                self.do_task.CreateDOChan(self.MAX_name+\"/port%d/line%d:%d\"%(i, 8*j, 8*j+7),\"\", DAQmx_Val_ChanForAllLines)\r\n\r\n        # currently do not allow direct access to PFI ports.  In the future can refer to NU_USB6346 code for an example\n```\n\nAs we pass in our NI\\_DAQmx class the number of DO ports by hand \\(num\\_DO\\_ports =4\\) and we encountered yesterday that automatically 6 ports are found I thought that this is maybe causing the problem, so I removed the two extra ports in the model-file but this did not change anything. I suspect this is because the port settings are stored somewhere else aswell as before and after the change blacs shows 5 ports in the tab \\(port 0-3 and port 5\\).", "markup": "markdown", "html": "<p>The last update works fine for us for PCI_6713 and PCI_6251. NI_6534 has a problem when seting up the DO channels.</p>\n<p>The error message is the following:  </p>\n<div class=\"codehilite\"><pre><span></span>Exception in worker - Thu Mar 21, 09:11:56 :\nTraceback (most recent call last):\n  File &quot;C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py&quot;, line 55, in init\n    self.start_manual_mode_tasks()\n  File &quot;C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py&quot;, line 114, in start_manual_mode_tasks\n    self.DO_task.StartTask()\n  File &quot;&lt;string&gt;&quot;, line 3, in StartTask\n  File &quot;&lt;string&gt;&quot;, line 2, in function\n  File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\PyDAQmx\\DAQmxFunctions.py&quot;, line 62, in mafunction\n    raise exception_class(errBuff.value.decode(&quot;utf-8&quot;), f.__name__)\nPyDAQmx.DAQmxFunctions.InvalidChannelError: Channel is not in the task, and the channel is not a valid global channel.\n\nMake sure that the channel is in the task or that the channel is a valid global channel. If you explicitly named the virtual channel in DAQmx Create Channel, you must use the name assigned to that channel. Also, check for typing errors.\nTask Name: _unnamedTask&lt;0&gt;\n\nStatus Code: -200087\n in function DAQmxStartTask\n</pre></div>\n\n\n<p>I had a look in our current NI_DAQmx class from @PhyNerd and he initialised the DO_channels like this:</p>\n<div class=\"codehilite\"><pre><span></span># TODO: Currently labscript only supports one DO port, easy to add more\n        # by passing a suitable structure of DO ports\n        # I verified above that num[&#39;num_DO&#39;] is a factor of 8\n        for i in range(self.num[&#39;num_ports_DO&#39;]):\n            for j in range(self.num[&#39;num_DO&#39;]//self.num[&#39;num_ports_DO&#39;]//8):\n                self.do_task.CreateDOChan(self.MAX_name+&quot;/port%d/line%d:%d&quot;%(i, 8*j, 8*j+7),&quot;&quot;, DAQmx_Val_ChanForAllLines)\n\n        # currently do not allow direct access to PFI ports.  In the future can refer to NU_USB6346 code for an example\n</pre></div>\n\n\n<p>As we pass in our NI_DAQmx class the number of DO ports by hand (num_DO_ports =4) and we encountered yesterday that automatically 6 ports are found I thought that this is maybe causing the problem, so I removed the two extra ports in the model-file but this did not change anything. I suspect this is because the port settings are stored somewhere else aswell as before and after the change blacs shows 5 ports in the tab (port 0-3 and port 5).</p>", "type": "rendered"}, "created_on": "2019-03-21T08:28:18.508414+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-03-21T08:28:18.679358+00:00", "type": "pullrequest_comment", "id": 95836681}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/95906134.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-95906134"}}, "parent": {"id": 95836681, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/95836681.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-95836681"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "I would have suspected the same thing, and I\u2019m not sure why your fix \\(modifying the subclass\u2019s capabilities dict to exclude ports 4 and 5\\), would not have worked. I\u2019ll see if I can reproduce the issue with a simulated device.\n\nAh, to be clear, the capabilities are stored both in capabilities.json and NI\\_PCI\\_6534.py. The former is used to generate the latter. So modifying NI\\_PCI\\_6534.py is what you would want to do to test your theory.\n\n\u200c", "markup": "markdown", "html": "<p>I would have suspected the same thing, and I\u2019m not sure why your fix (modifying the subclass\u2019s capabilities dict to exclude ports 4 and 5), would not have worked. I\u2019ll see if I can reproduce the issue with a simulated device.</p>\n<p>Ah, to be clear, the capabilities are stored both in capabilities.json and NI_PCI_6534.py. The former is used to generate the latter. So modifying NI_PCI_6534.py is what you would want to do to test your theory.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-03-21T15:07:56.722751+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-21T15:10:26.042584+00:00", "type": "pullrequest_comment", "id": 95906134}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/95920777.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-95920777"}}, "parent": {"id": 95836681, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/95836681.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-95836681"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Try the most recent commit - this one ignores ports that have zero lines when setting up the manual mode tasks. Works for me with a simulated device, in manual mode at least.", "markup": "markdown", "html": "<p>Try the most recent commit - this one ignores ports that have zero lines when setting up the manual mode tasks. Works for me with a simulated device, in manual mode at least.</p>", "type": "rendered"}, "created_on": "2019-03-21T16:18:24.650134+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-21T16:18:24.671848+00:00", "type": "pullrequest_comment", "id": 95920777}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/96896208.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-96896208"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Thanks for that update. Due to a conference it took some time for testing, so here are my results:\n\nAll cards initialize now.\n\nFor the NI\\_6534: It is working fine down to the minimum pulse length of 100ns. Also restarting the tab and reinitialising works fine\n\nFor the NI\\_6713: Outputs work fine; Timing is also okay but there is this problem with \u201c4 samples per channel\u201d poping up depending on my code \\( which makes sense :smiley: \\).\n\nFor NI\\_6251: get capabilities finds 2 Anaolog Outputs and port 0 to 2 with 8 Digital outs each but this card has 16 analog ins which are not found.", "markup": "markdown", "html": "<p>Thanks for that update. Due to a conference it took some time for testing, so here are my results:</p>\n<p>All cards initialize now.</p>\n<p>For the NI_6534: It is working fine down to the minimum pulse length of 100ns. Also restarting the tab and reinitialising works fine</p>\n<p>For the NI_6713: Outputs work fine; Timing is also okay but there is this problem with \u201c4 samples per channel\u201d poping up depending on my code ( which makes sense <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f603.png\" alt=\"\ud83d\ude03\" title=\":smiley:\" data-emoji-short-name=\":smiley:\" /> ).</p>\n<p>For NI_6251: get capabilities finds 2 Anaolog Outputs and port 0 to 2 with 8 Digital outs each but this card has 16 analog ins which are not found.</p>", "type": "rendered"}, "created_on": "2019-03-29T10:47:58.291630+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-03-29T10:47:58.368293+00:00", "type": "pullrequest_comment", "id": 96896208}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/96942607.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-96942607"}}, "parent": {"id": 96896208, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/96896208.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-96896208"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Sry, I think I was a littlebit wrong: for the 6251, the AI\u2019s are found. Usually the AO values were shown in our setup in the tab of the 6251-card. Now this is not the case anymore but I just checked: The values are saved, so the card and the communication with it work fine.", "markup": "markdown", "html": "<p>Sry, I think I was a littlebit wrong: for the 6251, the AI\u2019s are found. Usually the AO values were shown in our setup in the tab of the 6251-card. Now this is not the case anymore but I just checked: The values are saved, so the card and the communication with it work fine.</p>", "type": "rendered"}, "created_on": "2019-03-29T15:33:03.610412+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-03-29T15:33:03.686271+00:00", "type": "pullrequest_comment", "id": 96942607}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/96950195.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-96950195"}}, "parent": {"id": 96942607, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/96942607.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-96942607"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Excellent. So they are just not showing up because the manual-mode analog input pull request from your group hasn\u2019t been merged into mainline yet, whereas you were presumably using it previously. I will get it merged at some point and modify this driver to use it, and then the AI widgets will reappear.\n\nGood to hear everything else is working.\n\nI\u2019m not sure it is worth trying to do anything about the number of samples needing to be a multiple of four. This is pretty tricky given labscript\u2019s design, and is not a requirement for all but the oldest NI DAQ devices. But if it is something you want to automate jsut for your lab, there are hacky ways to do it that might be worth putting in your own setup, but I would be hesitant to make the change to mainline labscript. Basically you would modify the pseudoclock\u2019s collect\\_change\\_times method to modify the change times to be a multiple of four by inserting extra ones, perhaps at the end \\(but before the final instruction\\). But then it\u2019s up to you to make sure this doesn\u2019t violate any timing requirements. Only the pseudoclock controlling that DAQmx device would need the change.\n\n\u200c\n\nEdit: actually it\u2019s not even that simple because collect\\_change\\_times hasn\u2019t expanded ramps yet. This is a hard problem and maybe not worth solving!", "markup": "markdown", "html": "<p>Excellent. So they are just not showing up because the manual-mode analog input pull request from your group hasn\u2019t been merged into mainline yet, whereas you were presumably using it previously. I will get it merged at some point and modify this driver to use it, and then the AI widgets will reappear.</p>\n<p>Good to hear everything else is working.</p>\n<p>I\u2019m not sure it is worth trying to do anything about the number of samples needing to be a multiple of four. This is pretty tricky given labscript\u2019s design, and is not a requirement for all but the oldest NI DAQ devices. But if it is something you want to automate jsut for your lab, there are hacky ways to do it that might be worth putting in your own setup, but I would be hesitant to make the change to mainline labscript. Basically you would modify the pseudoclock\u2019s collect_change_times method to modify the change times to be a multiple of four by inserting extra ones, perhaps at the end (but before the final instruction). But then it\u2019s up to you to make sure this doesn\u2019t violate any timing requirements. Only the pseudoclock controlling that DAQmx device would need the change.</p>\n<p>\u200c</p>\n<p>Edit: actually it\u2019s not even that simple because collect_change_times hasn\u2019t expanded ramps yet. This is a hard problem and maybe not worth solving!</p>", "type": "rendered"}, "created_on": "2019-03-29T16:23:07.211720+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-29T17:13:26.263843+00:00", "type": "pullrequest_comment", "id": 96950195}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/97032466.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-97032466"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Okay, then I see where I have to go deeper into the code \\(or leave it as it is :smiley: \\)to solve things. Thanks.", "markup": "markdown", "html": "<p>Okay, then I see where I have to go deeper into the code (or leave it as it is <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f603.png\" alt=\"\ud83d\ude03\" title=\":smiley:\" data-emoji-short-name=\":smiley:\" /> )to solve things. Thanks.</p>", "type": "rendered"}, "created_on": "2019-04-01T07:07:57.363705+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-04-01T07:07:57.422718+00:00", "type": "pullrequest_comment", "id": 97032466}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/100434369.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-100434369"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "I am currently testing this PR in our second lab. We there use the PCIe\\_6351 AI-card. Getting the capabilities was no problem and also Blacs works fine with it. However, when compiling the first script with runmanager I encountered a problem: It says that the update delays for the pulseblaster are to short. The script is the same as before which but I think I found the problem: In the capabilities of the NI-card it says that the start delay is 70ns. Depending on the pulse sequence this can result in a error as it is now multiple of PB\u2019s 50ns clock.\n\nLooking in our old NI\\_class I think we just did not specify and therefore not use this delay.\n\nAs a quick fix I tried to change the AI\\_start\\_delay in the models/NI\\_6351.py-file to e.g. 100ns but this did not help. Moving the pulses in our script a bit, compiling works and with runviewer it is shown that there is a rising edge on the AI\\_clockline at 2.02us which then causes a problem when having a 2us pulse at the beginning, as we have.\n\nAre there any ideas how to fix it in general? A not so nice fix is to implement a waiting time of some us at the beginning. ", "markup": "markdown", "html": "<p>I am currently testing this PR in our second lab. We there use the PCIe_6351 AI-card. Getting the capabilities was no problem and also Blacs works fine with it. However, when compiling the first script with runmanager I encountered a problem: It says that the update delays for the pulseblaster are to short. The script is the same as before which but I think I found the problem: In the capabilities of the NI-card it says that the start delay is 70ns. Depending on the pulse sequence this can result in a error as it is now multiple of PB\u2019s 50ns clock.</p>\n<p>Looking in our old NI_class I think we just did not specify and therefore not use this delay.</p>\n<p>As a quick fix I tried to change the AI_start_delay in the models/NI_6351.py-file to e.g. 100ns but this did not help. Moving the pulses in our script a bit, compiling works and with runviewer it is shown that there is a rising edge on the AI_clockline at 2.02us which then causes a problem when having a 2us pulse at the beginning, as we have.</p>\n<p>Are there any ideas how to fix it in general? A not so nice fix is to implement a waiting time of some us at the beginning. </p>", "type": "rendered"}, "created_on": "2019-04-30T10:01:35.268183+00:00", "user": {"display_name": "Lars Kohfahl", "uuid": "{14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D"}, "html": {"href": "https://bitbucket.org/%7B14b59397-cbc0-4d8c-8a4a-fe99fb4d2d4a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/630642264cd55e22515678a3a0489ac7d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLK-2.png"}}, "nickname": "lkohfahl", "type": "user", "account_id": "5aafc5d11396802a57aa7f3b"}, "updated_on": "2019-04-30T10:01:35.381960+00:00", "type": "pullrequest_comment", "id": 100434369}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/102016219.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-102016219"}}, "parent": {"id": 100434369, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/100434369.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-100434369"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Hi lars, apologies for the slow reply. This AI start delay is not related to instructions generated on any devices, it is only about how the analog acquisition data is interpreted later. So I don't think it is the problem.\n\nIt sounds like you are the victim of a timing bug in labscript. Could you post the exact error message you get, or perhaps a script that demonstrates the problem?", "markup": "markdown", "html": "<p>Hi lars, apologies for the slow reply. This AI start delay is not related to instructions generated on any devices, it is only about how the analog acquisition data is interpreted later. So I don't think it is the problem.</p>\n<p>It sounds like you are the victim of a timing bug in labscript. Could you post the exact error message you get, or perhaps a script that demonstrates the problem?</p>", "type": "rendered"}, "created_on": "2019-05-14T18:48:53.956081+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-14T18:48:53.971358+00:00", "type": "pullrequest_comment", "id": 102016219}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/102016254.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-102016254"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Note to self, hit this minor bug on shutdown:\n```\n2019-05-14 14:43:00,808 ERROR BLACS.NI_USB_6229_0_acquisition_worker.worker: Exception in job:\nTraceback (most recent call last):\n  File \"C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py\", line 439, in shutdown\n    self.stop_task()\n  File \"C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py\", line 520, in stop_task\n    if len(self.buffered_chans) and self.task is None:\nTypeError: object of type 'NoneType' has no len()\n```", "markup": "markdown", "html": "<p>Note to self, hit this minor bug on shutdown:</p>\n<div class=\"codehilite\"><pre><span></span>2019-05-14 14:43:00,808 ERROR BLACS.NI_USB_6229_0_acquisition_worker.worker: Exception in job:\nTraceback (most recent call last):\n  File &quot;C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py&quot;, line 439, in shutdown\n    self.stop_task()\n  File &quot;C:\\labscript_suite\\labscript_devices\\NI_DAQmx\\blacs_workers.py&quot;, line 520, in stop_task\n    if len(self.buffered_chans) and self.task is None:\nTypeError: object of type &#39;NoneType&#39; has no len()\n</pre></div>", "type": "rendered"}, "created_on": "2019-05-14T18:49:12.365289+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-14T18:49:12.375172+00:00", "type": "pullrequest_comment", "id": 102016254}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/102223628.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-102223628"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "By the way, if anyone is wondering why this isn't merged yet, it's because BLACS' `transition_to_manual` is still serialised, i.e. one device at a time, and this creates a deadlock if an NI DAQmx device doing analog input is waiting for information about waits from another NI DAQmx device. This is the case at Monash, and although the bug exists in the existing classes, dictionaries in Python 2 have an arbitrary order and so merging this code could cause a deadlock on Monash's setups that just so happen to have an arbitrary order that presently works.\n\nSo this will be merged once [BLACS PR #47](#!/labscript_suite/blacs/pull-requests/47/deserialise-transition_to_manual/diff) or something equivalent is merged, which is on my list of things to do.", "markup": "markdown", "html": "<p>By the way, if anyone is wondering why this isn't merged yet, it's because BLACS' <code>transition_to_manual</code> is still serialised, i.e. one device at a time, and this creates a deadlock if an NI DAQmx device doing analog input is waiting for information about waits from another NI DAQmx device. This is the case at Monash, and although the bug exists in the existing classes, dictionaries in Python 2 have an arbitrary order and so merging this code could cause a deadlock on Monash's setups that just so happen to have an arbitrary order that presently works.</p>\n<p>So this will be merged once <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/47/deserialise-transition_to_manual/diff\" rel=\"nofollow\">BLACS PR #47</a> or something equivalent is merged, which is on my list of things to do.</p>", "type": "rendered"}, "created_on": "2019-05-16T03:38:10.991093+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-16T03:38:36.136847+00:00", "type": "pullrequest_comment", "id": 102223628}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments/104182009.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56/_/diff#comment-104182009"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 56, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}}, "title": "Universal NI DAQmx support"}, "content": {"raw": "Now that BLACS's transition_to_manual is deserialised, I'll merge this.\n\nWill tag BLACS with a version number for the deserialisation and have labscript devices depend on it.\n\nThanks for everyone who tested and helped find issues with this!", "markup": "markdown", "html": "<p>Now that BLACS's transition_to_manual is deserialised, I'll merge this.</p>\n<p>Will tag BLACS with a version number for the deserialisation and have labscript devices depend on it.</p>\n<p>Thanks for everyone who tested and helped find issues with this!</p>", "type": "rendered"}, "created_on": "2019-06-01T17:19:09.600010+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-01T17:19:09.628348+00:00", "type": "pullrequest_comment", "id": 104182009}], "page": 1, "size": 34}