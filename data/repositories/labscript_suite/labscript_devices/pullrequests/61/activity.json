{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/comments/104306304.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61/_/diff#comment-104306304"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}, "content": {"raw": "The scope is a TDS2000 series. We're downloading 2500 points per channel times 4 channels, and it takes 1.5 seconds (over USB 2).\n\nThat seems super slow. I haven't looked into it but makes me think something is misconfigured if it is that slow!", "markup": "markdown", "html": "<p>The scope is a TDS2000 series. We're downloading 2500 points per channel times 4 channels, and it takes 1.5 seconds (over USB 2).</p>\n<p>That seems super slow. I haven't looked into it but makes me think something is misconfigured if it is that slow!</p>", "type": "rendered"}, "created_on": "2019-06-03T15:30:45.300097+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-03T15:30:45.310804+00:00", "type": "pullrequest_comment", "id": 104306304}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-02T17:17:14.994398+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-02T17:17:14.019657+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/comments/104192348.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61/_/diff#comment-104192348"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}, "content": {"raw": "Sweet, makes sense! I'll get the scope model and download time on Monday and let you know about it, as I don't know off the top of my head.\n\nWill merge this for now, thanks!", "markup": "markdown", "html": "<p>Sweet, makes sense! I'll get the scope model and download time on Monday and let you know about it, as I don't know off the top of my head.</p>\n<p>Will merge this for now, thanks!</p>", "type": "rendered"}, "created_on": "2019-06-02T17:17:09.264672+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-02T17:17:09.271105+00:00", "type": "pullrequest_comment", "id": 104192348}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/comments/104184390.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61/_/diff#comment-104184390"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}, "content": {"raw": "Thanks for testing. What scope are you using, how many points are being transferred per shot, and how long does this take?\n\n> I'm not seeing any options for configuring channels in the labscript device class, is this as-of-yet unimplemented?\n\nSorry, this was vaporware! I\u2019ve acknowledged as much with the latest commit \\(TODO on [this line](#!/labscript_suite/labscript_devices/pull-requests/61/tektronix-oscilloscope/diff#LTekScope/blacs_workers.pyT33)\\). Happy to merge and add this later.", "markup": "markdown", "html": "<p>Thanks for testing. What scope are you using, how many points are being transferred per shot, and how long does this take?</p>\n<blockquote>\n<p>I'm not seeing any options for configuring channels in the labscript device class, is this as-of-yet unimplemented?</p>\n</blockquote>\n<p>Sorry, this was vaporware! I\u2019ve acknowledged as much with the latest commit (TODO on <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/61/tektronix-oscilloscope/diff#LTekScope/blacs_workers.pyT33\" rel=\"nofollow\">this line</a>). Happy to merge and add this later.</p>", "type": "rendered"}, "created_on": "2019-06-02T00:09:24.791695+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-06-02T00:09:24.799434+00:00", "type": "pullrequest_comment", "id": 104184390}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-06-02T00:07:02.585142+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-06-02T00:06:14.685230+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-06-02T00:06:14.397885+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/comments/104182359.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61/_/diff#comment-104182359"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}, "content": {"raw": "We've been using this as the following:\n\n```python\nTekScope(name='MOT_scope', addr='USB0::0x0699::0x03A4::C043076::INSTR', preamble_string='WFMP')\n```\nand it is working well. However, we typically comment it out of the connection table to avoid having to a) pay the cost of download time every shot or b) have to reconfigure the scope to not acquire when we don't want it to.\n\nYou mentioned:\n\n>  5 . Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\n\nHow would we go about doing this? I'm not seeing any options for configuring channels in the labscript device class, is this as-of-yet unimplemented?\n\nOtherwise seems to be working, so I'm inclined to merge and have any changes added later since they will no doubt be backward compatible additions of functionality.", "markup": "markdown", "html": "<p>We've been using this as the following:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">TekScope</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;MOT_scope&#39;</span><span class=\"p\">,</span> <span class=\"n\">addr</span><span class=\"o\">=</span><span class=\"s1\">&#39;USB0::0x0699::0x03A4::C043076::INSTR&#39;</span><span class=\"p\">,</span> <span class=\"n\">preamble_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;WFMP&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and it is working well. However, we typically comment it out of the connection table to avoid having to a) pay the cost of download time every shot or b) have to reconfigure the scope to not acquire when we don't want it to.</p>\n<p>You mentioned:</p>\n<blockquote>\n<p>5 . Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.</p>\n</blockquote>\n<p>How would we go about doing this? I'm not seeing any options for configuring channels in the labscript device class, is this as-of-yet unimplemented?</p>\n<p>Otherwise seems to be working, so I'm inclined to merge and have any changes added later since they will no doubt be backward compatible additions of functionality.</p>", "type": "rendered"}, "created_on": "2019-06-01T18:13:10.345970+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-01T18:13:10.357468+00:00", "type": "pullrequest_comment", "id": 104182359}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "39d35ea35028", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/39d35ea35028"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/39d35ea35028"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-04-16T11:39:47.236697+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "66135a4f6547", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/66135a4f6547.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/66135a4f6547"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f878fa2ba4e9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/f878fa2ba4e9"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/f878fa2ba4e9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-03-10T05:30:26.941949+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "66135a4f6547", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/66135a4f6547.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/66135a4f6547"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8f487c84b910", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/8f487c84b910"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/8f487c84b910"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-03-09T05:32:23.234301+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @martijnj's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* @dtrypo\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "66135a4f6547", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/66135a4f6547.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/66135a4f6547"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8f487c84b910", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/8f487c84b910"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/8f487c84b910"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-03-09T05:29:11.686263+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}, {"update": {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @martijnj's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* @dtrypo\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. Configures the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "title": "Tektronix oscilloscope", "destination": {"commit": {"hash": "66135a4f6547", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/66135a4f6547.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/66135a4f6547"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8f487c84b910", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/8f487c84b910"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/8f487c84b910"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-03-09T05:29:11.626381+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}}, "title": "Tektronix oscilloscope"}}]}