{"rendered": {"description": {"raw": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "markup": "markdown", "html": "<p>This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.</p>\n<p>It includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.</p>\n<p>Once remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.</p>\n<p>The code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python &lt; 3.6 saying so, since the version check is in <code>__init__.py</code> before the opportunity for SyntaxErrors in other source files.</p>\n<p>The BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.</p>\n<p>This device addresses issues <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a> and <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>, it raises an exception during <code>transition_to_manual</code> if it can't stop the acquisition thread within the timeout.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a>, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the <code>imaqdx_attributes</code> keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.</p>\n<p>The existing Camera device conflates trigger duration with exposure time - labscript <em>does</em> need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an <code>exposure_time</code> keyword argument - instead it has a <code>trigger_duration</code> keyword argument and leaves configuration of exposure up to the user via setting <code>imaqdx_attributes</code>. </p>\n<p>In order to not assume names of attributes that should be <em>saved</em> to the HDF5 file, this code simply saves <em>all</em> attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.</p>\n<p>Setting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to <code>stop_time + 5</code> seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the <code>grab</code> function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.</p>\n<p>I also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. </p>\n<p>I also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.</p>\n<p>The <code>expose()</code> method re-orders arguments so that <code>t</code> is first, in line with (almost?) all other labscript functions and methods that take a <code>t</code> argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.</p>\n<p>These changes depend on <a href=\"#!/labscript_suite/labscript_devices/pull-requests/45/resolve-issue-26\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #45</a>, so I'll do some version tagging and add a version check to this code once that is merged.</p>\n<p>I'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.</p>", "type": "rendered"}, "title": {"raw": "IMAQdxCamera", "markup": "markdown", "html": "<p>IMAQdxCamera</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:ab5dc8e458ac%0D11f64baed78b?from_pullrequest_id=63"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:ab5dc8e458ac%0D11f64baed78b?from_pullrequest_id=63"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/statuses_page=1.json"}}, "title": "IMAQdxCamera", "close_source_branch": true, "reviewers": [{"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}], "id": 63, "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-04-08T19:39:48.213858+00:00", "summary": {"raw": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "markup": "markdown", "html": "<p>This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.</p>\n<p>It includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.</p>\n<p>Once remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.</p>\n<p>The code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python &lt; 3.6 saying so, since the version check is in <code>__init__.py</code> before the opportunity for SyntaxErrors in other source files.</p>\n<p>The BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.</p>\n<p>This device addresses issues <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a> and <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>, it raises an exception during <code>transition_to_manual</code> if it can't stop the acquisition thread within the timeout.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a>, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the <code>imaqdx_attributes</code> keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.</p>\n<p>The existing Camera device conflates trigger duration with exposure time - labscript <em>does</em> need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an <code>exposure_time</code> keyword argument - instead it has a <code>trigger_duration</code> keyword argument and leaves configuration of exposure up to the user via setting <code>imaqdx_attributes</code>. </p>\n<p>In order to not assume names of attributes that should be <em>saved</em> to the HDF5 file, this code simply saves <em>all</em> attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.</p>\n<p>Setting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to <code>stop_time + 5</code> seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the <code>grab</code> function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.</p>\n<p>I also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. </p>\n<p>I also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.</p>\n<p>The <code>expose()</code> method re-orders arguments so that <code>t</code> is first, in line with (almost?) all other labscript functions and methods that take a <code>t</code> argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.</p>\n<p>These changes depend on <a href=\"#!/labscript_suite/labscript_devices/pull-requests/45/resolve-issue-26\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #45</a>, so I'll do some version tagging and add a version check to this code once that is merged.</p>\n<p>I'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.</p>", "type": "rendered"}, "source": {"commit": {"hash": "71e45ceeda5c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/71e45ceeda5c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/71e45ceeda5c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-04-17T05:43:00.917746+00:00", "type": "participant", "approved": true, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "PARTICIPANT", "participated_on": "2019-04-23T21:30:45.239987+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "", "updated_on": "2019-05-01T19:53:47.506865+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ab5dc8e458ac", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ab5dc8e458ac.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ab5dc8e458ac"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}