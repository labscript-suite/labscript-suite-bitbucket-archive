{"pagelen": 50, "values": [{"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "71e45ceeda5c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/71e45ceeda5c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/71e45ceeda5c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T19:53:47.521886+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "71e45ceeda5c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/71e45ceeda5c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/71e45ceeda5c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T19:53:46.465753+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "71e45ceeda5c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/71e45ceeda5c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/71e45ceeda5c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T19:50:27.797515+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2b604ad98cef", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/2b604ad98cef"}, "html": {"href": "#!/cbillington/labscript_devices/commits/2b604ad98cef"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T19:39:17.003701+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ec048f623999", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/ec048f623999"}, "html": {"href": "#!/cbillington/labscript_devices/commits/ec048f623999"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2019-04-28T02:03:12.275320+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "09660d7c4d33", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/09660d7c4d33"}, "html": {"href": "#!/cbillington/labscript_devices/commits/09660d7c4d33"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-26T19:20:19.325616+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "50ef79f4269b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/50ef79f4269b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/50ef79f4269b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-25T20:46:50.254931+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "31043a505e34", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/31043a505e34"}, "html": {"href": "#!/cbillington/labscript_devices/commits/31043a505e34"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-25T20:05:28.973171+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1e4410ffc109", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/1e4410ffc109"}, "html": {"href": "#!/cbillington/labscript_devices/commits/1e4410ffc109"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-24T20:35:57.302860+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99732324.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99732324"}}, "parent": {"id": 99594828, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99594828.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99594828"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "Thanks Russ, I\u2019m pretty happy with it too, but since I\u2019m going to be using it in the coming days I\u2019ll wait to see if any bugs come up before merging.", "markup": "markdown", "html": "<p>Thanks Russ, I\u2019m pretty happy with it too, but since I\u2019m going to be using it in the coming days I\u2019ll wait to see if any bugs come up before merging.</p>", "type": "rendered"}, "created_on": "2019-04-23T21:30:45.231281+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-23T21:30:45.239987+00:00", "type": "pullrequest_comment", "id": 99732324}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4e1c9e7a8ccb", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/4e1c9e7a8ccb"}, "html": {"href": "#!/cbillington/labscript_devices/commits/4e1c9e7a8ccb"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-23T18:54:23.784137+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99594828.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99594828"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "I\u2019m happy to merge as is pending review of the UI features, but this is would be better done by someone who has a camera to test with.", "markup": "markdown", "html": "<p>I\u2019m happy to merge as is pending review of the UI features, but this is would be better done by someone who has a camera to test with.</p>", "type": "rendered"}, "created_on": "2019-04-23T06:50:43.234681+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-23T06:50:43.248201+00:00", "type": "pullrequest_comment", "id": 99594828}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99173457.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99173457"}}, "parent": {"id": 99069771, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99069771.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99069771"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "Cool, serial number it is.\n\nI don\u2019t think not setting the timeout is a regression: it used to be shot\\_duration plus 5 seconds unless the user sets it otherwise, now it\u2019s 5 seconds unless the user sets it otherwise. In either case for a failed acquisition a timeout will occur within or at 5 seconds of the end of the shot, which will allow the abort\\(\\) to run. User-visible behaviour is the same, except that with the 5 second timeout an abort can also be performed earlier.\n\nAh, a pertinent bit of info that could be causing a misunderstanding is that all attributes are reset to defaults at the start of each IMAQdx session \\(i.e. when BLACS starts\\) - this means we can be sure that the timeout is 5 seconds unless the user has explicitly set it otherwise in the current connection table \\(or changed it in NI MAX and saved it as a new default\\).  A possible issue is that if the user sets attributes on a shot-by-shot basis \\(currently allowed, but no good syntax for it in labscript since they are instantiation arguments\\), then attributes set on previous shots, but not specified for later shots, will retain their earlier values leading to ordering effects in running shots. To solve this, I think there is a reset function - I would guess that would set all the attributes back to default. Might be worth running that during transition\\_to\\_manual, so long as it is not as slow as initiating communication with the camera in the first place \\(which takes several seconds\\). If that works how I think it does, then we could be perfectly sure that each shot runs exactly as specified without any non-default settings from previous shots remaining.", "markup": "markdown", "html": "<p>Cool, serial number it is.</p>\n<p>I don\u2019t think not setting the timeout is a regression: it used to be shot_duration plus 5 seconds unless the user sets it otherwise, now it\u2019s 5 seconds unless the user sets it otherwise. In either case for a failed acquisition a timeout will occur within or at 5 seconds of the end of the shot, which will allow the abort() to run. User-visible behaviour is the same, except that with the 5 second timeout an abort can also be performed earlier.</p>\n<p>Ah, a pertinent bit of info that could be causing a misunderstanding is that all attributes are reset to defaults at the start of each IMAQdx session (i.e. when BLACS starts) - this means we can be sure that the timeout is 5 seconds unless the user has explicitly set it otherwise in the current connection table (or changed it in NI MAX and saved it as a new default).  A possible issue is that if the user sets attributes on a shot-by-shot basis (currently allowed, but no good syntax for it in labscript since they are instantiation arguments), then attributes set on previous shots, but not specified for later shots, will retain their earlier values leading to ordering effects in running shots. To solve this, I think there is a reset function - I would guess that would set all the attributes back to default. Might be worth running that during transition_to_manual, so long as it is not as slow as initiating communication with the camera in the first place (which takes several seconds). If that works how I think it does, then we could be perfectly sure that each shot runs exactly as specified without any non-default settings from previous shots remaining.</p>", "type": "rendered"}, "created_on": "2019-04-17T15:32:00.277984+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-17T15:32:00.289864+00:00", "type": "pullrequest_comment", "id": 99173457}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"approval": {"date": "2019-04-17T05:43:00.917746+00:00", "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99069771.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99069771"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "If you\u2019re seeking a single way of identifying the camera, it makes marginally more sense to use the long-standing convention of the serial number, i.e. the one used by other camera classes.\n\nRegarding timeouts, I was only referring to the case of an actual acquisition timeout event. It seems like a regression to not set a well-informed timeout \\(even one less than the shot duration\\), but in the interest of simplicity, this is fine.  ", "markup": "markdown", "html": "<p>If you\u2019re seeking a single way of identifying the camera, it makes marginally more sense to use the long-standing convention of the serial number, i.e. the one used by other camera classes.</p>\n<p>Regarding timeouts, I was only referring to the case of an actual acquisition timeout event. It seems like a regression to not set a well-informed timeout (even one less than the shot duration), but in the interest of simplicity, this is fine.  </p>", "type": "rendered"}, "created_on": "2019-04-17T05:42:56.815443+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-17T05:42:56.822271+00:00", "type": "pullrequest_comment", "id": 99069771}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99058052.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99058052"}}, "parent": {"id": 98969650, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/98969650.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-98969650"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "Ah, I forgot to reply about timeouts.\n\nFor the case of a successful shot  where all expected images are acquired, the end of the shot is not delayed because the grab\\(\\) function is not called again after the final image is acquired. All a long timeout has the potential to do is get you stuck in that function, but since the loop knows how many images there will be, it doesn\u2019t call the function again so it can\u2019t get stuck. \n\nIf something fails and not all images are acquired, then yes, responding the abort\\(\\) at the end could be delayed by up to the timeout. The timeout is by default 5 seconds, so that is pretty reasonable. If the user doesn\u2019t set it then failed shots will fail soon enough with an error.\n\nIf the user sets the timeout really high, then failed shots will hang with \u2018child process hasn\u2019t responded in x seconds' during `transition_to_manual`. So that\u2019s the only case of an unreasonable hang, but it only happens if they explicitly as for it!", "markup": "markdown", "html": "<p>Ah, I forgot to reply about timeouts.</p>\n<p>For the case of a successful shot  where all expected images are acquired, the end of the shot is not delayed because the grab() function is not called again after the final image is acquired. All a long timeout has the potential to do is get you stuck in that function, but since the loop knows how many images there will be, it doesn\u2019t call the function again so it can\u2019t get stuck. </p>\n<p>If something fails and not all images are acquired, then yes, responding the abort() at the end could be delayed by up to the timeout. The timeout is by default 5 seconds, so that is pretty reasonable. If the user doesn\u2019t set it then failed shots will fail soon enough with an error.</p>\n<p>If the user sets the timeout really high, then failed shots will hang with \u2018child process hasn\u2019t responded in x seconds' during <code>transition_to_manual</code>. So that\u2019s the only case of an unreasonable hang, but it only happens if they explicitly as for it!</p>", "type": "rendered"}, "created_on": "2019-04-17T01:40:47.716980+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-17T01:40:47.728177+00:00", "type": "pullrequest_comment", "id": 99058052}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "460c1c1b7fa4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/460c1c1b7fa4"}, "html": {"href": "#!/cbillington/labscript_devices/commits/460c1c1b7fa4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-16T20:36:51.622280+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99023834.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99023834"}}, "parent": {"id": 98969650, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/98969650.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-98969650"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "Thanks for reviewing!\n\nI have a preference for there being a single way of identifying the camera. Serial number is more definitive, but MAX\\_name is more human-friendly. I\u2019m happy with either, but would you be happy with just serial number rather than both?\n\nThe assertion was removed because values aren\u2019t limited to those options \\(they can be ints too!\\), and instead now we\u2019re raising the exception, whatever it is, along with some extra information:\n\n```python\ntry:\n    nv.IMAQdxSetAttribute(self.imaqdx, name.encode('utf8'), value)\nexcept Exception as e:\n    # Add some info to the exception:\n    msg = f\"failed to set attribute {name} to {value}\"\n    raise Exception(msg) from e\n```\n\nSo the user should see an error from NIVision as well as the name and value of the attribute it attempted to set, which is better than just an assertion on the type \\(which was prone to false negatives anyhow - just because it\u2019s one of the valid types doesn\u2019t mean its valid for this particular attribute\\). If we wanted to improve this we could explicitly get the type of the attribute and check that what the user passed in is valid. This is more complex than `isinstance()` though, since Enums can be passed in as strings _or_ ints, ints can be passed in instead of strings, that sort of thing. I\u2019d lean away from re-implementing the logic in NIVision for error checking, though we can revisit this if it turns out the error messages that results are consistently unhelpful.\n\nError handling for user-exposed functions is as the above - raise the error from NIVIsion, whatever it is along with extra information. Error handling has been removed for code that is used internally. I don\u2019t want get\\_attribute to return None for an attribute that doesn\u2019t exist - that should never happen, so it\u2019s a bug that should be visible, instead it will now crash noisily.\n\n`transition_to_buffered` not setting n\\_images to None seems fine to me - it is already None since it gets reset at the end of every shot and upon abort. `transition_to_manual` inspects `self.h5_filepath` instead to see if the camera was used this shot, and that one is similarly reset. I\u2019d rather not have redundant clearings of things that are supposed to already be cleared, this sort of redundancy can mask bugs that should be fixed properly if they exist.\n\n\u200c", "markup": "markdown", "html": "<p>Thanks for reviewing!</p>\n<p>I have a preference for there being a single way of identifying the camera. Serial number is more definitive, but MAX_name is more human-friendly. I\u2019m happy with either, but would you be happy with just serial number rather than both?</p>\n<p>The assertion was removed because values aren\u2019t limited to those options (they can be ints too!), and instead now we\u2019re raising the exception, whatever it is, along with some extra information:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">nv</span><span class=\"o\">.</span><span class=\"n\">IMAQdxSetAttribute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imaqdx</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Add some info to the exception:</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"s2\">&quot;failed to set attribute {name} to {value}&quot;</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n</pre></div>\n\n\n<p>So the user should see an error from NIVision as well as the name and value of the attribute it attempted to set, which is better than just an assertion on the type (which was prone to false negatives anyhow - just because it\u2019s one of the valid types doesn\u2019t mean its valid for this particular attribute). If we wanted to improve this we could explicitly get the type of the attribute and check that what the user passed in is valid. This is more complex than <code>isinstance()</code> though, since Enums can be passed in as strings <em>or</em> ints, ints can be passed in instead of strings, that sort of thing. I\u2019d lean away from re-implementing the logic in NIVision for error checking, though we can revisit this if it turns out the error messages that results are consistently unhelpful.</p>\n<p>Error handling for user-exposed functions is as the above - raise the error from NIVIsion, whatever it is along with extra information. Error handling has been removed for code that is used internally. I don\u2019t want get_attribute to return None for an attribute that doesn\u2019t exist - that should never happen, so it\u2019s a bug that should be visible, instead it will now crash noisily.</p>\n<p><code>transition_to_buffered</code> not setting n_images to None seems fine to me - it is already None since it gets reset at the end of every shot and upon abort. <code>transition_to_manual</code> inspects <code>self.h5_filepath</code> instead to see if the camera was used this shot, and that one is similarly reset. I\u2019d rather not have redundant clearings of things that are supposed to already be cleared, this sort of redundancy can mask bugs that should be fixed properly if they exist.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-16T18:25:10.635542+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-16T18:25:10.651806+00:00", "type": "pullrequest_comment", "id": 99023834}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/98969650.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-98969650"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "The code this class derives from permitted either the MAX name _or_ serial number be used \\(in various formats\\) to specify the camera. Why get rid of the latter? Using the MAX name is better aligned with how we instantiate NI-branded devices, but this represents a shift from the long-established option to identify cameras by their serial number. \n\nI agree with the reductions you\u2019ve explicitly mentioned above. In addition to these, there are some other omissions from imaqdx\\_server.py \\(pull request #48\\), and I wonder whether some/all of these were deliberate, too.\n\n* set\\_attribute missing assertion that isinstance\\(value, \\(bytes, str, float\\)\\).\n* ImaqDxError handling in get\\_attribute and get\\_attribute\\_options.\n\n\u2026 and IMAQdxCameraServer:\n\n* transition\\_to\\_buffered:\n\n    * set n\\_images to 0 or None if no exposures in current shot. Perhaps inconsequential.\n    \n\nRegarding the omission of introspecting the experiment shot duration and using this to inform the acquisition timeout, you mention that \u201cThere is no harm to timing out regularly throughout the shot\u201d and that \u201cmore frequent timeouts are better\u201d. But now the timeout is never set at all, so there\u2019s no guarantee that it\u2019s less than the experiment shot duration. If it\u2019s been set \\(inadvertently or by default\\) to a value longer than the experiment shot duration, wouldn\u2019t that delay shot completion in the event of a genuine timeout?\n\nCool idea to save all IMAQdx attributes to the shot file. I cannot test this as I don\u2019t presently have a camera.", "markup": "markdown", "html": "<p>The code this class derives from permitted either the MAX name <em>or</em> serial number be used (in various formats) to specify the camera. Why get rid of the latter? Using the MAX name is better aligned with how we instantiate NI-branded devices, but this represents a shift from the long-established option to identify cameras by their serial number. </p>\n<p>I agree with the reductions you\u2019ve explicitly mentioned above. In addition to these, there are some other omissions from imaqdx_server.py (<a href=\"#!/labscript_suite/labscript_devices/pull-requests/48/imaqdx-server\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #48</a>), and I wonder whether some/all of these were deliberate, too.</p>\n<ul>\n<li>set_attribute missing assertion that isinstance(value, (bytes, str, float)).</li>\n<li>ImaqDxError handling in get_attribute and get_attribute_options.</li>\n</ul>\n<p>\u2026 and IMAQdxCameraServer:</p>\n<ul>\n<li>\n<p>transition_to_buffered:</p>\n<ul>\n<li>set n_images to 0 or None if no exposures in current shot. Perhaps inconsequential.</li>\n</ul>\n</li>\n</ul>\n<p>Regarding the omission of introspecting the experiment shot duration and using this to inform the acquisition timeout, you mention that \u201cThere is no harm to timing out regularly throughout the shot\u201d and that \u201cmore frequent timeouts are better\u201d. But now the timeout is never set at all, so there\u2019s no guarantee that it\u2019s less than the experiment shot duration. If it\u2019s been set (inadvertently or by default) to a value longer than the experiment shot duration, wouldn\u2019t that delay shot completion in the event of a genuine timeout?</p>\n<p>Cool idea to save all IMAQdx attributes to the shot file. I cannot test this as I don\u2019t presently have a camera.</p>", "type": "rendered"}, "created_on": "2019-04-16T13:09:55.223439+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-04-16T13:09:55.246928+00:00", "type": "pullrequest_comment", "id": 98969650}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a2c334d59e60", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/a2c334d59e60"}, "html": {"href": "#!/cbillington/labscript_devices/commits/a2c334d59e60"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-12T20:19:01.887316+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "684511d965aa", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/684511d965aa"}, "html": {"href": "#!/cbillington/labscript_devices/commits/684511d965aa"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-10T22:53:43.430085+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "49297dd468f6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/49297dd468f6"}, "html": {"href": "#!/cbillington/labscript_devices/commits/49297dd468f6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-10T16:56:12.956925+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "27db3cebb11c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/27db3cebb11c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/27db3cebb11c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-10T00:30:47.496348+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c514a320184c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/c514a320184c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/c514a320184c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-08T19:40:11.376881+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1bd6bc1509e4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/1bd6bc1509e4"}, "html": {"href": "#!/cbillington/labscript_devices/commits/1bd6bc1509e4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-08T19:39:48.322498+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}, {"update": {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "title": "IMAQdxCamera", "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1bd6bc1509e4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/1bd6bc1509e4"}, "html": {"href": "#!/cbillington/labscript_devices/commits/1bd6bc1509e4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-08T19:39:48.230405+00:00"}, "pull_request": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}}]}