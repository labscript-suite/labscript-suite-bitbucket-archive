{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/99023834.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-99023834"}}, "parent": {"id": 98969650, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments/98969650.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63/_/diff#comment-98969650"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 63, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}}, "title": "IMAQdxCamera"}, "content": {"raw": "Thanks for reviewing!\n\nI have a preference for there being a single way of identifying the camera. Serial number is more definitive, but MAX\\_name is more human-friendly. I\u2019m happy with either, but would you be happy with just serial number rather than both?\n\nThe assertion was removed because values aren\u2019t limited to those options \\(they can be ints too!\\), and instead now we\u2019re raising the exception, whatever it is, along with some extra information:\n\n```python\ntry:\n    nv.IMAQdxSetAttribute(self.imaqdx, name.encode('utf8'), value)\nexcept Exception as e:\n    # Add some info to the exception:\n    msg = f\"failed to set attribute {name} to {value}\"\n    raise Exception(msg) from e\n```\n\nSo the user should see an error from NIVision as well as the name and value of the attribute it attempted to set, which is better than just an assertion on the type \\(which was prone to false negatives anyhow - just because it\u2019s one of the valid types doesn\u2019t mean its valid for this particular attribute\\). If we wanted to improve this we could explicitly get the type of the attribute and check that what the user passed in is valid. This is more complex than `isinstance()` though, since Enums can be passed in as strings _or_ ints, ints can be passed in instead of strings, that sort of thing. I\u2019d lean away from re-implementing the logic in NIVision for error checking, though we can revisit this if it turns out the error messages that results are consistently unhelpful.\n\nError handling for user-exposed functions is as the above - raise the error from NIVIsion, whatever it is along with extra information. Error handling has been removed for code that is used internally. I don\u2019t want get\\_attribute to return None for an attribute that doesn\u2019t exist - that should never happen, so it\u2019s a bug that should be visible, instead it will now crash noisily.\n\n`transition_to_buffered` not setting n\\_images to None seems fine to me - it is already None since it gets reset at the end of every shot and upon abort. `transition_to_manual` inspects `self.h5_filepath` instead to see if the camera was used this shot, and that one is similarly reset. I\u2019d rather not have redundant clearings of things that are supposed to already be cleared, this sort of redundancy can mask bugs that should be fixed properly if they exist.\n\n\u200c", "markup": "markdown", "html": "<p>Thanks for reviewing!</p>\n<p>I have a preference for there being a single way of identifying the camera. Serial number is more definitive, but MAX_name is more human-friendly. I\u2019m happy with either, but would you be happy with just serial number rather than both?</p>\n<p>The assertion was removed because values aren\u2019t limited to those options (they can be ints too!), and instead now we\u2019re raising the exception, whatever it is, along with some extra information:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">nv</span><span class=\"o\">.</span><span class=\"n\">IMAQdxSetAttribute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imaqdx</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf8&#39;</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Add some info to the exception:</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"s2\">&quot;failed to set attribute {name} to {value}&quot;</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n</pre></div>\n\n\n<p>So the user should see an error from NIVision as well as the name and value of the attribute it attempted to set, which is better than just an assertion on the type (which was prone to false negatives anyhow - just because it\u2019s one of the valid types doesn\u2019t mean its valid for this particular attribute). If we wanted to improve this we could explicitly get the type of the attribute and check that what the user passed in is valid. This is more complex than <code>isinstance()</code> though, since Enums can be passed in as strings <em>or</em> ints, ints can be passed in instead of strings, that sort of thing. I\u2019d lean away from re-implementing the logic in NIVision for error checking, though we can revisit this if it turns out the error messages that results are consistently unhelpful.</p>\n<p>Error handling for user-exposed functions is as the above - raise the error from NIVIsion, whatever it is along with extra information. Error handling has been removed for code that is used internally. I don\u2019t want get_attribute to return None for an attribute that doesn\u2019t exist - that should never happen, so it\u2019s a bug that should be visible, instead it will now crash noisily.</p>\n<p><code>transition_to_buffered</code> not setting n_images to None seems fine to me - it is already None since it gets reset at the end of every shot and upon abort. <code>transition_to_manual</code> inspects <code>self.h5_filepath</code> instead to see if the camera was used this shot, and that one is similarly reset. I\u2019d rather not have redundant clearings of things that are supposed to already be cleared, this sort of redundancy can mask bugs that should be fixed properly if they exist.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-04-16T18:25:10.635542+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-16T18:25:10.651806+00:00", "type": "pullrequest_comment", "id": 99023834}