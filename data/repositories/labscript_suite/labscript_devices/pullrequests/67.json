{"rendered": {"description": {"raw": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "markup": "markdown", "html": "<p>This PR fixes issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>. </p>\n<p>Rather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).</p>\n<p>For each clock tick, the high time is half the clock period if <code>pulse_width='symmetric'</code> (the default), the minimum possible if <code>pulse_width='minimum'</code>, or a fixed value if <code>pulse_width</code> is given as a number.</p>\n<p>The high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to <em>both</em> the high and low times of the clock ticks.</p>\n<p>The low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.</p>\n<p>If the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.</p>\n<p>Here are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.</p>\n<p><img alt=\"pulseblaster_pulses.png\" src=\"data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png\" /></p>", "type": "rendered"}, "title": {"raw": "Pulse width fixes (issue #33)", "markup": "markdown", "html": "<p>Pulse width fixes (issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>)</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:d61ada6ffa70%0D21cf797f0b6c?from_pullrequest_id=67"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:d61ada6ffa70%0D21cf797f0b6c?from_pullrequest_id=67"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/statuses_page=1.json"}}, "title": "Pulse width fixes (issue #33)", "close_source_branch": true, "reviewers": [{"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}], "id": 67, "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-05-15T21:59:58.674414+00:00", "summary": {"raw": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "markup": "markdown", "html": "<p>This PR fixes issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>. </p>\n<p>Rather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).</p>\n<p>For each clock tick, the high time is half the clock period if <code>pulse_width='symmetric'</code> (the default), the minimum possible if <code>pulse_width='minimum'</code>, or a fixed value if <code>pulse_width</code> is given as a number.</p>\n<p>The high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to <em>both</em> the high and low times of the clock ticks.</p>\n<p>The low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.</p>\n<p>If the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.</p>\n<p>Here are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.</p>\n<p><img alt=\"pulseblaster_pulses.png\" src=\"data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "d316d3b25452", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/d316d3b25452"}, "html": {"href": "#!/cbillington/labscript_devices/commits/d316d3b25452"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "PARTICIPANT", "participated_on": "2019-05-16T03:10:57.363564+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "", "updated_on": "2019-06-01T16:36:21.556251+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d61ada6ffa70", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/d61ada6ffa70.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/d61ada6ffa70"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}