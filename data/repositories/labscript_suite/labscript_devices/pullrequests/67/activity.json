{"pagelen": 50, "values": [{"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d316d3b25452", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/d316d3b25452"}, "html": {"href": "#!/cbillington/labscript_devices/commits/d316d3b25452"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T16:36:21.572362+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d316d3b25452", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/d316d3b25452"}, "html": {"href": "#!/cbillington/labscript_devices/commits/d316d3b25452"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-01T16:36:20.967829+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d316d3b25452", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/d316d3b25452"}, "html": {"href": "#!/cbillington/labscript_devices/commits/d316d3b25452"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T16:11:18.289933+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "bb29cf0ee1f6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/bb29cf0ee1f6"}, "html": {"href": "#!/cbillington/labscript_devices/commits/bb29cf0ee1f6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T16:07:51.102784+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T16:00:33.237200+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T16:00:00.021699+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T15:59:34.434818+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-20T15:58:39.995579+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-16T15:33:57.337666+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/comments/102222167.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67/_/diff#comment-102222167"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}, "content": {"raw": "With the following little script I've done a bit of testing:\n\n```python\nimport labscript_devices\nimport os\nimport numpy as np\nfrom labscript import *\nimport h5py\nfrom labscript_devices.PulseBlaster import PulseBlaster\nfrom labscript_devices.NovaTechDDS9M import NovaTechDDS9M\n\nimport matplotlib.pyplot as plt\n\ntests = []\nfor new in [True, False]:\n    for step in [15, 60, 150]:\n        tests.append({'pulse_width': 'symmetric', 'step': step, 'new': new})\n        tests.append({'pulse_width': 1e-3, 'step': step, 'new': new})\n        tests.append({'pulse_width': step * 2 / 3, 'step': step, 'new': new})\n\nfilenames = []\nfor test in tests:\n    step = test['step']\n    pulse_width = test['pulse_width']\n    new = test['new']\n    if new:\n        os.system(f'cd {os.path.dirname(labscript_devices.__file__)}; hg update 03aab267bf5b')\n    else:\n        os.system(f'cd {os.path.dirname(labscript_devices.__file__)}; hg update 49bf56369af4')\n\n    filename = f'pw-{pulse_width}-step-{step}.h5'\n    if new:\n        filename = filename.replace('.h5', '-new.h5')\n    filenames.append(filename)\n\n    labscript_init(filename, new=True, overwrite=True)\n    if pulse_width != 'symmetric':\n        kwargs = {'pulse_width': pulse_width}\n    else:\n        kwargs = {}\n\n    import sys\n    del sys.modules['labscript_devices.PulseBlaster']\n    from labscript_devices.PulseBlaster import PulseBlaster\n    PulseBlaster('pulseblaster',**kwargs)\n    ClockLine('clockline', pseudoclock=pulseblaster.pseudoclock, connection='flag 0')\n    NovaTechDDS9M('novatech', parent_device=clockline)\n    DDS('NTDDS', parent_device=novatech, connection='channel 1')\n\n    start()\n    t = 0\n    NTDDS.setamp(t, 1.0)\n    t += step\n    stop(step)\n    labscript_cleanup()\n\n\n    if not new:\n        plt.figure(figsize=(3,3))\n        title = test.copy()\n        del title['new']\n        pb_instructions = PulseBlaster.pb_instructions\n        new_filename = filename.replace('.h5', '-new.h5')\n        for fname in [filename, new_filename]:\n            signal = [(0,0)]\n            t = 0\n            plt.title(' '.join(f'{key}: {value}' for key, value in title.items()))\n            with h5py.File(fname) as f:\n                # Mini PB interpreter here\n                found_start = False\n                str_instructions = []\n                for inst in f['devices/pulseblaster/PULSE_PROGRAM']:\n                    if inst['inst'] == pb_instructions['LOOP']:\n                        found_start = True\n                    if not found_start:\n                        continue\n                    value = inst['flags'] & 1\n                    delay = inst['length'] / 1e9\n                    signal.append((t, value))\n                    if inst['inst'] == pb_instructions['LOOP']:\n                        str_instructions.append(f'LOOP: {round(delay, 3)}')\n                        t += delay\n                    elif inst['inst'] == pb_instructions['LONG_DELAY']:\n                        str_instructions.append(f\"LONG_DELAY: {inst['inst_data']} \u00d7 {round(delay, 3)}\")\n                        t += delay * inst['inst_data']\n                    elif inst['inst'] == pb_instructions['END_LOOP']:\n                        str_instructions.append(f'END_LOOP {round(delay, 3)}')\n                        t += delay\n                    signal.append((t, value))\n                    if inst['inst'] == pb_instructions['END_LOOP']:\n                        signal.append((t, 1))\n                        break\n                        \n            t, signal = zip(*signal)\n            if fname == filename:\n                signal = np.array(signal) + 1.5\n            plt.plot(t, signal, label='new' if fname == new_filename else 'old')\n            if fname == filename:\n                plt.figtext(0.3, 0.65, '\\n'.join(str_instructions))\n            else:\n                plt.figtext(0.3, 0.25, '\\n'.join(str_instructions))\n        plt.legend(loc='center right')\nplt.show()\n```\n\nThe results are:\n\n![pb15.png](data/bitbucket.org/repo/6AK7EM/images/1552455438-pb15.png)\n![pb60.png](data/bitbucket.org/repo/6AK7EM/images/1701869648-pb60.png)\n![pb150.png](data/bitbucket.org/repo/6AK7EM/images/355678582-pb150.png)\n\nYou can see the factor  of two appearing in the top row, where step=15s. The old code works for symmetric cases, but for none of the asymmetric cases, and the new code seems to work for both, and looks to behaving itself.\n\nI'll get this running in the two NIST labs and merge it if it seems to be going well.", "markup": "markdown", "html": "<p>With the following little script I've done a bit of testing:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">labscript_devices</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.NovaTechDDS9M</span> <span class=\"kn\">import</span> <span class=\"n\">NovaTechDDS9M</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">new</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">]:</span>\n    <span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]:</span>\n        <span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">&#39;pulse_width&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;symmetric&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">:</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new&#39;</span><span class=\"p\">:</span> <span class=\"n\">new</span><span class=\"p\">})</span>\n        <span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">&#39;pulse_width&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">:</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new&#39;</span><span class=\"p\">:</span> <span class=\"n\">new</span><span class=\"p\">})</span>\n        <span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">&#39;pulse_width&#39;</span><span class=\"p\">:</span> <span class=\"n\">step</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">:</span> <span class=\"n\">step</span><span class=\"p\">,</span> <span class=\"s1\">&#39;new&#39;</span><span class=\"p\">:</span> <span class=\"n\">new</span><span class=\"p\">})</span>\n\n<span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">test</span> <span class=\"ow\">in</span> <span class=\"n\">tests</span><span class=\"p\">:</span>\n    <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">[</span><span class=\"s1\">&#39;step&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">pulse_width</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">[</span><span class=\"s1\">&#39;pulse_width&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">[</span><span class=\"s1\">&#39;new&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">new</span><span class=\"p\">:</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s1\">&#39;cd {os.path.dirname(labscript_devices.__file__)}; hg update 03aab267bf5b&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s1\">&#39;cd {os.path.dirname(labscript_devices.__file__)}; hg update 49bf56369af4&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"s1\">&#39;pw-{pulse_width}-step-{step}.h5&#39;</span>\n    <span class=\"k\">if</span> <span class=\"n\">new</span><span class=\"p\">:</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.h5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-new.h5&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">filenames</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n    <span class=\"n\">labscript_init</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">pulse_width</span> <span class=\"o\">!=</span> <span class=\"s1\">&#39;symmetric&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;pulse_width&#39;</span><span class=\"p\">:</span> <span class=\"n\">pulse_width</span><span class=\"p\">}</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"k\">del</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"s1\">&#39;labscript_devices.PulseBlaster&#39;</span><span class=\"p\">]</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.PulseBlaster</span> <span class=\"kn\">import</span> <span class=\"n\">PulseBlaster</span>\n    <span class=\"n\">PulseBlaster</span><span class=\"p\">(</span><span class=\"s1\">&#39;pulseblaster&#39;</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">ClockLine</span><span class=\"p\">(</span><span class=\"s1\">&#39;clockline&#39;</span><span class=\"p\">,</span> <span class=\"n\">pseudoclock</span><span class=\"o\">=</span><span class=\"n\">pulseblaster</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 0&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">NovaTechDDS9M</span><span class=\"p\">(</span><span class=\"s1\">&#39;novatech&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">clockline</span><span class=\"p\">)</span>\n    <span class=\"n\">DDS</span><span class=\"p\">(</span><span class=\"s1\">&#39;NTDDS&#39;</span><span class=\"p\">,</span> <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">novatech</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;channel 1&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">NTDDS</span><span class=\"o\">.</span><span class=\"n\">setamp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">step</span>\n    <span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">step</span><span class=\"p\">)</span>\n    <span class=\"n\">labscript_cleanup</span><span class=\"p\">()</span>\n\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">new</span><span class=\"p\">:</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">del</span> <span class=\"n\">title</span><span class=\"p\">[</span><span class=\"s1\">&#39;new&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">pb_instructions</span> <span class=\"o\">=</span> <span class=\"n\">PulseBlaster</span><span class=\"o\">.</span><span class=\"n\">pb_instructions</span>\n        <span class=\"n\">new_filename</span> <span class=\"o\">=</span> <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;.h5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-new.h5&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">new_filename</span><span class=\"p\">]:</span>\n            <span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)]</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s1\">&#39;{key}: {value}&#39;</span> <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()))</span>\n            <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Mini PB interpreter here</span>\n                <span class=\"n\">found_start</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"n\">str_instructions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">inst</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;devices/pulseblaster/PULSE_PROGRAM&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pb_instructions</span><span class=\"p\">[</span><span class=\"s1\">&#39;LOOP&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">found_start</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">found_start</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;flags&#39;</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span>\n                    <span class=\"n\">delay</span> <span class=\"o\">=</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mf\">1e9</span>\n                    <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pb_instructions</span><span class=\"p\">[</span><span class=\"s1\">&#39;LOOP&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">str_instructions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s1\">&#39;LOOP: {round(delay, 3)}&#39;</span><span class=\"p\">)</span>\n                        <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">delay</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pb_instructions</span><span class=\"p\">[</span><span class=\"s1\">&#39;LONG_DELAY&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">str_instructions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s2\">&quot;LONG_DELAY: {inst[&#39;inst_data&#39;]} \u00d7 {round(delay, 3)}&quot;</span><span class=\"p\">)</span>\n                        <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">delay</span> <span class=\"o\">*</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst_data&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">elif</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pb_instructions</span><span class=\"p\">[</span><span class=\"s1\">&#39;END_LOOP&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">str_instructions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s1\">&#39;END_LOOP {round(delay, 3)}&#39;</span><span class=\"p\">)</span>\n                        <span class=\"n\">t</span> <span class=\"o\">+=</span> <span class=\"n\">delay</span>\n                    <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n                    <span class=\"k\">if</span> <span class=\"n\">inst</span><span class=\"p\">[</span><span class=\"s1\">&#39;inst&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">pb_instructions</span><span class=\"p\">[</span><span class=\"s1\">&#39;END_LOOP&#39;</span><span class=\"p\">]:</span>\n                        <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                        <span class=\"k\">break</span>\n\n            <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">signal</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">fname</span> <span class=\"o\">==</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n                <span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mf\">1.5</span>\n            <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;new&#39;</span> <span class=\"k\">if</span> <span class=\"n\">fname</span> <span class=\"o\">==</span> <span class=\"n\">new_filename</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;old&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">fname</span> <span class=\"o\">==</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n                <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figtext</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.65</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">str_instructions</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figtext</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">str_instructions</span><span class=\"p\">))</span>\n        <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;center right&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>The results are:</p>\n<p><img alt=\"pb15.png\" src=\"data/bitbucket.org/repo/6AK7EM/images/1552455438-pb15.png\" />\n<img alt=\"pb60.png\" src=\"data/bitbucket.org/repo/6AK7EM/images/1701869648-pb60.png\" />\n<img alt=\"pb150.png\" src=\"data/bitbucket.org/repo/6AK7EM/images/355678582-pb150.png\" /></p>\n<p>You can see the factor  of two appearing in the top row, where step=15s. The old code works for symmetric cases, but for none of the asymmetric cases, and the new code seems to work for both, and looks to behaving itself.</p>\n<p>I'll get this running in the two NIST labs and merge it if it seems to be going well.</p>", "type": "rendered"}, "created_on": "2019-05-16T03:08:32.243569+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-16T03:10:57.363564+00:00", "type": "pullrequest_comment", "id": 102222167}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-15T21:59:58.756030+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}, {"update": {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](https://bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "title": "Pulse width fixes (issue #33)", "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "03aab267bf5b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/03aab267bf5b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/03aab267bf5b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-15T21:59:58.693247+00:00"}, "pull_request": {"type": "pullrequest", "id": 67, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}}, "title": "Pulse width fixes (issue #33)"}}]}