{"pagelen": 50, "values": [{"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a55c08f1dc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/c2a55c08f1dc"}, "html": {"href": "#!/dihm/labscript_devices/commits/c2a55c08f1dc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-08T15:49:38.685129+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/105012399.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-105012399"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "Fantasic, thanks David! Merging.", "markup": "markdown", "html": "<p>Fantasic, thanks David! Merging.</p>", "type": "rendered"}, "created_on": "2019-06-08T15:48:48.268714+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-08T15:48:48.277066+00:00", "type": "pullrequest_comment", "id": 105012399}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"approval": {"date": "2019-06-08T10:45:03.540977+00:00", "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/105010227.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-105010227"}}, "parent": {"id": 104527014, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104527014.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104527014"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "Testing has gone OK, so I\u2019m ready to merge.", "markup": "markdown", "html": "<p>Testing has gone OK, so I\u2019m ready to merge.</p>", "type": "rendered"}, "created_on": "2019-06-08T10:44:58.975022+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-06-08T10:44:59.107108+00:00", "type": "pullrequest_comment", "id": 105010227}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/105010213.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-105010213"}}, "parent": {"id": 104510455, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104510455.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104510455"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "So I tried to reproduce both of these things and failed in both cases. I\u2019m willing to chalk them up to user error.\n\nOn the bright side, I was able to modify the grab method to speed up continuous acquisitions as a result of trying to reproduce things. We\u2019re topping out at 40 fps now.", "markup": "markdown", "html": "<p>So I tried to reproduce both of these things and failed in both cases. I\u2019m willing to chalk them up to user error.</p>\n<p>On the bright side, I was able to modify the grab method to speed up continuous acquisitions as a result of trying to reproduce things. We\u2019re topping out at 40 fps now.</p>", "type": "rendered"}, "created_on": "2019-06-08T10:43:37.495392+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-06-08T10:43:37.777387+00:00", "type": "pullrequest_comment", "id": 105010213}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2a55c08f1dc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/c2a55c08f1dc"}, "html": {"href": "#!/dihm/labscript_devices/commits/c2a55c08f1dc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-06-08T10:40:05.003778+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2247d0d00bde", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/2247d0d00bde"}, "html": {"href": "#!/dihm/labscript_devices/commits/2247d0d00bde"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-06-04T23:12:25.736437+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104527014.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104527014"}}, "parent": {"id": 104511961, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104511961.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104511961"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "I\u2019m just going to remove the pretense of Python 2 support. We had one last labscript system that was still running python 2 that I thought needed the support, but I just updated them instead.\n\nAs for merging, I want the other experiment to do a bit more soak testing with some real shots. Now that they are back from DAMOP, it hopefully won\u2019t be much of a wait.", "markup": "markdown", "html": "<p>I\u2019m just going to remove the pretense of Python 2 support. We had one last labscript system that was still running python 2 that I thought needed the support, but I just updated them instead.</p>\n<p>As for merging, I want the other experiment to do a bit more soak testing with some real shots. Now that they are back from DAMOP, it hopefully won\u2019t be much of a wait.</p>", "type": "rendered"}, "created_on": "2019-06-04T23:05:37.432442+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-06-04T23:05:37.572928+00:00", "type": "pullrequest_comment", "id": 104527014}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d9846586a728", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/d9846586a728"}, "html": {"href": "#!/dihm/labscript_devices/commits/d9846586a728"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-06-04T23:02:50.334147+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104511961.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104511961"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "As for the pull request itself, I will be happy to merge it whenever you are. Let me know what you think about Python 2 support, because if you want to support it I would need to remove all the f-strings from IMAQdxCamera (among other things).", "markup": "markdown", "html": "<p>As for the pull request itself, I will be happy to merge it whenever you are. Let me know what you think about Python 2 support, because if you want to support it I would need to remove all the f-strings from IMAQdxCamera (among other things).</p>", "type": "rendered"}, "created_on": "2019-06-04T20:09:34.276703+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-04T20:09:34.283994+00:00", "type": "pullrequest_comment", "id": 104511961}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104511407.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104511407"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "This is unnecessary since you are importing IMAQdxCameraWorker which does the check already.", "markup": "markdown", "html": "<p>This is unnecessary since you are importing IMAQdxCameraWorker which does the check already.</p>", "type": "rendered"}, "created_on": "2019-06-04T20:04:44.830632+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "inline": {}, "updated_on": "2019-06-04T20:04:44.838370+00:00", "type": "pullrequest_comment", "id": 104511407}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104511356.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104511356"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "I have made no attempt to make IMAQdxCamera compatible with Python 2, and it presently raises an error if imported on Python < 3.6. So making your code Python 2 compatible will require some more work, or will require me to remove Python-3 specific code from IMAQdxCamera. If you are not personally using Python 2, you might want to consider just not supporting it. It is end-of-life at the end of this year and I anticipate most new labscript code will not support it as of pretty soon.", "markup": "markdown", "html": "<p>I have made no attempt to make IMAQdxCamera compatible with Python 2, and it presently raises an error if imported on Python &lt; 3.6. So making your code Python 2 compatible will require some more work, or will require me to remove Python-3 specific code from IMAQdxCamera. If you are not personally using Python 2, you might want to consider just not supporting it. It is end-of-life at the end of this year and I anticipate most new labscript code will not support it as of pretty soon.</p>", "type": "rendered"}, "created_on": "2019-06-04T20:04:15.697035+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "inline": {}, "updated_on": "2019-06-04T20:04:15.706252+00:00", "type": "pullrequest_comment", "id": 104511356}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/104510455.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-104510455"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "Hi David,\n\n> Before I settled on the current method for getting continuous frames (which works fine), I tried another grab strategy where the camera produces frames as fast as possible and just updates the same output buffer which can be read or ignored depending on processing speed. This seemed fine in principle, but when the rate exceeded ~20fps the BLACS tab would completely lock up. Further testing seems to show the tab blocks all signals (including stopping continuous) while the continuous_loop() method proceeds to grab and send images to parent at high speed. The docstring for _send_image_to_parent claims it is blocking, but that doesn\u2019t seem to be the case. Am I missing something? Which thread is it supposed to be blocking?\n\n\nin the worker, `_send_image_to_parent()` waits for a response from the parent before returning, so that bit is blocking from its perspective (as opposed to just putting the image in the zeromq queue and continuing):\n\n```python\n        self.image_socket.send(image, copy=False)\n        response = self.image_socket.recv()\n        assert response == b'ok', response\n```\nIn the parent process, in `ImageReceiver.handler()`, the code that receives the image processes it and queues up a GUI callback (`ImageReceiver.update()`) to display it. That is nonblocking in that it calls `inmain_later()`, which does not wait for the GUI to run the callback before continuing. However, it only allows one unprocessed call to `ImageReceiver.update()` to be waiting to run at any one time:\n```python\n# Wait for the previous update to compete so we don't accumulate a backlog:\nif self.update_event is not None:\n    self.update_event.get()\n```\n\nSo if the child process calls `_send_image_to_parent()`, that should block such that the GUI is at most one frame behind and neither the zeromq queues or the GUI event loop accumulates a backlog of undisplayed frames.\n\nIf you had one thread writing to a buffer as fast as possible and another thread reading from the buffer and calling  `_send_image_to_parent()` in a loop, I am not sure why that would have locked BLACS up. It's possible the mechanism I've described has a bug, but there is not much code to look at and I don't see where I might have gone wrong. This mechanism does limit the frame rate for me - previously I could stop continuous acquisition and frames would continue to display for several seconds while it cleared the queue (zeromq would eventually block at about ~1000 messages, so the backlog was limited to about 1000 frames). But this would still not freeze BLACS. So it's a mystery to me what issue you were seeing there.\n\n\n> During testing, I obviously forgot to connect the trigger line for the first buffered shot and transition_to_manual timed out. This results in a seemingly unrelated error pop-up, the correct error shown in the tab, and BLACS getting stuck in \u201cError in transition to manual, Queue Paused\u201d mode where clearing the error and un-pausing does NOT resume shot execution. I\u2019m fairly certain it is not a bug with the present code, but I\u2019m not sure where the issue lies.\n\nThis sounds like a bug in the queue manager. After a failed shot, BLACS 'cleans' the HDF5 file, by making a copy without acquistiion data from the failed shot. Here you're seeing that the newly cleaned shot file, which is to be renamed over the top of the previous shot file,  apparently doesn't exist. Looking at the code,  it looks like if cleaning the HDF5 file fails, it just logs an error and continues (which is silly, there's no point suppressing the error if we have no way to recover from it). The code that cleans the shot file is:\n\n```python\n    def clean_h5_file(self, h5file, new_h5_file, repeat_number=0):\n        try:\n            with h5py.File(h5file,'r') as old_file:\n                with h5py.File(new_h5_file,'w') as new_file:\n                    groups_to_copy = ['devices', 'calibrations', 'script', 'globals', 'connection table', \n                                      'labscriptlib', 'waits', 'time_markers']\n                    for group in groups_to_copy:\n                        if group in old_file:\n                            new_file.copy(old_file[group], group)\n                    for name in old_file.attrs:\n                        new_file.attrs[name] = old_file.attrs[name]\n                    new_file.attrs['run repeat'] = repeat_number\n        except Exception as e:\n            #raise\n            self._logger.exception('Clean H5 File Error.')\n            return False\n```\n\nSo I would say something failed here. Either the old shot file didn't exist, or it raised an error upon being opened, or something like that. There aren't many things that could have gone wrong here by the looks of it. But if you can reproduce the problem reliably, if you uncomment that `raise` statement, then we will see what the actual error was.", "markup": "markdown", "html": "<p>Hi David,</p>\n<blockquote>\n<p>Before I settled on the current method for getting continuous frames (which works fine), I tried another grab strategy where the camera produces frames as fast as possible and just updates the same output buffer which can be read or ignored depending on processing speed. This seemed fine in principle, but when the rate exceeded ~20fps the BLACS tab would completely lock up. Further testing seems to show the tab blocks all signals (including stopping continuous) while the continuous_loop() method proceeds to grab and send images to parent at high speed. The docstring for _send_image_to_parent claims it is blocking, but that doesn\u2019t seem to be the case. Am I missing something? Which thread is it supposed to be blocking?</p>\n</blockquote>\n<p>in the worker, <code>_send_image_to_parent()</code> waits for a response from the parent before returning, so that bit is blocking from its perspective (as opposed to just putting the image in the zeromq queue and continuing):</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_socket</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">image_socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">,</span> <span class=\"n\">response</span>\n</pre></div>\n\n\n<p>In the parent process, in <code>ImageReceiver.handler()</code>, the code that receives the image processes it and queues up a GUI callback (<code>ImageReceiver.update()</code>) to display it. That is nonblocking in that it calls <code>inmain_later()</code>, which does not wait for the GUI to run the callback before continuing. However, it only allows one unprocessed call to <code>ImageReceiver.update()</code> to be waiting to run at any one time:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Wait for the previous update to compete so we don&#39;t accumulate a backlog:</span>\n<span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_event</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>So if the child process calls <code>_send_image_to_parent()</code>, that should block such that the GUI is at most one frame behind and neither the zeromq queues or the GUI event loop accumulates a backlog of undisplayed frames.</p>\n<p>If you had one thread writing to a buffer as fast as possible and another thread reading from the buffer and calling  <code>_send_image_to_parent()</code> in a loop, I am not sure why that would have locked BLACS up. It's possible the mechanism I've described has a bug, but there is not much code to look at and I don't see where I might have gone wrong. This mechanism does limit the frame rate for me - previously I could stop continuous acquisition and frames would continue to display for several seconds while it cleared the queue (zeromq would eventually block at about ~1000 messages, so the backlog was limited to about 1000 frames). But this would still not freeze BLACS. So it's a mystery to me what issue you were seeing there.</p>\n<blockquote>\n<p>During testing, I obviously forgot to connect the trigger line for the first buffered shot and transition_to_manual timed out. This results in a seemingly unrelated error pop-up, the correct error shown in the tab, and BLACS getting stuck in \u201cError in transition to manual, Queue Paused\u201d mode where clearing the error and un-pausing does NOT resume shot execution. I\u2019m fairly certain it is not a bug with the present code, but I\u2019m not sure where the issue lies.</p>\n</blockquote>\n<p>This sounds like a bug in the queue manager. After a failed shot, BLACS 'cleans' the HDF5 file, by making a copy without acquistiion data from the failed shot. Here you're seeing that the newly cleaned shot file, which is to be renamed over the top of the previous shot file,  apparently doesn't exist. Looking at the code,  it looks like if cleaning the HDF5 file fails, it just logs an error and continues (which is silly, there's no point suppressing the error if we have no way to recover from it). The code that cleans the shot file is:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">clean_h5_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">h5file</span><span class=\"p\">,</span> <span class=\"n\">new_h5_file</span><span class=\"p\">,</span> <span class=\"n\">repeat_number</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">h5file</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">old_file</span><span class=\"p\">:</span>\n                <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">new_h5_file</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">new_file</span><span class=\"p\">:</span>\n                    <span class=\"n\">groups_to_copy</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;devices&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;calibrations&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;script&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;globals&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;connection table&#39;</span><span class=\"p\">,</span> \n                                      <span class=\"s1\">&#39;labscriptlib&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;waits&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;time_markers&#39;</span><span class=\"p\">]</span>\n                    <span class=\"k\">for</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">groups_to_copy</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">group</span> <span class=\"ow\">in</span> <span class=\"n\">old_file</span><span class=\"p\">:</span>\n                            <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">old_file</span><span class=\"p\">[</span><span class=\"n\">group</span><span class=\"p\">],</span> <span class=\"n\">group</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">old_file</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span>\n                        <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">old_file</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n                    <span class=\"n\">new_file</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;run repeat&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">repeat_number</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\">#raise</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Clean H5 File Error.&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</pre></div>\n\n\n<p>So I would say something failed here. Either the old shot file didn't exist, or it raised an error upon being opened, or something like that. There aren't many things that could have gone wrong here by the looks of it. But if you can reproduce the problem reliably, if you uncomment that <code>raise</code> statement, then we will see what the actual error was.</p>", "type": "rendered"}, "created_on": "2019-06-04T19:55:38.027362+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-04T19:56:37.558241+00:00", "type": "pullrequest_comment", "id": 104510455}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f61bb683dcdd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/f61bb683dcdd"}, "html": {"href": "#!/dihm/labscript_devices/commits/f61bb683dcdd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-06-03T23:08:50.403480+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/102875716.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-102875716"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "In getting this together, I came across a few unknowns I\u2019d like to ask about.\n\n1. Before I settled on the current method for getting continuous frames \\(which works fine\\), I tried another grab strategy where the camera produces frames as fast as possible and just updates the same output buffer which can be read or ignored depending on processing speed. This seemed fine in principle, but when the rate exceeded ~20fps the BLACS tab would completely lock up. Further testing seems to show the tab blocks all signals \\(including stopping continuous\\) while the continuous\\_loop\\(\\) method proceeds to grab and send images to parent at high speed. The docstring for \\_send\\_image\\_to\\_parent claims it is blocking, but that doesn\u2019t seem to be the case. Am I missing something? Which thread is it supposed to be blocking?\n2. During testing, I obviously forgot to connect the trigger line for the first buffered shot and transition\\_to\\_manual timed out. This results in a seemingly unrelated error pop-up, the correct error shown in the tab, and BLACS getting stuck in \u201cError in transition to manual, Queue Paused\u201d mode where clearing the error and un-pausing does NOT resume shot execution. I\u2019m fairly certain it is not a bug with the present code, but I\u2019m not sure where the issue lies.\n\n    1. Here is the error. \n    \n\n![](data/bitbucket.org/repo/6AK7EM/images/1094827463-image.png)\nAnd here is the BLACS state after re-setting the offending camera BLACS tab.\n\n![](data/bitbucket.org/repo/6AK7EM/images/949077612-image.png)\n", "markup": "markdown", "html": "<p>In getting this together, I came across a few unknowns I\u2019d like to ask about.</p>\n<ol>\n<li>Before I settled on the current method for getting continuous frames (which works fine), I tried another grab strategy where the camera produces frames as fast as possible and just updates the same output buffer which can be read or ignored depending on processing speed. This seemed fine in principle, but when the rate exceeded ~20fps the BLACS tab would completely lock up. Further testing seems to show the tab blocks all signals (including stopping continuous) while the continuous_loop() method proceeds to grab and send images to parent at high speed. The docstring for _send_image_to_parent claims it is blocking, but that doesn\u2019t seem to be the case. Am I missing something? Which thread is it supposed to be blocking?</li>\n<li>\n<p>During testing, I obviously forgot to connect the trigger line for the first buffered shot and transition_to_manual timed out. This results in a seemingly unrelated error pop-up, the correct error shown in the tab, and BLACS getting stuck in \u201cError in transition to manual, Queue Paused\u201d mode where clearing the error and un-pausing does NOT resume shot execution. I\u2019m fairly certain it is not a bug with the present code, but I\u2019m not sure where the issue lies.</p>\n<ol>\n<li>Here is the error. </li>\n</ol>\n</li>\n</ol>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/6AK7EM/images/1094827463-image.png\" />\nAnd here is the BLACS state after re-setting the offending camera BLACS tab.</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/6AK7EM/images/949077612-image.png\" /></p>", "type": "rendered"}, "created_on": "2019-05-21T20:44:44.685302+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-05-21T20:44:45.017615+00:00", "type": "pullrequest_comment", "id": 102875716}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments/102874209.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69/_/diff#comment-102874209"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}, "content": {"raw": "I\u2019ve also added a script that helps in calculating minimum recovery time for Basler cameras depending on camera settings.\n\nUsage is `python ExposureTiming.py [-sn <camera serial number>]`\n\nIf no serial number is provided, it will show all available cameras.\n\nIf a serial number is provided, it will apply the default SoftwareTrigger configuration defined in the Pylon API and then apply settings from the hard-coded settings\\_dict in the file. Finally, it reports the Sensor Readout Time, Max Frame Rate, and minimum allowable time between exposure triggers.\n\nTo test different settings, the user must change settings in the settings\\_dict in the file. Those already listed in the file are the most important for getting timings right, though other more obscure settings can also change things. This isn\u2019t the best system, but I didn\u2019t want to spend too much time on figuring out how to make everything command line options.", "markup": "markdown", "html": "<p>I\u2019ve also added a script that helps in calculating minimum recovery time for Basler cameras depending on camera settings.</p>\n<p>Usage is <code>python ExposureTiming.py [-sn &lt;camera serial number&gt;]</code></p>\n<p>If no serial number is provided, it will show all available cameras.</p>\n<p>If a serial number is provided, it will apply the default SoftwareTrigger configuration defined in the Pylon API and then apply settings from the hard-coded settings_dict in the file. Finally, it reports the Sensor Readout Time, Max Frame Rate, and minimum allowable time between exposure triggers.</p>\n<p>To test different settings, the user must change settings in the settings_dict in the file. Those already listed in the file are the most important for getting timings right, though other more obscure settings can also change things. This isn\u2019t the best system, but I didn\u2019t want to spend too much time on figuring out how to make everything command line options.</p>", "type": "rendered"}, "created_on": "2019-05-21T20:31:52.011435+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-05-21T20:31:52.206036+00:00", "type": "pullrequest_comment", "id": 102874209}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2ec15da54a8d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/2ec15da54a8d"}, "html": {"href": "#!/dihm/labscript_devices/commits/2ec15da54a8d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-05-21T20:30:16.697425+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}, {"update": {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "title": "Pylon Backend for IMAQdxCamera class", "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2ec15da54a8d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/2ec15da54a8d"}, "html": {"href": "#!/dihm/labscript_devices/commits/2ec15da54a8d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "state": "OPEN", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "date": "2019-05-21T20:30:16.617344+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}}, "title": "Pylon Backend for IMAQdxCamera class"}}]}