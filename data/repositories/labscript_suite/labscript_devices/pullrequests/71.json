{"rendered": {"description": {"raw": "Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026\r\n\r\nDue to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like\r\n\r\n```python\r\nFlyCapture2Camera('CCD_1',parent_device=pulseblaster_0.direct_outputs,connection='flag 7',\r\n\t\t  serial_number=16303574,\r\n\t\t  mock=False,\r\n\t\t  trigger_duration = 1e-3,\r\n\t\t  saved_attribute_visibility_level = None,\r\n\t\t  camera_attributes={'GAMMA':{'onOff':False,\r\n\t\t\t\t\t                  'absControl':True,\r\n\t\t\t\t\t      \t\t\t  'absValue':1},\r\n\t\t\t\t     'AUTO_EXPOSURE':{'onOff':True,\r\n\t\t\t\t\t\t      \t\t  'absControl':True,\r\n\t\t\t\t\t\t      \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t      \t      'absValue':0},\r\n\t\t\t\t     'GAIN':{'autoManualMode':False,\r\n\t\t\t\t             'absControl':True,\r\n\t\t\t\t\t     \t 'absValue':0},\r\n\t\t\t\t     'SHARPNESS':{'onOff':False,\r\n\t\t\t\t\t\t  \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t  \t      'absValue':1024},\r\n\t\t\t\t     'FRAME_RATE':{'autoManualMode':False,\r\n\t\t\t\t\t\t   \t\t   'absControl':True},\r\n\t\t\t\t     'SHUTTER':{'autoManualMode':False,\r\n\t\t\t\t\t\t\t\t'absControl':True},\r\n\t\t\t\t     'BRIGHTNESS':{'absControl':True,\r\n\t\t\t\t\t\t   \t\t   'absValue':0},\r\n\t\t\t\t     'TriggerMode':{'polarity':1,\r\n\t\t\t\t\t\t    \t    'source':0,\r\n\t\t\t\t\t\t    \t\t'mode':1,\r\n\t\t\t\t\t\t    \t\t'onOff':True},\r\n\t\t\t\t     'ImageMode':{'width':1920,\r\n\t\t\t\t\t\t  \t\t  'height':1200,\r\n\t\t\t\t\t\t  \t\t  'offsetX':0,\r\n\t\t\t\t\t\t  \t\t  'offsetY':0,\r\n\t\t\t\t\t\t  \t\t  'pixelFormat':'MONO16'}},\r\n\t\t  manual_mode_camera_attributes={'TriggerMode':{'onOff':False}})\r\n```\r\n\r\n\u200c\r\n\r\nThe downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?", "markup": "markdown", "html": "<p>Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026</p>\n<p>Due to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">FlyCapture2Camera</span><span class=\"p\">(</span><span class=\"s1\">&#39;CCD_1&#39;</span><span class=\"p\">,</span><span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 7&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"mi\">16303574</span><span class=\"p\">,</span>\n          <span class=\"n\">mock</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n          <span class=\"n\">trigger_duration</span> <span class=\"o\">=</span> <span class=\"mf\">1e-3</span><span class=\"p\">,</span>\n          <span class=\"n\">saved_attribute_visibility_level</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n          <span class=\"n\">camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;GAMMA&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;AUTO_EXPOSURE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;GAIN&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHARPNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1024</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;FRAME_RATE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHUTTER&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;BRIGHTNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;polarity&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;source&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;mode&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;ImageMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span><span class=\"mi\">1920</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">:</span><span class=\"mi\">1200</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetX&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetY&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;pixelFormat&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;MONO16&#39;</span><span class=\"p\">}},</span>\n          <span class=\"n\">manual_mode_camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?</p>", "type": "rendered"}, "title": {"raw": "FlyCapture2 backend for IMAQdxCamera driver", "markup": "markdown", "html": "<p>FlyCapture2 backend for IMAQdxCamera driver</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026\r\n\r\nDue to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like\r\n\r\n```python\r\nFlyCapture2Camera('CCD_1',parent_device=pulseblaster_0.direct_outputs,connection='flag 7',\r\n\t\t  serial_number=16303574,\r\n\t\t  mock=False,\r\n\t\t  trigger_duration = 1e-3,\r\n\t\t  saved_attribute_visibility_level = None,\r\n\t\t  camera_attributes={'GAMMA':{'onOff':False,\r\n\t\t\t\t\t                  'absControl':True,\r\n\t\t\t\t\t      \t\t\t  'absValue':1},\r\n\t\t\t\t     'AUTO_EXPOSURE':{'onOff':True,\r\n\t\t\t\t\t\t      \t\t  'absControl':True,\r\n\t\t\t\t\t\t      \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t      \t      'absValue':0},\r\n\t\t\t\t     'GAIN':{'autoManualMode':False,\r\n\t\t\t\t             'absControl':True,\r\n\t\t\t\t\t     \t 'absValue':0},\r\n\t\t\t\t     'SHARPNESS':{'onOff':False,\r\n\t\t\t\t\t\t  \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t  \t      'absValue':1024},\r\n\t\t\t\t     'FRAME_RATE':{'autoManualMode':False,\r\n\t\t\t\t\t\t   \t\t   'absControl':True},\r\n\t\t\t\t     'SHUTTER':{'autoManualMode':False,\r\n\t\t\t\t\t\t\t\t'absControl':True},\r\n\t\t\t\t     'BRIGHTNESS':{'absControl':True,\r\n\t\t\t\t\t\t   \t\t   'absValue':0},\r\n\t\t\t\t     'TriggerMode':{'polarity':1,\r\n\t\t\t\t\t\t    \t    'source':0,\r\n\t\t\t\t\t\t    \t\t'mode':1,\r\n\t\t\t\t\t\t    \t\t'onOff':True},\r\n\t\t\t\t     'ImageMode':{'width':1920,\r\n\t\t\t\t\t\t  \t\t  'height':1200,\r\n\t\t\t\t\t\t  \t\t  'offsetX':0,\r\n\t\t\t\t\t\t  \t\t  'offsetY':0,\r\n\t\t\t\t\t\t  \t\t  'pixelFormat':'MONO16'}},\r\n\t\t  manual_mode_camera_attributes={'TriggerMode':{'onOff':False}})\r\n```\r\n\r\n\u200c\r\n\r\nThe downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:f55ba5a76098%0D64d59d06d474?from_pullrequest_id=71"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/71"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:f55ba5a76098%0D64d59d06d474?from_pullrequest_id=71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/statuses_page=1.json"}}, "title": "FlyCapture2 backend for IMAQdxCamera driver", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}], "id": 71, "destination": {"commit": {"hash": "64d59d06d474", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/64d59d06d474.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/64d59d06d474"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-18T21:31:40.161894+00:00", "summary": {"raw": "Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026\r\n\r\nDue to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like\r\n\r\n```python\r\nFlyCapture2Camera('CCD_1',parent_device=pulseblaster_0.direct_outputs,connection='flag 7',\r\n\t\t  serial_number=16303574,\r\n\t\t  mock=False,\r\n\t\t  trigger_duration = 1e-3,\r\n\t\t  saved_attribute_visibility_level = None,\r\n\t\t  camera_attributes={'GAMMA':{'onOff':False,\r\n\t\t\t\t\t                  'absControl':True,\r\n\t\t\t\t\t      \t\t\t  'absValue':1},\r\n\t\t\t\t     'AUTO_EXPOSURE':{'onOff':True,\r\n\t\t\t\t\t\t      \t\t  'absControl':True,\r\n\t\t\t\t\t\t      \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t      \t      'absValue':0},\r\n\t\t\t\t     'GAIN':{'autoManualMode':False,\r\n\t\t\t\t             'absControl':True,\r\n\t\t\t\t\t     \t 'absValue':0},\r\n\t\t\t\t     'SHARPNESS':{'onOff':False,\r\n\t\t\t\t\t\t  \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t  \t      'absValue':1024},\r\n\t\t\t\t     'FRAME_RATE':{'autoManualMode':False,\r\n\t\t\t\t\t\t   \t\t   'absControl':True},\r\n\t\t\t\t     'SHUTTER':{'autoManualMode':False,\r\n\t\t\t\t\t\t\t\t'absControl':True},\r\n\t\t\t\t     'BRIGHTNESS':{'absControl':True,\r\n\t\t\t\t\t\t   \t\t   'absValue':0},\r\n\t\t\t\t     'TriggerMode':{'polarity':1,\r\n\t\t\t\t\t\t    \t    'source':0,\r\n\t\t\t\t\t\t    \t\t'mode':1,\r\n\t\t\t\t\t\t    \t\t'onOff':True},\r\n\t\t\t\t     'ImageMode':{'width':1920,\r\n\t\t\t\t\t\t  \t\t  'height':1200,\r\n\t\t\t\t\t\t  \t\t  'offsetX':0,\r\n\t\t\t\t\t\t  \t\t  'offsetY':0,\r\n\t\t\t\t\t\t  \t\t  'pixelFormat':'MONO16'}},\r\n\t\t  manual_mode_camera_attributes={'TriggerMode':{'onOff':False}})\r\n```\r\n\r\n\u200c\r\n\r\nThe downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?", "markup": "markdown", "html": "<p>Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026</p>\n<p>Due to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">FlyCapture2Camera</span><span class=\"p\">(</span><span class=\"s1\">&#39;CCD_1&#39;</span><span class=\"p\">,</span><span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 7&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"mi\">16303574</span><span class=\"p\">,</span>\n          <span class=\"n\">mock</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n          <span class=\"n\">trigger_duration</span> <span class=\"o\">=</span> <span class=\"mf\">1e-3</span><span class=\"p\">,</span>\n          <span class=\"n\">saved_attribute_visibility_level</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n          <span class=\"n\">camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;GAMMA&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;AUTO_EXPOSURE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;GAIN&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHARPNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1024</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;FRAME_RATE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHUTTER&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;BRIGHTNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;polarity&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;source&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;mode&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;ImageMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span><span class=\"mi\">1920</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">:</span><span class=\"mi\">1200</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetX&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetY&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;pixelFormat&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;MONO16&#39;</span><span class=\"p\">}},</span>\n          <span class=\"n\">manual_mode_camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?</p>", "type": "rendered"}, "source": {"commit": {"hash": "95fe4609b0a1", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/95fe4609b0a1"}, "html": {"href": "#!/dihm/labscript_devices/commits/95fe4609b0a1"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "FlyCapture2Camera"}}, "comment_count": 16, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2019-07-03T01:24:54.014974+00:00", "type": "participant", "approved": true, "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}}, {"role": "REVIEWER", "participated_on": "2019-07-01T18:52:06.145016+00:00", "type": "participant", "approved": true, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}], "reason": "", "updated_on": "2019-07-03T02:11:49.561012+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "f55ba5a76098", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/f55ba5a76098.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/f55ba5a76098"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}