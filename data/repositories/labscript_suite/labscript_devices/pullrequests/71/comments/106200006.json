{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/comments/106200006.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/71/_/diff#comment-106200006"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 71, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/71"}}, "title": "FlyCapture2 backend for IMAQdxCamera driver"}, "content": {"raw": "The hack we use elsewhere to store nested dictionaries in h5 files is to encode them as JSON. But then the code reading them has to know to decode them that way. I suppose we could have lyse decode any attributes it finds as JSON into the appropriate datatype.\n\nThe JSON encoding and decoding functions are in `labscript_utils.properties`. Any attributes that are encoded as JSON have a prefix marking them as such, so code wanting to read the attributes can do:\n\n```python\nfrom labscript_utils.properties import is_json, deserialise\nattrs = {name: deserialise(value) if is_json(value) else value for name, value in group.attrs.items()}\n```\n\nI should add two functions to `labscript_utils.properties` that get/set attributes with optional JSON serialisation on groups in general rather than device properties/connection table properties specifically, then the IMAQdxCamera can use one of theose functions to write more general objects to h5 attributes, and lyse can use the other function to read them. The way the code in  `labscript_utils.properties` writes device properties etc, it uses hdf5 datatypes if possible, only using JSON if there is no h5 type. So it is backward compatible to turn on the option to save more complex datatypes this way.", "markup": "markdown", "html": "<p>The hack we use elsewhere to store nested dictionaries in h5 files is to encode them as JSON. But then the code reading them has to know to decode them that way. I suppose we could have lyse decode any attributes it finds as JSON into the appropriate datatype.</p>\n<p>The JSON encoding and decoding functions are in <code>labscript_utils.properties</code>. Any attributes that are encoded as JSON have a prefix marking them as such, so code wanting to read the attributes can do:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.properties</span> <span class=\"kn\">import</span> <span class=\"n\">is_json</span><span class=\"p\">,</span> <span class=\"n\">deserialise</span>\n<span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">deserialise</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">is_json</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n</pre></div>\n\n\n<p>I should add two functions to <code>labscript_utils.properties</code> that get/set attributes with optional JSON serialisation on groups in general rather than device properties/connection table properties specifically, then the IMAQdxCamera can use one of theose functions to write more general objects to h5 attributes, and lyse can use the other function to read them. The way the code in  <code>labscript_utils.properties</code> writes device properties etc, it uses hdf5 datatypes if possible, only using JSON if there is no h5 type. So it is backward compatible to turn on the option to save more complex datatypes this way.</p>", "type": "rendered"}, "created_on": "2019-06-18T22:19:18.827444+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-18T22:21:13.041346+00:00", "type": "pullrequest_comment", "id": 106200006}