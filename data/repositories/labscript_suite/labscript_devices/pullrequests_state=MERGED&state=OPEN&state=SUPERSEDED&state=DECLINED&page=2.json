{"pagelen": 50, "previous": "data/repositories/labscript_suite/labscript_devices/pullrequests_state=MERGED&state=OPEN&state=SUPERSEDED&state=DECLINED&page=1.json", "values": [{"description": "Added mechanism to allow arbitrary code organisation within the labscript_devices folder.\r\n\r\nConverted dummy pseudoclock to use this new mechanism as an example.\r\n\r\nRemoved unnecessary @labscript_device and @BLACS_worker decorators throughout.\r\n\r\nDepend on BLACS 2.4.0, as the dummy pseudoclock now stores its worker class in a separate file and references it by name as per [BLACS pull request #54](#!/labscript_suite/blacs/pull-requests/54/defer-worker-imports)\r\n\r\nBelow is a copy and paste of the comment I've put at the top of `__init__.py` that explains the new mechanism. In order to have arbitrary freedom on code organisation, there must be extra files that declare what the BLACS tab and runviewer parsers are for each labscript device. After some thought this seems to me like a good way to do things - to abandon all naming conventions for looking up classes in certain files, so that classes may be arbitrarily organised in whatever files make sense for the task at hand. The only remaining naming convention is that `labscript_devices` will look for files called \"register_classes.py\" located within any subfolders, and run them. These files contain explicit information saying what the BLACS tab and runviewer parsers are. See the dummy pseudoclock code in the diff for an example.\r\n\r\nIf this mechanism is agreeable, after merging this I'll port the other devices one-by-one to subfolders when the time is right for each of them (i.e. when they have no pending pull requests this would break).\r\n\r\n```\r\nThis file contains the machinery for registering and looking up what BLACS tab and\r\nrunviewer parser classes belong to a particular labscript device. \"labscript_device\"\r\nhere means a device that BLACS needs to communicate with. These devices have\r\ninstructions saved within the 'devices' group of the HDF5 file, and have a tab\r\ncorresponding to them in the BLACS interface. These device classes must have unique\r\nnames, such as \"PineBlaster\" or \"PulseBlaster\" etc.\r\n\r\nThere are two methods we use to find out which BLACS tab and runviewer parser correspond\r\nto a device class: the \"old\" method, and the \"new\" method. The old method requires that\r\nthe the BLACS tab and runviewer parser be in a file called <DeviceName>.py at the top\r\nlevel of labscript_devices folder, and that they have class decorators @BLACS_tab or\r\n@runviewer_parser to identify them. This method precludes putting code in subfolders or\r\nsplitting it across multiple files.\r\n\r\nThe \"new\" method is more flexible. It allows BLACS tabs and runviewer parsers to be\r\ndefined in any importable file within a subfolder of labscript_devices. Classes using\r\nthis method can be in files with any name, and do not need class decorators. Instead,\r\nthe classes should be registered by creating a file called 'register_classes.py', which\r\nwhen imported, makes calls to labscript_devices.register_classes() to tell register\r\nwhich BLACS tab and runviewer parser class belong to each device. Tab and parser classes\r\nmust be passed to register_classes() as fully qualified names, i.e.\r\n\"labscript_devices.submodule.ClassName\", not by passing in the classes themselves. This\r\nensures imports can be deferred until the classes are actually needed. When BLACS and\r\nrunviewer look up classes with get_BLACS_tab() and get_runviewer_parser(),\r\npopulate_registry() will be called in order to find all files called\r\n'register_classes.py' within subfolders (at any depth) of labscript_devices, and they\r\nwill be imported to run their code and hence register their classes.\r\n\r\nThe \"new\" method does not impose any restrictions on code organisation within subfolders\r\nof labscript_devices, and so is preferable as it allows auxiliary utilities or resource\r\nfiles to live in subfolders alongside the device code to which they are relevant, the\r\nuse of subrepositories, the grouping of similar devices within subfolders, and other\r\nnice things to have.\r\n\r\nThe old method may be deprecated in the future.\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/51/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:2f2fd7b5772c%0D970f46e8bd30?from_pullrequest_id=51"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/51/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/51"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:2f2fd7b5772c%0D970f46e8bd30?from_pullrequest_id=51"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/51/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/51/statuses_page=1.json"}}, "title": "Arbitrary subfolders for device code within labscript_devices", "close_source_branch": true, "type": "pullrequest", "id": 51, "destination": {"commit": {"hash": "970f46e8bd30", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/970f46e8bd30.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/970f46e8bd30"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-09-27T16:55:05.113718+00:00", "summary": {"raw": "Added mechanism to allow arbitrary code organisation within the labscript_devices folder.\r\n\r\nConverted dummy pseudoclock to use this new mechanism as an example.\r\n\r\nRemoved unnecessary @labscript_device and @BLACS_worker decorators throughout.\r\n\r\nDepend on BLACS 2.4.0, as the dummy pseudoclock now stores its worker class in a separate file and references it by name as per [BLACS pull request #54](#!/labscript_suite/blacs/pull-requests/54/defer-worker-imports)\r\n\r\nBelow is a copy and paste of the comment I've put at the top of `__init__.py` that explains the new mechanism. In order to have arbitrary freedom on code organisation, there must be extra files that declare what the BLACS tab and runviewer parsers are for each labscript device. After some thought this seems to me like a good way to do things - to abandon all naming conventions for looking up classes in certain files, so that classes may be arbitrarily organised in whatever files make sense for the task at hand. The only remaining naming convention is that `labscript_devices` will look for files called \"register_classes.py\" located within any subfolders, and run them. These files contain explicit information saying what the BLACS tab and runviewer parsers are. See the dummy pseudoclock code in the diff for an example.\r\n\r\nIf this mechanism is agreeable, after merging this I'll port the other devices one-by-one to subfolders when the time is right for each of them (i.e. when they have no pending pull requests this would break).\r\n\r\n```\r\nThis file contains the machinery for registering and looking up what BLACS tab and\r\nrunviewer parser classes belong to a particular labscript device. \"labscript_device\"\r\nhere means a device that BLACS needs to communicate with. These devices have\r\ninstructions saved within the 'devices' group of the HDF5 file, and have a tab\r\ncorresponding to them in the BLACS interface. These device classes must have unique\r\nnames, such as \"PineBlaster\" or \"PulseBlaster\" etc.\r\n\r\nThere are two methods we use to find out which BLACS tab and runviewer parser correspond\r\nto a device class: the \"old\" method, and the \"new\" method. The old method requires that\r\nthe the BLACS tab and runviewer parser be in a file called <DeviceName>.py at the top\r\nlevel of labscript_devices folder, and that they have class decorators @BLACS_tab or\r\n@runviewer_parser to identify them. This method precludes putting code in subfolders or\r\nsplitting it across multiple files.\r\n\r\nThe \"new\" method is more flexible. It allows BLACS tabs and runviewer parsers to be\r\ndefined in any importable file within a subfolder of labscript_devices. Classes using\r\nthis method can be in files with any name, and do not need class decorators. Instead,\r\nthe classes should be registered by creating a file called 'register_classes.py', which\r\nwhen imported, makes calls to labscript_devices.register_classes() to tell register\r\nwhich BLACS tab and runviewer parser class belong to each device. Tab and parser classes\r\nmust be passed to register_classes() as fully qualified names, i.e.\r\n\"labscript_devices.submodule.ClassName\", not by passing in the classes themselves. This\r\nensures imports can be deferred until the classes are actually needed. When BLACS and\r\nrunviewer look up classes with get_BLACS_tab() and get_runviewer_parser(),\r\npopulate_registry() will be called in order to find all files called\r\n'register_classes.py' within subfolders (at any depth) of labscript_devices, and they\r\nwill be imported to run their code and hence register their classes.\r\n\r\nThe \"new\" method does not impose any restrictions on code organisation within subfolders\r\nof labscript_devices, and so is preferable as it allows auxiliary utilities or resource\r\nfiles to live in subfolders alongside the device code to which they are relevant, the\r\nuse of subrepositories, the grouping of similar devices within subfolders, and other\r\nnice things to have.\r\n\r\nThe old method may be deprecated in the future.\r\n```", "markup": "markdown", "html": "<p>Added mechanism to allow arbitrary code organisation within the labscript_devices folder.</p>\n<p>Converted dummy pseudoclock to use this new mechanism as an example.</p>\n<p>Removed unnecessary @labscript_device and @BLACS_worker decorators throughout.</p>\n<p>Depend on BLACS 2.4.0, as the dummy pseudoclock now stores its worker class in a separate file and references it by name as per <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/54/defer-worker-imports\" rel=\"nofollow\">BLACS pull request #54</a></p>\n<p>Below is a copy and paste of the comment I've put at the top of <code>__init__.py</code> that explains the new mechanism. In order to have arbitrary freedom on code organisation, there must be extra files that declare what the BLACS tab and runviewer parsers are for each labscript device. After some thought this seems to me like a good way to do things - to abandon all naming conventions for looking up classes in certain files, so that classes may be arbitrarily organised in whatever files make sense for the task at hand. The only remaining naming convention is that <code>labscript_devices</code> will look for files called \"register_classes.py\" located within any subfolders, and run them. These files contain explicit information saying what the BLACS tab and runviewer parsers are. See the dummy pseudoclock code in the diff for an example.</p>\n<p>If this mechanism is agreeable, after merging this I'll port the other devices one-by-one to subfolders when the time is right for each of them (i.e. when they have no pending pull requests this would break).</p>\n<div class=\"codehilite\"><pre><span></span>This file contains the machinery for registering and looking up what BLACS tab and\nrunviewer parser classes belong to a particular labscript device. &quot;labscript_device&quot;\nhere means a device that BLACS needs to communicate with. These devices have\ninstructions saved within the &#39;devices&#39; group of the HDF5 file, and have a tab\ncorresponding to them in the BLACS interface. These device classes must have unique\nnames, such as &quot;PineBlaster&quot; or &quot;PulseBlaster&quot; etc.\n\nThere are two methods we use to find out which BLACS tab and runviewer parser correspond\nto a device class: the &quot;old&quot; method, and the &quot;new&quot; method. The old method requires that\nthe the BLACS tab and runviewer parser be in a file called &lt;DeviceName&gt;.py at the top\nlevel of labscript_devices folder, and that they have class decorators @BLACS_tab or\n@runviewer_parser to identify them. This method precludes putting code in subfolders or\nsplitting it across multiple files.\n\nThe &quot;new&quot; method is more flexible. It allows BLACS tabs and runviewer parsers to be\ndefined in any importable file within a subfolder of labscript_devices. Classes using\nthis method can be in files with any name, and do not need class decorators. Instead,\nthe classes should be registered by creating a file called &#39;register_classes.py&#39;, which\nwhen imported, makes calls to labscript_devices.register_classes() to tell register\nwhich BLACS tab and runviewer parser class belong to each device. Tab and parser classes\nmust be passed to register_classes() as fully qualified names, i.e.\n&quot;labscript_devices.submodule.ClassName&quot;, not by passing in the classes themselves. This\nensures imports can be deferred until the classes are actually needed. When BLACS and\nrunviewer look up classes with get_BLACS_tab() and get_runviewer_parser(),\npopulate_registry() will be called in order to find all files called\n&#39;register_classes.py&#39; within subfolders (at any depth) of labscript_devices, and they\nwill be imported to run their code and hence register their classes.\n\nThe &quot;new&quot; method does not impose any restrictions on code organisation within subfolders\nof labscript_devices, and so is preferable as it allows auxiliary utilities or resource\nfiles to live in subfolders alongside the device code to which they are relevant, the\nuse of subrepositories, the grouping of similar devices within subfolders, and other\nnice things to have.\n\nThe old method may be deprecated in the future.\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "b093484bf12e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/b093484bf12e"}, "html": {"href": "#!/cbillington/labscript_devices/commits/b093484bf12e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "arbitrary_subfolders"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-03T14:51:20.557745+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "2f2fd7b5772c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/2f2fd7b5772c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/2f2fd7b5772c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Bugfix for pulseblaster fixed shot duration workaround.\r\nSometimes check_status would run in between transition_to_static and start_run,\r\nat which point the instance variables are in an inconsistant state and\r\nan AttributeError is raised. The fix sets all instance variables to None\r\nwhen they are not in use and check_status now checks only the last attribute\r\nto be set, otherwise concluding that a fixed duration shot is not in progress.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/52/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:970f46e8bd30%0Debfe9f4ce6f2?from_pullrequest_id=52"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/52/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/52.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/52/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/52/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/52"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/52/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:970f46e8bd30%0Debfe9f4ce6f2?from_pullrequest_id=52"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/52/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/52/statuses_page=1.json"}}, "title": "Bugfix for pulseblaster fixed shot duration workaround.", "close_source_branch": true, "type": "pullrequest", "id": 52, "destination": {"commit": {"hash": "ebfe9f4ce6f2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ebfe9f4ce6f2.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ebfe9f4ce6f2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-09-27T19:10:17.062628+00:00", "summary": {"raw": "Bugfix for pulseblaster fixed shot duration workaround.\r\nSometimes check_status would run in between transition_to_static and start_run,\r\nat which point the instance variables are in an inconsistant state and\r\nan AttributeError is raised. The fix sets all instance variables to None\r\nwhen they are not in use and check_status now checks only the last attribute\r\nto be set, otherwise concluding that a fixed duration shot is not in progress.", "markup": "markdown", "html": "<p>Bugfix for pulseblaster fixed shot duration workaround.\nSometimes check_status would run in between transition_to_static and start_run,\nat which point the instance variables are in an inconsistant state and\nan AttributeError is raised. The fix sets all instance variables to None\nwhen they are not in use and check_status now checks only the last attribute\nto be set, otherwise concluding that a fixed duration shot is not in progress.</p>", "type": "rendered"}, "source": {"commit": {"hash": "60c5d9a27778", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/60c5d9a27778"}, "html": {"href": "#!/cbillington/labscript_devices/commits/60c5d9a27778"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T19:09:19.896221+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "970f46e8bd30", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/970f46e8bd30.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/970f46e8bd30"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Trivial bugfix for NameError in PulseBlasterUSB", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/53/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:ebfe9f4ce6f2%0D93ab90f1e435?from_pullrequest_id=53"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/53/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/53.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/53/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/53/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/53"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/53/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:ebfe9f4ce6f2%0D93ab90f1e435?from_pullrequest_id=53"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/53/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/53/statuses_page=1.json"}}, "title": "Trivial bugfix for NameError in PulseBlasterUSB", "close_source_branch": true, "type": "pullrequest", "id": 53, "destination": {"commit": {"hash": "93ab90f1e435", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/93ab90f1e435.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/93ab90f1e435"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-09-27T19:24:22.029211+00:00", "summary": {"raw": "Trivial bugfix for NameError in PulseBlasterUSB", "markup": "markdown", "html": "<p>Trivial bugfix for NameError in PulseBlasterUSB</p>", "type": "rendered"}, "source": {"commit": {"hash": "5c246b42a945", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/5c246b42a945"}, "html": {"href": "#!/cbillington/labscript_devices/commits/5c246b42a945"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "bugfix2"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-09-28T11:47:51.630399+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ebfe9f4ce6f2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ebfe9f4ce6f2.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ebfe9f4ce6f2"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Depend on numpy 1.15.1 and remove use of workarounds required for earlier numpy versions.\r\n\r\nNumpy 1.15.1 includes fixes for both sorting on columns in structured arrays with unicode strings in py2, and for making new arrays with unicode strings as the dtype, so the workarounds are no longer needed.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/54/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:d0cf8a14b1db%0D18f51a6359d5?from_pullrequest_id=54"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/54/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/54.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/54/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/54/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/54"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/54/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:d0cf8a14b1db%0D18f51a6359d5?from_pullrequest_id=54"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/54/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/54/statuses_page=1.json"}}, "title": "remove use of numpy dtype workaround", "close_source_branch": true, "type": "pullrequest", "id": 54, "destination": {"commit": {"hash": "18f51a6359d5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/18f51a6359d5.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/18f51a6359d5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-10-26T20:16:03.048333+00:00", "summary": {"raw": "Depend on numpy 1.15.1 and remove use of workarounds required for earlier numpy versions.\r\n\r\nNumpy 1.15.1 includes fixes for both sorting on columns in structured arrays with unicode strings in py2, and for making new arrays with unicode strings as the dtype, so the workarounds are no longer needed.", "markup": "markdown", "html": "<p>Depend on numpy 1.15.1 and remove use of workarounds required for earlier numpy versions.</p>\n<p>Numpy 1.15.1 includes fixes for both sorting on columns in structured arrays with unicode strings in py2, and for making new arrays with unicode strings as the dtype, so the workarounds are no longer needed.</p>", "type": "rendered"}, "source": {"commit": {"hash": "739bdbaf657d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/739bdbaf657d"}, "html": {"href": "#!/cbillington/labscript_devices/commits/739bdbaf657d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "remove_workaround"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-02T13:19:26.457832+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d0cf8a14b1db", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/d0cf8a14b1db.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/d0cf8a14b1db"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "As in title.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/55/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:c5614ae63813%0Daddb7eef22b4?from_pullrequest_id=55"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/55/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/55.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/55/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/55/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/55"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/55/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:c5614ae63813%0Daddb7eef22b4?from_pullrequest_id=55"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/55/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/55/statuses_page=1.json"}}, "title": "Add missing runviewer parser to PulseBlasterUSB", "close_source_branch": true, "type": "pullrequest", "id": 55, "destination": {"commit": {"hash": "addb7eef22b4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/addb7eef22b4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/addb7eef22b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-11-10T16:27:16.375049+00:00", "summary": {"raw": "As in title.", "markup": "markdown", "html": "<p>As in title.</p>", "type": "rendered"}, "source": {"commit": {"hash": "85f717eb45cb", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/85f717eb45cb"}, "html": {"href": "#!/cbillington/labscript_devices/commits/85f717eb45cb"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "PulseBasterUSB_parser"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-26T15:39:52.183896+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "c5614ae63813", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/c5614ae63813.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/c5614ae63813"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR adds a subfolder containing a general-purpose labscript device, BLACS tab, and BLACS workers for NI DAQmx devices.\r\n\r\nThe capabilities of the device can be added as instantiation arguments:\r\n\r\n```python\r\n    def __init__(\r\n        self,\r\n        name,\r\n        parent_device=None,\r\n        clock_terminal=None,\r\n        MAX_name=None,\r\n        static_AO=None,\r\n        static_DO=None,\r\n        clock_mirror_terminal=None,\r\n        acquisition_rate=None,\r\n        AI_range=None,\r\n        AI_start_delay=0,\r\n        AO_range=None,\r\n        max_AI_multi_chan_rate=None,\r\n        max_AI_single_chan_rate=None,\r\n        max_AO_sample_rate=None,\r\n        max_DO_sample_rate=None,\r\n        min_semiperiod_measurement=None,\r\n        num_AI=0,\r\n        num_AO=0,\r\n        num_CI=0,\r\n        ports=None,\r\n        supports_buffered_AO=False,\r\n        supports_buffered_DO=False,\r\n        supports_semiperiod_measurement=False,\r\n        **kwargs\r\n    ):\r\n```\r\n\r\nAlternately (and preferably), subclasses can be made that have the capabilities already set. I have made subclasses for all the models that we know about already.\r\n\r\nAll the subclasses do is set default values for the capabilities arguments. For example, here is one of them in full:\r\n\r\n```python\r\nCAPABILITIES = {\r\n    'AI_range': [-10.0, 10.0],\r\n    'AI_start_delay': 7e-08,\r\n    'AO_range': [-10.0, 10.0],\r\n    'max_AI_multi_chan_rate': 1000000.0,\r\n    'max_AI_single_chan_rate': 2000000.0,\r\n    'max_AO_sample_rate': 2857142.8571428573,\r\n    'max_DO_sample_rate': 10000000.0,\r\n    'min_semiperiod_measurement': 1e-07,\r\n    'num_AI': 32,\r\n    'num_AO': 4,\r\n    'num_CI': 4,\r\n    'ports': {\r\n        'port0': {'num_lines': 32, 'supports_buffered': True},\r\n        'port1': {'num_lines': 8, 'supports_buffered': False},\r\n        'port2': {'num_lines': 8, 'supports_buffered': False},\r\n    },\r\n    'supports_buffered_AO': True,\r\n    'supports_buffered_DO': True,\r\n    'supports_semiperiod_measurement': True,\r\n}\r\n\r\n\r\nclass NI_PCIe_6363(NI_DAQmx):\r\n    description = 'NI-PCIe-6363'\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        # Any provided kwargs take precedent over capabilities\r\n        combined_kwargs = CAPABILITIES.copy()\r\n        combined_kwargs.update(kwargs)\r\n        NI_DAQmx.__init__(self, *args, **combined_kwargs)\r\n```\r\n\r\nFuthermore, these subclasses can be automatically generated for new devices. The file `labscript_devices/NI_DAQmx/models/get_capabilities.py` will introspect the capabilities of all devices attached to the current computer (or configured as 'simulated devices' in NI MAX, meaning this can be done without the actual hardware on hand), and update a JSON file, `labscript_devices/NI_DAQmx/models/capabiltiies.json`. The classes can then be generated from this JSON file and a template, by running `labscript_devices/NI_DAQmx/models/generate_subclasses.py`. There is a `README` file in the folder explaining this process.\r\n\r\nAlthough there are subclasses for the labscript device, all models use the same BLACS tab, BLACS workers, and runviewer parser classes. The capabilities are saved as connection table properties, so the general-purpose classes can read them from there and behave accordingly.\r\n\r\nThe capabilities of any of the subclasses can be overridden by passing in different values as keyword arguments. For example, to configure a smaller range of analog input voltage, you could pass in a keyword argument `AI_range=[-1, 1]` even if the device supports a larger analog input range.\r\n\r\nThere are a number of bugfixes and features in this code based on what has been learned in the Spielman fork and elsewhere. For example, there was a race condition when ending shots - the DAQmx driver sometimes would not know that the device was finished outputting all samples before BLACS came and said task.StopTask(), this would raise an error. This was presumably just because USB communication from the device back to the computer can take a few milliseconds. Shots now end with a call to `Task.WaitUntilTaskDone()` with a one second timeout, which fixes this race condition without wasting any more time than necessary.\r\n\r\nThere was also a bug in DAQmx where the driver would raise obscure errors if digital outputs are all zero for the whole shot. There is now error checking for this, telling you \"please make a digital output do something\". There is more error checking in general in the labscript device, and the code makes fewer assumptions about whether any children have been added, etc.\r\n\r\nThere is an additional feature here that I had added in the Spielman fork but mainline hasn't seen yet: 'clock_mirror_terminal'. This is a channel on which the clock input will also be output, which allows daisy chaining a number of DAQmx devices together when they share a clocking signal.\r\n\r\nSome DAQmx devices do not support clocked output, and so can only have static output. This labscript device supports this, such that analog and digital outputs can be StaticAnalogOut and StaticDigitalOut objects. In this case, if a device supports analog input still, it can still have a parent pseudoclock, but it will only be used to trigger the start of acquisition.\r\n\r\nI have not integrated @PhyNerd's manual mode analog input with this PR yet, but the BLACS worker does acquire during manual mode, transitioning between a manual mode task and a buffered mode task when shots stop and start. It presently just throws the manual mode data down the drain, but there is a logical spot to slot in a zmq send call to send the data to the broker instead once manual mode analog input is merged into mainline and I or someone else has time.\r\n\r\nThe code is Python 2 and 3 compatible. Adding support for a new device requires a Python-3-only library (though it will still work without that library, it will just not format the generated code well).\r\n\r\n\r\nLimitations:\r\n\r\nWhere a device has some digital ports supporting buffered output and some not, I have not bothered to implement support for using all of them simultaneously. If static_DO is True, then you can use all digital outputs as StaticDigitalOut. If static_DO is False, you can use the ports that support buffered output, but simply cannot use the other ports during a shot. We can improve this in the future but I anticipate not many people caring about this (use of the non-buffered outputs during a shot has been unavailable in the existing DAQmx classes for a long time and nobody has complained).\r\n\r\nThese classes are not backward compatible with shots compiled with previous DAQmx classes. However, they should be compatible with existing experiment scripts. BLACS will reject shots with mismatching connection tables, and so will not run old shots. The error message won't be particularly helpful though since it will be about all the connection table properties not matching, and won't specifically emphasise the version. After updating, if BLACS starts up and the BLACS tab finds that the connection table was compiled with an older, incompatible version of an NI DAQmx class, it raises an error saying either to downgrade labscript_devices, or to recompile the connection table. The runviewer parser also raises a similar error if it is given a shot file compiled with the previous classes, but this is not super useful because as it stands, runviewer just suppresses these errors and writes a simple \"could not load device\" line to the terminal. But this is a problem with runviewer, it should be changed to expose the error (there is a TODO in the runviewer code to this effect).\r\n\r\nI have removed the previous device classes from labscript_devices, and replaced them with an import alias that imports the new classes from their new locations within this submodule (eg `from labscript_devices.NI_DAQmx.models import NI_PCIe_6363`) and prints a deprecation warning telling the user to use the new import location.\r\n\r\nAnother limitation is that there is no way to introspect which ports and lines correspond to which 'PFI' on DAQmx devices. There is no systematic pattern and no way I can think of to get at this information programmatically. Therefore the BLACS tab in this PR simply labels all digital outs as 'port<N>/line<M>' and does not label them with their alternate 'PFI' names. This is a change, and may take a little getting used to. We could hard-code the mapping in the subclasses, but as all information about devices is currently introspected, such that no data needs to be manually input by the user to add support for a device, it is unappealing to me to add a manual step such as this, which also adds complexity to the code as the code would then have to handle that some digital outs would have multiple names. Using ports and lines only is simpler.\r\n\r\nAll in all the code in this PR has been quite carefully considered, and while I'm sure there will be bugs to iron out, I've tested it with a number of devices and ensured analog and digital output work, analog input works, and that wait monitors work too. This last one was a pain in the neck because of [different behaviour of different devices when it comes to semiperiod measurements](https://forums.ni.com/t5/Multifunction-DAQ/How-can-I-tell-programmatically-whether-a-given-DAQmx-device-has/m-p/3849997).\r\n\r\nAs always, testing is appreciated.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/56/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:fe5e25655613%0D426f64fa05b8?from_pullrequest_id=56"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/56/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/56"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:fe5e25655613%0D426f64fa05b8?from_pullrequest_id=56"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/56/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/56/statuses_page=1.json"}}, "title": "Universal NI DAQmx support", "close_source_branch": true, "type": "pullrequest", "id": 56, "destination": {"commit": {"hash": "426f64fa05b8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/426f64fa05b8.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/426f64fa05b8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-11-10T17:30:45.323659+00:00", "summary": {"raw": "This PR adds a subfolder containing a general-purpose labscript device, BLACS tab, and BLACS workers for NI DAQmx devices.\r\n\r\nThe capabilities of the device can be added as instantiation arguments:\r\n\r\n```python\r\n    def __init__(\r\n        self,\r\n        name,\r\n        parent_device=None,\r\n        clock_terminal=None,\r\n        MAX_name=None,\r\n        static_AO=None,\r\n        static_DO=None,\r\n        clock_mirror_terminal=None,\r\n        acquisition_rate=None,\r\n        AI_range=None,\r\n        AI_start_delay=0,\r\n        AO_range=None,\r\n        max_AI_multi_chan_rate=None,\r\n        max_AI_single_chan_rate=None,\r\n        max_AO_sample_rate=None,\r\n        max_DO_sample_rate=None,\r\n        min_semiperiod_measurement=None,\r\n        num_AI=0,\r\n        num_AO=0,\r\n        num_CI=0,\r\n        ports=None,\r\n        supports_buffered_AO=False,\r\n        supports_buffered_DO=False,\r\n        supports_semiperiod_measurement=False,\r\n        **kwargs\r\n    ):\r\n```\r\n\r\nAlternately (and preferably), subclasses can be made that have the capabilities already set. I have made subclasses for all the models that we know about already.\r\n\r\nAll the subclasses do is set default values for the capabilities arguments. For example, here is one of them in full:\r\n\r\n```python\r\nCAPABILITIES = {\r\n    'AI_range': [-10.0, 10.0],\r\n    'AI_start_delay': 7e-08,\r\n    'AO_range': [-10.0, 10.0],\r\n    'max_AI_multi_chan_rate': 1000000.0,\r\n    'max_AI_single_chan_rate': 2000000.0,\r\n    'max_AO_sample_rate': 2857142.8571428573,\r\n    'max_DO_sample_rate': 10000000.0,\r\n    'min_semiperiod_measurement': 1e-07,\r\n    'num_AI': 32,\r\n    'num_AO': 4,\r\n    'num_CI': 4,\r\n    'ports': {\r\n        'port0': {'num_lines': 32, 'supports_buffered': True},\r\n        'port1': {'num_lines': 8, 'supports_buffered': False},\r\n        'port2': {'num_lines': 8, 'supports_buffered': False},\r\n    },\r\n    'supports_buffered_AO': True,\r\n    'supports_buffered_DO': True,\r\n    'supports_semiperiod_measurement': True,\r\n}\r\n\r\n\r\nclass NI_PCIe_6363(NI_DAQmx):\r\n    description = 'NI-PCIe-6363'\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        # Any provided kwargs take precedent over capabilities\r\n        combined_kwargs = CAPABILITIES.copy()\r\n        combined_kwargs.update(kwargs)\r\n        NI_DAQmx.__init__(self, *args, **combined_kwargs)\r\n```\r\n\r\nFuthermore, these subclasses can be automatically generated for new devices. The file `labscript_devices/NI_DAQmx/models/get_capabilities.py` will introspect the capabilities of all devices attached to the current computer (or configured as 'simulated devices' in NI MAX, meaning this can be done without the actual hardware on hand), and update a JSON file, `labscript_devices/NI_DAQmx/models/capabiltiies.json`. The classes can then be generated from this JSON file and a template, by running `labscript_devices/NI_DAQmx/models/generate_subclasses.py`. There is a `README` file in the folder explaining this process.\r\n\r\nAlthough there are subclasses for the labscript device, all models use the same BLACS tab, BLACS workers, and runviewer parser classes. The capabilities are saved as connection table properties, so the general-purpose classes can read them from there and behave accordingly.\r\n\r\nThe capabilities of any of the subclasses can be overridden by passing in different values as keyword arguments. For example, to configure a smaller range of analog input voltage, you could pass in a keyword argument `AI_range=[-1, 1]` even if the device supports a larger analog input range.\r\n\r\nThere are a number of bugfixes and features in this code based on what has been learned in the Spielman fork and elsewhere. For example, there was a race condition when ending shots - the DAQmx driver sometimes would not know that the device was finished outputting all samples before BLACS came and said task.StopTask(), this would raise an error. This was presumably just because USB communication from the device back to the computer can take a few milliseconds. Shots now end with a call to `Task.WaitUntilTaskDone()` with a one second timeout, which fixes this race condition without wasting any more time than necessary.\r\n\r\nThere was also a bug in DAQmx where the driver would raise obscure errors if digital outputs are all zero for the whole shot. There is now error checking for this, telling you \"please make a digital output do something\". There is more error checking in general in the labscript device, and the code makes fewer assumptions about whether any children have been added, etc.\r\n\r\nThere is an additional feature here that I had added in the Spielman fork but mainline hasn't seen yet: 'clock_mirror_terminal'. This is a channel on which the clock input will also be output, which allows daisy chaining a number of DAQmx devices together when they share a clocking signal.\r\n\r\nSome DAQmx devices do not support clocked output, and so can only have static output. This labscript device supports this, such that analog and digital outputs can be StaticAnalogOut and StaticDigitalOut objects. In this case, if a device supports analog input still, it can still have a parent pseudoclock, but it will only be used to trigger the start of acquisition.\r\n\r\nI have not integrated @PhyNerd's manual mode analog input with this PR yet, but the BLACS worker does acquire during manual mode, transitioning between a manual mode task and a buffered mode task when shots stop and start. It presently just throws the manual mode data down the drain, but there is a logical spot to slot in a zmq send call to send the data to the broker instead once manual mode analog input is merged into mainline and I or someone else has time.\r\n\r\nThe code is Python 2 and 3 compatible. Adding support for a new device requires a Python-3-only library (though it will still work without that library, it will just not format the generated code well).\r\n\r\n\r\nLimitations:\r\n\r\nWhere a device has some digital ports supporting buffered output and some not, I have not bothered to implement support for using all of them simultaneously. If static_DO is True, then you can use all digital outputs as StaticDigitalOut. If static_DO is False, you can use the ports that support buffered output, but simply cannot use the other ports during a shot. We can improve this in the future but I anticipate not many people caring about this (use of the non-buffered outputs during a shot has been unavailable in the existing DAQmx classes for a long time and nobody has complained).\r\n\r\nThese classes are not backward compatible with shots compiled with previous DAQmx classes. However, they should be compatible with existing experiment scripts. BLACS will reject shots with mismatching connection tables, and so will not run old shots. The error message won't be particularly helpful though since it will be about all the connection table properties not matching, and won't specifically emphasise the version. After updating, if BLACS starts up and the BLACS tab finds that the connection table was compiled with an older, incompatible version of an NI DAQmx class, it raises an error saying either to downgrade labscript_devices, or to recompile the connection table. The runviewer parser also raises a similar error if it is given a shot file compiled with the previous classes, but this is not super useful because as it stands, runviewer just suppresses these errors and writes a simple \"could not load device\" line to the terminal. But this is a problem with runviewer, it should be changed to expose the error (there is a TODO in the runviewer code to this effect).\r\n\r\nI have removed the previous device classes from labscript_devices, and replaced them with an import alias that imports the new classes from their new locations within this submodule (eg `from labscript_devices.NI_DAQmx.models import NI_PCIe_6363`) and prints a deprecation warning telling the user to use the new import location.\r\n\r\nAnother limitation is that there is no way to introspect which ports and lines correspond to which 'PFI' on DAQmx devices. There is no systematic pattern and no way I can think of to get at this information programmatically. Therefore the BLACS tab in this PR simply labels all digital outs as 'port<N>/line<M>' and does not label them with their alternate 'PFI' names. This is a change, and may take a little getting used to. We could hard-code the mapping in the subclasses, but as all information about devices is currently introspected, such that no data needs to be manually input by the user to add support for a device, it is unappealing to me to add a manual step such as this, which also adds complexity to the code as the code would then have to handle that some digital outs would have multiple names. Using ports and lines only is simpler.\r\n\r\nAll in all the code in this PR has been quite carefully considered, and while I'm sure there will be bugs to iron out, I've tested it with a number of devices and ensured analog and digital output work, analog input works, and that wait monitors work too. This last one was a pain in the neck because of [different behaviour of different devices when it comes to semiperiod measurements](https://forums.ni.com/t5/Multifunction-DAQ/How-can-I-tell-programmatically-whether-a-given-DAQmx-device-has/m-p/3849997).\r\n\r\nAs always, testing is appreciated.", "markup": "markdown", "html": "<p>This PR adds a subfolder containing a general-purpose labscript device, BLACS tab, and BLACS workers for NI DAQmx devices.</p>\n<p>The capabilities of the device can be added as instantiation arguments:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">clock_terminal</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">MAX_name</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">static_AO</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">static_DO</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">clock_mirror_terminal</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">acquisition_rate</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">AI_range</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">AI_start_delay</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">AO_range</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">max_AI_multi_chan_rate</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">max_AI_single_chan_rate</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">max_AO_sample_rate</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">max_DO_sample_rate</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">min_semiperiod_measurement</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">num_AI</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">num_AO</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">num_CI</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">supports_buffered_AO</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">supports_buffered_DO</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">supports_semiperiod_measurement</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n    <span class=\"p\">):</span>\n</pre></div>\n\n\n<p>Alternately (and preferably), subclasses can be made that have the capabilities already set. I have made subclasses for all the models that we know about already.</p>\n<p>All the subclasses do is set default values for the capabilities arguments. For example, here is one of them in full:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">CAPABILITIES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;AI_range&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;AI_start_delay&#39;</span><span class=\"p\">:</span> <span class=\"mf\">7e-08</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;AO_range&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;max_AI_multi_chan_rate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1000000.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;max_AI_single_chan_rate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">2000000.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;max_AO_sample_rate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">2857142.8571428573</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;max_DO_sample_rate&#39;</span><span class=\"p\">:</span> <span class=\"mf\">10000000.0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;min_semiperiod_measurement&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1e-07</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;num_AI&#39;</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;num_AO&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;num_CI&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;ports&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;port0&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num_lines&#39;</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"s1\">&#39;supports_buffered&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">},</span>\n        <span class=\"s1\">&#39;port1&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num_lines&#39;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;supports_buffered&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">},</span>\n        <span class=\"s1\">&#39;port2&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num_lines&#39;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">&#39;supports_buffered&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">&#39;supports_buffered_AO&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;supports_buffered_DO&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;supports_semiperiod_measurement&#39;</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NI_PCIe_6363</span><span class=\"p\">(</span><span class=\"n\">NI_DAQmx</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NI-PCIe-6363&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Any provided kwargs take precedent over capabilities</span>\n        <span class=\"n\">combined_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">CAPABILITIES</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">combined_kwargs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">NI_DAQmx</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">combined_kwargs</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Futhermore, these subclasses can be automatically generated for new devices. The file <code>labscript_devices/NI_DAQmx/models/get_capabilities.py</code> will introspect the capabilities of all devices attached to the current computer (or configured as 'simulated devices' in NI MAX, meaning this can be done without the actual hardware on hand), and update a JSON file, <code>labscript_devices/NI_DAQmx/models/capabiltiies.json</code>. The classes can then be generated from this JSON file and a template, by running <code>labscript_devices/NI_DAQmx/models/generate_subclasses.py</code>. There is a <code>README</code> file in the folder explaining this process.</p>\n<p>Although there are subclasses for the labscript device, all models use the same BLACS tab, BLACS workers, and runviewer parser classes. The capabilities are saved as connection table properties, so the general-purpose classes can read them from there and behave accordingly.</p>\n<p>The capabilities of any of the subclasses can be overridden by passing in different values as keyword arguments. For example, to configure a smaller range of analog input voltage, you could pass in a keyword argument <code>AI_range=[-1, 1]</code> even if the device supports a larger analog input range.</p>\n<p>There are a number of bugfixes and features in this code based on what has been learned in the Spielman fork and elsewhere. For example, there was a race condition when ending shots - the DAQmx driver sometimes would not know that the device was finished outputting all samples before BLACS came and said task.StopTask(), this would raise an error. This was presumably just because USB communication from the device back to the computer can take a few milliseconds. Shots now end with a call to <code>Task.WaitUntilTaskDone()</code> with a one second timeout, which fixes this race condition without wasting any more time than necessary.</p>\n<p>There was also a bug in DAQmx where the driver would raise obscure errors if digital outputs are all zero for the whole shot. There is now error checking for this, telling you \"please make a digital output do something\". There is more error checking in general in the labscript device, and the code makes fewer assumptions about whether any children have been added, etc.</p>\n<p>There is an additional feature here that I had added in the Spielman fork but mainline hasn't seen yet: 'clock_mirror_terminal'. This is a channel on which the clock input will also be output, which allows daisy chaining a number of DAQmx devices together when they share a clocking signal.</p>\n<p>Some DAQmx devices do not support clocked output, and so can only have static output. This labscript device supports this, such that analog and digital outputs can be StaticAnalogOut and StaticDigitalOut objects. In this case, if a device supports analog input still, it can still have a parent pseudoclock, but it will only be used to trigger the start of acquisition.</p>\n<p>I have not integrated @PhyNerd's manual mode analog input with this PR yet, but the BLACS worker does acquire during manual mode, transitioning between a manual mode task and a buffered mode task when shots stop and start. It presently just throws the manual mode data down the drain, but there is a logical spot to slot in a zmq send call to send the data to the broker instead once manual mode analog input is merged into mainline and I or someone else has time.</p>\n<p>The code is Python 2 and 3 compatible. Adding support for a new device requires a Python-3-only library (though it will still work without that library, it will just not format the generated code well).</p>\n<p>Limitations:</p>\n<p>Where a device has some digital ports supporting buffered output and some not, I have not bothered to implement support for using all of them simultaneously. If static_DO is True, then you can use all digital outputs as StaticDigitalOut. If static_DO is False, you can use the ports that support buffered output, but simply cannot use the other ports during a shot. We can improve this in the future but I anticipate not many people caring about this (use of the non-buffered outputs during a shot has been unavailable in the existing DAQmx classes for a long time and nobody has complained).</p>\n<p>These classes are not backward compatible with shots compiled with previous DAQmx classes. However, they should be compatible with existing experiment scripts. BLACS will reject shots with mismatching connection tables, and so will not run old shots. The error message won't be particularly helpful though since it will be about all the connection table properties not matching, and won't specifically emphasise the version. After updating, if BLACS starts up and the BLACS tab finds that the connection table was compiled with an older, incompatible version of an NI DAQmx class, it raises an error saying either to downgrade labscript_devices, or to recompile the connection table. The runviewer parser also raises a similar error if it is given a shot file compiled with the previous classes, but this is not super useful because as it stands, runviewer just suppresses these errors and writes a simple \"could not load device\" line to the terminal. But this is a problem with runviewer, it should be changed to expose the error (there is a TODO in the runviewer code to this effect).</p>\n<p>I have removed the previous device classes from labscript_devices, and replaced them with an import alias that imports the new classes from their new locations within this submodule (eg <code>from labscript_devices.NI_DAQmx.models import NI_PCIe_6363</code>) and prints a deprecation warning telling the user to use the new import location.</p>\n<p>Another limitation is that there is no way to introspect which ports and lines correspond to which 'PFI' on DAQmx devices. There is no systematic pattern and no way I can think of to get at this information programmatically. Therefore the BLACS tab in this PR simply labels all digital outs as 'port&lt;N&gt;/line&lt;M&gt;' and does not label them with their alternate 'PFI' names. This is a change, and may take a little getting used to. We could hard-code the mapping in the subclasses, but as all information about devices is currently introspected, such that no data needs to be manually input by the user to add support for a device, it is unappealing to me to add a manual step such as this, which also adds complexity to the code as the code would then have to handle that some digital outs would have multiple names. Using ports and lines only is simpler.</p>\n<p>All in all the code in this PR has been quite carefully considered, and while I'm sure there will be bugs to iron out, I've tested it with a number of devices and ensured analog and digital output work, analog input works, and that wait monitors work too. This last one was a pain in the neck because of <a data-is-external-link=\"true\" href=\"https://forums.ni.com/t5/Multifunction-DAQ/How-can-I-tell-programmatically-whether-a-given-DAQmx-device-has/m-p/3849997\" rel=\"nofollow\">different behaviour of different devices when it comes to semiperiod measurements</a>.</p>\n<p>As always, testing is appreciated.</p>", "type": "rendered"}, "source": {"commit": {"hash": "192fea8ab7df", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/192fea8ab7df"}, "html": {"href": "#!/cbillington/labscript_devices/commits/192fea8ab7df"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "NI_DAQmx"}}, "comment_count": 34, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-01T17:19:17.201430+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "fe5e25655613", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/fe5e25655613.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/fe5e25655613"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Make first line of pulseblaster programming conditional on programming/starting scheme, otherwise the pulseblaster doesn't start in pb_stop_programming/STOP mode.\r\n\r\nThis is a fix that has been in use in the Spielman fork for some time, the issue has presumably not shown up for users of mainline labscript since few people are using pb_stop_programming/STOP mode.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/57/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:66135a4f6547%0D0db03d1ac302?from_pullrequest_id=57"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/57/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/57.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/57/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/57/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/57"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/57/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:66135a4f6547%0D0db03d1ac302?from_pullrequest_id=57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/57/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/57/statuses_page=1.json"}}, "title": "Fix broken pb_no_dds class in pb_stop_programming/STOP mode", "close_source_branch": true, "type": "pullrequest", "id": 57, "destination": {"commit": {"hash": "0db03d1ac302", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/0db03d1ac302.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/0db03d1ac302"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2018-11-28T20:31:13.037032+00:00", "summary": {"raw": "Make first line of pulseblaster programming conditional on programming/starting scheme, otherwise the pulseblaster doesn't start in pb_stop_programming/STOP mode.\r\n\r\nThis is a fix that has been in use in the Spielman fork for some time, the issue has presumably not shown up for users of mainline labscript since few people are using pb_stop_programming/STOP mode.", "markup": "markdown", "html": "<p>Make first line of pulseblaster programming conditional on programming/starting scheme, otherwise the pulseblaster doesn't start in pb_stop_programming/STOP mode.</p>\n<p>This is a fix that has been in use in the Spielman fork for some time, the issue has presumably not shown up for users of mainline labscript since few people are using pb_stop_programming/STOP mode.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5b3f6e368d5a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/5b3f6e368d5a"}, "html": {"href": "#!/cbillington/labscript_devices/commits/5b3f6e368d5a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pb_no_dds_bugfix"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T16:18:12.931610+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "66135a4f6547", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/66135a4f6547.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/66135a4f6547"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Updated labscript version requirement and bumped `__version__` for release", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/58/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:591d87b520b1%0De525ad379b1d?from_pullrequest_id=58"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/58/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/58.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/58/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/58/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/58"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/58/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:591d87b520b1%0De525ad379b1d?from_pullrequest_id=58"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/58/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/58/statuses_page=1.json"}}, "title": "Updated labscript version requirement and bumped `__version__` for release", "close_source_branch": true, "type": "pullrequest", "id": 58, "destination": {"commit": {"hash": "e525ad379b1d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e525ad379b1d.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e525ad379b1d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-01-15T23:55:01.868106+00:00", "summary": {"raw": "Updated labscript version requirement and bumped `__version__` for release", "markup": "markdown", "html": "<p>Updated labscript version requirement and bumped <code>__version__</code> for release</p>", "type": "rendered"}, "source": {"commit": {"hash": "14bce634620b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/14bce634620b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/14bce634620b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "pstarkey/updated-labscript-version-requirement-an-1547596478971"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-01-16T00:33:50.254778+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "591d87b520b1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/591d87b520b1.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/591d87b520b1"}}}, "closed_by": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"description": "* Have DummyPseudoclock call PseudoclockDevice.generate_code(), and implement abort()\r\n\r\n* Rename submodules of dummy pseudoclock to all be plural.\r\n    This is a better precedent for devices to use, as all submodules can follow\r\n    the same naming convention and not have to rename from singular to plural\r\n    if they grow an extra class.\r\n\r\nDummy Pseudoclock is only used for testing so I don't think the submodule renaming calls for any backward-compatibility shims or anything to keep current code working.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/59/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:8e33a9d51532%0D7c6e4619bbc7?from_pullrequest_id=59"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/59/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/59.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/59/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/59/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/59"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/59/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:8e33a9d51532%0D7c6e4619bbc7?from_pullrequest_id=59"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/59/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/59/statuses_page=1.json"}}, "title": "Dummy Pseudoclock more functionality, rename submodules", "close_source_branch": true, "type": "pullrequest", "id": 59, "destination": {"commit": {"hash": "7c6e4619bbc7", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/7c6e4619bbc7.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/7c6e4619bbc7"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-01-28T22:00:17.218340+00:00", "summary": {"raw": "* Have DummyPseudoclock call PseudoclockDevice.generate_code(), and implement abort()\r\n\r\n* Rename submodules of dummy pseudoclock to all be plural.\r\n    This is a better precedent for devices to use, as all submodules can follow\r\n    the same naming convention and not have to rename from singular to plural\r\n    if they grow an extra class.\r\n\r\nDummy Pseudoclock is only used for testing so I don't think the submodule renaming calls for any backward-compatibility shims or anything to keep current code working.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Have DummyPseudoclock call PseudoclockDevice.generate_code(), and implement abort()</p>\n</li>\n<li>\n<p>Rename submodules of dummy pseudoclock to all be plural.\n    This is a better precedent for devices to use, as all submodules can follow\n    the same naming convention and not have to rename from singular to plural\n    if they grow an extra class.</p>\n</li>\n</ul>\n<p>Dummy Pseudoclock is only used for testing so I don't think the submodule renaming calls for any backward-compatibility shims or anything to keep current code working.</p>", "type": "rendered"}, "source": {"commit": {"hash": "add445e7e61c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/add445e7e61c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/add445e7e61c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "dummy_pseudoclock"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-04T18:29:41.098571+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "8e33a9d51532", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/8e33a9d51532.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/8e33a9d51532"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Adding PulseBlasterESRPro200 class, much like the PulseBlasterESRPro500 but with a different core\\_clock\\_freq, clock\\_resolution, and clock\\_limit.\r\n* Fixed typo in device\\_worker\\_class name.\r\n* Adding runviewer parser to PulseBlasterESRPro200.\r\n* Omitted @labscript\\_device and @BLACS\\_worker decorators following deprecation of these in arbitrary\\_subfolders PR \\(labscript\\_devices 2.2.0\\).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/60/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:7c6e4619bbc7%0Db2aecf92d620?from_pullrequest_id=60"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/60/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/60.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/60/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/60/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/60"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/60/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:7c6e4619bbc7%0Db2aecf92d620?from_pullrequest_id=60"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/60/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/60/statuses_page=1.json"}}, "title": "PulseBlasterESRPro200", "close_source_branch": true, "type": "pullrequest", "id": 60, "destination": {"commit": {"hash": "b2aecf92d620", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b2aecf92d620.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b2aecf92d620"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-01-31T01:54:35.917930+00:00", "summary": {"raw": "* Adding PulseBlasterESRPro200 class, much like the PulseBlasterESRPro500 but with a different core\\_clock\\_freq, clock\\_resolution, and clock\\_limit.\r\n* Fixed typo in device\\_worker\\_class name.\r\n* Adding runviewer parser to PulseBlasterESRPro200.\r\n* Omitted @labscript\\_device and @BLACS\\_worker decorators following deprecation of these in arbitrary\\_subfolders PR \\(labscript\\_devices 2.2.0\\).", "markup": "markdown", "html": "<ul>\n<li>Adding PulseBlasterESRPro200 class, much like the PulseBlasterESRPro500 but with a different core_clock_freq, clock_resolution, and clock_limit.</li>\n<li>Fixed typo in device_worker_class name.</li>\n<li>Adding runviewer parser to PulseBlasterESRPro200.</li>\n<li>Omitted @labscript_device and @BLACS_worker decorators following deprecation of these in arbitrary_subfolders PR (labscript_devices 2.2.0).</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "091537ed607f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/091537ed607f"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/091537ed607f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "PulseBlasterESRPro200"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-01-31T02:51:55.886939+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "7c6e4619bbc7", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/7c6e4619bbc7.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/7c6e4619bbc7"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/61/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:e622c32d8b8c%0Decdd8ed52612?from_pullrequest_id=61"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/61/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/61"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:e622c32d8b8c%0Decdd8ed52612?from_pullrequest_id=61"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/61/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/61/statuses_page=1.json"}}, "title": "Tektronix oscilloscope", "close_source_branch": true, "type": "pullrequest", "id": 61, "destination": {"commit": {"hash": "ecdd8ed52612", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ecdd8ed52612.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ecdd8ed52612"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-03-09T05:29:11.612424+00:00", "summary": {"raw": "Device class for Tektronix oscilloscopes using [pyvisa](https://pyvisa.readthedocs.io).\r\n\r\nThis derives from bits and pieces of:\r\n\r\n* pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.\r\n* @{557058:940c20da-c736-4e3a-a30f-58224616fb0a} 's [telepythic](https://bitbucket.org/martijnj/telepythic), a module for communicating with instruments over VISA or telnet or other protocols \\(much functionality covered by pyvisa and not Python3 compatible\\).\r\n* Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton\\_to\\_manual and transition\\_to\\_static. This was based off of CameraServer.py. Nice, but:\r\n\r\n    * The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.\r\n    * There\u2019s no useful information in the blacs tab\u2019s terminal output.\r\n    \r\n\r\nThe aim here is to strip down a useful subset of the above three implementations and make a labscript device which:\r\n\r\n1. Works as device tab in blacs with no need to launch a server process independently;\r\n2. Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;\r\n3. Does binary transfer of waveforms;\r\n4. Is Python 2 and 3 compatible;\r\n5. TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.\r\n6. Writes the waveforms to a standard location in the h5 file at the end of the shot.\r\n7. Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.\r\n\r\nTek scopes use one of two different commands to retrieve the waveform preamble, either `WFMO` or `WFMP`. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. `WFMP:XUNIT?;:WFMP:YUNIT?;:` etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.\r\n\r\nI have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.\r\n\r\nI'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.", "markup": "markdown", "html": "<p>Device class for Tektronix oscilloscopes using <a data-is-external-link=\"true\" href=\"https://pyvisa.readthedocs.io\" rel=\"nofollow\">pyvisa</a>.</p>\n<p>This derives from bits and pieces of:</p>\n<ul>\n<li>pytronix, a module I wrote years ago for grabbing data and screenshots from Tek scopes over ethernet and saving the waveforms to h5.</li>\n<li><span class=\"ap-mention\" data-atlassian-id=\"557058:940c20da-c736-4e3a-a30f-58224616fb0a\">@Martijn Jasperse</span> 's <a data-is-external-link=\"true\" href=\"https://bitbucket.org/martijnj/telepythic\" rel=\"nofollow\">telepythic</a>, a module for communicating with instruments over VISA or telnet or other protocols (much functionality covered by pyvisa and not Python3 compatible).</li>\n<li>\n<p>Dimitrios Trypogeorgos\u2019s really clean and simple way to integrate Tek scopes into labscript; using a generic BLACS tab which communicates with a \u2018server\u2019 running on any host, sending it software triggers to transiton_to_manual and transition_to_static. This was based off of CameraServer.py. Nice, but:</p>\n<ul>\n<li>The actual scope control is not done by the blacs tab, but the server code which has to be launched separately from blacs, and re-launched separately if it crashes.</li>\n<li>There\u2019s no useful information in the blacs tab\u2019s terminal output.</li>\n</ul>\n</li>\n</ul>\n<p>The aim here is to strip down a useful subset of the above three implementations and make a labscript device which:</p>\n<ol>\n<li>Works as device tab in blacs with no need to launch a server process independently;</li>\n<li>Works with multiple product lines of Tektronix scopes, which have different formatting of the waveform preamble;</li>\n<li>Does binary transfer of waveforms;</li>\n<li>Is Python 2 and 3 compatible;</li>\n<li>TODO: Configure the scope before each shot, including the ability to pass per-shot options like which channels to capture, other acquisition options, and the communications timeout.</li>\n<li>Writes the waveforms to a standard location in the h5 file at the end of the shot.</li>\n<li>Save them as a single compound dataset with named columns, e.g \u2018t\u2019, \u2018CH1\u2019, etc. with attributes of this data set the waveform preamble.</li>\n</ol>\n<p>Tek scopes use one of two different commands to retrieve the waveform preamble, either <code>WFMO</code> or <code>WFMP</code>. The response format of the preamble is also dependent on the scope, so instead we'll just get the preamble attributes one at a time, or with a concatenated command, e.g. <code>WFMP:XUNIT?;:WFMP:YUNIT?;:</code> etc..., which takes a little longer, but beats having to write a per-scope dictionary of the preamble format.</p>\n<p>I have only tested this on a TDS2002B over USB, but this should translate to communicating with other scopes over ethernet, so long as they are VISA devices.</p>\n<p>I'm using the waveform preamble values to convert the 8- or 16-bit integers returned from the scope into floating point voltages. This is fine for for the 2500 points returned by TDS2000 series scopes, but might be unwieldy for the deep memory devices, and warrant saving waveforms as integer types, with the dataset attributes available to convert to floats when reading from the shot file.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5754477217cc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices/commit/5754477217cc"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices/commits/5754477217cc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/quantum_gas_microscope/labscript_devices"}, "html": {"href": "https://bitbucket.org/quantum_gas_microscope/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{872a5cd6-f212-40ce-bd1d-03f667af7296}ts=1896666"}}, "type": "repository", "name": "labscript_devices", "full_name": "quantum_gas_microscope/labscript_devices", "uuid": "{872a5cd6-f212-40ce-bd1d-03f667af7296}"}, "branch": {"name": "TekScope"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-03T15:30:45.329626+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Adds the ability to control the \u201cphase reset\u201d line for each DDS on a pulseblaster to resolve issue #27. See Table 4 \\(page 15\\) of the SpinCore PulseBlaster DDS Model DDS-II-300 USB Owner\u2019s Manual for a description of the phase\\_reset flag.\r\n\r\nA 'phase\\_reset' digital quantity is automatically generated for each pulseblaster DDS, and convenience functions 'hold\\_phase' and 'release\\_phase' are hacked on to these DDS decice instances.\r\n\r\nNote that my first attempt at getting this running was to use a separate digital output device \\(see first two commits, code at this point is functional and tested on hardware\\), however given that this \u201cdevice\u201d is a property of a DDS, I feel as though it is more appropriate to add it in a similar way to the internal gate control.\r\n\r\nI\u2019m happy to make changes, particularly regarding the convenience function names, implementation and existence in the first place \\(I recall there was a discussion a while ago as to whether the DDS gate really needs the enable/disable functions\\).\r\n\r\nThis has been tested in a basic experiment with a single DDS on a PulseBlaster DDS-II-300 USB. The extra instructions are generated in the PULSE\\_PROGRAM \\(where we had previously hard coded 0\u2019s\\), and rf pulses are observed on an oscilloscope to become phase stable when an appropriate phase hold is applied and released before the pulse.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/62/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:21cf797f0b6c%0D49bf56369af4?from_pullrequest_id=62"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/62/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/62.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/62/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/62/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/62"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/62/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:21cf797f0b6c%0D49bf56369af4?from_pullrequest_id=62"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/62/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/62/statuses_page=1.json"}}, "title": "Pulseblaster phase resets", "close_source_branch": true, "type": "pullrequest", "id": 62, "destination": {"commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-03-28T06:10:24.851332+00:00", "summary": {"raw": "Adds the ability to control the \u201cphase reset\u201d line for each DDS on a pulseblaster to resolve issue #27. See Table 4 \\(page 15\\) of the SpinCore PulseBlaster DDS Model DDS-II-300 USB Owner\u2019s Manual for a description of the phase\\_reset flag.\r\n\r\nA 'phase\\_reset' digital quantity is automatically generated for each pulseblaster DDS, and convenience functions 'hold\\_phase' and 'release\\_phase' are hacked on to these DDS decice instances.\r\n\r\nNote that my first attempt at getting this running was to use a separate digital output device \\(see first two commits, code at this point is functional and tested on hardware\\), however given that this \u201cdevice\u201d is a property of a DDS, I feel as though it is more appropriate to add it in a similar way to the internal gate control.\r\n\r\nI\u2019m happy to make changes, particularly regarding the convenience function names, implementation and existence in the first place \\(I recall there was a discussion a while ago as to whether the DDS gate really needs the enable/disable functions\\).\r\n\r\nThis has been tested in a basic experiment with a single DDS on a PulseBlaster DDS-II-300 USB. The extra instructions are generated in the PULSE\\_PROGRAM \\(where we had previously hard coded 0\u2019s\\), and rf pulses are observed on an oscilloscope to become phase stable when an appropriate phase hold is applied and released before the pulse.", "markup": "markdown", "html": "<p>Adds the ability to control the \u201cphase reset\u201d line for each DDS on a pulseblaster to resolve issue <a href=\"#!/labscript_suite/labscript_devices/issues/27/pulseblaster-phase-resets\" rel=\"nofollow\" title=\"Pulseblaster phase resets\" class=\"ap-connect-link\"><s>#27</s></a>. See Table 4 (page 15) of the SpinCore PulseBlaster DDS Model DDS-II-300 USB Owner\u2019s Manual for a description of the phase_reset flag.</p>\n<p>A 'phase_reset' digital quantity is automatically generated for each pulseblaster DDS, and convenience functions 'hold_phase' and 'release_phase' are hacked on to these DDS decice instances.</p>\n<p>Note that my first attempt at getting this running was to use a separate digital output device (see first two commits, code at this point is functional and tested on hardware), however given that this \u201cdevice\u201d is a property of a DDS, I feel as though it is more appropriate to add it in a similar way to the internal gate control.</p>\n<p>I\u2019m happy to make changes, particularly regarding the convenience function names, implementation and existence in the first place (I recall there was a discussion a while ago as to whether the DDS gate really needs the enable/disable functions).</p>\n<p>This has been tested in a basic experiment with a single DDS on a PulseBlaster DDS-II-300 USB. The extra instructions are generated in the PULSE_PROGRAM (where we had previously hard coded 0\u2019s), and rf pulses are observed on an oscilloscope to become phase stable when an appropriate phase hold is applied and released before the pulse.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ce50da70f476", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices/commit/ce50da70f476"}, "html": {"href": "#!/monashkrb/labscript_devices/commits/ce50da70f476"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/labscript_devices"}, "html": {"href": "#!/monashkrb/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashkrb/labscript_devices", "uuid": "{fe20fdca-6c41-4845-89e9-f15ba4c9bc57}"}, "branch": {"name": "pb_phase_resets"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-20T13:58:57.010394+00:00", "author": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "merge_commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:ab5dc8e458ac%0D11f64baed78b?from_pullrequest_id=63"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/63"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:ab5dc8e458ac%0D11f64baed78b?from_pullrequest_id=63"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/63/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/63/statuses_page=1.json"}}, "title": "IMAQdxCamera", "close_source_branch": true, "type": "pullrequest", "id": 63, "destination": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-04-08T19:39:48.213858+00:00", "summary": {"raw": "This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.\r\n\r\nIt includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.\r\n\r\nOnce remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.\r\n\r\nThe code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python < 3.6 saying so, since the version check is in `__init__.py` before the opportunity for SyntaxErrors in other source files.\r\n\r\nThe BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.\r\n\r\nThis device addresses issues #31 and #32.\r\n\r\nFor issue #32, it raises an exception during `transition_to_manual` if it can't stop the acquisition thread within the timeout.\r\n\r\nFor issue #31, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the `imaqdx_attributes` keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.\r\n\r\nThe existing Camera device conflates trigger duration with exposure time - labscript *does* need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an `exposure_time` keyword argument - instead it has a `trigger_duration` keyword argument and leaves configuration of exposure up to the user via setting `imaqdx_attributes`. \r\n\r\nIn order to not assume names of attributes that should be *saved* to the HDF5 file, this code simply saves *all* attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.\r\n\r\nSetting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to `stop_time + 5` seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the `grab` function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.\r\n\r\nI also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. \r\n\r\nI also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.\r\n\r\nThe `expose()` method re-orders arguments so that `t` is first, in line with (almost?) all other labscript functions and methods that take a `t` argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.\r\n\r\nThese changes depend on pull request #45, so I'll do some version tagging and add a version check to this code once that is merged.\r\n\r\nI'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.", "markup": "markdown", "html": "<p>This is a refactoring of the imaqdx camera server code into a regular labscript device with a regular BLACS tab and worker.</p>\n<p>It includes a separate IMAQdxCamera class that is distinct from the Camera labscript device, which remains as it is using the client/server type of setup. At some point in the future I would want to consider removing the separate server assuming everything pans out with this one and remote devices, but there is no rush.</p>\n<p>Once remote devices is working (next on my list), this will be able to replace the use of the stand-alone python-based imaqdx camera server. It is not identical to the behaviour of the imaqdx server however, see below for differences. However I believe the differences are good, or at least, that the simplifications are worth it. The resulting code is very straightforward - the BLACS worker is only 209 lines of code, and the device as a whole only 409.</p>\n<p>The code is Python 3.6 + only. This can't be helped since the nivision module requires Python 3, and I decided not to bother retaining Python 2 compatibility for the labscript device - even though it would probably be fine (might require some thinking about strings).  The module raises an error if it is imported on Python &lt; 3.6 saying so, since the version check is in <code>__init__.py</code> before the opportunity for SyntaxErrors in other source files.</p>\n<p>The BLACS tab has a manual mode which can be used to snap an image or acquire images continuously, displaying them in a pyqtgraph image widget. It also has a button that pops up a window showing the current imaqdx attributes for the camera, as a dictionary appropriate for copying and pasting into your connection table for the settings you wish to customise.</p>\n<p>This device addresses issues <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a> and <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/32/imaqdx_server-should-optionally-propagate\" rel=\"nofollow\" title=\"imaqdx_server should optionally propagate exceptions if it cannot acquire images\" class=\"ap-connect-link\"><s>#32</s></a>, it raises an exception during <code>transition_to_manual</code> if it can't stop the acquisition thread within the timeout.</p>\n<p>For issue <a href=\"#!/labscript_suite/labscript_devices/issues/31/imaqdx-camera-server-makes-model-specific\" rel=\"nofollow\" title=\"imaqdx camera server makes model-specific assumptions\" class=\"ap-connect-link\">#31</a>, the code simply does not set any attributes other than than those explicitly requested by the user. This means that the exposure time is not settable as an instantiation argument - if the user wants to set it they need to pass it in as an entry in a dict for the <code>imaqdx_attributes</code> keyword argument, using whatever the appropriate attribute name is for their camera, along with anything else they want to configure.</p>\n<p>The existing Camera device conflates trigger duration with exposure time - labscript <em>does</em> need to know the trigger duration in order to generate triggers, but it should not assume that this corresponds to the exposure time (it might, but this depends how the device is configured and is up to the user). So this labscript device does not have an <code>exposure_time</code> keyword argument - instead it has a <code>trigger_duration</code> keyword argument and leaves configuration of exposure up to the user via setting <code>imaqdx_attributes</code>. </p>\n<p>In order to not assume names of attributes that should be <em>saved</em> to the HDF5 file, this code simply saves <em>all</em> attributes to the HDF5 file. That way we do not need to know what the specific attributes for image dimensions etc are named, since they are not consistent from camera to camera.</p>\n<p>Setting the timeout attribute prior to acquiring images is also not necessary, as far as I can tell. The previous code would set the timeout attribute\u2014if it had not been specified by the user\u2014to <code>stop_time + 5</code> seconds.  But this is not necessary, since a timeout error mid-shot is simply caught and the grab function called again. There is no harm to timing out regularly throughout the shot (images are buffered in the driver so there is no need to be within the <code>grab</code> function call at the precise moment the image is acquired), in fact more frequent timeouts are better since the code can check for an abort sooner. So this device removes the timeout setting code which simplifies things.</p>\n<p>I also revamped the attribute setting and getting. Attributes are now all string names and have values of the correct datatype for the attribute in question - previously they were all coerced to strings and it was a bit of a mess - some attributes simply couldn't be set as the coercion couldn't be done correctly. </p>\n<p>I also removed the customisation of whether you want the images stored as named exposures or in 'raw' format in the HDF5 file, and whether you want them 'imagified' in the HDF5 file (such that the images can be viewed in HDFview). The 'raw' format was the Spielman fork convention and was made configurable when the imaqdx server was mainlined, to retain interoperability with Spielman fork implementations. But since this is a new device class not compatible with the Spielman fork in any case, there isn't any need for inter-operability, and I don't think objections to how images are stored are strong enough for it to be worth keeping this configurable. As for imagifying the HDF5 datasets, I don't see any reason not to do this as a matter of course, so it is not configurable.</p>\n<p>The <code>expose()</code> method re-orders arguments so that <code>t</code> is first, in line with (almost?) all other labscript functions and methods that take a <code>t</code> argument. However, if it detects that the first two arguments are a string and a float or int in the opposite order, it will swap them for backward compatibility.</p>\n<p>These changes depend on <a href=\"#!/labscript_suite/labscript_devices/pull-requests/45/resolve-issue-26\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #45</a>, so I'll do some version tagging and add a version check to this code once that is merged.</p>\n<p>I'll test some of the changes I made over the weekend tomorrow at NIST and maybe add some screenshots to the pull request.</p>", "type": "rendered"}, "source": {"commit": {"hash": "71e45ceeda5c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/71e45ceeda5c"}, "html": {"href": "#!/cbillington/labscript_devices/commits/71e45ceeda5c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-01T19:53:47.506865+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ab5dc8e458ac", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ab5dc8e458ac.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ab5dc8e458ac"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Have DummyIntermediateDevice call parent class's generate_code so that any child\r\ndevices will have their generate_code methods called.\r\nRename parent argument to parent_device in line with other labscript devices.\r\n\r\nI'm using this to test the IMAQdxCamera: see [here](#!/cbillington/labscript_devices/src/IMAQdxCamera/IMAQdxCamera/testing/test.py). The IMAQdxCamera has a 'mock' connection table property that makes the BLACS worker return fake images so you can test without a real camera. This only works with a dummy pseudoclock and a dummy intermediate device though, if the dummy intermediate device calls the camera's generate_code method, hence this change.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/64/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:19038d14e6cd%0D1e773740acf4?from_pullrequest_id=64"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/64/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/64.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/64/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/64/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/64"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/64/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:19038d14e6cd%0D1e773740acf4?from_pullrequest_id=64"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/64/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/64/statuses_page=1.json"}}, "title": "minor DummyIntermediateDevice changes", "close_source_branch": true, "type": "pullrequest", "id": 64, "destination": {"commit": {"hash": "1e773740acf4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1e773740acf4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1e773740acf4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-04-25T20:10:55.605595+00:00", "summary": {"raw": "Have DummyIntermediateDevice call parent class's generate_code so that any child\r\ndevices will have their generate_code methods called.\r\nRename parent argument to parent_device in line with other labscript devices.\r\n\r\nI'm using this to test the IMAQdxCamera: see [here](#!/cbillington/labscript_devices/src/IMAQdxCamera/IMAQdxCamera/testing/test.py). The IMAQdxCamera has a 'mock' connection table property that makes the BLACS worker return fake images so you can test without a real camera. This only works with a dummy pseudoclock and a dummy intermediate device though, if the dummy intermediate device calls the camera's generate_code method, hence this change.", "markup": "markdown", "html": "<p>Have DummyIntermediateDevice call parent class's generate_code so that any child\ndevices will have their generate_code methods called.\nRename parent argument to parent_device in line with other labscript devices.</p>\n<p>I'm using this to test the IMAQdxCamera: see <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_devices/src/IMAQdxCamera/IMAQdxCamera/testing/test.py\" rel=\"nofollow\">here</a>. The IMAQdxCamera has a 'mock' connection table property that makes the BLACS worker return fake images so you can test without a real camera. This only works with a dummy pseudoclock and a dummy intermediate device though, if the dummy intermediate device calls the camera's generate_code method, hence this change.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a7cc8a8488e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/a7cc8a8488e3"}, "html": {"href": "#!/cbillington/labscript_devices/commits/a7cc8a8488e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "DummyIntermediateDevice"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-28T15:25:58.804422+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "19038d14e6cd", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/19038d14e6cd.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/19038d14e6cd"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "The OpalKelly library needs bytes on PY2 and strings on PY3.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/65/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:11f64baed78b%0D19038d14e6cd?from_pullrequest_id=65"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/65/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/65.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/65/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/65/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/65"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/65/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:11f64baed78b%0D19038d14e6cd?from_pullrequest_id=65"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/65/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/65/statuses_page=1.json"}}, "title": "Fixed bug in CiceroOpalKellyXEM3001 device", "close_source_branch": false, "type": "pullrequest", "id": 65, "destination": {"commit": {"hash": "19038d14e6cd", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/19038d14e6cd.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/19038d14e6cd"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-04-29T01:38:00.130032+00:00", "summary": {"raw": "The OpalKelly library needs bytes on PY2 and strings on PY3.", "markup": "markdown", "html": "<p>The OpalKelly library needs bytes on PY2 and strings on PY3.</p>", "type": "rendered"}, "source": {"commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/labscript_devices/commit/11f64baed78b"}, "html": {"href": "#!/philipstarkey/labscript_devices/commits/11f64baed78b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/labscript_devices"}, "html": {"href": "#!/philipstarkey/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c015837e-2acd-4f39-9b05-05b4f6d854e8}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "philipstarkey/labscript_devices", "uuid": "{c015837e-2acd-4f39-9b05-05b4f6d854e8}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-29T01:40:21.420324+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "merge_commit": {"hash": "11f64baed78b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/11f64baed78b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/11f64baed78b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Monkeypatch a bugfix for a memory leak in pynivision. This memory leak meant the data for every image acquired would not be freed, requiring process restarts every now and again, and making continuous acquisition during manual mode untenable.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/66/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:49bf56369af4%0Dab5dc8e458ac?from_pullrequest_id=66"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/66/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/66.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/66/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/66/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/66"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/66/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:49bf56369af4%0Dab5dc8e458ac?from_pullrequest_id=66"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/66/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/66/statuses_page=1.json"}}, "title": "Fix memory leak in IMAQdxCamera", "close_source_branch": true, "type": "pullrequest", "id": 66, "destination": {"commit": {"hash": "ab5dc8e458ac", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/ab5dc8e458ac.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/ab5dc8e458ac"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-05-07T19:02:07.194897+00:00", "summary": {"raw": "Monkeypatch a bugfix for a memory leak in pynivision. This memory leak meant the data for every image acquired would not be freed, requiring process restarts every now and again, and making continuous acquisition during manual mode untenable.", "markup": "markdown", "html": "<p>Monkeypatch a bugfix for a memory leak in pynivision. This memory leak meant the data for every image acquired would not be freed, requiring process restarts every now and again, and making continuous acquisition during manual mode untenable.</p>", "type": "rendered"}, "source": {"commit": {"hash": "482c6248bb0d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/482c6248bb0d"}, "html": {"href": "#!/cbillington/labscript_devices/commits/482c6248bb0d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-12T22:56:52.740254+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "49bf56369af4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/49bf56369af4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/49bf56369af4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:d61ada6ffa70%0D21cf797f0b6c?from_pullrequest_id=67"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/67"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:d61ada6ffa70%0D21cf797f0b6c?from_pullrequest_id=67"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/67/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/67/statuses_page=1.json"}}, "title": "Pulse width fixes (issue #33)", "close_source_branch": true, "type": "pullrequest", "id": 67, "destination": {"commit": {"hash": "21cf797f0b6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/21cf797f0b6c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/21cf797f0b6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-05-15T21:59:58.674414+00:00", "summary": {"raw": "This PR fixes issue #33. \r\n\r\nRather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).\r\n\r\nFor each clock tick, the high time is half the clock period if `pulse_width='symmetric'` (the default), the minimum possible if `pulse_width='minimum'`, or a fixed value if `pulse_width` is given as a number.\r\n\r\nThe high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to *both* the high and low times of the clock ticks.\r\n\r\nThe low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.\r\n\r\nIf the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.\r\n\r\nHere are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.\r\n\r\n![pulseblaster_pulses.png](data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png)", "markup": "markdown", "html": "<p>This PR fixes issue <a href=\"#!/labscript_suite/labscript_devices/issues/33/setting-pulseblaster-pulse_width-has\" rel=\"nofollow\" title=\"Setting pulseblaster pulse_width has incorrect results; spurious error.\" class=\"ap-connect-link\"><s>#33</s></a>. </p>\n<p>Rather than hard-coding 55 seconds as the max instruction length, Pulseblasters now have a long delay time computed from their core clock freq, which has been added as a class attribute to every subclass. (this is messy, as it is duplicated in the BLACS worker classes too. It should be passed as a connection table property ideally, but this will have to wait for a more general 'pulseblaster unification' change I think, along the lines of the NI DAQ unification).</p>\n<p>For each clock tick, the high time is half the clock period if <code>pulse_width='symmetric'</code> (the default), the minimum possible if <code>pulse_width='minimum'</code>, or a fixed value if <code>pulse_width</code> is given as a number.</p>\n<p>The high time is then clipped to self.long_delay if it is larger, in which case the pulse_width argument is not honoured, but 57 second high times ought to be visible on scopes and not too fast for any devices, so this is preferable to the alternative of adding LONG_DELAY instructions to <em>both</em> the high and low times of the clock ticks.</p>\n<p>The low time is then computed as whatever is left, and split into a LONG_DELAY instruction plus the remainder as an END_LOOP instruction, as before.</p>\n<p>If the PulseBlaster has no external clocks for this clock tick, it uses a LONG_DELAY plus the remainder as a CONTINUE instruction, as before.</p>\n<p>Here are some diagrams of what the code is supposed to be doing. This is more or less what it was supposed to be doing before, but there were confused factors of two around, presumably to try and make the clock ticks symmetric in the presence of a long_delay instruction. However, there was never more than one long_delay instruction inserted, meaning symmetric ticks were never being created in any case. This change makes no attempt to keep clock ticks symmetric in the presence of a long delay - 57 seconds of high time is plenty :). I'll test each case and make some plots of the results to show a before and after for each case, and to make sure that everything is correct.</p>\n<p><img alt=\"pulseblaster_pulses.png\" src=\"data/bitbucket.org/repo/7EEj84e/images/3005780948-pulseblaster_pulses.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "d316d3b25452", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/d316d3b25452"}, "html": {"href": "#!/cbillington/labscript_devices/commits/d316d3b25452"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "pulse-width-fixes"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-01T16:36:21.556251+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d61ada6ffa70", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/d61ada6ffa70.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/d61ada6ffa70"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fix issue with IMAQdxCamera - if using a mock device and pynivision installed,\r\nbut nivision itself not installed, one got an error on worker startup.\r\nDelay importing nivision to be dependent on mock=False to fix this and raise\r\nthe actual import error as it comes.\r\n\r\nAlso, make IMAQdxCamera friendier to subclassing. Fixes issue #34\r\n\r\nRenamed `imaqdx_attributes` to just `camera_attributes`. No backward\r\ncompatibility provided for this, since this class is fairly new.\r\n\r\nAllow specifying worker class and camera interface class as class attributes,\r\nin the case that the subclass simply changes these and nothing else about\r\nworker class creation, or about the instantiation of the interface class.\r\n\r\nRemove IMAQdx specific code from worker class, into interface class.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/68/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:426f64fa05b8%0Dd61ada6ffa70?from_pullrequest_id=68"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/68/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/68.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/68/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/68/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/68"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/68/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:426f64fa05b8%0Dd61ada6ffa70?from_pullrequest_id=68"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/68/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/68/statuses_page=1.json"}}, "title": "More flexible mock IMAQdx Camera, and more subclassing-friendly classes", "close_source_branch": true, "type": "pullrequest", "id": 68, "destination": {"commit": {"hash": "d61ada6ffa70", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/d61ada6ffa70.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/d61ada6ffa70"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-05-16T03:17:45.657043+00:00", "summary": {"raw": "Fix issue with IMAQdxCamera - if using a mock device and pynivision installed,\r\nbut nivision itself not installed, one got an error on worker startup.\r\nDelay importing nivision to be dependent on mock=False to fix this and raise\r\nthe actual import error as it comes.\r\n\r\nAlso, make IMAQdxCamera friendier to subclassing. Fixes issue #34\r\n\r\nRenamed `imaqdx_attributes` to just `camera_attributes`. No backward\r\ncompatibility provided for this, since this class is fairly new.\r\n\r\nAllow specifying worker class and camera interface class as class attributes,\r\nin the case that the subclass simply changes these and nothing else about\r\nworker class creation, or about the instantiation of the interface class.\r\n\r\nRemove IMAQdx specific code from worker class, into interface class.", "markup": "markdown", "html": "<p>Fix issue with IMAQdxCamera - if using a mock device and pynivision installed,\nbut nivision itself not installed, one got an error on worker startup.\nDelay importing nivision to be dependent on mock=False to fix this and raise\nthe actual import error as it comes.</p>\n<p>Also, make IMAQdxCamera friendier to subclassing. Fixes issue <a href=\"#!/labscript_suite/labscript_devices/issues/34/port-imaqdxcamera-to-other-backends\" rel=\"nofollow\" title=\"Port IMAQdxCamera to other backends\" class=\"ap-connect-link\"><s>#34</s></a></p>\n<p>Renamed <code>imaqdx_attributes</code> to just <code>camera_attributes</code>. No backward\ncompatibility provided for this, since this class is fairly new.</p>\n<p>Allow specifying worker class and camera interface class as class attributes,\nin the case that the subclass simply changes these and nothing else about\nworker class creation, or about the instantiation of the interface class.</p>\n<p>Remove IMAQdx specific code from worker class, into interface class.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e1c8075e62b2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/e1c8075e62b2"}, "html": {"href": "#!/cbillington/labscript_devices/commits/e1c8075e62b2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-01T17:16:36.912534+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "426f64fa05b8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/426f64fa05b8.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/426f64fa05b8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/69/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:cbe27f52fde3%0De622c32d8b8c?from_pullrequest_id=69"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/69/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/69"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:cbe27f52fde3%0De622c32d8b8c?from_pullrequest_id=69"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/69/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/69/statuses_page=1.json"}}, "title": "Pylon Backend for IMAQdxCamera class", "close_source_branch": true, "type": "pullrequest", "id": 69, "destination": {"commit": {"hash": "e622c32d8b8c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e622c32d8b8c.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e622c32d8b8c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-05-21T20:30:16.600932+00:00", "summary": {"raw": "Here is a go at a backend for the IMAQdxCamera class as proposed in Issue #34. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the [Basler Pylon SDK](https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/) with development files, which is freely available.\r\n\r\nUsage is essentially identical to the IMAQdxCamera class, with the necessary camera\\_properties variable changes.\r\n\r\nThis PR depends on changes in Pull Request #68.\r\n\r\nThis has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.", "markup": "markdown", "html": "<p>Here is a go at a backend for the IMAQdxCamera class as proposed in Issue <a href=\"#!/labscript_suite/labscript_devices/issues/34/port-imaqdxcamera-to-other-backends\" rel=\"nofollow\" title=\"Port IMAQdxCamera to other backends\" class=\"ap-connect-link\"><s>#34</s></a>. It replaces the IMAQdx interface with one based on Basler\u2019s Pylon API, as exposed to python using the pypylon package available through pip. It also requires installation of the <a data-is-external-link=\"true\" href=\"https://www.baslerweb.com/en/products/software/basler-pylon-camera-software-suite/\" rel=\"nofollow\">Basler Pylon SDK</a> with development files, which is freely available.</p>\n<p>Usage is essentially identical to the IMAQdxCamera class, with the necessary camera_properties variable changes.</p>\n<p>This PR depends on changes in <a href=\"#!/labscript_suite/labscript_devices/pull-requests/68/more-flexible-mock-imaqdx-camera-and-more\" rel=\"nofollow\" class=\"ap-connect-link\">Pull Request #68</a>.</p>\n<p>This has been moderately tested, but I have a few more tests to do before I\u2019m comfortable merging. I mostly wanted to get the basic code out for discussion before I get too attached.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c2a55c08f1dc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/c2a55c08f1dc"}, "html": {"href": "#!/dihm/labscript_devices/commits/c2a55c08f1dc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "comment_count": 10, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-08T15:49:38.667992+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "cbe27f52fde3", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/cbe27f52fde3.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/cbe27f52fde3"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Two small fixes for the IMAQdx camera\r\n\r\n* Check saved attribute visibility level argument is valid\r\n\r\n* Fix regression in applying monkeypatch.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/70/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:1ccbd1e90c83%0Dcbe27f52fde3?from_pullrequest_id=70"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/70/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/70.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/70/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/70/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/70"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/70/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:1ccbd1e90c83%0Dcbe27f52fde3?from_pullrequest_id=70"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/70/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/70/statuses_page=1.json"}}, "title": "IMAQdxCamera fixes", "close_source_branch": true, "type": "pullrequest", "id": 70, "destination": {"commit": {"hash": "cbe27f52fde3", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/cbe27f52fde3.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/cbe27f52fde3"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-07T17:14:50.066213+00:00", "summary": {"raw": "Two small fixes for the IMAQdx camera\r\n\r\n* Check saved attribute visibility level argument is valid\r\n\r\n* Fix regression in applying monkeypatch.", "markup": "markdown", "html": "<p>Two small fixes for the IMAQdx camera</p>\n<ul>\n<li>\n<p>Check saved attribute visibility level argument is valid</p>\n</li>\n<li>\n<p>Fix regression in applying monkeypatch.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "449abde00920", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/449abde00920"}, "html": {"href": "#!/cbillington/labscript_devices/commits/449abde00920"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-09T16:37:36.011321+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "1ccbd1e90c83", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1ccbd1e90c83.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1ccbd1e90c83"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026\r\n\r\nDue to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like\r\n\r\n```python\r\nFlyCapture2Camera('CCD_1',parent_device=pulseblaster_0.direct_outputs,connection='flag 7',\r\n\t\t  serial_number=16303574,\r\n\t\t  mock=False,\r\n\t\t  trigger_duration = 1e-3,\r\n\t\t  saved_attribute_visibility_level = None,\r\n\t\t  camera_attributes={'GAMMA':{'onOff':False,\r\n\t\t\t\t\t                  'absControl':True,\r\n\t\t\t\t\t      \t\t\t  'absValue':1},\r\n\t\t\t\t     'AUTO_EXPOSURE':{'onOff':True,\r\n\t\t\t\t\t\t      \t\t  'absControl':True,\r\n\t\t\t\t\t\t      \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t      \t      'absValue':0},\r\n\t\t\t\t     'GAIN':{'autoManualMode':False,\r\n\t\t\t\t             'absControl':True,\r\n\t\t\t\t\t     \t 'absValue':0},\r\n\t\t\t\t     'SHARPNESS':{'onOff':False,\r\n\t\t\t\t\t\t  \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t  \t      'absValue':1024},\r\n\t\t\t\t     'FRAME_RATE':{'autoManualMode':False,\r\n\t\t\t\t\t\t   \t\t   'absControl':True},\r\n\t\t\t\t     'SHUTTER':{'autoManualMode':False,\r\n\t\t\t\t\t\t\t\t'absControl':True},\r\n\t\t\t\t     'BRIGHTNESS':{'absControl':True,\r\n\t\t\t\t\t\t   \t\t   'absValue':0},\r\n\t\t\t\t     'TriggerMode':{'polarity':1,\r\n\t\t\t\t\t\t    \t    'source':0,\r\n\t\t\t\t\t\t    \t\t'mode':1,\r\n\t\t\t\t\t\t    \t\t'onOff':True},\r\n\t\t\t\t     'ImageMode':{'width':1920,\r\n\t\t\t\t\t\t  \t\t  'height':1200,\r\n\t\t\t\t\t\t  \t\t  'offsetX':0,\r\n\t\t\t\t\t\t  \t\t  'offsetY':0,\r\n\t\t\t\t\t\t  \t\t  'pixelFormat':'MONO16'}},\r\n\t\t  manual_mode_camera_attributes={'TriggerMode':{'onOff':False}})\r\n```\r\n\r\n\u200c\r\n\r\nThe downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:f55ba5a76098%0D64d59d06d474?from_pullrequest_id=71"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/71"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:f55ba5a76098%0D64d59d06d474?from_pullrequest_id=71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/71/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/71/statuses_page=1.json"}}, "title": "FlyCapture2 backend for IMAQdxCamera driver", "close_source_branch": true, "type": "pullrequest", "id": 71, "destination": {"commit": {"hash": "64d59d06d474", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/64d59d06d474.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/64d59d06d474"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-18T21:31:40.161894+00:00", "summary": {"raw": "Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026\r\n\r\nDue to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like\r\n\r\n```python\r\nFlyCapture2Camera('CCD_1',parent_device=pulseblaster_0.direct_outputs,connection='flag 7',\r\n\t\t  serial_number=16303574,\r\n\t\t  mock=False,\r\n\t\t  trigger_duration = 1e-3,\r\n\t\t  saved_attribute_visibility_level = None,\r\n\t\t  camera_attributes={'GAMMA':{'onOff':False,\r\n\t\t\t\t\t                  'absControl':True,\r\n\t\t\t\t\t      \t\t\t  'absValue':1},\r\n\t\t\t\t     'AUTO_EXPOSURE':{'onOff':True,\r\n\t\t\t\t\t\t      \t\t  'absControl':True,\r\n\t\t\t\t\t\t      \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t      \t      'absValue':0},\r\n\t\t\t\t     'GAIN':{'autoManualMode':False,\r\n\t\t\t\t             'absControl':True,\r\n\t\t\t\t\t     \t 'absValue':0},\r\n\t\t\t\t     'SHARPNESS':{'onOff':False,\r\n\t\t\t\t\t\t  \t\t  'autoManualMode':False,\r\n\t\t\t\t\t\t  \t      'absValue':1024},\r\n\t\t\t\t     'FRAME_RATE':{'autoManualMode':False,\r\n\t\t\t\t\t\t   \t\t   'absControl':True},\r\n\t\t\t\t     'SHUTTER':{'autoManualMode':False,\r\n\t\t\t\t\t\t\t\t'absControl':True},\r\n\t\t\t\t     'BRIGHTNESS':{'absControl':True,\r\n\t\t\t\t\t\t   \t\t   'absValue':0},\r\n\t\t\t\t     'TriggerMode':{'polarity':1,\r\n\t\t\t\t\t\t    \t    'source':0,\r\n\t\t\t\t\t\t    \t\t'mode':1,\r\n\t\t\t\t\t\t    \t\t'onOff':True},\r\n\t\t\t\t     'ImageMode':{'width':1920,\r\n\t\t\t\t\t\t  \t\t  'height':1200,\r\n\t\t\t\t\t\t  \t\t  'offsetX':0,\r\n\t\t\t\t\t\t  \t\t  'offsetY':0,\r\n\t\t\t\t\t\t  \t\t  'pixelFormat':'MONO16'}},\r\n\t\t  manual_mode_camera_attributes={'TriggerMode':{'onOff':False}})\r\n```\r\n\r\n\u200c\r\n\r\nThe downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?", "markup": "markdown", "html": "<p>Here is another backend using Point Grey\u2019s FlyCapture2 API with their PyCapture2 python wrapper. It is fairly straight-forward except for on thing\u2026</p>\n<p>Due to the unusual nature of the FlyCapture2 API, camera settings cannot be easily controlled in a generalized way. My solution is to use nested dictionaries and hard code trigger and image settings that don\u2019t conform to the standard property interface. An example connectiontable instantiation of this class then looks like</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">FlyCapture2Camera</span><span class=\"p\">(</span><span class=\"s1\">&#39;CCD_1&#39;</span><span class=\"p\">,</span><span class=\"n\">parent_device</span><span class=\"o\">=</span><span class=\"n\">pulseblaster_0</span><span class=\"o\">.</span><span class=\"n\">direct_outputs</span><span class=\"p\">,</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"s1\">&#39;flag 7&#39;</span><span class=\"p\">,</span>\n          <span class=\"n\">serial_number</span><span class=\"o\">=</span><span class=\"mi\">16303574</span><span class=\"p\">,</span>\n          <span class=\"n\">mock</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n          <span class=\"n\">trigger_duration</span> <span class=\"o\">=</span> <span class=\"mf\">1e-3</span><span class=\"p\">,</span>\n          <span class=\"n\">saved_attribute_visibility_level</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span>\n          <span class=\"n\">camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;GAMMA&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;AUTO_EXPOSURE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                      <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;GAIN&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                             <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHARPNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">1024</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;FRAME_RATE&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;SHUTTER&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;autoManualMode&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n                                <span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;BRIGHTNESS&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;absControl&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n                                   <span class=\"s1\">&#39;absValue&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;polarity&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;source&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;mode&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                    <span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">True</span><span class=\"p\">},</span>\n                     <span class=\"s1\">&#39;ImageMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;width&#39;</span><span class=\"p\">:</span><span class=\"mi\">1920</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;height&#39;</span><span class=\"p\">:</span><span class=\"mi\">1200</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetX&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;offsetY&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                  <span class=\"s1\">&#39;pixelFormat&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;MONO16&#39;</span><span class=\"p\">}},</span>\n          <span class=\"n\">manual_mode_camera_attributes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;TriggerMode&#39;</span><span class=\"p\">:{</span><span class=\"s1\">&#39;onOff&#39;</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">}})</span>\n</pre></div>\n\n\n<p>\u200c</p>\n<p>The downside to this method is that saving a nested dictionary as attributes to the h5 file is non-trivial since h5py cannot handle saving a dictionary natively. For now I\u2019m just disabling the save outright but I\u2019m hoping for a better solution than hacking the behavior to save the sub-dictionaries as strings. Ideas?</p>", "type": "rendered"}, "source": {"commit": {"hash": "95fe4609b0a1", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/95fe4609b0a1"}, "html": {"href": "#!/dihm/labscript_devices/commits/95fe4609b0a1"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "FlyCapture2Camera"}}, "comment_count": 16, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-03T02:11:49.561012+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "f55ba5a76098", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/f55ba5a76098.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/f55ba5a76098"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Allow saving more complex datatypes for camera attributes to the HDF5 file\r\nvia `labscript_utils.properties.set_attributes.`\r\n\r\nThis change was made to support the nested-dictionary camera attributes used by a subclass of IMAQdxCamera in pull request #71.\r\n\r\nRequires [labscript_utils pull request 86](#!/labscript_suite/labscript_utils/pull-requests/86/add-functions-for-json-serialisation-of)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/72/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:64d59d06d474%0Df214f15e35b6?from_pullrequest_id=72"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/72/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/72.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/72/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/72/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/72"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/72/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:64d59d06d474%0Df214f15e35b6?from_pullrequest_id=72"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/72/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/72/statuses_page=1.json"}}, "title": "Allow saving more complex datatypes for camera attributes to the HDF5 file", "close_source_branch": true, "type": "pullrequest", "id": 72, "destination": {"commit": {"hash": "f214f15e35b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/f214f15e35b6.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/f214f15e35b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-20T23:39:49.139060+00:00", "summary": {"raw": "Allow saving more complex datatypes for camera attributes to the HDF5 file\r\nvia `labscript_utils.properties.set_attributes.`\r\n\r\nThis change was made to support the nested-dictionary camera attributes used by a subclass of IMAQdxCamera in pull request #71.\r\n\r\nRequires [labscript_utils pull request 86](#!/labscript_suite/labscript_utils/pull-requests/86/add-functions-for-json-serialisation-of)", "markup": "markdown", "html": "<p>Allow saving more complex datatypes for camera attributes to the HDF5 file\nvia <code>labscript_utils.properties.set_attributes.</code></p>\n<p>This change was made to support the nested-dictionary camera attributes used by a subclass of IMAQdxCamera in <a href=\"#!/labscript_suite/labscript_devices/pull-requests/71/flycapture2-backend-for-imaqdxcamera\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #71</a>.</p>\n<p>Requires <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/86/add-functions-for-json-serialisation-of\" rel=\"nofollow\">labscript_utils pull request 86</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "e96b52395cc7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/e96b52395cc7"}, "html": {"href": "#!/cbillington/labscript_devices/commits/e96b52395cc7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-01T18:49:31.662809+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "64d59d06d474", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/64d59d06d474.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/64d59d06d474"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Use smart programming to avoid unnecessary setting of attributes.\r\nSetting attributes can be slow on some cameras.\r\n\r\nSubclasses may opt out by setting use_smart_programming = False as a class\r\nattribute for their BLACS tab.\r\n\r\nThe need for this in a subclass for a camera with slow attribute setting was raised by @dihm [here](#!/labscript_suite/labscript_devices/pull-requests/71/flycapture2-backend-for-imaqdxcamera/diff#comment-106860545).\r\n\r\nI've tested that a mock shot can run, but of course that doesn't have any actual attributes. I can test in the actual lab likely tomorrow.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/73/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:f214f15e35b6%0Db680ed305954?from_pullrequest_id=73"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/73/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/73.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/73/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/73/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/73"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/73/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:f214f15e35b6%0Db680ed305954?from_pullrequest_id=73"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/73/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/73/statuses_page=1.json"}}, "title": "IMAQdxCamera: Use smart programming to avoid unnecessary setting of attributes.", "close_source_branch": true, "type": "pullrequest", "id": 73, "destination": {"commit": {"hash": "b680ed305954", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b680ed305954.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b680ed305954"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-24T22:28:28.943286+00:00", "summary": {"raw": "Use smart programming to avoid unnecessary setting of attributes.\r\nSetting attributes can be slow on some cameras.\r\n\r\nSubclasses may opt out by setting use_smart_programming = False as a class\r\nattribute for their BLACS tab.\r\n\r\nThe need for this in a subclass for a camera with slow attribute setting was raised by @dihm [here](#!/labscript_suite/labscript_devices/pull-requests/71/flycapture2-backend-for-imaqdxcamera/diff#comment-106860545).\r\n\r\nI've tested that a mock shot can run, but of course that doesn't have any actual attributes. I can test in the actual lab likely tomorrow.", "markup": "markdown", "html": "<p>Use smart programming to avoid unnecessary setting of attributes.\nSetting attributes can be slow on some cameras.</p>\n<p>Subclasses may opt out by setting use_smart_programming = False as a class\nattribute for their BLACS tab.</p>\n<p>The need for this in a subclass for a camera with slow attribute setting was raised by @dihm <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/71/flycapture2-backend-for-imaqdxcamera/diff#comment-106860545\" rel=\"nofollow\">here</a>.</p>\n<p>I've tested that a mock shot can run, but of course that doesn't have any actual attributes. I can test in the actual lab likely tomorrow.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ce4b0ae4ddcb", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/ce4b0ae4ddcb"}, "html": {"href": "#!/cbillington/labscript_devices/commits/ce4b0ae4ddcb"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera-smart-programming"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-01T18:48:43.085815+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "f214f15e35b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/f214f15e35b6.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/f214f15e35b6"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "With further testing I\u2019ve identified and fixed two bugs with the PylonCamera port.\r\n\r\n1. One can now use hardware triggering in manual mode\r\n2. Fixed a dictionary popping bug that prevented changing ROI attributes correctly", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/74/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:b680ed305954%0D1ccbd1e90c83?from_pullrequest_id=74"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/74/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/74.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/74/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/74/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/74"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/74/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:b680ed305954%0D1ccbd1e90c83?from_pullrequest_id=74"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/74/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/74/statuses_page=1.json"}}, "title": "PylonCamera hotfixes", "close_source_branch": true, "type": "pullrequest", "id": 74, "destination": {"commit": {"hash": "1ccbd1e90c83", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/1ccbd1e90c83.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/1ccbd1e90c83"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-25T20:36:56.569551+00:00", "summary": {"raw": "With further testing I\u2019ve identified and fixed two bugs with the PylonCamera port.\r\n\r\n1. One can now use hardware triggering in manual mode\r\n2. Fixed a dictionary popping bug that prevented changing ROI attributes correctly", "markup": "markdown", "html": "<p>With further testing I\u2019ve identified and fixed two bugs with the PylonCamera port.</p>\n<ol>\n<li>One can now use hardware triggering in manual mode</li>\n<li>Fixed a dictionary popping bug that prevented changing ROI attributes correctly</li>\n</ol>", "type": "rendered"}, "source": {"commit": {"hash": "86c92d7f2796", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/86c92d7f2796"}, "html": {"href": "#!/dihm/labscript_devices/commits/86c92d7f2796"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "PylonCamera"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-26T00:57:30.598396+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "b680ed305954", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b680ed305954.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b680ed305954"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "## Symptoms\r\n\r\n* RfBlaster device drivers are not working under Py3. BLACS tabs read status but cannot set static freq/amp/phase on the kloned webserver. Nor can they seem to upload binary compiled DDS data to the RfB RAM. Suspect error is in RFBlaster.py multipart form POSTing code. \r\n\r\n## Bug\r\n\r\nProbably in string handling in assembling the HTTP POST request.\r\n\r\n## Solution\r\n\r\nChanged RFBlaster.py BLACStab to use [requests ](https://2.python-requests.org/en/master/)[packa](http://packa.ge)ge, rather than homebrewed multipart form uploader plus urllib2 and friends. Requests is the defacto standard web client library.\r\n\r\nI kept this python2 compatible \\(perhaps\\) up to the commit tagged as such. I didn\u2019t realise tags shouldn\u2019t be used intra-branch - sorry. \r\n\r\nAfter that, it\u2019s Python-3 only. I cleaned out a bunch of defunct code and the BLACS tab is shorter.\r\n\r\n## Testing\r\n\r\nStatic control works. Buffered works. Dipole laser, controlled by rfB0 AOMs, comes on and seems to do dipole evap ramp OK. Will test on atoms shortly.\r\n\r\n## Side effects\r\n\r\nI did not change any of the labscript class, or the h5 file write code. \r\n\r\nCode that reads rfblaster binary \u2018data\u2019 from h5 file change in final rev to remove h5deprecationwarning not to use .value but to use the \\[\\(\\)\\] syntax instead. Seems to work.\r\n\r\n## TODO\r\n\r\nWe are still using constant-length strings in h5 files to store BLOBs, whereas h5py new standard is to use OPAQUE h5 dtype for this. Eventually these will be \u201copen\u201dable a la files, and so could be passed directly to requests.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/75/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:b679acacbc1a%0Df55ba5a76098?from_pullrequest_id=75"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/75/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/75.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/75/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/75/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/75"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/75/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:b679acacbc1a%0Df55ba5a76098?from_pullrequest_id=75"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/75/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/75/statuses_page=1.json"}}, "title": "RfBlasterPy3 bugfix", "close_source_branch": true, "type": "pullrequest", "id": 75, "destination": {"commit": {"hash": "f55ba5a76098", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/f55ba5a76098.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/f55ba5a76098"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-27T06:24:11.633908+00:00", "summary": {"raw": "## Symptoms\r\n\r\n* RfBlaster device drivers are not working under Py3. BLACS tabs read status but cannot set static freq/amp/phase on the kloned webserver. Nor can they seem to upload binary compiled DDS data to the RfB RAM. Suspect error is in RFBlaster.py multipart form POSTing code. \r\n\r\n## Bug\r\n\r\nProbably in string handling in assembling the HTTP POST request.\r\n\r\n## Solution\r\n\r\nChanged RFBlaster.py BLACStab to use [requests ](https://2.python-requests.org/en/master/)[packa](http://packa.ge)ge, rather than homebrewed multipart form uploader plus urllib2 and friends. Requests is the defacto standard web client library.\r\n\r\nI kept this python2 compatible \\(perhaps\\) up to the commit tagged as such. I didn\u2019t realise tags shouldn\u2019t be used intra-branch - sorry. \r\n\r\nAfter that, it\u2019s Python-3 only. I cleaned out a bunch of defunct code and the BLACS tab is shorter.\r\n\r\n## Testing\r\n\r\nStatic control works. Buffered works. Dipole laser, controlled by rfB0 AOMs, comes on and seems to do dipole evap ramp OK. Will test on atoms shortly.\r\n\r\n## Side effects\r\n\r\nI did not change any of the labscript class, or the h5 file write code. \r\n\r\nCode that reads rfblaster binary \u2018data\u2019 from h5 file change in final rev to remove h5deprecationwarning not to use .value but to use the \\[\\(\\)\\] syntax instead. Seems to work.\r\n\r\n## TODO\r\n\r\nWe are still using constant-length strings in h5 files to store BLOBs, whereas h5py new standard is to use OPAQUE h5 dtype for this. Eventually these will be \u201copen\u201dable a la files, and so could be passed directly to requests.", "markup": "markdown", "html": "<h2 id=\"markdown-header-symptoms\">Symptoms</h2>\n<ul>\n<li>RfBlaster device drivers are not working under Py3. BLACS tabs read status but cannot set static freq/amp/phase on the kloned webserver. Nor can they seem to upload binary compiled DDS data to the RfB RAM. Suspect error is in RFBlaster.py multipart form POSTing code. </li>\n</ul>\n<h2 id=\"markdown-header-bug\">Bug</h2>\n<p>Probably in string handling in assembling the HTTP POST request.</p>\n<h2 id=\"markdown-header-solution\">Solution</h2>\n<p>Changed RFBlaster.py BLACStab to use <a data-is-external-link=\"true\" href=\"https://2.python-requests.org/en/master/\" rel=\"nofollow\">requests </a><a data-is-external-link=\"true\" href=\"http://packa.ge\" rel=\"nofollow\">packa</a>ge, rather than homebrewed multipart form uploader plus urllib2 and friends. Requests is the defacto standard web client library.</p>\n<p>I kept this python2 compatible (perhaps) up to the commit tagged as such. I didn\u2019t realise tags shouldn\u2019t be used intra-branch - sorry. </p>\n<p>After that, it\u2019s Python-3 only. I cleaned out a bunch of defunct code and the BLACS tab is shorter.</p>\n<h2 id=\"markdown-header-testing\">Testing</h2>\n<p>Static control works. Buffered works. Dipole laser, controlled by rfB0 AOMs, comes on and seems to do dipole evap ramp OK. Will test on atoms shortly.</p>\n<h2 id=\"markdown-header-side-effects\">Side effects</h2>\n<p>I did not change any of the labscript class, or the h5 file write code. </p>\n<p>Code that reads rfblaster binary \u2018data\u2019 from h5 file change in final rev to remove h5deprecationwarning not to use .value but to use the [()] syntax instead. Seems to work.</p>\n<h2 id=\"markdown-header-todo\">TODO</h2>\n<p>We are still using constant-length strings in h5 files to store BLOBs, whereas h5py new standard is to use OPAQUE h5 dtype for this. Eventually these will be \u201copen\u201dable a la files, and so could be passed directly to requests.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4ce709c1b1f9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_devices/commit/4ce709c1b1f9"}, "html": {"href": "#!/monashspinor/labscript_devices/commits/4ce709c1b1f9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_devices"}, "html": {"href": "#!/monashspinor/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{be4c7d93-6a88-4228-b761-162375a0fb62}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "monashspinor/labscript_devices", "uuid": "{be4c7d93-6a88-4228-b761-162375a0fb62}"}, "branch": {"name": "RfBlasterPy3-bugfix"}}, "comment_count": 7, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-06T11:44:55.278089+00:00", "author": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "merge_commit": {"hash": "b679acacbc1a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b679acacbc1a.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b679acacbc1a"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "- In the case that there are waits, analog input, but no wait monitor,\r\n  raise an exception.\r\n\r\n- Allow the wait monitor timeout device to de a different NI DAQmx device.\r\n\r\n- Allow there to be no timeout device.\r\n\r\nThese changes are to be compatible with [labscript changes](#!/labscript_suite/labscript/pull-requests/49/make-wait-monitors-optional/diff) that make wait monitors and wait timeouts optional.\r\nThe timeout device being allowed to be a different\r\ndevice allows for the case where one device has counters but no unbuffered DO\r\nports, whereas another one has unbuffered DO ports but no counters. I am not\r\nsure if the latter exists, but this was motivated by an NI DAQmx device with\r\nunreliable counter input. We were not able to figure out what made the counter\r\ninput unreliable, but switching to a different device fixed the problem (though\r\nthe device we switched to lacks unbuffered DO ports, so we cannot use it as\r\nthe timeout device).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/76/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:cffa3d0c1240%0Db47a83974435?from_pullrequest_id=76"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/76/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/76.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/76/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/76/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/76"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/76/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:cffa3d0c1240%0Db47a83974435?from_pullrequest_id=76"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/76/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/76/statuses_page=1.json"}}, "title": "More flexible NI DAQmx wait monitor functionality.", "close_source_branch": true, "type": "pullrequest", "id": 76, "destination": {"commit": {"hash": "b47a83974435", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b47a83974435.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b47a83974435"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-06-27T20:58:57.533115+00:00", "summary": {"raw": "- In the case that there are waits, analog input, but no wait monitor,\r\n  raise an exception.\r\n\r\n- Allow the wait monitor timeout device to de a different NI DAQmx device.\r\n\r\n- Allow there to be no timeout device.\r\n\r\nThese changes are to be compatible with [labscript changes](#!/labscript_suite/labscript/pull-requests/49/make-wait-monitors-optional/diff) that make wait monitors and wait timeouts optional.\r\nThe timeout device being allowed to be a different\r\ndevice allows for the case where one device has counters but no unbuffered DO\r\nports, whereas another one has unbuffered DO ports but no counters. I am not\r\nsure if the latter exists, but this was motivated by an NI DAQmx device with\r\nunreliable counter input. We were not able to figure out what made the counter\r\ninput unreliable, but switching to a different device fixed the problem (though\r\nthe device we switched to lacks unbuffered DO ports, so we cannot use it as\r\nthe timeout device).", "markup": "markdown", "html": "<ul>\n<li>\n<p>In the case that there are waits, analog input, but no wait monitor,\n  raise an exception.</p>\n</li>\n<li>\n<p>Allow the wait monitor timeout device to de a different NI DAQmx device.</p>\n</li>\n<li>\n<p>Allow there to be no timeout device.</p>\n</li>\n</ul>\n<p>These changes are to be compatible with <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/pull-requests/49/make-wait-monitors-optional/diff\" rel=\"nofollow\">labscript changes</a> that make wait monitors and wait timeouts optional.\nThe timeout device being allowed to be a different\ndevice allows for the case where one device has counters but no unbuffered DO\nports, whereas another one has unbuffered DO ports but no counters. I am not\nsure if the latter exists, but this was motivated by an NI DAQmx device with\nunreliable counter input. We were not able to figure out what made the counter\ninput unreliable, but switching to a different device fixed the problem (though\nthe device we switched to lacks unbuffered DO ports, so we cannot use it as\nthe timeout device).</p>", "type": "rendered"}, "source": {"commit": {"hash": "4c76fd467288", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/4c76fd467288"}, "html": {"href": "#!/cbillington/labscript_devices/commits/4c76fd467288"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "NI-DAQmx-wait-changes"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T05:38:59.261703+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "cffa3d0c1240", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/cffa3d0c1240.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/cffa3d0c1240"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "If restart was clicked whilst continuously acquiring, the ImageReceiver could\r\nbe waiting on the previous frame to be updated, and thus would not respond to\r\nthe request to shutdown. However since shutdown() was called from the main thread,\r\nit would be waiting forever.\r\n\r\nNow it regularly checks self.stopping (an attribute set bt the parent class\r\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\r\nupdate event to process, so that it does not deadlock.\r\n\r\nAlso, if the update event runs but finds that it has already been shut down,\r\nit does nothing, since the Qt widgets may have been destroyed already.\r\n\r\nI found this bug whilst trying to reproduce issue #36, but this seems different so is probably not a solution to that issue.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/77/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:962e4d3229d8%0Db679acacbc1a?from_pullrequest_id=77"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/77/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/77.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/77/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/77/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/77"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/77/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:962e4d3229d8%0Db679acacbc1a?from_pullrequest_id=77"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/77/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/77/statuses_page=1.json"}}, "title": "Fix a deadlock restarting IMAQdxCamera.", "close_source_branch": true, "type": "pullrequest", "id": 77, "destination": {"commit": {"hash": "b679acacbc1a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b679acacbc1a.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b679acacbc1a"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-07-03T20:36:54.399654+00:00", "summary": {"raw": "If restart was clicked whilst continuously acquiring, the ImageReceiver could\r\nbe waiting on the previous frame to be updated, and thus would not respond to\r\nthe request to shutdown. However since shutdown() was called from the main thread,\r\nit would be waiting forever.\r\n\r\nNow it regularly checks self.stopping (an attribute set bt the parent class\r\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\r\nupdate event to process, so that it does not deadlock.\r\n\r\nAlso, if the update event runs but finds that it has already been shut down,\r\nit does nothing, since the Qt widgets may have been destroyed already.\r\n\r\nI found this bug whilst trying to reproduce issue #36, but this seems different so is probably not a solution to that issue.", "markup": "markdown", "html": "<p>If restart was clicked whilst continuously acquiring, the ImageReceiver could\nbe waiting on the previous frame to be updated, and thus would not respond to\nthe request to shutdown. However since shutdown() was called from the main thread,\nit would be waiting forever.</p>\n<p>Now it regularly checks self.stopping (an attribute set bt the parent class\nzprocess.ZMQServer when a shutdown has been requested) while waiting for the\nupdate event to process, so that it does not deadlock.</p>\n<p>Also, if the update event runs but finds that it has already been shut down,\nit does nothing, since the Qt widgets may have been destroyed already.</p>\n<p>I found this bug whilst trying to reproduce issue <a href=\"#!/labscript_suite/labscript_devices/issues/36/blacs-hang-with-continuous-camera\" rel=\"nofollow\" title=\"BLACS hang with continuous camera acquisitions\" class=\"ap-connect-link\"><s>#36</s></a>, but this seems different so is probably not a solution to that issue.</p>", "type": "rendered"}, "source": {"commit": {"hash": "453cc019b61b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/453cc019b61b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/453cc019b61b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-07-08T16:36:12.244673+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "962e4d3229d8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/962e4d3229d8.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/962e4d3229d8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "As described by David in issue #37, it appears that it was a misunderstanding to think of 'm 0' 'm a' and 'm n' as\r\nthree options for the phase mode (with 'm 0' meaning 'default' - corresponding\r\nto one of the others). Rather, 'm n' and 'm a' are the two options\r\nfor the phase mode, and 'm 0' and 'm t' are for switching between table mode\r\nand single-tone mode.\r\n\r\nTherefore this PR calls 'm 0' at startup, and then one of 'm a' or 'm n' to set\r\nthe phase mode, which is now by default 'continuous', with 'default' having been\r\nremoved as an option, but being interpreted as 'continuous' for the case of\r\nalready-compiled shots that used it.\r\n\r\nThereafter, transition between single-tone mode and table mode is done with\r\n'm 0' and 'm t', with no further calls to set the phase mode.\r\n\r\nAlso added a better explanation of the 'double clutch' hack.\r\n\r\nWill get this into some JQI labs for regression testing.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/78/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:625926f151be%0De8ab068665ab?from_pullrequest_id=78"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/78/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/78.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/78/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/78/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/78"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/78/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:625926f151be%0De8ab068665ab?from_pullrequest_id=78"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/78/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/78/statuses_page=1.json"}}, "title": "Fix issue #37: incorrect transition to manual/buffered semantics for novatech.", "close_source_branch": true, "type": "pullrequest", "id": 78, "destination": {"commit": {"hash": "e8ab068665ab", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/e8ab068665ab.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/e8ab068665ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-08-08T15:38:53.553217+00:00", "summary": {"raw": "As described by David in issue #37, it appears that it was a misunderstanding to think of 'm 0' 'm a' and 'm n' as\r\nthree options for the phase mode (with 'm 0' meaning 'default' - corresponding\r\nto one of the others). Rather, 'm n' and 'm a' are the two options\r\nfor the phase mode, and 'm 0' and 'm t' are for switching between table mode\r\nand single-tone mode.\r\n\r\nTherefore this PR calls 'm 0' at startup, and then one of 'm a' or 'm n' to set\r\nthe phase mode, which is now by default 'continuous', with 'default' having been\r\nremoved as an option, but being interpreted as 'continuous' for the case of\r\nalready-compiled shots that used it.\r\n\r\nThereafter, transition between single-tone mode and table mode is done with\r\n'm 0' and 'm t', with no further calls to set the phase mode.\r\n\r\nAlso added a better explanation of the 'double clutch' hack.\r\n\r\nWill get this into some JQI labs for regression testing.", "markup": "markdown", "html": "<p>As described by David in issue <a href=\"#!/labscript_suite/labscript_devices/issues/37/novatech-dds-transition-to-manual\" rel=\"nofollow\" title=\"Novatech DDS transition to manual strangeness\" class=\"ap-connect-link\"><s>#37</s></a>, it appears that it was a misunderstanding to think of 'm 0' 'm a' and 'm n' as\nthree options for the phase mode (with 'm 0' meaning 'default' - corresponding\nto one of the others). Rather, 'm n' and 'm a' are the two options\nfor the phase mode, and 'm 0' and 'm t' are for switching between table mode\nand single-tone mode.</p>\n<p>Therefore this PR calls 'm 0' at startup, and then one of 'm a' or 'm n' to set\nthe phase mode, which is now by default 'continuous', with 'default' having been\nremoved as an option, but being interpreted as 'continuous' for the case of\nalready-compiled shots that used it.</p>\n<p>Thereafter, transition between single-tone mode and table mode is done with\n'm 0' and 'm t', with no further calls to set the phase mode.</p>\n<p>Also added a better explanation of the 'double clutch' hack.</p>\n<p>Will get this into some JQI labs for regression testing.</p>", "type": "rendered"}, "source": {"commit": {"hash": "73505bd6b5f0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/73505bd6b5f0"}, "html": {"href": "#!/cbillington/labscript_devices/commits/73505bd6b5f0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "novatech_phase_mode_fix"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-10T18:46:06.068912+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "625926f151be", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/625926f151be.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/625926f151be"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Ensure only the last two axes are transposed so that a 3D array will be displayed\r\nas a video by the pyqtgraph widget.\r\n\r\nThis allows cameras that are configured to acquire a series of images to be able to sensibly display them in manual mode\r\n\r\nPyQtgraph has a bug where it won't let you view the last frame, like many pyqtgraph issues this is fixed on github but not released. Recommend to direct pip to install pyqtgraph directly from github until there is another release.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/79/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:c83fe0004cb4%0D962e4d3229d8?from_pullrequest_id=79"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/79/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/79.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/79/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/79/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/79"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/79/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:c83fe0004cb4%0D962e4d3229d8?from_pullrequest_id=79"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/79/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/79/statuses_page=1.json"}}, "title": "Allow displaying of 3D data in manual mode.", "close_source_branch": true, "type": "pullrequest", "id": 79, "destination": {"commit": {"hash": "962e4d3229d8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/962e4d3229d8.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/962e4d3229d8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-08-16T19:22:06.902879+00:00", "summary": {"raw": "Ensure only the last two axes are transposed so that a 3D array will be displayed\r\nas a video by the pyqtgraph widget.\r\n\r\nThis allows cameras that are configured to acquire a series of images to be able to sensibly display them in manual mode\r\n\r\nPyQtgraph has a bug where it won't let you view the last frame, like many pyqtgraph issues this is fixed on github but not released. Recommend to direct pip to install pyqtgraph directly from github until there is another release.", "markup": "markdown", "html": "<p>Ensure only the last two axes are transposed so that a 3D array will be displayed\nas a video by the pyqtgraph widget.</p>\n<p>This allows cameras that are configured to acquire a series of images to be able to sensibly display them in manual mode</p>\n<p>PyQtgraph has a bug where it won't let you view the last frame, like many pyqtgraph issues this is fixed on github but not released. Recommend to direct pip to install pyqtgraph directly from github until there is another release.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4f43df29a835", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/4f43df29a835"}, "html": {"href": "#!/cbillington/labscript_devices/commits/4f43df29a835"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "IMAQdxCamera"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-13T20:32:21.586352+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "c83fe0004cb4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/c83fe0004cb4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/c83fe0004cb4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Labscript driver for Andor Solis scientific cameras. Subclasses IMAQdx labscript driver. Currently tested across most acquisition and readout modes in manual and buffered modes for Andor iXon 888 ultra on a USB 3.0 bus. \r\n\r\nFeedback is appreciated.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/80/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:077ef0ffcc5f%0D537cc3780c54?from_pullrequest_id=80"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/80/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/80.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/80/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/80/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/80"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/80/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:077ef0ffcc5f%0D537cc3780c54?from_pullrequest_id=80"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/80/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/80/statuses_page=1.json"}}, "title": "AndorCamera", "close_source_branch": true, "type": "pullrequest", "id": 80, "destination": {"commit": {"hash": "537cc3780c54", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/537cc3780c54.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/537cc3780c54"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-08-20T19:49:56.710489+00:00", "summary": {"raw": "Labscript driver for Andor Solis scientific cameras. Subclasses IMAQdx labscript driver. Currently tested across most acquisition and readout modes in manual and buffered modes for Andor iXon 888 ultra on a USB 3.0 bus. \r\n\r\nFeedback is appreciated.", "markup": "markdown", "html": "<p>Labscript driver for Andor Solis scientific cameras. Subclasses IMAQdx labscript driver. Currently tested across most acquisition and readout modes in manual and buffered modes for Andor iXon 888 ultra on a USB 3.0 bus. </p>\n<p>Feedback is appreciated.</p>", "type": "rendered"}, "source": {"commit": {"hash": "de6dd60fc0ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rbchip/labscript_devices/commit/de6dd60fc0ce"}, "html": {"href": "#!/rbchip/labscript_devices/commits/de6dd60fc0ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rbchip/labscript_devices"}, "html": {"href": "#!/rbchip/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{951eaeeb-daad-4bf0-aaaf-a8899d4617de}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "rbchip/labscript_devices", "uuid": "{951eaeeb-daad-4bf0-aaaf-a8899d4617de}"}, "branch": {"name": "AndorCamera"}}, "comment_count": 15, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-28T21:27:10.919887+00:00", "author": {"display_name": "Francisco Salces Carcoba", "uuid": "{4933026d-06f9-4900-a8a7-66123538ded0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B4933026d-06f9-4900-a8a7-66123538ded0%7D"}, "html": {"href": "https://bitbucket.org/%7B4933026d-06f9-4900-a8a7-66123538ded0%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:253ddc41-0f46-4ffa-af0e-c7cb537b7c5b/d0041185-c8e4-42fd-bd0e-af74bfef28a6/128"}}, "nickname": "pacosalces", "type": "user", "account_id": "557058:253ddc41-0f46-4ffa-af0e-c7cb537b7c5b"}, "merge_commit": {"hash": "077ef0ffcc5f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/077ef0ffcc5f.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/077ef0ffcc5f"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Allow labscript device drivers to be located in any importable location. The list of locations searched is configurable in labconfig as a comma-delimited list of import names as the configuration setting [DEFAULT]/user_devices, which if not present defaults to 'user_devices'\r\n\r\nTODO: make the installer set this configuration setting in new labconfig files\r\nto its default value, and make it create the userlib/user_devices folder.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/81/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:75f28730f620%0Dc83fe0004cb4?from_pullrequest_id=81"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/81/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/81.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/81/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/81/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/81"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/81/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:75f28730f620%0Dc83fe0004cb4?from_pullrequest_id=81"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/81/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/81/statuses_page=1.json"}}, "title": "User devices", "close_source_branch": true, "type": "pullrequest", "id": 81, "destination": {"commit": {"hash": "c83fe0004cb4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/c83fe0004cb4.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/c83fe0004cb4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-08-26T20:17:23.223991+00:00", "summary": {"raw": "Allow labscript device drivers to be located in any importable location. The list of locations searched is configurable in labconfig as a comma-delimited list of import names as the configuration setting [DEFAULT]/user_devices, which if not present defaults to 'user_devices'\r\n\r\nTODO: make the installer set this configuration setting in new labconfig files\r\nto its default value, and make it create the userlib/user_devices folder.", "markup": "markdown", "html": "<p>Allow labscript device drivers to be located in any importable location. The list of locations searched is configurable in labconfig as a comma-delimited list of import names as the configuration setting [DEFAULT]/user_devices, which if not present defaults to 'user_devices'</p>\n<p>TODO: make the installer set this configuration setting in new labconfig files\nto its default value, and make it create the userlib/user_devices folder.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ce230bf8846b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/ce230bf8846b"}, "html": {"href": "#!/cbillington/labscript_devices/commits/ce230bf8846b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "user_devices"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-14T01:03:58.255907+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "75f28730f620", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/75f28730f620.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/75f28730f620"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "A few minor bugfixes for the FlyCapture2\\_Camera device that came up [here](https://groups.google.com/forum/#!topic/labscriptsuite/TIMbRzs5X0w). \r\n\r\nBefore merging I want to sort our Lars' last issue and I\u2019d also like to improve the docstrings related to discussion [here](https://groups.google.com/forum/#!topic/labscriptsuite/pFIMPgKVWe0). Is there any chance we can decide on a sphinx docstring style soon so I can get the formatting done at the same time?\r\n\r\nFixes included in this PR:\r\n\r\n* Add automatic configuration of packet size for GigE cameras.\r\n\r\n    Device will now automatically set to the largest possible packet size available on the network. If Jumbo Frames are not available, print a warning. This also prints what the packet size is for user information.\r\n\r\n\r\n* Fix that ensures camera is set to use Format7, Mode0.\r\n\r\n    In so doing, it now defaults the 'ImageMode' settings to be the full sensor with 'MONO8' pixel format on initialization of the device. User specified 'ImageMode' parameters override these defaults.\r\n\r\n\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/82/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:b47a83974435%0D891b7ac98605?from_pullrequest_id=82"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/82/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/82.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/82/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/82/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/82"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/82/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:b47a83974435%0D891b7ac98605?from_pullrequest_id=82"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/82/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/82/statuses_page=1.json"}}, "title": "FlyCapture2 Camera bugfixes", "close_source_branch": true, "type": "pullrequest", "id": 82, "destination": {"commit": {"hash": "891b7ac98605", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/891b7ac98605.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/891b7ac98605"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-09-14T12:33:58.337802+00:00", "summary": {"raw": "A few minor bugfixes for the FlyCapture2\\_Camera device that came up [here](https://groups.google.com/forum/#!topic/labscriptsuite/TIMbRzs5X0w). \r\n\r\nBefore merging I want to sort our Lars' last issue and I\u2019d also like to improve the docstrings related to discussion [here](https://groups.google.com/forum/#!topic/labscriptsuite/pFIMPgKVWe0). Is there any chance we can decide on a sphinx docstring style soon so I can get the formatting done at the same time?\r\n\r\nFixes included in this PR:\r\n\r\n* Add automatic configuration of packet size for GigE cameras.\r\n\r\n    Device will now automatically set to the largest possible packet size available on the network. If Jumbo Frames are not available, print a warning. This also prints what the packet size is for user information.\r\n\r\n\r\n* Fix that ensures camera is set to use Format7, Mode0.\r\n\r\n    In so doing, it now defaults the 'ImageMode' settings to be the full sensor with 'MONO8' pixel format on initialization of the device. User specified 'ImageMode' parameters override these defaults.\r\n\r\n\r\n\r\n\u200c", "markup": "markdown", "html": "<p>A few minor bugfixes for the FlyCapture2_Camera device that came up <a data-is-external-link=\"true\" href=\"https://groups.google.com/forum/#!topic/labscriptsuite/TIMbRzs5X0w\" rel=\"nofollow\">here</a>. </p>\n<p>Before merging I want to sort our Lars' last issue and I\u2019d also like to improve the docstrings related to discussion <a data-is-external-link=\"true\" href=\"https://groups.google.com/forum/#!topic/labscriptsuite/pFIMPgKVWe0\" rel=\"nofollow\">here</a>. Is there any chance we can decide on a sphinx docstring style soon so I can get the formatting done at the same time?</p>\n<p>Fixes included in this PR:</p>\n<ul>\n<li>\n<p>Add automatic configuration of packet size for GigE cameras.</p>\n<p>Device will now automatically set to the largest possible packet size available on the network. If Jumbo Frames are not available, print a warning. This also prints what the packet size is for user information.</p>\n</li>\n<li>\n<p>Fix that ensures camera is set to use Format7, Mode0.</p>\n<p>In so doing, it now defaults the 'ImageMode' settings to be the full sensor with 'MONO8' pixel format on initialization of the device. User specified 'ImageMode' parameters override these defaults.</p>\n</li>\n</ul>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "23704e380214", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/23704e380214"}, "html": {"href": "#!/dihm/labscript_devices/commits/23704e380214"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "FlyCapture2_Camera-bugfixes"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-11-27T14:36:35.954265+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "b47a83974435", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/b47a83974435.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/b47a83974435"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Merged `ImageReceiver.update()` and `ImageReceiver.handler()` and have the\r\n  whole method run in the Qt main thread.\r\n\r\n * Use new zprocess functionality to respond to worker process immediately to\r\n   allow it to begin acquiring the next frame whilst the parent process is\r\n   rendering the previous frame\r\n\r\n* Add zprocess version requirement for this functionality.\r\n\r\n* Call QApplication.sendPostedEvents() to prevent a backlog of paint events and\r\n  other events that can otherwise build up at high frame rates and have been\r\n  observed to freeze the GUI.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/83/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:61a83341ab0d%0D75f28730f620?from_pullrequest_id=83"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/83/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/83.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/83/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/83/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/83"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/83/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:61a83341ab0d%0D75f28730f620?from_pullrequest_id=83"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/83/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/83/statuses_page=1.json"}}, "title": "Fix issue #36: BLACS freezing in IMAQdxCamera continuous acquisition.", "close_source_branch": true, "type": "pullrequest", "id": 83, "destination": {"commit": {"hash": "75f28730f620", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/75f28730f620.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/75f28730f620"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-09-21T18:23:23.236176+00:00", "summary": {"raw": "* Merged `ImageReceiver.update()` and `ImageReceiver.handler()` and have the\r\n  whole method run in the Qt main thread.\r\n\r\n * Use new zprocess functionality to respond to worker process immediately to\r\n   allow it to begin acquiring the next frame whilst the parent process is\r\n   rendering the previous frame\r\n\r\n* Add zprocess version requirement for this functionality.\r\n\r\n* Call QApplication.sendPostedEvents() to prevent a backlog of paint events and\r\n  other events that can otherwise build up at high frame rates and have been\r\n  observed to freeze the GUI.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Merged <code>ImageReceiver.update()</code> and <code>ImageReceiver.handler()</code> and have the\n  whole method run in the Qt main thread.</p>\n</li>\n<li>\n<p>Use new zprocess functionality to respond to worker process immediately to\n   allow it to begin acquiring the next frame whilst the parent process is\n   rendering the previous frame</p>\n</li>\n<li>\n<p>Add zprocess version requirement for this functionality.</p>\n</li>\n<li>\n<p>Call QApplication.sendPostedEvents() to prevent a backlog of paint events and\n  other events that can otherwise build up at high frame rates and have been\n  observed to freeze the GUI.</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "a3fdbd54956d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/a3fdbd54956d"}, "html": {"href": "#!/cbillington/labscript_devices/commits/a3fdbd54956d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "camera-hang-fix"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-23T16:31:56.915750+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "61a83341ab0d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/61a83341ab0d.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/61a83341ab0d"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "For testing the device\\_property changes implemented in BLACS and labscript\\_utils, I decided to use the IMAQdxCamera class. This commit only has device\\_properties set for the PylonCamera itself since I don\u2019t have the IMAQdx dev software. Implementation there should be essentially identical.\r\n\r\nThis requires [PR #75 from BLACS](#!/labscript_suite/blacs/pull-requests/75/device-properties/diff) to work.\r\n\r\nThis demonstrates how to implement device\\_property controls in the BLACS tab of a device. The IMAQdxCamera tab makes calls to the new `create_device_properties` and `create_property_widgets` methods with the class attribute `self.device_properties`.\r\n\r\nThe IMAQdxCamera worker nominally implements `program_properties` and `check_remote_values` which set and get the attributes dictionary of the connected camera. The remote check of the properties is still a work in progress.\r\n\r\nThe PylonCamera subclass now defines three device\\_properties for manual control: \u2018ExposureTime' and \u2018CenterX\u2019 and \u2018TestImageSelector\u2019 for AO, DO, and EO style widgets as an example. These controls mirror the camera attributes dictionary entries. Ultimately I\u2019d like to be more selective in what gets controlled this way to I\u2019ll remove the \u2018TestImageSelector\u2019 before any merge can happen.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/84/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/dihm/labscript_devices:6ef183bd3a77%0D40df0cb58f3b?from_pullrequest_id=84"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/84/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/84.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/84/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/84/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/84"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/84/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/dihm/labscript_devices:6ef183bd3a77%0D40df0cb58f3b?from_pullrequest_id=84"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/84/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/84/statuses_page=1.json"}}, "title": "Initial test of device_properties BLACS_tab widgets for the PylonCamera device.", "close_source_branch": true, "type": "pullrequest", "id": 84, "destination": {"commit": {"hash": "40df0cb58f3b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/40df0cb58f3b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/40df0cb58f3b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-10-09T00:08:47.457594+00:00", "summary": {"raw": "For testing the device\\_property changes implemented in BLACS and labscript\\_utils, I decided to use the IMAQdxCamera class. This commit only has device\\_properties set for the PylonCamera itself since I don\u2019t have the IMAQdx dev software. Implementation there should be essentially identical.\r\n\r\nThis requires [PR #75 from BLACS](#!/labscript_suite/blacs/pull-requests/75/device-properties/diff) to work.\r\n\r\nThis demonstrates how to implement device\\_property controls in the BLACS tab of a device. The IMAQdxCamera tab makes calls to the new `create_device_properties` and `create_property_widgets` methods with the class attribute `self.device_properties`.\r\n\r\nThe IMAQdxCamera worker nominally implements `program_properties` and `check_remote_values` which set and get the attributes dictionary of the connected camera. The remote check of the properties is still a work in progress.\r\n\r\nThe PylonCamera subclass now defines three device\\_properties for manual control: \u2018ExposureTime' and \u2018CenterX\u2019 and \u2018TestImageSelector\u2019 for AO, DO, and EO style widgets as an example. These controls mirror the camera attributes dictionary entries. Ultimately I\u2019d like to be more selective in what gets controlled this way to I\u2019ll remove the \u2018TestImageSelector\u2019 before any merge can happen.", "markup": "markdown", "html": "<p>For testing the device_property changes implemented in BLACS and labscript_utils, I decided to use the IMAQdxCamera class. This commit only has device_properties set for the PylonCamera itself since I don\u2019t have the IMAQdx dev software. Implementation there should be essentially identical.</p>\n<p>This requires <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/75/device-properties/diff\" rel=\"nofollow\">PR #75 from BLACS</a> to work.</p>\n<p>This demonstrates how to implement device_property controls in the BLACS tab of a device. The IMAQdxCamera tab makes calls to the new <code>create_device_properties</code> and <code>create_property_widgets</code> methods with the class attribute <code>self.device_properties</code>.</p>\n<p>The IMAQdxCamera worker nominally implements <code>program_properties</code> and <code>check_remote_values</code> which set and get the attributes dictionary of the connected camera. The remote check of the properties is still a work in progress.</p>\n<p>The PylonCamera subclass now defines three device_properties for manual control: \u2018ExposureTime' and \u2018CenterX\u2019 and \u2018TestImageSelector\u2019 for AO, DO, and EO style widgets as an example. These controls mirror the camera attributes dictionary entries. Ultimately I\u2019d like to be more selective in what gets controlled this way to I\u2019ll remove the \u2018TestImageSelector\u2019 before any merge can happen.</p>", "type": "rendered"}, "source": {"commit": {"hash": "6ef183bd3a77", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices/commit/6ef183bd3a77"}, "html": {"href": "#!/dihm/labscript_devices/commits/6ef183bd3a77"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_devices"}, "html": {"href": "#!/dihm/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "dihm/labscript_devices", "uuid": "{9f3f6b5d-a0fe-41e9-b62b-9ad5a0ef8b5c}"}, "branch": {"name": "device_properties"}}, "comment_count": 4, "state": "OPEN", "task_count": 0, "reason": "", "updated_on": "2020-01-29T13:01:36.802420+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": null, "closed_by": null}, {"description": "This is an updated Zaber stage driver using the new `zaber.serial` API and the modern labscript driver folder structure. It is functionally identical to the old one. I've tested it on the one stage I've got here and it works, though it is not clear to me whether all models support the \"binary\" interface or if we will need to allow the user to specify whether to use the \"ascii\" interface. This one seems to require the binary interface, so I hope that is universal!\r\n\r\nTODO: ~~remote value checking~~ and smart programming. These should be fairly trivial to implement. Remote value checking could be quite valuable, whereas smart programming will only shave a few milliseconds off each shot.\r\n\r\nEdit: Probably not going to bother with smart programming.\r\n\r\nRequires Python 3.5+", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/85/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:40df0cb58f3b%0D432d899881a0?from_pullrequest_id=85"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/85/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/85.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/85/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/85/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/85"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/85/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:40df0cb58f3b%0D432d899881a0?from_pullrequest_id=85"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/85/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/85/statuses_page=1.json"}}, "title": "Restore Zaber stage support", "close_source_branch": true, "type": "pullrequest", "id": 85, "destination": {"commit": {"hash": "432d899881a0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/432d899881a0.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/432d899881a0"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-10-24T21:47:26.333570+00:00", "summary": {"raw": "This is an updated Zaber stage driver using the new `zaber.serial` API and the modern labscript driver folder structure. It is functionally identical to the old one. I've tested it on the one stage I've got here and it works, though it is not clear to me whether all models support the \"binary\" interface or if we will need to allow the user to specify whether to use the \"ascii\" interface. This one seems to require the binary interface, so I hope that is universal!\r\n\r\nTODO: ~~remote value checking~~ and smart programming. These should be fairly trivial to implement. Remote value checking could be quite valuable, whereas smart programming will only shave a few milliseconds off each shot.\r\n\r\nEdit: Probably not going to bother with smart programming.\r\n\r\nRequires Python 3.5+", "markup": "markdown", "html": "<p>This is an updated Zaber stage driver using the new <code>zaber.serial</code> API and the modern labscript driver folder structure. It is functionally identical to the old one. I've tested it on the one stage I've got here and it works, though it is not clear to me whether all models support the \"binary\" interface or if we will need to allow the user to specify whether to use the \"ascii\" interface. This one seems to require the binary interface, so I hope that is universal!</p>\n<p>TODO: <del>remote value checking</del> and smart programming. These should be fairly trivial to implement. Remote value checking could be quite valuable, whereas smart programming will only shave a few milliseconds off each shot.</p>\n<p>Edit: Probably not going to bother with smart programming.</p>\n<p>Requires Python 3.5+</p>", "type": "rendered"}, "source": {"commit": {"hash": "977e791c0dbc", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/977e791c0dbc"}, "html": {"href": "#!/cbillington/labscript_devices/commits/977e791c0dbc"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "zaberstage"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-28T21:36:40.275977+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "40df0cb58f3b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/40df0cb58f3b.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/40df0cb58f3b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Added a labscript device called `SoftwareDevice`, that you attach functions to\r\nto run during `transition_to_buffered` or `transition_to_static`\r\n\r\nSyntax is such that the device can in future be extended to run functions\r\nin the middle of the experiment in software time, but that is not yet\r\nimplemented.\r\n\r\nAlso still possibly todo is to save results of the functions, including whether they raise\r\nexceptions or not. An option for whether to stop on exception or not should\r\nalso be able to be set as a device property, so that failing functions don't\r\nstop the experiment from cycling if you don't want them to.\r\n\r\nThe use case for implementing this is that we want to have some important analysis results influence the very next shot, specifically, a measurement of how out of resonance we are for a microwave transition to feed forward to magnetic field cancellation in the next shot. This is important as the field drifts throughout the day. Allowing lyse to do the analysis is not ideal since we don't want the experiment to stop cycling because we are messing around with lyse - lyse analysis should be asynchronous with the experiment most of the time.\r\n\r\nTo that end a function attached to a \"software device\" will do some image analysis at the end of each shot, and update runmanager globals using the `runmanager.remote` API. Yet to come is a \"just in time\" compilation mode for runmanager, where it does not compile shots until BLACS is ready to run them. This will ensure the new globals are used in the very next shot.\r\n\r\nThere is nothing stopping a function run by the SoftwareDevice from instantiating a `lyse.Run` and saving its results under some group name (which will have to be set manually via `Run.set_group()`), such that lyse routines can use the results later.\r\n\r\nHere's what it looks like in labscript code:\r\n\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.DummyPseudoclock.labscript_devices import DummyPseudoclock\r\nfrom labscript_devices.SoftwareDevice.labscript_devices import SoftwareDevice\r\n\r\nDummyPseudoclock('pseudoclock')\r\nSoftwareDevice('software_device')\r\n\r\n\r\ndef foo(shot_context, t, arg):\r\n    print(f\"hello, {arg}!\")\r\n\r\n\r\nsoftware_device.add_function('start', foo, 'world')\r\n\r\nstart()\r\nstop(1)\r\n```\r\n\r\nAnd here's the result in BLACS:\r\n\r\n![software_device.png](data/bitbucket.org/repo/7EEj84e/images/3545842253-software_device.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/86/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:537cc3780c54%0D625926f151be?from_pullrequest_id=86"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/86/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/86.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/86/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/86/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/86"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/86/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:537cc3780c54%0D625926f151be?from_pullrequest_id=86"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/86/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/86/statuses_page=1.json"}}, "title": "Added a 'device' that runs arbitrary functions before/after the experiment.", "close_source_branch": true, "type": "pullrequest", "id": 86, "destination": {"commit": {"hash": "625926f151be", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/625926f151be.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/625926f151be"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-11-15T02:36:28.097284+00:00", "summary": {"raw": "Added a labscript device called `SoftwareDevice`, that you attach functions to\r\nto run during `transition_to_buffered` or `transition_to_static`\r\n\r\nSyntax is such that the device can in future be extended to run functions\r\nin the middle of the experiment in software time, but that is not yet\r\nimplemented.\r\n\r\nAlso still possibly todo is to save results of the functions, including whether they raise\r\nexceptions or not. An option for whether to stop on exception or not should\r\nalso be able to be set as a device property, so that failing functions don't\r\nstop the experiment from cycling if you don't want them to.\r\n\r\nThe use case for implementing this is that we want to have some important analysis results influence the very next shot, specifically, a measurement of how out of resonance we are for a microwave transition to feed forward to magnetic field cancellation in the next shot. This is important as the field drifts throughout the day. Allowing lyse to do the analysis is not ideal since we don't want the experiment to stop cycling because we are messing around with lyse - lyse analysis should be asynchronous with the experiment most of the time.\r\n\r\nTo that end a function attached to a \"software device\" will do some image analysis at the end of each shot, and update runmanager globals using the `runmanager.remote` API. Yet to come is a \"just in time\" compilation mode for runmanager, where it does not compile shots until BLACS is ready to run them. This will ensure the new globals are used in the very next shot.\r\n\r\nThere is nothing stopping a function run by the SoftwareDevice from instantiating a `lyse.Run` and saving its results under some group name (which will have to be set manually via `Run.set_group()`), such that lyse routines can use the results later.\r\n\r\nHere's what it looks like in labscript code:\r\n\r\n```python\r\nfrom labscript import *\r\nfrom labscript_devices.DummyPseudoclock.labscript_devices import DummyPseudoclock\r\nfrom labscript_devices.SoftwareDevice.labscript_devices import SoftwareDevice\r\n\r\nDummyPseudoclock('pseudoclock')\r\nSoftwareDevice('software_device')\r\n\r\n\r\ndef foo(shot_context, t, arg):\r\n    print(f\"hello, {arg}!\")\r\n\r\n\r\nsoftware_device.add_function('start', foo, 'world')\r\n\r\nstart()\r\nstop(1)\r\n```\r\n\r\nAnd here's the result in BLACS:\r\n\r\n![software_device.png](data/bitbucket.org/repo/7EEj84e/images/3545842253-software_device.png)", "markup": "markdown", "html": "<p>Added a labscript device called <code>SoftwareDevice</code>, that you attach functions to\nto run during <code>transition_to_buffered</code> or <code>transition_to_static</code></p>\n<p>Syntax is such that the device can in future be extended to run functions\nin the middle of the experiment in software time, but that is not yet\nimplemented.</p>\n<p>Also still possibly todo is to save results of the functions, including whether they raise\nexceptions or not. An option for whether to stop on exception or not should\nalso be able to be set as a device property, so that failing functions don't\nstop the experiment from cycling if you don't want them to.</p>\n<p>The use case for implementing this is that we want to have some important analysis results influence the very next shot, specifically, a measurement of how out of resonance we are for a microwave transition to feed forward to magnetic field cancellation in the next shot. This is important as the field drifts throughout the day. Allowing lyse to do the analysis is not ideal since we don't want the experiment to stop cycling because we are messing around with lyse - lyse analysis should be asynchronous with the experiment most of the time.</p>\n<p>To that end a function attached to a \"software device\" will do some image analysis at the end of each shot, and update runmanager globals using the <code>runmanager.remote</code> API. Yet to come is a \"just in time\" compilation mode for runmanager, where it does not compile shots until BLACS is ready to run them. This will ensure the new globals are used in the very next shot.</p>\n<p>There is nothing stopping a function run by the SoftwareDevice from instantiating a <code>lyse.Run</code> and saving its results under some group name (which will have to be set manually via <code>Run.set_group()</code>), such that lyse routines can use the results later.</p>\n<p>Here's what it looks like in labscript code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.DummyPseudoclock.labscript_devices</span> <span class=\"kn\">import</span> <span class=\"n\">DummyPseudoclock</span>\n<span class=\"kn\">from</span> <span class=\"nn\">labscript_devices.SoftwareDevice.labscript_devices</span> <span class=\"kn\">import</span> <span class=\"n\">SoftwareDevice</span>\n\n<span class=\"n\">DummyPseudoclock</span><span class=\"p\">(</span><span class=\"s1\">&#39;pseudoclock&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">SoftwareDevice</span><span class=\"p\">(</span><span class=\"s1\">&#39;software_device&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">shot_context</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"s2\">&quot;hello, {arg}!&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">software_device</span><span class=\"o\">.</span><span class=\"n\">add_function</span><span class=\"p\">(</span><span class=\"s1\">&#39;start&#39;</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>And here's the result in BLACS:</p>\n<p><img alt=\"software_device.png\" src=\"data/bitbucket.org/repo/7EEj84e/images/3545842253-software_device.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "0022ad6588f5", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/0022ad6588f5"}, "html": {"href": "#!/cbillington/labscript_devices/commits/0022ad6588f5"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "SoftwareDevice"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-16T10:23:30.042478+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "537cc3780c54", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/537cc3780c54.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/537cc3780c54"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Add NI-PCI-DIO-32HS\r\n\r\n* Write all DO at once instead of iterating over ports.\r\n\r\n    This resolves an issue raised in the mailing list:\r\n    https://groups.google.com/forum/#!topic/labscriptsuite/pO6CGa4GsRI\r\n\r\n    in which some devices are unhappy about the explicit buffer configuration\r\n    required when making multiple writes of data to the same task. By making a\r\n    single write only, we allow the DAQmx driver to make decisions about buffers\r\n    itself, which the NI-PCI-DIO-32HS seems to require.\r\n\r\nRequires testing, ~~to confirm it actually resolves the issue on real hardware~~(edit: done, it does) and for regressions.  I'll deploy in our lab.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/87/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:891b7ac98605%0D8c9f9c881048?from_pullrequest_id=87"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/87/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/87.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/87/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/87/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/87"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/87/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:891b7ac98605%0D8c9f9c881048?from_pullrequest_id=87"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/87/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/87/statuses_page=1.json"}}, "title": "Add NI-PCI-DIO-32HS and bugfix its buffered DO.", "close_source_branch": true, "type": "pullrequest", "id": 87, "destination": {"commit": {"hash": "8c9f9c881048", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/8c9f9c881048.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/8c9f9c881048"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-11-16T20:41:56.812371+00:00", "summary": {"raw": "* Add NI-PCI-DIO-32HS\r\n\r\n* Write all DO at once instead of iterating over ports.\r\n\r\n    This resolves an issue raised in the mailing list:\r\n    https://groups.google.com/forum/#!topic/labscriptsuite/pO6CGa4GsRI\r\n\r\n    in which some devices are unhappy about the explicit buffer configuration\r\n    required when making multiple writes of data to the same task. By making a\r\n    single write only, we allow the DAQmx driver to make decisions about buffers\r\n    itself, which the NI-PCI-DIO-32HS seems to require.\r\n\r\nRequires testing, ~~to confirm it actually resolves the issue on real hardware~~(edit: done, it does) and for regressions.  I'll deploy in our lab.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Add NI-PCI-DIO-32HS</p>\n</li>\n<li>\n<p>Write all DO at once instead of iterating over ports.</p>\n<p>This resolves an issue raised in the mailing list:\n<a href=\"https://groups.google.com/forum/#!topic/labscriptsuite/pO6CGa4GsRI\" rel=\"nofollow\" class=\"ap-connect-link\">https://groups.google.com/forum/#!topic/labscriptsuite/pO6CGa4GsRI</a></p>\n<p>in which some devices are unhappy about the explicit buffer configuration\nrequired when making multiple writes of data to the same task. By making a\nsingle write only, we allow the DAQmx driver to make decisions about buffers\nitself, which the NI-PCI-DIO-32HS seems to require.</p>\n</li>\n</ul>\n<p>Requires testing, <del>to confirm it actually resolves the issue on real hardware</del>(edit: done, it does) and for regressions.  I'll deploy in our lab.</p>", "type": "rendered"}, "source": {"commit": {"hash": "34fe6a458dbf", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/34fe6a458dbf"}, "html": {"href": "#!/cbillington/labscript_devices/commits/34fe6a458dbf"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "NI_DAQmx"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-11-21T17:42:38.444152+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "891b7ac98605", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/891b7ac98605.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/891b7ac98605"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This is something of a no-brainer. Since the pyqtgraph widget supports displaying multiple images if it is sent a 3D block of data (it adds a little scroll widget underneath to select which image is shown - a bit buggy with the mouse in current pyqtgraph but you can use the arrow keys to scroll through all images as well), we might as well send it the acquired images at the end of the shot.\r\n\r\nConsidered sending them mid-shot, but since sending images to the parent is synchronous, I didn't want to slow the acquisition down by doing that - I could make it asynchronous just for that case, but this would depend on details of the subclass - function calls would need to be added to the inner loop of each subclass's `grab_multiple()` method, plus it would mean the parent class appending to a potentially big array mid-shot for each image instead of concatenating them all at once - probably don't want the potential performance hit mid-shot.\r\n\r\nSo this seemed like a good middle ground - display the images, but only at the end of the shot.\r\n\r\nThis is untested!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/88/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diffstat/labscript_suite/labscript_devices:432d899881a0%0D077ef0ffcc5f?from_pullrequest_id=88"}, "commits": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/88/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/88.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/88/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/88/merge"}, "html": {"href": "#!/labscript_suite/labscript_devices/pull-requests/88"}, "activity": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/88/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/diff/labscript_suite/labscript_devices:432d899881a0%0D077ef0ffcc5f?from_pullrequest_id=88"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_devices/pullrequests/88/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_devices/pullrequests/88/statuses_page=1.json"}}, "title": "IMAQdxCamera: Send acquired images to the parent for display at the end of the shot.", "close_source_branch": true, "type": "pullrequest", "id": 88, "destination": {"commit": {"hash": "077ef0ffcc5f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/077ef0ffcc5f.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/077ef0ffcc5f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices.json"}, "html": {"href": "#!/labscript_suite/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{30c94cb1-feec-4534-8885-92452023c9c9}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "labscript_suite/labscript_devices", "uuid": "{30c94cb1-feec-4534-8885-92452023c9c9}"}, "branch": {"name": "default"}}, "created_on": "2019-12-12T21:53:41.456207+00:00", "summary": {"raw": "This is something of a no-brainer. Since the pyqtgraph widget supports displaying multiple images if it is sent a 3D block of data (it adds a little scroll widget underneath to select which image is shown - a bit buggy with the mouse in current pyqtgraph but you can use the arrow keys to scroll through all images as well), we might as well send it the acquired images at the end of the shot.\r\n\r\nConsidered sending them mid-shot, but since sending images to the parent is synchronous, I didn't want to slow the acquisition down by doing that - I could make it asynchronous just for that case, but this would depend on details of the subclass - function calls would need to be added to the inner loop of each subclass's `grab_multiple()` method, plus it would mean the parent class appending to a potentially big array mid-shot for each image instead of concatenating them all at once - probably don't want the potential performance hit mid-shot.\r\n\r\nSo this seemed like a good middle ground - display the images, but only at the end of the shot.\r\n\r\nThis is untested!", "markup": "markdown", "html": "<p>This is something of a no-brainer. Since the pyqtgraph widget supports displaying multiple images if it is sent a 3D block of data (it adds a little scroll widget underneath to select which image is shown - a bit buggy with the mouse in current pyqtgraph but you can use the arrow keys to scroll through all images as well), we might as well send it the acquired images at the end of the shot.</p>\n<p>Considered sending them mid-shot, but since sending images to the parent is synchronous, I didn't want to slow the acquisition down by doing that - I could make it asynchronous just for that case, but this would depend on details of the subclass - function calls would need to be added to the inner loop of each subclass's <code>grab_multiple()</code> method, plus it would mean the parent class appending to a potentially big array mid-shot for each image instead of concatenating them all at once - probably don't want the potential performance hit mid-shot.</p>\n<p>So this seemed like a good middle ground - display the images, but only at the end of the shot.</p>\n<p>This is untested!</p>", "type": "rendered"}, "source": {"commit": {"hash": "8b111ec66b8f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices/commit/8b111ec66b8f"}, "html": {"href": "#!/cbillington/labscript_devices/commits/8b111ec66b8f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_devices"}, "html": {"href": "#!/cbillington/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a2db461e-24e6-495e-a15d-8b80435f721e}ts=python"}}, "type": "repository", "name": "labscript_devices", "full_name": "cbillington/labscript_devices", "uuid": "{a2db461e-24e6-495e-a15d-8b80435f721e}"}, "branch": {"name": "display-acquired-images"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-28T21:33:14.959199+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "432d899881a0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_devices/commit/432d899881a0.json"}, "html": {"href": "#!/labscript_suite/labscript_devices/commits/432d899881a0"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}], "page": 2, "size": 88}