{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26/comments/54067095.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/26#comment-54067095"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "title": "Add enum control widget"}, "content": {"raw": "Cool, so I\u2019ve had a bit of a think about what we could do\u2026this may not be well thought through so please adjust as it makes sense!\n\nWe currently have two categories of device properties:\n\n* Connection table properties\n* Device properties\n\nThe connection table properties should be those that cannot be configured shot-to-shot. This is why a recompile of the connection table is needed, along with a restart of BLACS. Usually they are device initialisation settings \\(hence the need to restart BLACS\\).\n\nThe device properties are those that can be changed shot-to-shot, for example data acquisition rates.\n\nIt seems to me that the type of properties you want to change on the front panel are going to match the device properties.\n\n\u200c\n\nI thus propose that we implement something in BLACS device tabs to:\n\n* Display read-only versions of the connection table properties\n* Display editable versions of the device properties.\n\nThis will require labscript device code to define meta-data about each property \\(so that we can render appropriate widgets in BLACS and do appropriate type checking in labscript\\). Off the top of my head I think this would be:\n\n* property name\n* default value\n* type\n* list of allowed values or range\n\nWe \\(a long time ago - when we first created the labscript\\_devices library from code that existed in BLACS/labscript\\) planned to have a class for each device that just held device specifications. For example, clock frequencies or update rates, number of output channels, etc. Basically the labscript class attributes and the dictionaries in the BLACS GUI class that contain channel configuration information were going to live in a single class so that we could reuse then in labscript/ruviewer/BLACS without redefining quantities multiple times \\(and without having to import the classes meant for other components\\). We didn\u2019t end up doing this because we \\(a\\) focused on other more important things and \\(b\\) had to import all the classes in every program anyway due to the file structure. The latter is of course now fixed!\n\nSo I propose:\n\n* that the meta-data about device/connection table properties be placed in a new class, along with any other device specification information collected from the device classes,\n* that we update labscript to use this information for automatic type checking and maybe:\n\n    * remove the need to explicitly specify the allowed kwargs to the `__init__` method of the labscript class\n    * integrate \\(or supersede?\\) the `@set_passed_properties` decorator\n    \n* that we add to `DeviceTab` functionality to automatically display editable widgets for device properties \\(and read-only display of connection table properties\\). This would require:\n\n    * parsing the property meta-data\n    * probably re-using the existing output classes \\(but just not storing them in the same lists as actual outputs so they aren\u2019t sent to `Worker.program_manual`\\) and passing in a different function for `self.program_device` \\(see below\\)\n    * creating an additional state machine method to tell the worker process when to reprogram the device properties in manual mode \\(similar to `DeviceTab.program_device`\\)\n    * an additional worker process method similar to `Worker.program_manual` that handles updating a devices configurable properties.\n    * working out how best to display this information in a tab by default, while also allowing subclasses to override how it is displayed \\(much like they can with output widgets\\).\n    \n\nA further extension of this could be to solve [labscript issue #49](#!/labscript_suite/labscript/issues/49/allow-the-set_passed_properties-decorator) and extend the above proposal to allow properties to be associated with device channels rather than just devices. That\u2019s probably beyond the scope of this though \\(just thought I\u2019d mention it\\) and would require a tonne more work I think.\n\nThoughts @{557058:411f7712-e1fa-438c-b578-0359da2d9f06} and @{557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3} ?\n\n\u200c", "markup": "markdown", "html": "<p>Cool, so I\u2019ve had a bit of a think about what we could do\u2026this may not be well thought through so please adjust as it makes sense!</p>\n<p>We currently have two categories of device properties:</p>\n<ul>\n<li>Connection table properties</li>\n<li>Device properties</li>\n</ul>\n<p>The connection table properties should be those that cannot be configured shot-to-shot. This is why a recompile of the connection table is needed, along with a restart of BLACS. Usually they are device initialisation settings (hence the need to restart BLACS).</p>\n<p>The device properties are those that can be changed shot-to-shot, for example data acquisition rates.</p>\n<p>It seems to me that the type of properties you want to change on the front panel are going to match the device properties.</p>\n<p>\u200c</p>\n<p>I thus propose that we implement something in BLACS device tabs to:</p>\n<ul>\n<li>Display read-only versions of the connection table properties</li>\n<li>Display editable versions of the device properties.</li>\n</ul>\n<p>This will require labscript device code to define meta-data about each property (so that we can render appropriate widgets in BLACS and do appropriate type checking in labscript). Off the top of my head I think this would be:</p>\n<ul>\n<li>property name</li>\n<li>default value</li>\n<li>type</li>\n<li>list of allowed values or range</li>\n</ul>\n<p>We (a long time ago - when we first created the labscript_devices library from code that existed in BLACS/labscript) planned to have a class for each device that just held device specifications. For example, clock frequencies or update rates, number of output channels, etc. Basically the labscript class attributes and the dictionaries in the BLACS GUI class that contain channel configuration information were going to live in a single class so that we could reuse then in labscript/ruviewer/BLACS without redefining quantities multiple times (and without having to import the classes meant for other components). We didn\u2019t end up doing this because we (a) focused on other more important things and (b) had to import all the classes in every program anyway due to the file structure. The latter is of course now fixed!</p>\n<p>So I propose:</p>\n<ul>\n<li>that the meta-data about device/connection table properties be placed in a new class, along with any other device specification information collected from the device classes,</li>\n<li>\n<p>that we update labscript to use this information for automatic type checking and maybe:</p>\n<ul>\n<li>remove the need to explicitly specify the allowed kwargs to the <code>__init__</code> method of the labscript class</li>\n<li>integrate (or supersede?) the <code>@set_passed_properties</code> decorator</li>\n</ul>\n</li>\n<li>\n<p>that we add to <code>DeviceTab</code> functionality to automatically display editable widgets for device properties (and read-only display of connection table properties). This would require:</p>\n<ul>\n<li>parsing the property meta-data</li>\n<li>probably re-using the existing output classes (but just not storing them in the same lists as actual outputs so they aren\u2019t sent to <code>Worker.program_manual</code>) and passing in a different function for <code>self.program_device</code> (see below)</li>\n<li>creating an additional state machine method to tell the worker process when to reprogram the device properties in manual mode (similar to <code>DeviceTab.program_device</code>)</li>\n<li>an additional worker process method similar to <code>Worker.program_manual</code> that handles updating a devices configurable properties.</li>\n<li>working out how best to display this information in a tab by default, while also allowing subclasses to override how it is displayed (much like they can with output widgets).</li>\n</ul>\n</li>\n</ul>\n<p>A further extension of this could be to solve <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript/issues/49/allow-the-set_passed_properties-decorator\" rel=\"nofollow\">labscript issue #49</a> and extend the above proposal to allow properties to be associated with device channels rather than just devices. That\u2019s probably beyond the scope of this though (just thought I\u2019d mention it) and would require a tonne more work I think.</p>\n<p>Thoughts <span class=\"ap-mention\" data-atlassian-id=\"557058:411f7712-e1fa-438c-b578-0359da2d9f06\">@David Meyer</span> and <span class=\"ap-mention\" data-atlassian-id=\"557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3\">@Chris Billington</span> ?</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-09-25T07:35:45.313187+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": null, "type": "issue_comment", "id": 54067095}