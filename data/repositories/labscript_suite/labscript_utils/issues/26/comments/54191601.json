{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26/comments/54191601.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/26#comment-54191601"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "title": "Add enum control widget"}, "content": {"raw": "Finally back from vacation and pushed out a paper so I can think on this again.\n\nOverall I think this is a decent framework to start with. A few specific notes to begin:\n\n> that the meta-data about device/connection table properties be placed in a new class, along with any other device specification information collected from the device classes,\n\nWhile initially worried about changing the structure of labscript devices, I\u2019m coming around. It would be nice to have a central location for putting in device information instead of having to spread it over all the files.\n\n> remove the need to explicitly specify the allowed kwargs to the `__init__` method of the labscript class\n\nIs there a way to do this while maintaining syntax helps for what kwargs are expected? It might get tricky to know what options are allowed/mandatory if their definition is hidden in another class that isn\u2019t directly interacted with.\n\n> integrate \\(or supersede?\\) the `@set_passed_properties` decorator\n\nI would personally love to use this as an opportunity to streamline the process of getting connectiontable\\_properties through to the BLACS worker. The current set\\_passed\\_properties \u2192 get\\_properties \u2192 worker\\_init\\_kwargs  method feels a bit clunky and is now particularly annoying since it requires syncing parameter names across three files by hand. It would be nice to mark a property as \u2018saved\u2019 and automatically have all saved properties sent to the BLACS worker.\n\n> working out how best to display this information in a tab by default, while also allowing subclasses to override how it is displayed \\(much like they can with output widgets\\).\n\nWould a pop-up window be a crazy idea here? I don\u2019t really like it but I\u2019m also worried about widget bloat with some devices that can have truly prodigious numbers of device properties. I\u2019m going to guess you\u2019ll say I should just learn to actually use the collapsible groups feature of my tabs?\n\n\u200c\n\nAnyway, I like this approach. My only concern is that I\u2019m not really qualified/have sufficient time to implement it all. If I\u2019m going to have any hope of progress I\u2019ll need some way to break this down into somewhat smaller chunks. My initial thoughts are:\n\n1. Need to pick a device to prototype with. Ideally it is mainlined with mock functionality so it can be well tested even without physical hardware. I believe that leaves the DummyPseudoclock and the IMAQdxCamera. It would be nice to get something like this going for the cameras \\(restarting BLACS to change exposure times isn\u2019t really tenable\\) but it is also a pretty unique implementation and I\u2019m wary to start there. I guess I could do the dummy clock but then there isn\u2019t any physical hardware to readily test with.\n2. Device picked, I would want to start on the meta-data class. It seems the easiest place to start with the fewest changes needed to labscript itself. Will need to decide conventions like meta-class naming and data structure.\n3. Next is the underlying code for handling connection table and device properties. Particularly need to figure out how to attach some kind of output objects. Will likely need to add/modify output objects for the purpose. I\u2019m pretty fuzzy on how this part will actually work in practice, particularly the desired syntax in a shot script for setting a device property. Should it remain in the init method or will the settings be controlled more like static outputs?\n4. Create extra property widgets. Get some framework together for the BLACS tab to connect to the output property objects for display.\n5. Add the BLACS methods for programming the properties. Assuming everything else is working this should be relatively simple.\n\nJust getting this written down has me worried this is going to turn into a pretty time sink for everyone. While I\u2019m always a fan of complete, long-term solutions is this also a moment to reconsider something shorter term instead?", "markup": "markdown", "html": "<p>Finally back from vacation and pushed out a paper so I can think on this again.</p>\n<p>Overall I think this is a decent framework to start with. A few specific notes to begin:</p>\n<blockquote>\n<p>that the meta-data about device/connection table properties be placed in a new class, along with any other device specification information collected from the device classes,</p>\n</blockquote>\n<p>While initially worried about changing the structure of labscript devices, I\u2019m coming around. It would be nice to have a central location for putting in device information instead of having to spread it over all the files.</p>\n<blockquote>\n<p>remove the need to explicitly specify the allowed kwargs to the <code>__init__</code> method of the labscript class</p>\n</blockquote>\n<p>Is there a way to do this while maintaining syntax helps for what kwargs are expected? It might get tricky to know what options are allowed/mandatory if their definition is hidden in another class that isn\u2019t directly interacted with.</p>\n<blockquote>\n<p>integrate (or supersede?) the <code>@set_passed_properties</code> decorator</p>\n</blockquote>\n<p>I would personally love to use this as an opportunity to streamline the process of getting connectiontable_properties through to the BLACS worker. The current set_passed_properties \u2192 get_properties \u2192 worker_init_kwargs  method feels a bit clunky and is now particularly annoying since it requires syncing parameter names across three files by hand. It would be nice to mark a property as \u2018saved\u2019 and automatically have all saved properties sent to the BLACS worker.</p>\n<blockquote>\n<p>working out how best to display this information in a tab by default, while also allowing subclasses to override how it is displayed (much like they can with output widgets).</p>\n</blockquote>\n<p>Would a pop-up window be a crazy idea here? I don\u2019t really like it but I\u2019m also worried about widget bloat with some devices that can have truly prodigious numbers of device properties. I\u2019m going to guess you\u2019ll say I should just learn to actually use the collapsible groups feature of my tabs?</p>\n<p>\u200c</p>\n<p>Anyway, I like this approach. My only concern is that I\u2019m not really qualified/have sufficient time to implement it all. If I\u2019m going to have any hope of progress I\u2019ll need some way to break this down into somewhat smaller chunks. My initial thoughts are:</p>\n<ol>\n<li>Need to pick a device to prototype with. Ideally it is mainlined with mock functionality so it can be well tested even without physical hardware. I believe that leaves the DummyPseudoclock and the IMAQdxCamera. It would be nice to get something like this going for the cameras (restarting BLACS to change exposure times isn\u2019t really tenable) but it is also a pretty unique implementation and I\u2019m wary to start there. I guess I could do the dummy clock but then there isn\u2019t any physical hardware to readily test with.</li>\n<li>Device picked, I would want to start on the meta-data class. It seems the easiest place to start with the fewest changes needed to labscript itself. Will need to decide conventions like meta-class naming and data structure.</li>\n<li>Next is the underlying code for handling connection table and device properties. Particularly need to figure out how to attach some kind of output objects. Will likely need to add/modify output objects for the purpose. I\u2019m pretty fuzzy on how this part will actually work in practice, particularly the desired syntax in a shot script for setting a device property. Should it remain in the init method or will the settings be controlled more like static outputs?</li>\n<li>Create extra property widgets. Get some framework together for the BLACS tab to connect to the output property objects for display.</li>\n<li>Add the BLACS methods for programming the properties. Assuming everything else is working this should be relatively simple.</li>\n</ol>\n<p>Just getting this written down has me worried this is going to turn into a pretty time sink for everyone. While I\u2019m always a fan of complete, long-term solutions is this also a moment to reconsider something shorter term instead?</p>", "type": "rendered"}, "created_on": "2019-10-03T16:22:41.602379+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 54191601}