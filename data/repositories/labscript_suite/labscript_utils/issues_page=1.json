{"pagelen": 100, "values": [{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/1/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/1.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/1/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/1/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/1/win32-dependency-has-a-minimum-requirement"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/1/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "win32 dependency has a minimum requirement", "component": null, "votes": 0, "watches": 2, "content": {"raw": "In the dual species BEC lab at Monash University, we are running the EPD 7.0.2 (32-bit) Python 2.7.1 distribution. This came with the win32 library.\r\n\r\nWhen starting runmanager (and presumably other programs) the following exception was raised\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\pythonlib\\runmanager\\__main__.py\", line 101, in set_win_appusermodel\r\n    set_appusermodel(window_id, appids['runmanager'], icon_path, relaunch_command, relaunch_display_name)\r\n  File \"C:\\pythonlib\\labscript_utils\\winshell\\__init__.py\", line 56, in set_appusermodel\r\n    store = propsys.SHGetPropertyStoreForWindow(window_id, propsys.IID_IPropertyStore)\r\nAttributeError: 'module' object has no attribute 'SHGetPropertyStoreForWindow'\r\n\r\n```\r\n\r\nUpgrading win32 to build 219 (from sourceforge) made the exception go away. Presumably there is a minimum version requirement for the win32 python wrapper. Unfortunately I couldn't see an easy way to find the version number from the win32 library (but I didn't try very hard). \r\n\r\nWe should probably try and include some sort of version check on this dependency.", "markup": "markdown", "html": "<p>In the dual species BEC lab at Monash University, we are running the EPD 7.0.2 (32-bit) Python 2.7.1 distribution. This came with the win32 library.</p>\n<p>When starting runmanager (and presumably other programs) the following exception was raised</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib</span><span class=\"se\">\\r</span><span class=\"s2\">unmanager\\__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">set_win_appusermodel</span>\n    <span class=\"n\">set_appusermodel</span><span class=\"p\">(</span><span class=\"n\">window_id</span><span class=\"p\">,</span> <span class=\"n\">appids</span><span class=\"p\">[</span><span class=\"s1\">&#39;runmanager&#39;</span><span class=\"p\">],</span> <span class=\"n\">icon_path</span><span class=\"p\">,</span> <span class=\"n\">relaunch_command</span><span class=\"p\">,</span> <span class=\"n\">relaunch_display_name</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\pythonlib\\labscript_utils\\winshell\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">56</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">set_appusermodel</span>\n    <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">propsys</span><span class=\"o\">.</span><span class=\"n\">SHGetPropertyStoreForWindow</span><span class=\"p\">(</span><span class=\"n\">window_id</span><span class=\"p\">,</span> <span class=\"n\">propsys</span><span class=\"o\">.</span><span class=\"n\">IID_IPropertyStore</span><span class=\"p\">)</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;module&#39;</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">&#39;SHGetPropertyStoreForWindow&#39;</span>\n</pre></div>\n\n\n<p>Upgrading win32 to build 219 (from sourceforge) made the exception go away. Presumably there is a minimum version requirement for the win32 python wrapper. Unfortunately I couldn't see an easy way to find the version number from the win32 library (but I didn't try very hard). </p>\n<p>We should probably try and include some sort of version check on this dependency.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-02T01:35:41.771559+00:00", "milestone": null, "updated_on": "2014-10-02T01:55:55.960250+00:00", "type": "issue", "id": 1}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/2/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/2.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/2/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/2/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/2/labconfig-should-do-some-initialisation-on"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/2/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "labconfig should do some initialisation on config files", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When a LabConfig is instantiated, it should call a general initialisation function that tries to make sense of the labconfig file.\r\n\r\nThis should do things like:\r\n- Ensure the experiment name is a valid python module name\r\n- Automatically create a subfolder for the experiment in analysislib and labscriptlib, with an __init__.py in each (if they don't already exist).\r\n- Ensure paths to shared drive exist\r\n\r\nAnd there are more things I'm sure, which are currently scattered throughout the programs that use labconfig, but ought to be in a consistent place.\r\n\r\nThis initialisation should be able to be suppressed with a keyword argument.\r\n\r\nPerhaps also this is where setting of default arguments should live, rather than in the individual programs. We don't have 'runmanagerconfig' and 'BLACSconfig', so so long as we have one config file, all its defaults should probably live in the same place.", "markup": "markdown", "html": "<p>When a LabConfig is instantiated, it should call a general initialisation function that tries to make sense of the labconfig file.</p>\n<p>This should do things like:\n- Ensure the experiment name is a valid python module name\n- Automatically create a subfolder for the experiment in analysislib and labscriptlib, with an <strong>init</strong>.py in each (if they don't already exist).\n- Ensure paths to shared drive exist</p>\n<p>And there are more things I'm sure, which are currently scattered throughout the programs that use labconfig, but ought to be in a consistent place.</p>\n<p>This initialisation should be able to be suppressed with a keyword argument.</p>\n<p>Perhaps also this is where setting of default arguments should live, rather than in the individual programs. We don't have 'runmanagerconfig' and 'BLACSconfig', so so long as we have one config file, all its defaults should probably live in the same place.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-03T22:55:56.834513+00:00", "milestone": null, "updated_on": "2014-10-03T22:55:56.834513+00:00", "type": "issue", "id": 2}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/3/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/3.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/3/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/3/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/3/unitconversions-module-does-not-belong-in"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/3/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Unitconversions module does not belong in labscript_utils", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The unitconversions module does no belong in labscript_utils. Unit conversion classses update and require committing often, and should not be in sync with the rest of labscript_utils, which provides application libraries that change less often. They should be considered 'user space' code, like labscript_devices is.\r\n\r\nunitconversions should be its own module at the toplevel, or else part of labscript_devices. My preference leans toward the former, especially seeing that it is not coupled with other devices, and that we now have an automated installer making the minimisation of the number of packages less important (though I would not propose splitting off the rest of labscript_utils, with possible exceptions due to some of them having general interest outside of labscript, like excepthook and h5_lock, which may be released separately one day).\r\n\r\nFor backward compatability, labscript_utils.unitconversions should continue to import the separate module to provide seamless functionality, but should print a deprecation warning. This code should be tagged with a comment # DEPRECATED or similar, so it can be seen and removed at a major version bump. (this approach should be followed for backward compatibility issues in general)", "markup": "markdown", "html": "<p>The unitconversions module does no belong in labscript_utils. Unit conversion classses update and require committing often, and should not be in sync with the rest of labscript_utils, which provides application libraries that change less often. They should be considered 'user space' code, like labscript_devices is.</p>\n<p>unitconversions should be its own module at the toplevel, or else part of labscript_devices. My preference leans toward the former, especially seeing that it is not coupled with other devices, and that we now have an automated installer making the minimisation of the number of packages less important (though I would not propose splitting off the rest of labscript_utils, with possible exceptions due to some of them having general interest outside of labscript, like excepthook and h5_lock, which may be released separately one day).</p>\n<p>For backward compatability, labscript_utils.unitconversions should continue to import the separate module to provide seamless functionality, but should print a deprecation warning. This code should be tagged with a comment # DEPRECATED or similar, so it can be seen and removed at a major version bump. (this approach should be followed for backward compatibility issues in general)</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-03T23:10:36.972664+00:00", "milestone": null, "updated_on": "2014-10-04T04:35:28.794494+00:00", "type": "issue", "id": 3}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/4/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/4.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/4/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/4/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/4/unitconversions-less-magic-and-more"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/4/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Unitconversions: less magic and more explicit importing", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Unlike `labscript_devices`, we don't require a unit conversions class to be in a file with the same name as the class within it. And you can have multiple unit conversion classes within a file, in fact I wrote some today. This is good, unit conversion classes can be small and we don't want a proliferation files when related things could be in a file together.\r\n\r\nSo that means that `unitconversions.__init__.py` goes out and does `import *` from everything, to make sure it gets all the conversion classes.\r\n\r\nThis can have unfortunate side effects, like when you import a single unit conversion class, you unwittingly import them all (this can be a problem if you have [line-in-the-sand style reloading of modules](http://pyunit.sourceforge.net/notes/reloading.html), and accidentally put these modules on the wrong side of the line. This isn't just me making up issues, it happened today to me!)\r\n\r\nIt also pollutes the namespace of `unitconversions.__init__.py` with all the global variables from the files in which unit conversions are defined.\r\n\r\nWhat we should do instead is have labscript store the full, qualified class name of the unit conversion class that is used. So that's the fully qualified module name and class name (eg: `labscript_utils.unitconversions.myconversionmodule.MyConversionClass`), the same way that the `pickle` module stores what class you're using, so it can import it and instantiate one on unpickling, regardless of whether that class has been imported.\r\n\r\nA function in `unitconversions.__init__.py` should then be provided that will go and find the relevant class (which can be anywhere in the Python search path), and return it to the caller. This function should happily import the required modules every time it is called, but mostly this will just do nothing because the module will already be in `sys.modules` and so it will be returned without the code being run. However if a `ModuleWatcher` has in the meantime unloaded a module due to it changing, it will be re-executed, and the caller will get the brand, shiny new class.\r\n\r\nWhen users want a unit conversion class, they will import it directly from wherever it is. When BLACS wants a unit conversion class, it should call that function to get the class by name.\r\n\r\nThis will not be backward compatible, there is no easy way to make it backward compatible without defeating the benefits completely. So it will be a major version bump and changes in other code will have to have corresponding bumps in their dependency checks.\r\n\r\nThis helps us further along the path of 'don't run code that isn't yours'. We started with having literally everything in `labscript.py`, but as we branch out to more users and devices, we shouldn't be just executing all code everywhere, just what we need. Otherwise users are subject to the import dependencies and possible crashes of code that is not theirs and they aren't using.", "markup": "markdown", "html": "<p>Unlike <code>labscript_devices</code>, we don't require a unit conversions class to be in a file with the same name as the class within it. And you can have multiple unit conversion classes within a file, in fact I wrote some today. This is good, unit conversion classes can be small and we don't want a proliferation files when related things could be in a file together.</p>\n<p>So that means that <code>unitconversions.__init__.py</code> goes out and does <code>import *</code> from everything, to make sure it gets all the conversion classes.</p>\n<p>This can have unfortunate side effects, like when you import a single unit conversion class, you unwittingly import them all (this can be a problem if you have <a data-is-external-link=\"true\" href=\"http://pyunit.sourceforge.net/notes/reloading.html\" rel=\"nofollow\">line-in-the-sand style reloading of modules</a>, and accidentally put these modules on the wrong side of the line. This isn't just me making up issues, it happened today to me!)</p>\n<p>It also pollutes the namespace of <code>unitconversions.__init__.py</code> with all the global variables from the files in which unit conversions are defined.</p>\n<p>What we should do instead is have labscript store the full, qualified class name of the unit conversion class that is used. So that's the fully qualified module name and class name (eg: <code>labscript_utils.unitconversions.myconversionmodule.MyConversionClass</code>), the same way that the <code>pickle</code> module stores what class you're using, so it can import it and instantiate one on unpickling, regardless of whether that class has been imported.</p>\n<p>A function in <code>unitconversions.__init__.py</code> should then be provided that will go and find the relevant class (which can be anywhere in the Python search path), and return it to the caller. This function should happily import the required modules every time it is called, but mostly this will just do nothing because the module will already be in <code>sys.modules</code> and so it will be returned without the code being run. However if a <code>ModuleWatcher</code> has in the meantime unloaded a module due to it changing, it will be re-executed, and the caller will get the brand, shiny new class.</p>\n<p>When users want a unit conversion class, they will import it directly from wherever it is. When BLACS wants a unit conversion class, it should call that function to get the class by name.</p>\n<p>This will not be backward compatible, there is no easy way to make it backward compatible without defeating the benefits completely. So it will be a major version bump and changes in other code will have to have corresponding bumps in their dependency checks.</p>\n<p>This helps us further along the path of 'don't run code that isn't yours'. We started with having literally everything in <code>labscript.py</code>, but as we branch out to more users and devices, we shouldn't be just executing all code everywhere, just what we need. Otherwise users are subject to the import dependencies and possible crashes of code that is not theirs and they aren't using.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T01:47:19.137376+00:00", "milestone": null, "updated_on": "2014-10-05T03:09:49.152306+00:00", "type": "issue", "id": 4}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/5/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/5.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/5/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/5/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/5/excepthook-should-save-me-from-my"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/5/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Excepthook should save me from my stupidity", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I just launched a Qt program with a typo in like the topmost event filter or something, which got called about a billion times as my program started up. Of course Qt's event loop doesn't miss a beat on an exception in a callback, and so my program spawned what looked (with `ps`) like several hundred excepthook processes. I didn't see them actually pop up, and they eventually stopped accumulating, because my desktop environment immediately became unresponsive. After dropping to a virtual terminal to check things out and executing a carefully crafted few lines of Python to filter `ps` and kill them all, I was able to not lose my record of not having not rebooted my laptop yet on this continent.\r\n\r\nAnyway it occured to me that this shouldn't happen. Excepthook should cough max ten or so concurrent exception windows, and should cough a final one saying further errors are not being shown graphically.\r\n\r\n\r\n", "markup": "markdown", "html": "<p>I just launched a Qt program with a typo in like the topmost event filter or something, which got called about a billion times as my program started up. Of course Qt's event loop doesn't miss a beat on an exception in a callback, and so my program spawned what looked (with <code>ps</code>) like several hundred excepthook processes. I didn't see them actually pop up, and they eventually stopped accumulating, because my desktop environment immediately became unresponsive. After dropping to a virtual terminal to check things out and executing a carefully crafted few lines of Python to filter <code>ps</code> and kill them all, I was able to not lose my record of not having not rebooted my laptop yet on this continent.</p>\n<p>Anyway it occured to me that this shouldn't happen. Excepthook should cough max ten or so concurrent exception windows, and should cough a final one saying further errors are not being shown graphically.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-04T02:20:45.391681+00:00", "milestone": null, "updated_on": "2014-10-05T03:05:01.164765+00:00", "type": "issue", "id": 5}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/6/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/6.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/6/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/6/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/6/unitconversions-base-class-should-use"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/6/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Unitconversions base class should use different style of dynamic method creation", "component": null, "votes": 0, "watches": 1, "content": {"raw": "`exec`'ing `def` statements is a bit magical, and hard for exception code and code analysis tools (and humans too!) to tell what's going on if anything goes wrong. Since Python provides the tools to create methods dynamically by other means, these should be used instead.\r\n\r\nOooh, maybe this will be excuse enough to write a metaclass, but probably not so I won't get my hopes up. I mean they're pretty magical too, so should be avoided without a good reason.", "markup": "markdown", "html": "<p><code>exec</code>'ing <code>def</code> statements is a bit magical, and hard for exception code and code analysis tools (and humans too!) to tell what's going on if anything goes wrong. Since Python provides the tools to create methods dynamically by other means, these should be used instead.</p>\n<p>Oooh, maybe this will be excuse enough to write a metaclass, but probably not so I won't get my hopes up. I mean they're pretty magical too, so should be avoided without a good reason.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-04T02:25:05.207923+00:00", "milestone": null, "updated_on": "2014-10-04T02:25:05.207923+00:00", "type": "issue", "id": 6}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/7/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/7.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/7/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/7/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/7/modulewatcher-ability-to-blacklist-modules"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/7/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Modulewatcher: ability to blacklist modules", "component": null, "votes": 0, "watches": 1, "content": {"raw": "the ModuleWatcher class should have a method called 'blacklist', which takes a fully qualified module name as an argument. \r\n\r\nA blacklisted module will be added, unsurprisingly, to a blacklist. Any modules that import this module will also be blacklisted. This will be achieved using an import tracer (repurposed from labscript_utils.impprof) that is set up when a ModuleWatcher is instantiated.\r\n\r\nBlacklisted modules shouldn't be deleted from sys.modules immediately, that wouldn't make sense. They will be deleted on a method call 'clear_blacklisted' or similar.\r\n\r\nThis functionality is so that calling code can blacklist a module that it knows has import side effects and thus needs to be re-imported in code that runs repeatedly in the same interpreter, like lyse routines and labscript compilation.\r\n\r\nSo that far away code can blacklist itself, ModuleWatcher should provide access to an existing instance. ", "markup": "markdown", "html": "<p>the ModuleWatcher class should have a method called 'blacklist', which takes a fully qualified module name as an argument. </p>\n<p>A blacklisted module will be added, unsurprisingly, to a blacklist. Any modules that import this module will also be blacklisted. This will be achieved using an import tracer (repurposed from labscript_utils.impprof) that is set up when a ModuleWatcher is instantiated.</p>\n<p>Blacklisted modules shouldn't be deleted from sys.modules immediately, that wouldn't make sense. They will be deleted on a method call 'clear_blacklisted' or similar.</p>\n<p>This functionality is so that calling code can blacklist a module that it knows has import side effects and thus needs to be re-imported in code that runs repeatedly in the same interpreter, like lyse routines and labscript compilation.</p>\n<p>So that far away code can blacklist itself, ModuleWatcher should provide access to an existing instance. </p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2014-10-05T03:54:09.623613+00:00", "milestone": null, "updated_on": "2014-10-05T03:59:48.675778+00:00", "type": "issue", "id": 7}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/8/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/8.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/8/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/8/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/8/labconfig-returns-relative-path-instead-of"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/8/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Labconfig returns relative path instead of absolute path for config prefix", "component": null, "votes": 0, "watches": 1, "content": {"raw": "This is a problem if the config prefix is imported and then a program changes its working directory - the path will then be invalid.", "markup": "markdown", "html": "<p>This is a problem if the config prefix is imported and then a program changes its working directory - the path will then be invalid.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2014-10-15T18:51:40.429861+00:00", "milestone": null, "updated_on": "2014-10-15T18:53:10.800796+00:00", "type": "issue", "id": 8}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/9/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/9.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/9/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/9/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/9/winshell-functions-fail-on-windows-vista"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/9/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Winshell functions fail on Windows Vista", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The `make_shortcut` and `set_appusermodel` functions in `winshell.__init__.py` fail to run on windows Vista.\r\n\r\nThis causes the installer to fail towards the end of the install process and also all the applications to raise exception windows (although so far these have not been reported to prevent execution of the software).\r\n\r\nWe should ensure these functions use a try-except block so they don't crash on windows versions that are not supported, and print an appropriate warning (and encourage the user to report a bug if they are on a modern version of windows)", "markup": "markdown", "html": "<p>The <code>make_shortcut</code> and <code>set_appusermodel</code> functions in <code>winshell.__init__.py</code> fail to run on windows Vista.</p>\n<p>This causes the installer to fail towards the end of the install process and also all the applications to raise exception windows (although so far these have not been reported to prevent execution of the software).</p>\n<p>We should ensure these functions use a try-except block so they don't crash on windows versions that are not supported, and print an appropriate warning (and encourage the user to report a bug if they are on a modern version of windows)</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2016-05-19T00:12:02.778074+00:00", "milestone": null, "updated_on": "2016-05-19T00:12:02.778074+00:00", "type": "issue", "id": 9}, {"priority": "minor", "kind": "proposal", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/10/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/10.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/10/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/10/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/10/allow-check_version-to-require-only"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/10/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Allow check_version to require only minimum version", "component": null, "votes": 0, "watches": 1, "content": {"raw": "At present, [``check_version``](#!/labscript_suite/labscript_utils/src/8f4c1bea806fdf3fb722ed2adcd69881ff9845b8/__init__.py#__init__.py-21) requires the version of a dependency be equal to or greater than a particular version (``at_least``), and less than a higher specified version (``less_than``). This proposal would permit ``check_version`` to only require the version of a dependency be ``at_least`` or later, with no upper bound on the required version.\r\n\r\nReasoning: Won't have to keep updating ``check_version`` calls in line with packages that change minor version number regularly. I think the ``check_version`` is more of a hindrance than a help here, e.g. if a user updates packages in their environment and the new version exceeds ``less_than`` specified in a ``check_version`` call of a labscript module's \\__init__.py, then that module won't start. This may elicit the user to post an issue (diligence), downgrade the dependency (apathy), or give up (despair). If the issue is reported, checking the higher version of the dependency may not be exhaustive as we don't have unit tests, etc. Instead, this proposal permits (but does not demand) a \"works with dependency vX or later until we know better\" approach. If there is a real incompatibility with a newer version of a dependency, this will likely be detected in real-world use. The issue can then be resolved expeditiously *if* reported.", "markup": "markdown", "html": "<p>At present, <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/src/8f4c1bea806fdf3fb722ed2adcd69881ff9845b8/__init__.py#__init__.py-21\" rel=\"nofollow\"><code>check_version</code></a> requires the version of a dependency be equal to or greater than a particular version (<code>at_least</code>), and less than a higher specified version (<code>less_than</code>). This proposal would permit <code>check_version</code> to only require the version of a dependency be <code>at_least</code> or later, with no upper bound on the required version.</p>\n<p>Reasoning: Won't have to keep updating <code>check_version</code> calls in line with packages that change minor version number regularly. I think the <code>check_version</code> is more of a hindrance than a help here, e.g. if a user updates packages in their environment and the new version exceeds <code>less_than</code> specified in a <code>check_version</code> call of a labscript module's __init__.py, then that module won't start. This may elicit the user to post an issue (diligence), downgrade the dependency (apathy), or give up (despair). If the issue is reported, checking the higher version of the dependency may not be exhaustive as we don't have unit tests, etc. Instead, this proposal permits (but does not demand) a \"works with dependency vX or later until we know better\" approach. If there is a real incompatibility with a newer version of a dependency, this will likely be detected in real-world use. The issue can then be resolved expeditiously <em>if</em> reported.</p>", "type": "rendered"}, "assignee": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "state": "new", "version": null, "edited_on": null, "created_on": "2016-08-21T23:46:31.930215+00:00", "milestone": null, "updated_on": "2019-05-13T17:43:28.717455+00:00", "type": "issue", "id": 10}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/11/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/11.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/11/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/11/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/11/log-files-arent-rotating"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/11/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "Log files aren't rotating", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The `RotatingFileHandler` used in [setup_logging.py](#!/labscript_suite/labscript_utils/src/8f4c1bea806fdf3fb722ed2adcd69881ff9845b8/setup_logging.py?at=default&fileviewer=file-view-default#setup_logging.py-22) requires a non-zero `backupCount` argument for rollover to occur, but this argument defaults to zero and we hadn't specified otherwise. With the log level set to `DEBUG`, log files can grow pretty fast, resulting in unwieldy log files.", "markup": "markdown", "html": "<p>The <code>RotatingFileHandler</code> used in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/src/8f4c1bea806fdf3fb722ed2adcd69881ff9845b8/setup_logging.py?at=default&amp;fileviewer=file-view-default#setup_logging.py-22\" rel=\"nofollow\">setup_logging.py</a> requires a non-zero <code>backupCount</code> argument for rollover to occur, but this argument defaults to zero and we hadn't specified otherwise. With the log level set to <code>DEBUG</code>, log files can grow pretty fast, resulting in unwieldy log files.</p>", "type": "rendered"}, "assignee": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-02-06T05:45:22.104869+00:00", "milestone": null, "updated_on": "2017-04-11T18:15:34.427290+00:00", "type": "issue", "id": 11}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/12/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/12.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/12/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/12/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/12/units-in-spinbox-for-analog-quantities"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/12/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Units in spinbox for analog quantities", "component": null, "votes": 0, "watches": 2, "content": {"raw": "As per @spielman's suggestion in pull request #12, we should consider moving the units to within the spinbox for analog quantity widgets.\r\n\r\n> I would encourage a solution where the Hz (for exampe) is rendered in the spinbox and perhaps where a right click gives access to the units.\r\n\r\nThe unit change could be a sub-menu in the right-click menu for that widget. This helps to avoid the \"jagged\" appearance of the new vertical DDS widget layout.", "markup": "markdown", "html": "<p>As per @spielman's suggestion in <a href=\"#!/labscript_suite/labscript_utils/pull-requests/12/more-compact-dds-widgets\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #12</a>, we should consider moving the units to within the spinbox for analog quantity widgets.</p>\n<blockquote>\n<p>I would encourage a solution where the Hz (for exampe) is rendered in the spinbox and perhaps where a right click gives access to the units.</p>\n</blockquote>\n<p>The unit change could be a sub-menu in the right-click menu for that widget. This helps to avoid the \"jagged\" appearance of the new vertical DDS widget layout.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2017-06-22T00:12:55.857159+00:00", "milestone": null, "updated_on": "2017-06-22T06:41:09.720639+00:00", "type": "issue", "id": 12}, {"priority": "trivial", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/13/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/13.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/13/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/13/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/13/dragdroptabs-behave-strange"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/13/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "dragdroptabs behave strange", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If I try and drag a inactive tab that works as long as I stay in the same tab container. Once I drag it out the dragged tab is suddenly switched and I'm dragging the selected tab. \r\n\r\nIt would be better id the dragged Tab stays the same.", "markup": "markdown", "html": "<p>If I try and drag a inactive tab that works as long as I stay in the same tab container. Once I drag it out the dragged tab is suddenly switched and I'm dragging the selected tab. </p>\n<p>It would be better id the dragged Tab stays the same.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-07-23T21:40:25.811896+00:00", "milestone": null, "updated_on": "2017-11-11T13:36:40.896830+00:00", "type": "issue", "id": 13}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/14/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/14.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/14/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/14/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/14/labconfig-hostname"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/14/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "Labconfig hostname", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Having labsconfig named after hostname can cause problems under mobile systems, as they can have changing hostnames in different network environments.\r\nPossible solutions:\r\n\r\n* New identifier that is better than hostname\r\n\r\n* a file that saves what config file to use", "markup": "markdown", "html": "<p>Having labsconfig named after hostname can cause problems under mobile systems, as they can have changing hostnames in different network environments.\nPossible solutions:</p>\n<ul>\n<li>\n<p>New identifier that is better than hostname</p>\n</li>\n<li>\n<p>a file that saves what config file to use</p>\n</li>\n</ul>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-08-03T20:47:59.117070+00:00", "milestone": null, "updated_on": "2017-08-05T07:20:24.845802+00:00", "type": "issue", "id": 14}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/15/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/15.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/15/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/15/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/15/if-you-have-lots-of-tabs-the-width-of-each"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/15/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "If you have lots of tabs, the width of each tab shrinks rather than allowing scrolling", "component": null, "votes": 0, "watches": 1, "content": {"raw": "The new changes to the drag-drop-tab-bar are less than ideal for those managing a large number of tabs. Each tab now shrinks so that all tabs are visible at all times. This makes it hard to read the device name (and it can be difficult to distinguish devices if several have a similar name with a differing number at the end (e.g. `pulseblaster_3`, `pulseblaster_4`).\r\n\r\nThis should be fixed!", "markup": "markdown", "html": "<p>The new changes to the drag-drop-tab-bar are less than ideal for those managing a large number of tabs. Each tab now shrinks so that all tabs are visible at all times. This makes it hard to read the device name (and it can be difficult to distinguish devices if several have a similar name with a differing number at the end (e.g. <code>pulseblaster_3</code>, <code>pulseblaster_4</code>).</p>\n<p>This should be fixed!</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-10-05T00:19:04.744905+00:00", "milestone": null, "updated_on": "2019-02-05T20:03:29.719244+00:00", "type": "issue", "id": 15}, {"priority": "critical", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/16/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/16.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/16/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/16/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/16/double-import-denier-breaks-python3-stuff"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/16/vote"}}, "reporter": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "title": "Double import denier breaks python3 stuff", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In modules where labscrupt_utils is imported the command ```python -m module_name_here``` leads to a exception:\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py\", line 185, in _run_module_as_main\r\n    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\r\n  File \"/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py\", line 142, in _get_module_details\r\n    return _get_module_details(pkg_main_name, error)\r\n  File \"/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py\", line 155, in _get_module_details\r\n    code = loader.get_code(mod_name)\r\n\r\n```\r\n\r\nI did a bit of debugging and it seems to be caused by loader being of type <labscript_utils.double_import_denier.Loader object at 0x10e910438>. So we should maybe fix that for python 3 compat. \r\nFun fact ```python filepath_to_module``` still works.", "markup": "markdown", "html": "<p>In modules where labscrupt_utils is imported the command <code>python -m module_name_here</code> leads to a exception:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">185</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_module_as_main</span>\n    <span class=\"n\">mod_name</span><span class=\"p\">,</span> <span class=\"n\">mod_spec</span><span class=\"p\">,</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">_get_module_details</span><span class=\"p\">(</span><span class=\"n\">mod_name</span><span class=\"p\">,</span> <span class=\"n\">_Error</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">142</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_get_module_details</span>\n    <span class=\"k\">return</span> <span class=\"n\">_get_module_details</span><span class=\"p\">(</span><span class=\"n\">pkg_main_name</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/envs/snowflakes/lib/python3.6/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">155</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_get_module_details</span>\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_code</span><span class=\"p\">(</span><span class=\"n\">mod_name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>I did a bit of debugging and it seems to be caused by loader being of type &lt;labscript_utils.double_import_denier.Loader object at 0x10e910438&gt;. So we should maybe fix that for python 3 compat. \nFun fact <code>python filepath_to_module</code> still works.</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-03-21T10:58:53.743882+00:00", "milestone": null, "updated_on": "2018-03-22T06:07:50.911116+00:00", "type": "issue", "id": 16}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/17/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/17/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/17/runtimeerror-dictionary-changed-size"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/17/vote"}}, "reporter": {"display_name": "fretchen", "uuid": "{b6b916e1-4953-477a-9f8e-fd6c910a01a4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bb6b916e1-4953-477a-9f8e-fd6c910a01a4%7D"}, "html": {"href": "https://bitbucket.org/%7Bb6b916e1-4953-477a-9f8e-fd6c910a01a4%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/5b2ed07ddccdb457c8862cc2b3ce6fbed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsF-2.png"}}, "nickname": "fretchen", "type": "user", "account_id": "557058:cd123654-63a1-43af-be5e-8c5e274f4b65"}, "title": "RuntimeError: dictionary changed size during iteration", "component": null, "votes": 0, "watches": 1, "content": {"raw": "If I run labscript_utils in python3 this error is raised. \r\n\r\n\r\n```\r\n\r\nlabscript_utils/double_import_denier.py\", line 67, in __init__\r\n    for name, module in sys.modules.items():\r\nRuntimeError: dictionary changed size during iteration\r\n```\r\n\r\nIt would seem that this is a [known issue](https://stackoverflow.com/questions/11941817/how-to-avoid-runtimeerror-dictionary-changed-size-during-iteration-error)", "markup": "markdown", "html": "<p>If I run labscript_utils in python3 this error is raised. </p>\n<div class=\"codehilite\"><pre><span></span>labscript_utils/double_import_denier.py&quot;, line 67, in __init__\n    for name, module in sys.modules.items():\nRuntimeError: dictionary changed size during iteration\n</pre></div>\n\n\n<p>It would seem that this is a <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/questions/11941817/how-to-avoid-runtimeerror-dictionary-changed-size-during-iteration-error\" rel=\"nofollow\">known issue</a></p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-04-20T11:58:37.307532+00:00", "milestone": null, "updated_on": "2018-04-24T01:10:21.907148+00:00", "type": "issue", "id": 17}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/18/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/18.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/18/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/18/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/18/double-import-denier-breaks-with-runviewer"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/18/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Double import denier breaks with runviewer v2.1.0", "component": null, "votes": 0, "watches": 2, "content": {"raw": "The latest tagged version of runviewer is v2.1.0. When using the tagged (or tip) version of labscript utils, the following exception is raised:\r\n\r\n\r\n```\r\n#!python\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\labscript_py27\\runviewer\\__main__.py\", line 78, in <module>\r\n    from resample import resample as _resample\r\nRuntimeError: Double import! The same file has been imported under two different names, resulting in two copies of the module. This is almost certainly a mistake. If you are running a script from within a package and want to import another submodule of that package, import it by its full path: 'import module.submodule' instead of just 'import submodule.'\r\n\r\nPath imported: C:\\labscript_suite\\labscript_py27\\runviewer\\resample\r\n\r\nTraceback (first time imported, as resample):\r\n------------\r\n  File \"C:\\labscript_suite\\labscript_py27\\runviewer\\__main__.py\", line 78, in <module>\r\n    from resample import resample as _resample\r\n------------\r\n\r\nTraceback (second time imported, as runviewer.resample):\r\n------------\r\n  File \"C:\\labscript_suite\\labscript_py27\\runviewer\\__main__.py\", line 78, in <module>\r\n    from resample import resample as _resample\r\n  File \"C:\\labscript_suite\\labscript_py27\\runviewer\\resample\\__init__.py\", line 33, in <module>\r\n    module = importlib.import_module('runviewer.resample.%s.resample'%plat_name)\r\n  File \"C:\\Anaconda3\\envs\\labscript_py27\\lib\\importlib\\__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n------------\r\n\r\n```\r\n\r\nUpdating runviewer to tip fixes the issue (and so we should really tag a new runviewer version ASAP), but only because we change the way we compile and use the resample algorithm. However it looks to me like the double import denier is still being too aggressive here because a single import line triggered the double import denier.", "markup": "markdown", "html": "<p>The latest tagged version of runviewer is v2.1.0. When using the tagged (or tip) version of labscript utils, the following exception is raised:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_py27</span><span class=\"se\">\\r</span><span class=\"s2\">unviewer\\__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">resample</span> <span class=\"kn\">import</span> <span class=\"n\">resample</span> <span class=\"k\">as</span> <span class=\"n\">_resample</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Double</span> <span class=\"n\">import</span><span class=\"err\">!</span> <span class=\"n\">The</span> <span class=\"n\">same</span> <span class=\"nb\">file</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">imported</span> <span class=\"n\">under</span> <span class=\"n\">two</span> <span class=\"n\">different</span> <span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">resulting</span> <span class=\"ow\">in</span> <span class=\"n\">two</span> <span class=\"n\">copies</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">module</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">almost</span> <span class=\"n\">certainly</span> <span class=\"n\">a</span> <span class=\"n\">mistake</span><span class=\"o\">.</span> <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">running</span> <span class=\"n\">a</span> <span class=\"n\">script</span> <span class=\"kn\">from</span> <span class=\"nn\">within</span> <span class=\"nn\">a</span> <span class=\"nn\">package</span> <span class=\"nn\">and</span> <span class=\"nn\">want</span> <span class=\"nn\">to</span> <span class=\"kn\">import</span> <span class=\"n\">another</span> <span class=\"n\">submodule</span> <span class=\"n\">of</span> <span class=\"n\">that</span> <span class=\"n\">package</span><span class=\"p\">,</span> <span class=\"kn\">import</span> <span class=\"nn\">it</span> <span class=\"nn\">by</span> <span class=\"nn\">its</span> <span class=\"nn\">full</span> <span class=\"nn\">path</span><span class=\"p\">:</span> <span class=\"s1\">&#39;import module.submodule&#39;</span> <span class=\"n\">instead</span> <span class=\"n\">of</span> <span class=\"n\">just</span> <span class=\"s1\">&#39;import submodule.&#39;</span>\n\n<span class=\"n\">Path</span> <span class=\"n\">imported</span><span class=\"p\">:</span> <span class=\"n\">C</span><span class=\"p\">:</span>\\<span class=\"n\">labscript_suite</span>\\<span class=\"n\">labscript_py27</span>\\<span class=\"n\">runviewer</span>\\<span class=\"n\">resample</span>\n\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"n\">time</span> <span class=\"n\">imported</span><span class=\"p\">,</span> <span class=\"k\">as</span> <span class=\"n\">resample</span><span class=\"p\">):</span>\n<span class=\"o\">------------</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_py27</span><span class=\"se\">\\r</span><span class=\"s2\">unviewer\\__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">resample</span> <span class=\"kn\">import</span> <span class=\"n\">resample</span> <span class=\"k\">as</span> <span class=\"n\">_resample</span>\n<span class=\"o\">------------</span>\n\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"n\">time</span> <span class=\"n\">imported</span><span class=\"p\">,</span> <span class=\"k\">as</span> <span class=\"n\">runviewer</span><span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">):</span>\n<span class=\"o\">------------</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_py27</span><span class=\"se\">\\r</span><span class=\"s2\">unviewer\\__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">resample</span> <span class=\"kn\">import</span> <span class=\"n\">resample</span> <span class=\"k\">as</span> <span class=\"n\">_resample</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\labscript_py27</span><span class=\"se\">\\r</span><span class=\"s2\">unviewer</span><span class=\"se\">\\r</span><span class=\"s2\">esample\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s1\">&#39;runviewer.resample.</span><span class=\"si\">%s</span><span class=\"s1\">.resample&#39;</span><span class=\"o\">%</span><span class=\"n\">plat_name</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\Anaconda3\\envs\\labscript_py27\\lib\\importlib\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">import_module</span>\n    <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"o\">------------</span>\n</pre></div>\n\n\n<p>Updating runviewer to tip fixes the issue (and so we should really tag a new runviewer version ASAP), but only because we change the way we compile and use the resample algorithm. However it looks to me like the double import denier is still being too aggressive here because a single import line triggered the double import denier.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-04-30T04:12:10.656272+00:00", "milestone": null, "updated_on": "2018-04-30T08:23:40.755393+00:00", "type": "issue", "id": 18}, {"priority": "major", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/19/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/19.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/19/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/19/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/19/command-line-argument-to-turn-off-double"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/19/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Command line argument to turn off double import denier", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Given the issues we are having with the double import denier, is it feasible to add a command line argument to all of our GUI programs that turns off the double import denier (so that, in the worse case, people can add the command line argument to the shortcut for the software, allowing them to continue working while they wait for the bugs to be fixed properly)?", "markup": "markdown", "html": "<p>Given the issues we are having with the double import denier, is it feasible to add a command line argument to all of our GUI programs that turns off the double import denier (so that, in the worse case, people can add the command line argument to the shortcut for the software, allowing them to continue working while they wait for the bugs to be fixed properly)?</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2018-04-30T04:32:22.893192+00:00", "milestone": null, "updated_on": "2018-04-30T04:35:36.507127+00:00", "type": "issue", "id": 19}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/20/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/20.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/20/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/20/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/20/encapsulate-running-external-programs"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/20/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Encapsulate running external programs", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Opening an HDF5 file or text file should be done with common functions in labscript_utils rather than code duplication across each program that does it.\r\n\r\nIf there is an error or no external program is configured in labconfig, this function should be able to pop up a dialog prompting the user to pick a text editor or help it find the path to HDFview (or prompting them to install HDFview). It should then write their choice to labconfig.", "markup": "markdown", "html": "<p>Opening an HDF5 file or text file should be done with common functions in labscript_utils rather than code duplication across each program that does it.</p>\n<p>If there is an error or no external program is configured in labconfig, this function should be able to pop up a dialog prompting the user to pick a text editor or help it find the path to HDFview (or prompting them to install HDFview). It should then write their choice to labconfig.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2018-06-06T02:35:44.251336+00:00", "milestone": null, "updated_on": "2018-06-06T02:35:51.844164+00:00", "type": "issue", "id": 20}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/21/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/21.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/21/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/21/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/21/concurrent-log-handler-causes-unbearable"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/21/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Concurrent log handler causes unbearable slowdown", "component": null, "votes": 0, "watches": 1, "content": {"raw": "BLACS is intolerably slow to do anything when using the concurrent log handler introduced to fix the logging bug. I suppose all that file opening and closing as the processes exchange locks is is just too much. Toggling a digital out takes ~1 second with all the logging we do, whereas with regular logging it takes ~30ms. This latency adds up everywhere in BLACS, reducing shot throughput and making everything you do a little sluggish.\r\n\r\nSo back to the drawing board with logging - I'll probably subclass a logging handler to send data over zeromq to a server a-la zlock, which was the original plan.\r\n\r\nThis sluggishness was observed in Windows 10 and is clearly gone if the logging is switched back to a regular FileHandler. I don't observe the problem on linux.", "markup": "markdown", "html": "<p>BLACS is intolerably slow to do anything when using the concurrent log handler introduced to fix the logging bug. I suppose all that file opening and closing as the processes exchange locks is is just too much. Toggling a digital out takes ~1 second with all the logging we do, whereas with regular logging it takes ~30ms. This latency adds up everywhere in BLACS, reducing shot throughput and making everything you do a little sluggish.</p>\n<p>So back to the drawing board with logging - I'll probably subclass a logging handler to send data over zeromq to a server a-la zlock, which was the original plan.</p>\n<p>This sluggishness was observed in Windows 10 and is clearly gone if the logging is switched back to a regular FileHandler. I don't observe the problem on linux.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2018-09-20T19:19:29.887387+00:00", "milestone": null, "updated_on": "2019-02-05T20:02:19.027656+00:00", "type": "issue", "id": 21}, {"priority": "trivial", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/22/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/22.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/22/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/22/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/22/the-win7appid-executable-can-be-replaced"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/22/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "The Win7AppId executable can be replaced with Python calls now", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Not sure if this has always existed, but I've discovered that the shortcut property modification done by win7appid.exe can be replicated with direct Python calls with the win32com library. For example, [the below code fixes a bug with Spyder that's existed for almost 5 years](https://github.com/spyder-ide/spyder/issues/1983) which no-one bothered to solve before me:\r\n\r\n```\r\n#!python\r\n\r\nfrom win32com.shell import shellcon\r\nfrom win32com.propsys import propsys, pscon\r\nimport pythoncom\r\n\r\nshortcut_path = r\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)\\Spyder.lnk\"\r\nstore = propsys.SHGetPropertyStoreFromParsingName(shortcut_path, None, shellcon.GPS_READWRITE, propsys.IID_IPropertyStore)\r\nstore.SetValue(pscon.PKEY_AppUserModel_ID, propsys.PROPVARIANTType(u'spyder.Spyder', pythoncom.VT_LPWSTR))\r\nstore.Commit()\r\n```\r\n\r\nI'm pretty sure we should be able to do the same thing for our own shortcuts :)", "markup": "markdown", "html": "<p>Not sure if this has always existed, but I've discovered that the shortcut property modification done by win7appid.exe can be replicated with direct Python calls with the win32com library. For example, <a data-is-external-link=\"true\" href=\"https://github.com/spyder-ide/spyder/issues/1983\" rel=\"nofollow\">the below code fixes a bug with Spyder that's existed for almost 5 years</a> which no-one bothered to solve before me:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">win32com.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shellcon</span>\n<span class=\"kn\">from</span> <span class=\"nn\">win32com.propsys</span> <span class=\"kn\">import</span> <span class=\"n\">propsys</span><span class=\"p\">,</span> <span class=\"n\">pscon</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pythoncom</span>\n\n<span class=\"n\">shortcut_path</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Anaconda3 (64-bit)\\Spyder.lnk&quot;</span>\n<span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">propsys</span><span class=\"o\">.</span><span class=\"n\">SHGetPropertyStoreFromParsingName</span><span class=\"p\">(</span><span class=\"n\">shortcut_path</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">shellcon</span><span class=\"o\">.</span><span class=\"n\">GPS_READWRITE</span><span class=\"p\">,</span> <span class=\"n\">propsys</span><span class=\"o\">.</span><span class=\"n\">IID_IPropertyStore</span><span class=\"p\">)</span>\n<span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">SetValue</span><span class=\"p\">(</span><span class=\"n\">pscon</span><span class=\"o\">.</span><span class=\"n\">PKEY_AppUserModel_ID</span><span class=\"p\">,</span> <span class=\"n\">propsys</span><span class=\"o\">.</span><span class=\"n\">PROPVARIANTType</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;spyder.Spyder&#39;</span><span class=\"p\">,</span> <span class=\"n\">pythoncom</span><span class=\"o\">.</span><span class=\"n\">VT_LPWSTR</span><span class=\"p\">))</span>\n<span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">Commit</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>I'm pretty sure we should be able to do the same thing for our own shortcuts :)</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-01-14T11:07:06.291957+00:00", "milestone": null, "updated_on": "2019-05-10T02:56:56.530955+00:00", "type": "issue", "id": 22}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/23/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/23.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/23/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/23/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/23/modulewatcher-ability-to-append-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/23/vote"}}, "reporter": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "title": "ModuleWatcher: ability to append to whitelist", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Use case: reloading `tensorflow` fails.\r\n\r\nMinimum failing example: lyse analysis routine containing:\r\n\r\n```python\r\nimport your_face\r\nimport tensorflow.core\r\n```\r\n\r\n\u2026 where your\\_face.py contains:\r\n\r\n```python\r\nprint('Your face')\r\n```\r\n\r\nModify your\\_face.py to trigger module reloading, and get:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\userlib\\analysislib\\common\\tensorflow_bug.py\", line 2, in <module>\r\n    import tensorflow.core\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\__init__.py\", line 24, in <module>\r\n    from tensorflow.python import pywrap_tensorflow  # pylint: disable=unused-import\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\__init__.py\", line 52, in <module>\r\n    from tensorflow.core.framework.graph_pb2 import *\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\core\\framework\\graph_pb2.py\", line 15, in <module>\r\n    from tensorflow.core.framework import node_def_pb2 as tensorflow_dot_core_dot_framework_dot_node__def__pb2\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\core\\framework\\node_def_pb2.py\", line 15, in <module>\r\n    from tensorflow.core.framework import attr_value_pb2 as tensorflow_dot_core_dot_framework_dot_attr__value__pb2\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\core\\framework\\attr_value_pb2.py\", line 15, in <module>\r\n    from tensorflow.core.framework import tensor_pb2 as tensorflow_dot_core_dot_framework_dot_tensor__pb2\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\core\\framework\\tensor_pb2.py\", line 15, in <module>\r\n    from tensorflow.core.framework import resource_handle_pb2 as tensorflow_dot_core_dot_framework_dot_resource__handle__pb2\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\core\\framework\\resource_handle_pb2.py\", line 91, in <module>\r\n    __module__ = 'tensorflow.core.framework.resource_handle_pb2'\r\nTypeError: A Message class can only inherit from Message\r\n```\r\n\r\nSimilar issue reported [here](https://github.com/protocolbuffers/protobuf/issues/3276), where Spyder users report disabling the user-module reloader, or preventing `google.*` modules from being reloaded. For me, the above error was resolved by modifying modulewatcher.py to prevent `tensorflow.*` modules from being reloaded.", "markup": "markdown", "html": "<p>Use case: reloading <code>tensorflow</code> fails.</p>\n<p>Minimum failing example: lyse analysis routine containing:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">your_face</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tensorflow.core</span>\n</pre></div>\n\n\n<p>\u2026 where your_face.py contains:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Your face&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Modify your_face.py to trigger module reloading, and get:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\userlib</span><span class=\"se\">\\a</span><span class=\"s2\">nalysislib\\common</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow_bug.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">tensorflow.core</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.python</span> <span class=\"kn\">import</span> <span class=\"n\">pywrap_tensorflow</span>  <span class=\"c1\"># pylint: disable=unused-import</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\python\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.core.framework.graph_pb2</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\core</span><span class=\"se\">\\f</span><span class=\"s2\">ramework\\graph_pb2.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.core.framework</span> <span class=\"kn\">import</span> <span class=\"n\">node_def_pb2</span> <span class=\"k\">as</span> <span class=\"n\">tensorflow_dot_core_dot_framework_dot_node__def__pb2</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\core</span><span class=\"se\">\\f</span><span class=\"s2\">ramework</span><span class=\"se\">\\n</span><span class=\"s2\">ode_def_pb2.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.core.framework</span> <span class=\"kn\">import</span> <span class=\"n\">attr_value_pb2</span> <span class=\"k\">as</span> <span class=\"n\">tensorflow_dot_core_dot_framework_dot_attr__value__pb2</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\core</span><span class=\"se\">\\f</span><span class=\"s2\">ramework</span><span class=\"se\">\\a</span><span class=\"s2\">ttr_value_pb2.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.core.framework</span> <span class=\"kn\">import</span> <span class=\"n\">tensor_pb2</span> <span class=\"k\">as</span> <span class=\"n\">tensorflow_dot_core_dot_framework_dot_tensor__pb2</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\core</span><span class=\"se\">\\f</span><span class=\"s2\">ramework</span><span class=\"se\">\\t</span><span class=\"s2\">ensor_pb2.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">tensorflow.core.framework</span> <span class=\"kn\">import</span> <span class=\"n\">resource_handle_pb2</span> <span class=\"k\">as</span> <span class=\"n\">tensorflow_dot_core_dot_framework_dot_resource__handle__pb2</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages</span><span class=\"se\">\\t</span><span class=\"s2\">ensorflow\\core</span><span class=\"se\">\\f</span><span class=\"s2\">ramework</span><span class=\"se\">\\r</span><span class=\"s2\">esource_handle_pb2.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">91</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"vm\">__module__</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;tensorflow.core.framework.resource_handle_pb2&#39;</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">A</span> <span class=\"n\">Message</span> <span class=\"k\">class</span> <span class=\"nc\">can</span> <span class=\"n\">only</span> <span class=\"n\">inherit</span> <span class=\"kn\">from</span> <span class=\"nn\">Message</span>\n</pre></div>\n\n\n<p>Similar issue reported <a data-is-external-link=\"true\" href=\"https://github.com/protocolbuffers/protobuf/issues/3276\" rel=\"nofollow\">here</a>, where Spyder users report disabling the user-module reloader, or preventing <code>google.*</code> modules from being reloaded. For me, the above error was resolved by modifying modulewatcher.py to prevent <code>tensorflow.*</code> modules from being reloaded.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-05-09T13:09:13.561731+00:00", "milestone": null, "updated_on": "2019-05-29T18:52:37.932140+00:00", "type": "issue", "id": 23}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/24/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/24.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/24/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/24/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/24/cant-save-integer-connection-table"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/24/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Can't save integer connection table properties that come from globals", "component": null, "votes": 0, "watches": 1, "content": {"raw": "In Python 3.7 with latest numpy (observed on numpy 1.16.3), one cannot save a connection table attribute or unit calibration parameter that is an integer, and that has been through a HDF5 file as a global. JSON serialisation chokes on the integer, saying it can't serialise it. Here is a minimal breaking example:\r\n\r\n```python\r\nimport json\r\nimport h5py\r\nwith h5py.File('test.h5', 'w') as f:\r\n    f.attrs['x'] = 5\r\n    json.dumps(dict(f.attrs))\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"260.py\", line 5, in <module>\r\n    print(json.dumps(dict(f.attrs)))\r\n  File \"/usr/lib/python3.7/json/__init__.py\", line 231, in dumps\r\n    return _default_encoder.encode(obj)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 199, in encode\r\n    chunks = self.iterencode(o, _one_shot=True)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 257, in iterencode\r\n    return _iterencode(o, 0)\r\n  File \"/usr/lib/python3.7/json/encoder.py\", line 179, in default\r\n    raise TypeError(f'Object of type {o.__class__.__name__} '\r\nTypeError: Object of type int64 is not JSON serializable\r\n```\r\n\r\nOf course JSON can serialise normal Python integers, but having been through the HDF5 file, the integer became a np.int32. So an even more minimal breaking example might be:\r\n\r\n```python\r\nimport json\r\nimport numpy as np\r\njson.dumps([np.int32(5)])\r\n```\r\n\r\nAnd it doesn't matter if it is a np.int32 or np.int64, both break .\r\n\r\nThis works fine in Python 2 with the same numpy version and works if you convert the integer to a float instead. Looks like a regression in either Python or numpy, I'm not sure which. But I'll see if I can figure out which to report a bug to. We could work around it in labscript suite code, but should not bother if it is to be imminently fixed upstream.", "markup": "markdown", "html": "<p>In Python 3.7 with latest numpy (observed on numpy 1.16.3), one cannot save a connection table attribute or unit calibration parameter that is an integer, and that has been through a HDF5 file as a global. JSON serialisation chokes on the integer, saying it can't serialise it. Here is a minimal breaking example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.h5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>Traceback (most recent call last):\n  File &quot;260.py&quot;, line 5, in &lt;module&gt;\n    print(json.dumps(dict(f.attrs)))\n  File &quot;/usr/lib/python3.7/json/__init__.py&quot;, line 231, in dumps\n    return _default_encoder.encode(obj)\n  File &quot;/usr/lib/python3.7/json/encoder.py&quot;, line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File &quot;/usr/lib/python3.7/json/encoder.py&quot;, line 257, in iterencode\n    return _iterencode(o, 0)\n  File &quot;/usr/lib/python3.7/json/encoder.py&quot;, line 179, in default\n    raise TypeError(f&#39;Object of type {o.__class__.__name__} &#39;\nTypeError: Object of type int64 is not JSON serializable\n</pre></div>\n\n\n<p>Of course JSON can serialise normal Python integers, but having been through the HDF5 file, the integer became a np.int32. So an even more minimal breaking example might be:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">([</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)])</span>\n</pre></div>\n\n\n<p>And it doesn't matter if it is a np.int32 or np.int64, both break .</p>\n<p>This works fine in Python 2 with the same numpy version and works if you convert the integer to a float instead. Looks like a regression in either Python or numpy, I'm not sure which. But I'll see if I can figure out which to report a bug to. We could work around it in labscript suite code, but should not bother if it is to be imminently fixed upstream.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-05-14T14:41:35.093619+00:00", "milestone": null, "updated_on": "2019-05-20T14:55:57.014843+00:00", "type": "issue", "id": 24}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/25/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/25.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/25/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/25/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/25/module-importlib_metadata-is-not-in"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/25/vote"}}, "reporter": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "title": "Module importlib_metadata is not in installer dependency list", "component": null, "votes": 0, "watches": 2, "content": {"raw": "`importlib_metadata` is now required when using Python 2.7, so it should be added to the installer dependency list. Also, when updating from an older combination of BLACS and labscript\\_utils, the error when this module is missing is silent when not running from a terminal - BLACS will simply fail to open. Is it possible to catch this? Obviously the main solution is to encourage everyone to move to Python 3!", "markup": "markdown", "html": "<p><code>importlib_metadata</code> is now required when using Python 2.7, so it should be added to the installer dependency list. Also, when updating from an older combination of BLACS and labscript_utils, the error when this module is missing is silent when not running from a terminal - BLACS will simply fail to open. Is it possible to catch this? Obviously the main solution is to encourage everyone to move to Python 3!</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "resolved", "version": null, "edited_on": null, "created_on": "2019-07-04T07:20:40.082340+00:00", "milestone": null, "updated_on": "2019-08-12T16:12:24.610508+00:00", "type": "issue", "id": 25}, {"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/26/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/26/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/26/add-enum-control-widget"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/26/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Add enum control widget", "component": null, "votes": 0, "watches": 1, "content": {"raw": "When programming devices with physical front panels, it is often the case that a control I\u2019d like to manipulate with labscript \\(at a static level\\) is best described as an enum \\(looking at you SRS\\). I propose we add a basic combobox based widget \\(like AnalogOutput or DigitalOutput\\) that can be stuffed with a dictionary of labels and programming values at runtime from the device blacs tab. These controls do not always have an associated output or input class associated with them, rather being a device level setting that influences general operation.\r\n\r\nI\u2019m happy to work on this one since we have a current need, but I\u2019d like a bit of guidance on how to integrate with the rest of the BLACS auto-creation of widgets magic. If I have understood correctly, the current paradigm for an AnalogOutput widget is to have the device\\_tab call a widget auto-populating function which creates AnalogOutput widgets which in turn links to the labscript AO class. This ensures settings from the connection table and blacs tab can configure each output correctly. What is the best way to modify this paradigm?\r\n\r\nMy initial thought is to drop auto-populating in the blacs\\_tab in favor writing something akin to ddsoutput.py for any \\(often conglomerate\\) control that would be device specific and kept in the device folder. I\u2019m a little less clear on how to handle enum settings at the AO class level. Should I create a commensurate class that behaves as a StaticAO with discrete values set by dictionary?\r\n\r\nAnyway, this is starting to get long and likely confusing since I don\u2019t really know what I\u2019m talking about. So I\u2019ll end by describing what our need is and what I would like to see.\r\n\r\nWe have an RF Signal Generator \\(SRS SG386\\) that has modulation controls. The controllable options include: Enable \\(on/off\\), Type \\(AM/FM/PM/Sweep\\), Function \\(Sine, Triangle, Square, External\\), Deviation \\(float\\), Depth \\(float\\), and External Coupling \\(AC/DC\\). Since all of these controls are inter-related and operate on the same function, it would be nice to create a monolithic control widget that groups them together in the BLACS tab and allows user control while enforcing allowable settings. Slightly beyond the scope of this discussion, when writing an experiment script; having corresponding SG386.mod\\(Enable\\) and/or SG386.mod.Depth\\(1MHz\\) commands would be great. Getting started, StaticAO/DO covers the boolean and float options just fine. But I need an enum for everything else.", "markup": "markdown", "html": "<p>When programming devices with physical front panels, it is often the case that a control I\u2019d like to manipulate with labscript (at a static level) is best described as an enum (looking at you SRS). I propose we add a basic combobox based widget (like AnalogOutput or DigitalOutput) that can be stuffed with a dictionary of labels and programming values at runtime from the device blacs tab. These controls do not always have an associated output or input class associated with them, rather being a device level setting that influences general operation.</p>\n<p>I\u2019m happy to work on this one since we have a current need, but I\u2019d like a bit of guidance on how to integrate with the rest of the BLACS auto-creation of widgets magic. If I have understood correctly, the current paradigm for an AnalogOutput widget is to have the device_tab call a widget auto-populating function which creates AnalogOutput widgets which in turn links to the labscript AO class. This ensures settings from the connection table and blacs tab can configure each output correctly. What is the best way to modify this paradigm?</p>\n<p>My initial thought is to drop auto-populating in the blacs_tab in favor writing something akin to ddsoutput.py for any (often conglomerate) control that would be device specific and kept in the device folder. I\u2019m a little less clear on how to handle enum settings at the AO class level. Should I create a commensurate class that behaves as a StaticAO with discrete values set by dictionary?</p>\n<p>Anyway, this is starting to get long and likely confusing since I don\u2019t really know what I\u2019m talking about. So I\u2019ll end by describing what our need is and what I would like to see.</p>\n<p>We have an RF Signal Generator (SRS SG386) that has modulation controls. The controllable options include: Enable (on/off), Type (AM/FM/PM/Sweep), Function (Sine, Triangle, Square, External), Deviation (float), Depth (float), and External Coupling (AC/DC). Since all of these controls are inter-related and operate on the same function, it would be nice to create a monolithic control widget that groups them together in the BLACS tab and allows user control while enforcing allowable settings. Slightly beyond the scope of this discussion, when writing an experiment script; having corresponding SG386.mod(Enable) and/or SG386.mod.Depth(1MHz) commands would be great. Getting started, StaticAO/DO covers the boolean and float options just fine. But I need an enum for everything else.</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2019-09-24T14:39:17.592079+00:00", "milestone": null, "updated_on": "2019-10-03T16:22:41.623248+00:00", "type": "issue", "id": 26}, {"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/27/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/27.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/27/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/27/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/27/toolpalette_layout_widgets-appears-to"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/27/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "ToolPalette._layout_widgets() appears to recurse, causing a stack overflow", "component": null, "votes": 0, "watches": 1, "content": {"raw": "A lab here at NIST got a \"Python has stopped working\" error upon starting BLACS today. Starting Python as `python -X faulthander -m blacs` revealed it to be a stack overflow in `ToolPalette._layout_widgets()`, line 348:\r\n```\r\nself.setMinimumSize(QSize(self.minimumSize().width(), total_height))\r\n```\r\n\r\nAdding a printline to inspect the dimensions of the `QSize()` object revealed that `_layout_widgets()` was being called a large number of times prior to the crash, with the dimensions alternating back and forth between two values. \r\n\r\nI added a counter to print the recursion depth and confirm that the method is recursing, but I made a syntax error and BLACS started successfully (having caught the error), modifying its save file and widget geometries such that the stack overflow no longer occurred. So unfortunately I lost the ability to reproduce the problem, as it is sensitive to the widget geometries.\r\n\r\nJust documenting what I found here. `ToolPalette._layout_widgets()` seems to be recursing and not converging on a fixed layout geometry that would break the cycle. If I see it again I will backup BLACS save file and connection table file to create a reliable reproducer of the problem.\r\n\r\nOthers have reported similar crashes before, but they have not been stack overflows, they have been segfaults that looked to be bugs in Qt. This one actually is plausibly our fault which means we may be able to fix it.", "markup": "markdown", "html": "<p>A lab here at NIST got a \"Python has stopped working\" error upon starting BLACS today. Starting Python as <code>python -X faulthander -m blacs</code> revealed it to be a stack overflow in <code>ToolPalette._layout_widgets()</code>, line 348:</p>\n<div class=\"codehilite\"><pre><span></span>self.setMinimumSize(QSize(self.minimumSize().width(), total_height))\n</pre></div>\n\n\n<p>Adding a printline to inspect the dimensions of the <code>QSize()</code> object revealed that <code>_layout_widgets()</code> was being called a large number of times prior to the crash, with the dimensions alternating back and forth between two values. </p>\n<p>I added a counter to print the recursion depth and confirm that the method is recursing, but I made a syntax error and BLACS started successfully (having caught the error), modifying its save file and widget geometries such that the stack overflow no longer occurred. So unfortunately I lost the ability to reproduce the problem, as it is sensitive to the widget geometries.</p>\n<p>Just documenting what I found here. <code>ToolPalette._layout_widgets()</code> seems to be recursing and not converging on a fixed layout geometry that would break the cycle. If I see it again I will backup BLACS save file and connection table file to create a reliable reproducer of the problem.</p>\n<p>Others have reported similar crashes before, but they have not been stack overflows, they have been segfaults that looked to be bugs in Qt. This one actually is plausibly our fault which means we may be able to fix it.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-10-30T21:03:28.643792+00:00", "milestone": null, "updated_on": "2019-10-31T13:39:22.089138+00:00", "type": "issue", "id": 27}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/28/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/28.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/28/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/28/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/28/modulewatcher-issue-with-import_or_reload"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/28/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "ModuleWatcher issue with import_or_reload", "component": null, "votes": 0, "watches": 1, "content": {"raw": "Labscript compilation using `import_or_reload` can crash with the following after a module has been modified:\r\n\r\n![mw_bug.png](data/bitbucket.org/repo/xg9BdE/images/2941434287-mw_bug.png)\r\n\r\nSaw this on a fresh install with Python 3.7 in miniconda, and the latest released versions of everything as of a week ago.", "markup": "markdown", "html": "<p>Labscript compilation using <code>import_or_reload</code> can crash with the following after a module has been modified:</p>\n<p><img alt=\"mw_bug.png\" src=\"data/bitbucket.org/repo/xg9BdE/images/2941434287-mw_bug.png\" /></p>\n<p>Saw this on a fresh install with Python 3.7 in miniconda, and the latest released versions of everything as of a week ago.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-12-06T00:29:57.787606+00:00", "milestone": null, "updated_on": "2019-12-06T00:29:57.787606+00:00", "type": "issue", "id": 28}, {"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/29/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/issues/29.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/29/watch"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/issues/29/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/issues/29/cannot-autostart-servers-on-macos-catalina"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/issues/29/vote"}}, "reporter": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "title": "Cannot autostart servers on macos Catalina", "component": null, "votes": 0, "watches": 1, "content": {"raw": "As discussed [on the mailing list](https://groups.google.com/d/msg/labscriptsuite/BFHa8pgQAIM/mJICw-9FBgAJ), it seems that applications cannot auostart zlock and zlog via the functions in `labscript_utils` on the latest macos.\r\n\r\nStarting the servers manually works fine.", "markup": "markdown", "html": "<p>As discussed <a data-is-external-link=\"true\" href=\"https://groups.google.com/d/msg/labscriptsuite/BFHa8pgQAIM/mJICw-9FBgAJ\" rel=\"nofollow\">on the mailing list</a>, it seems that applications cannot auostart zlock and zlog via the functions in <code>labscript_utils</code> on the latest macos.</p>\n<p>Starting the servers manually works fine.</p>", "type": "rendered"}, "assignee": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "state": "new", "version": null, "edited_on": null, "created_on": "2019-12-06T17:44:38.365234+00:00", "milestone": null, "updated_on": "2019-12-06T17:44:38.365234+00:00", "type": "issue", "id": 29}], "page": 1, "size": 29}