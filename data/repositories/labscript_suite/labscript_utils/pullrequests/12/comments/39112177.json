{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/12/comments/39112177.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/12/_/diff#comment-39112177"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/12.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/12"}}, "title": "More compact DDS widgets"}, "content": {"raw": "Sorry, again with the line endings being changed without any of my diff tools noticing.\n\nHere's the diff with whitespace ignored:\n\n\n```\n#!diff\n\ndiff -r d59b794caf4b qtwidgets/analogoutput.py\n--- a/qtwidgets/analogoutput.py\tMon Jun 19 00:58:18 2017 +0000\n+++ b/qtwidgets/analogoutput.py\tMon Jun 19 14:44:51 2017 -0400\n@@ -99,11 +99,12 @@\n             self._layout.addWidget(self._label)\n             self._layout.addWidget(self._spin_widget)\n             self._layout.addWidget(self._combobox)\n+            self._layout.setContentsMargins(0,0,0,0)\n         else:\n             self._layout = QGridLayout(self)\n-            self._layout.setVerticalSpacing(0)\n+            self._layout.setVerticalSpacing(3)\n             self._layout.setHorizontalSpacing(0)\n-            self._layout.setContentsMargins(5,5,5,5)\n+            self._layout.setContentsMargins(3,3,3,3)\n             \n             self._label.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n             \ndiff -r d59b794caf4b qtwidgets/ddsoutput.py\n--- a/qtwidgets/ddsoutput.py\tMon Jun 19 00:58:18 2017 +0000\n+++ b/qtwidgets/ddsoutput.py\tMon Jun 19 14:44:51 2017 -0400\n@@ -30,7 +30,7 @@\n         self._connection_name = connection_name\n         self._hardware_name = hardware_name\n         \n-        label_text = (self._hardware_name + ' - ' + self._connection_name) \n+        label_text = (self._hardware_name + '\\n' + self._connection_name) \n         self._label = QLabel(label_text)\n         self._label.setAlignment(Qt.AlignCenter)\n         self._label.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n@@ -40,28 +40,55 @@\n         \n         # Create widgets\n         self._widgets = {}\n-        self._widgets['gate'] = DigitalOutput('Enabled')\n-        self._widgets['freq'] = AnalogOutput('',display_name='Frequency', horizontal_alignment=True)\n-        self._widgets['amp'] = AnalogOutput('',display_name='Amplitude', horizontal_alignment=True)\n-        self._widgets['phase'] = AnalogOutput('',display_name='Phase', horizontal_alignment=True)\n+        self._widgets['gate'] = DigitalOutput('Enable')\n+        self._widgets['freq'] = AnalogOutput('',display_name='<i>f</i>', horizontal_alignment=True)\n+        self._widgets['amp'] = AnalogOutput('',display_name='<i>A</i>', horizontal_alignment=True)\n+        self._widgets['phase'] = AnalogOutput('',display_name=u'<i>&phi;</i>', horizontal_alignment=True)\n+        \n+        # Extra layout at the top level with horizontal stretches so that our\n+        # widgets do not grow to take up all available horizontal space:\n+        self._outer_layout = QHBoxLayout(self)\n+        self._outer_layout.setContentsMargins(0, 0, 0, 0)\n+        # self._layout.setHorizontalSpacing(3)\n+        self._frame = QFrame(self)\n+        self._outer_layout.addStretch()\n+        self._outer_layout.addWidget(self._frame)\n+        self._outer_layout.addStretch()\n         \n         # Create grid layout that keeps widgets from expanding and keeps label centred above the widgets\n-        self._layout = QGridLayout(self)\n-        self._layout.setVerticalSpacing(0)\n+        self._layout = QGridLayout(self._frame)\n+        self._layout.setVerticalSpacing(6)\n         self._layout.setHorizontalSpacing(0)\n         self._layout.setContentsMargins(0,0,0,0)\n         \n-        h_widget = QWidget()            \n-        h_layout = QHBoxLayout(h_widget)\n-        h_layout.setContentsMargins(0,0,0,0)\n-        h_layout.addWidget(self._widgets['gate'])\n-        h_layout.addWidget(self._widgets['freq'])\n-        h_layout.addWidget(self._widgets['amp'])\n-        h_layout.addWidget(self._widgets['phase'])\n+        v_widget = QFrame()\n+        v_widget.setFrameStyle(QFrame.StyledPanel)            \n+        v_layout = QVBoxLayout(v_widget)\n+        v_layout.setContentsMargins(6,6,6,6)\n+\n+        # Extra widget with stretches around the enabled button so it doesn't\n+        # stretch out to fill all horizontal space:\n+        self.gate_container = QWidget()\n+        gate_layout = QHBoxLayout(self.gate_container)\n+        gate_layout.setContentsMargins(0,0,0,0)\n+        gate_layout.setSpacing(0)\n+        gate_layout.addStretch()\n+        gate_layout.addWidget(self._widgets['gate'])\n+        gate_layout.addStretch()\n+\n+        self._widgets['gate'].setToolTip(\"Enable\")\n+        self._widgets['freq'].setToolTip(\"Frequency\")\n+        self._widgets['amp'].setToolTip(\"Amplitude\")\n+        self._widgets['phase'].setToolTip(\"Phase\")\n+\n+        v_layout.addWidget(self.gate_container)\n+        v_layout.addWidget(self._widgets['freq'])\n+        v_layout.addWidget(self._widgets['amp'])\n+        v_layout.addWidget(self._widgets['phase'])\n         \n         self._layout.addWidget(self._label,0,0)\n         #self._layout.addItem(QSpacerItem(0,0,QSizePolicy.MinimumExpanding,QSizePolicy.Minimum),0,1)\n-        self._layout.addWidget(h_widget,1,0)            \n+        self._layout.addWidget(v_widget,1,0)            \n         #self._layout.addItem(QSpacerItem(0,0,QSizePolicy.MinimumExpanding,QSizePolicy.Minimum),1,1)\n         self._layout.addItem(QSpacerItem(0,0,QSizePolicy.Minimum,QSizePolicy.MinimumExpanding),2,0)\n         \n@@ -74,6 +101,9 @@\n         \n     def hide_sub_widget(self,subchnl):\n         if subchnl in self._widgets:\n+            if subchnl == 'gate':\n+                self.gate_container.hide()\n+            else:\n             self._widgets[subchnl].hide()\n             return\n         \n@@ -81,6 +111,9 @@\n     \n     def show_sub_widget(self,subchnl):\n         if subchnl in self._widgets:\n+            if subchnl == 'gate':\n+                self.gate_container.show()\n+            else:\n             self._widgets[subchnl].show()\n             return\n         \n\n```\n", "markup": "markdown", "html": "<p>Sorry, again with the line endings being changed without any of my diff tools noticing.</p>\n<p>Here's the diff with whitespace ignored:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r d59b794caf4b qtwidgets/analogoutput.py</span>\n<span class=\"gd\">--- a/qtwidgets/analogoutput.py Mon Jun 19 00:58:18 2017 +0000</span>\n<span class=\"gi\">+++ b/qtwidgets/analogoutput.py Mon Jun 19 14:44:51 2017 -0400</span>\n<span class=\"gu\">@@ -99,11 +99,12 @@</span>\n             self._layout.addWidget(self._label)\n             self._layout.addWidget(self._spin_widget)\n             self._layout.addWidget(self._combobox)\n<span class=\"gi\">+            self._layout.setContentsMargins(0,0,0,0)</span>\n         else:\n             self._layout = QGridLayout(self)\n<span class=\"gd\">-            self._layout.setVerticalSpacing(0)</span>\n<span class=\"gi\">+            self._layout.setVerticalSpacing(3)</span>\n             self._layout.setHorizontalSpacing(0)\n<span class=\"gd\">-            self._layout.setContentsMargins(5,5,5,5)</span>\n<span class=\"gi\">+            self._layout.setContentsMargins(3,3,3,3)</span>\n\n             self._label.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n\n<span class=\"gh\">diff -r d59b794caf4b qtwidgets/ddsoutput.py</span>\n<span class=\"gd\">--- a/qtwidgets/ddsoutput.py    Mon Jun 19 00:58:18 2017 +0000</span>\n<span class=\"gi\">+++ b/qtwidgets/ddsoutput.py    Mon Jun 19 14:44:51 2017 -0400</span>\n<span class=\"gu\">@@ -30,7 +30,7 @@</span>\n         self._connection_name = connection_name\n         self._hardware_name = hardware_name\n\n<span class=\"gd\">-        label_text = (self._hardware_name + &#39; - &#39; + self._connection_name) </span>\n<span class=\"gi\">+        label_text = (self._hardware_name + &#39;\\n&#39; + self._connection_name) </span>\n         self._label = QLabel(label_text)\n         self._label.setAlignment(Qt.AlignCenter)\n         self._label.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n<span class=\"gu\">@@ -40,28 +40,55 @@</span>\n\n         # Create widgets\n         self._widgets = {}\n<span class=\"gd\">-        self._widgets[&#39;gate&#39;] = DigitalOutput(&#39;Enabled&#39;)</span>\n<span class=\"gd\">-        self._widgets[&#39;freq&#39;] = AnalogOutput(&#39;&#39;,display_name=&#39;Frequency&#39;, horizontal_alignment=True)</span>\n<span class=\"gd\">-        self._widgets[&#39;amp&#39;] = AnalogOutput(&#39;&#39;,display_name=&#39;Amplitude&#39;, horizontal_alignment=True)</span>\n<span class=\"gd\">-        self._widgets[&#39;phase&#39;] = AnalogOutput(&#39;&#39;,display_name=&#39;Phase&#39;, horizontal_alignment=True)</span>\n<span class=\"gi\">+        self._widgets[&#39;gate&#39;] = DigitalOutput(&#39;Enable&#39;)</span>\n<span class=\"gi\">+        self._widgets[&#39;freq&#39;] = AnalogOutput(&#39;&#39;,display_name=&#39;&lt;i&gt;f&lt;/i&gt;&#39;, horizontal_alignment=True)</span>\n<span class=\"gi\">+        self._widgets[&#39;amp&#39;] = AnalogOutput(&#39;&#39;,display_name=&#39;&lt;i&gt;A&lt;/i&gt;&#39;, horizontal_alignment=True)</span>\n<span class=\"gi\">+        self._widgets[&#39;phase&#39;] = AnalogOutput(&#39;&#39;,display_name=u&#39;&lt;i&gt;&amp;phi;&lt;/i&gt;&#39;, horizontal_alignment=True)</span>\n<span class=\"gi\">+        </span>\n<span class=\"gi\">+        # Extra layout at the top level with horizontal stretches so that our</span>\n<span class=\"gi\">+        # widgets do not grow to take up all available horizontal space:</span>\n<span class=\"gi\">+        self._outer_layout = QHBoxLayout(self)</span>\n<span class=\"gi\">+        self._outer_layout.setContentsMargins(0, 0, 0, 0)</span>\n<span class=\"gi\">+        # self._layout.setHorizontalSpacing(3)</span>\n<span class=\"gi\">+        self._frame = QFrame(self)</span>\n<span class=\"gi\">+        self._outer_layout.addStretch()</span>\n<span class=\"gi\">+        self._outer_layout.addWidget(self._frame)</span>\n<span class=\"gi\">+        self._outer_layout.addStretch()</span>\n\n         # Create grid layout that keeps widgets from expanding and keeps label centred above the widgets\n<span class=\"gd\">-        self._layout = QGridLayout(self)</span>\n<span class=\"gd\">-        self._layout.setVerticalSpacing(0)</span>\n<span class=\"gi\">+        self._layout = QGridLayout(self._frame)</span>\n<span class=\"gi\">+        self._layout.setVerticalSpacing(6)</span>\n         self._layout.setHorizontalSpacing(0)\n         self._layout.setContentsMargins(0,0,0,0)\n\n<span class=\"gd\">-        h_widget = QWidget()            </span>\n<span class=\"gd\">-        h_layout = QHBoxLayout(h_widget)</span>\n<span class=\"gd\">-        h_layout.setContentsMargins(0,0,0,0)</span>\n<span class=\"gd\">-        h_layout.addWidget(self._widgets[&#39;gate&#39;])</span>\n<span class=\"gd\">-        h_layout.addWidget(self._widgets[&#39;freq&#39;])</span>\n<span class=\"gd\">-        h_layout.addWidget(self._widgets[&#39;amp&#39;])</span>\n<span class=\"gd\">-        h_layout.addWidget(self._widgets[&#39;phase&#39;])</span>\n<span class=\"gi\">+        v_widget = QFrame()</span>\n<span class=\"gi\">+        v_widget.setFrameStyle(QFrame.StyledPanel)            </span>\n<span class=\"gi\">+        v_layout = QVBoxLayout(v_widget)</span>\n<span class=\"gi\">+        v_layout.setContentsMargins(6,6,6,6)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        # Extra widget with stretches around the enabled button so it doesn&#39;t</span>\n<span class=\"gi\">+        # stretch out to fill all horizontal space:</span>\n<span class=\"gi\">+        self.gate_container = QWidget()</span>\n<span class=\"gi\">+        gate_layout = QHBoxLayout(self.gate_container)</span>\n<span class=\"gi\">+        gate_layout.setContentsMargins(0,0,0,0)</span>\n<span class=\"gi\">+        gate_layout.setSpacing(0)</span>\n<span class=\"gi\">+        gate_layout.addStretch()</span>\n<span class=\"gi\">+        gate_layout.addWidget(self._widgets[&#39;gate&#39;])</span>\n<span class=\"gi\">+        gate_layout.addStretch()</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        self._widgets[&#39;gate&#39;].setToolTip(&quot;Enable&quot;)</span>\n<span class=\"gi\">+        self._widgets[&#39;freq&#39;].setToolTip(&quot;Frequency&quot;)</span>\n<span class=\"gi\">+        self._widgets[&#39;amp&#39;].setToolTip(&quot;Amplitude&quot;)</span>\n<span class=\"gi\">+        self._widgets[&#39;phase&#39;].setToolTip(&quot;Phase&quot;)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        v_layout.addWidget(self.gate_container)</span>\n<span class=\"gi\">+        v_layout.addWidget(self._widgets[&#39;freq&#39;])</span>\n<span class=\"gi\">+        v_layout.addWidget(self._widgets[&#39;amp&#39;])</span>\n<span class=\"gi\">+        v_layout.addWidget(self._widgets[&#39;phase&#39;])</span>\n\n         self._layout.addWidget(self._label,0,0)\n         #self._layout.addItem(QSpacerItem(0,0,QSizePolicy.MinimumExpanding,QSizePolicy.Minimum),0,1)\n<span class=\"gd\">-        self._layout.addWidget(h_widget,1,0)            </span>\n<span class=\"gi\">+        self._layout.addWidget(v_widget,1,0)            </span>\n         #self._layout.addItem(QSpacerItem(0,0,QSizePolicy.MinimumExpanding,QSizePolicy.Minimum),1,1)\n         self._layout.addItem(QSpacerItem(0,0,QSizePolicy.Minimum,QSizePolicy.MinimumExpanding),2,0)\n\n<span class=\"gu\">@@ -74,6 +101,9 @@</span>\n\n     def hide_sub_widget(self,subchnl):\n         if subchnl in self._widgets:\n<span class=\"gi\">+            if subchnl == &#39;gate&#39;:</span>\n<span class=\"gi\">+                self.gate_container.hide()</span>\n<span class=\"gi\">+            else:</span>\n             self._widgets[subchnl].hide()\n             return\n\n<span class=\"gu\">@@ -81,6 +111,9 @@</span>\n\n     def show_sub_widget(self,subchnl):\n         if subchnl in self._widgets:\n<span class=\"gi\">+            if subchnl == &#39;gate&#39;:</span>\n<span class=\"gi\">+                self.gate_container.show()</span>\n<span class=\"gi\">+            else:</span>\n             self._widgets[subchnl].show()\n             return\n</pre></div>", "type": "rendered"}, "created_on": "2017-06-19T18:45:29.073590+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-19T18:45:29.076129+00:00", "type": "pullrequest_comment", "id": 39112177}