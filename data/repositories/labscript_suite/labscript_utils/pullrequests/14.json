{"rendered": {"description": {"raw": "Not sure if this is an issue on Windows, but for me when I scroll past SpinBoxes they steal focus, I stop scrolling, and the mousewheel starts manipulating their values instead. This is not what one wants in a lab control system.\r\n\r\n- Subclassed QDoubleSpinBox for use with analog output widgets so that they\r\ndon't steal focus when you scroll over them. You can still scroll on them to\r\nchange their value if they've been focused by a mouse click or tab, but\r\nscrolling over them will not focus them, and scrolling elsewhere whilst they\r\nare focused will cause them to lose focus, so you can scroll with confidence.\r\n\r\nAlso converted the file to one type of line ending (not intentionally, again), so for ease of reading here is the diff with whitespace changes ignored:\r\n\r\n\r\n```\r\n#!diff\r\n\r\n--- a/qtwidgets/analogoutput.py\tMon Jun 19 00:58:18 2017 +0000\r\n+++ b/qtwidgets/analogoutput.py\tTue Jun 20 02:33:15 2017 -0400\r\n@@ -15,28 +15,50 @@\r\n \r\n if 'PySide' in sys.modules.copy():\r\n     from PySide.QtCore import *\r\n     from PySide.QtGui import *\r\n else:\r\n     from PyQt4.QtCore import *\r\n     from PyQt4.QtGui import *\r\n \r\n+\r\n+class NoStealFocusDoubleSpinBox(QDoubleSpinBox):\r\n+    \"\"\"A QDoubleSpinBox that doesn't steal focus as you scroll over it with a\r\n+    mouse wheel.\"\"\"\r\n+    def __init__(self, *args, **kwargs):\r\n+        QDoubleSpinBox.__init__(self, *args, **kwargs)\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+\r\n+    def focusInEvent(self, event):\r\n+        self.setFocusPolicy(Qt.WheelFocus)\r\n+        return QDoubleSpinBox.focusInEvent(self, event)\r\n+\r\n+    def focusOutEvent(self, event):\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+        return QDoubleSpinBox.focusOutEvent(self, event)\r\n+\r\n+    def wheelEvent(self, event):\r\n+        if self.hasFocus():\r\n+            return QDoubleSpinBox.wheelEvent(self, event)\r\n+        else:\r\n+            event.ignore()\r\n+\r\n class AnalogOutput(QWidget):\r\n     def __init__(self, hardware_name, connection_name='-', display_name=None, horizontal_alignment=False, parent=None):\r\n         QWidget.__init__(self,parent)\r\n         \r\n         self._connection_name = connection_name\r\n         self._hardware_name = hardware_name\r\n         \r\n         label_text = (self._hardware_name + '\\n' + self._connection_name) if display_name is None else display_name\r\n         self._label = QLabel(label_text)\r\n         self._label.setAlignment(Qt.AlignCenter)\r\n         self._label.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Minimum)\r\n-        self._spin_widget = QDoubleSpinBox()\r\n+        self._spin_widget = NoStealFocusDoubleSpinBox()\r\n         self._spin_widget.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\r\n         self._spin_widget.setKeyboardTracking(False)\r\n         self._combobox = QComboBox()\r\n         self._combobox.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Minimum)\r\n         self._combobox.currentIndexChanged.connect(self._on_combobox_change)\r\n         \r\n         self._value_changed_function = None\r\n         \r\n\r\n```", "markup": "markdown", "html": "<p>Not sure if this is an issue on Windows, but for me when I scroll past SpinBoxes they steal focus, I stop scrolling, and the mousewheel starts manipulating their values instead. This is not what one wants in a lab control system.</p>\n<ul>\n<li>Subclassed QDoubleSpinBox for use with analog output widgets so that they\ndon't steal focus when you scroll over them. You can still scroll on them to\nchange their value if they've been focused by a mouse click or tab, but\nscrolling over them will not focus them, and scrolling elsewhere whilst they\nare focused will cause them to lose focus, so you can scroll with confidence.</li>\n</ul>\n<p>Also converted the file to one type of line ending (not intentionally, again), so for ease of reading here is the diff with whitespace changes ignored:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- a/qtwidgets/analogoutput.py Mon Jun 19 00:58:18 2017 +0000</span>\n<span class=\"gi\">+++ b/qtwidgets/analogoutput.py Tue Jun 20 02:33:15 2017 -0400</span>\n<span class=\"gu\">@@ -15,28 +15,50 @@</span>\n\n if &#39;PySide&#39; in sys.modules.copy():\n     from PySide.QtCore import *\n     from PySide.QtGui import *\n else:\n     from PyQt4.QtCore import *\n     from PyQt4.QtGui import *\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+class NoStealFocusDoubleSpinBox(QDoubleSpinBox):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;A QDoubleSpinBox that doesn&#39;t steal focus as you scroll over it with a</span>\n<span class=\"gi\">+    mouse wheel.&quot;&quot;&quot;</span>\n<span class=\"gi\">+    def __init__(self, *args, **kwargs):</span>\n<span class=\"gi\">+        QDoubleSpinBox.__init__(self, *args, **kwargs)</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.StrongFocus)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def focusInEvent(self, event):</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.WheelFocus)</span>\n<span class=\"gi\">+        return QDoubleSpinBox.focusInEvent(self, event)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def focusOutEvent(self, event):</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.StrongFocus)</span>\n<span class=\"gi\">+        return QDoubleSpinBox.focusOutEvent(self, event)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def wheelEvent(self, event):</span>\n<span class=\"gi\">+        if self.hasFocus():</span>\n<span class=\"gi\">+            return QDoubleSpinBox.wheelEvent(self, event)</span>\n<span class=\"gi\">+        else:</span>\n<span class=\"gi\">+            event.ignore()</span>\n<span class=\"gi\">+</span>\n class AnalogOutput(QWidget):\n     def __init__(self, hardware_name, connection_name=&#39;-&#39;, display_name=None, horizontal_alignment=False, parent=None):\n         QWidget.__init__(self,parent)\n\n         self._connection_name = connection_name\n         self._hardware_name = hardware_name\n\n         label_text = (self._hardware_name + &#39;\\n&#39; + self._connection_name) if display_name is None else display_name\n         self._label = QLabel(label_text)\n         self._label.setAlignment(Qt.AlignCenter)\n         self._label.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Minimum)\n<span class=\"gd\">-        self._spin_widget = QDoubleSpinBox()</span>\n<span class=\"gi\">+        self._spin_widget = NoStealFocusDoubleSpinBox()</span>\n         self._spin_widget.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n         self._spin_widget.setKeyboardTracking(False)\n         self._combobox = QComboBox()\n         self._combobox.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Minimum)\n         self._combobox.currentIndexChanged.connect(self._on_combobox_change)\n\n         self._value_changed_function = None\n</pre></div>", "type": "rendered"}, "title": {"raw": "Make analog output widgets not steal focus on scrolling", "markup": "markdown", "html": "<p>Make analog output widgets not steal focus on scrolling</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Not sure if this is an issue on Windows, but for me when I scroll past SpinBoxes they steal focus, I stop scrolling, and the mousewheel starts manipulating their values instead. This is not what one wants in a lab control system.\r\n\r\n- Subclassed QDoubleSpinBox for use with analog output widgets so that they\r\ndon't steal focus when you scroll over them. You can still scroll on them to\r\nchange their value if they've been focused by a mouse click or tab, but\r\nscrolling over them will not focus them, and scrolling elsewhere whilst they\r\nare focused will cause them to lose focus, so you can scroll with confidence.\r\n\r\nAlso converted the file to one type of line ending (not intentionally, again), so for ease of reading here is the diff with whitespace changes ignored:\r\n\r\n\r\n```\r\n#!diff\r\n\r\n--- a/qtwidgets/analogoutput.py\tMon Jun 19 00:58:18 2017 +0000\r\n+++ b/qtwidgets/analogoutput.py\tTue Jun 20 02:33:15 2017 -0400\r\n@@ -15,28 +15,50 @@\r\n \r\n if 'PySide' in sys.modules.copy():\r\n     from PySide.QtCore import *\r\n     from PySide.QtGui import *\r\n else:\r\n     from PyQt4.QtCore import *\r\n     from PyQt4.QtGui import *\r\n \r\n+\r\n+class NoStealFocusDoubleSpinBox(QDoubleSpinBox):\r\n+    \"\"\"A QDoubleSpinBox that doesn't steal focus as you scroll over it with a\r\n+    mouse wheel.\"\"\"\r\n+    def __init__(self, *args, **kwargs):\r\n+        QDoubleSpinBox.__init__(self, *args, **kwargs)\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+\r\n+    def focusInEvent(self, event):\r\n+        self.setFocusPolicy(Qt.WheelFocus)\r\n+        return QDoubleSpinBox.focusInEvent(self, event)\r\n+\r\n+    def focusOutEvent(self, event):\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+        return QDoubleSpinBox.focusOutEvent(self, event)\r\n+\r\n+    def wheelEvent(self, event):\r\n+        if self.hasFocus():\r\n+            return QDoubleSpinBox.wheelEvent(self, event)\r\n+        else:\r\n+            event.ignore()\r\n+\r\n class AnalogOutput(QWidget):\r\n     def __init__(self, hardware_name, connection_name='-', display_name=None, horizontal_alignment=False, parent=None):\r\n         QWidget.__init__(self,parent)\r\n         \r\n         self._connection_name = connection_name\r\n         self._hardware_name = hardware_name\r\n         \r\n         label_text = (self._hardware_name + '\\n' + self._connection_name) if display_name is None else display_name\r\n         self._label = QLabel(label_text)\r\n         self._label.setAlignment(Qt.AlignCenter)\r\n         self._label.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Minimum)\r\n-        self._spin_widget = QDoubleSpinBox()\r\n+        self._spin_widget = NoStealFocusDoubleSpinBox()\r\n         self._spin_widget.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\r\n         self._spin_widget.setKeyboardTracking(False)\r\n         self._combobox = QComboBox()\r\n         self._combobox.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Minimum)\r\n         self._combobox.currentIndexChanged.connect(self._on_combobox_change)\r\n         \r\n         self._value_changed_function = None\r\n         \r\n\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/14/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:f5c421e37ab4%0D15ae72adb072?from_pullrequest_id=14"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/14/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/14.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/14/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/14/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/14"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/14/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:f5c421e37ab4%0D15ae72adb072?from_pullrequest_id=14"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/14/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/14/statuses_page=1.json"}}, "title": "Make analog output widgets not steal focus on scrolling", "close_source_branch": false, "reviewers": [{"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}], "id": 14, "destination": {"commit": {"hash": "15ae72adb072", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/15ae72adb072.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/15ae72adb072"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2017-06-20T06:36:08.828363+00:00", "summary": {"raw": "Not sure if this is an issue on Windows, but for me when I scroll past SpinBoxes they steal focus, I stop scrolling, and the mousewheel starts manipulating their values instead. This is not what one wants in a lab control system.\r\n\r\n- Subclassed QDoubleSpinBox for use with analog output widgets so that they\r\ndon't steal focus when you scroll over them. You can still scroll on them to\r\nchange their value if they've been focused by a mouse click or tab, but\r\nscrolling over them will not focus them, and scrolling elsewhere whilst they\r\nare focused will cause them to lose focus, so you can scroll with confidence.\r\n\r\nAlso converted the file to one type of line ending (not intentionally, again), so for ease of reading here is the diff with whitespace changes ignored:\r\n\r\n\r\n```\r\n#!diff\r\n\r\n--- a/qtwidgets/analogoutput.py\tMon Jun 19 00:58:18 2017 +0000\r\n+++ b/qtwidgets/analogoutput.py\tTue Jun 20 02:33:15 2017 -0400\r\n@@ -15,28 +15,50 @@\r\n \r\n if 'PySide' in sys.modules.copy():\r\n     from PySide.QtCore import *\r\n     from PySide.QtGui import *\r\n else:\r\n     from PyQt4.QtCore import *\r\n     from PyQt4.QtGui import *\r\n \r\n+\r\n+class NoStealFocusDoubleSpinBox(QDoubleSpinBox):\r\n+    \"\"\"A QDoubleSpinBox that doesn't steal focus as you scroll over it with a\r\n+    mouse wheel.\"\"\"\r\n+    def __init__(self, *args, **kwargs):\r\n+        QDoubleSpinBox.__init__(self, *args, **kwargs)\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+\r\n+    def focusInEvent(self, event):\r\n+        self.setFocusPolicy(Qt.WheelFocus)\r\n+        return QDoubleSpinBox.focusInEvent(self, event)\r\n+\r\n+    def focusOutEvent(self, event):\r\n+        self.setFocusPolicy(Qt.StrongFocus)\r\n+        return QDoubleSpinBox.focusOutEvent(self, event)\r\n+\r\n+    def wheelEvent(self, event):\r\n+        if self.hasFocus():\r\n+            return QDoubleSpinBox.wheelEvent(self, event)\r\n+        else:\r\n+            event.ignore()\r\n+\r\n class AnalogOutput(QWidget):\r\n     def __init__(self, hardware_name, connection_name='-', display_name=None, horizontal_alignment=False, parent=None):\r\n         QWidget.__init__(self,parent)\r\n         \r\n         self._connection_name = connection_name\r\n         self._hardware_name = hardware_name\r\n         \r\n         label_text = (self._hardware_name + '\\n' + self._connection_name) if display_name is None else display_name\r\n         self._label = QLabel(label_text)\r\n         self._label.setAlignment(Qt.AlignCenter)\r\n         self._label.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Minimum)\r\n-        self._spin_widget = QDoubleSpinBox()\r\n+        self._spin_widget = NoStealFocusDoubleSpinBox()\r\n         self._spin_widget.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\r\n         self._spin_widget.setKeyboardTracking(False)\r\n         self._combobox = QComboBox()\r\n         self._combobox.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Minimum)\r\n         self._combobox.currentIndexChanged.connect(self._on_combobox_change)\r\n         \r\n         self._value_changed_function = None\r\n         \r\n\r\n```", "markup": "markdown", "html": "<p>Not sure if this is an issue on Windows, but for me when I scroll past SpinBoxes they steal focus, I stop scrolling, and the mousewheel starts manipulating their values instead. This is not what one wants in a lab control system.</p>\n<ul>\n<li>Subclassed QDoubleSpinBox for use with analog output widgets so that they\ndon't steal focus when you scroll over them. You can still scroll on them to\nchange their value if they've been focused by a mouse click or tab, but\nscrolling over them will not focus them, and scrolling elsewhere whilst they\nare focused will cause them to lose focus, so you can scroll with confidence.</li>\n</ul>\n<p>Also converted the file to one type of line ending (not intentionally, again), so for ease of reading here is the diff with whitespace changes ignored:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- a/qtwidgets/analogoutput.py Mon Jun 19 00:58:18 2017 +0000</span>\n<span class=\"gi\">+++ b/qtwidgets/analogoutput.py Tue Jun 20 02:33:15 2017 -0400</span>\n<span class=\"gu\">@@ -15,28 +15,50 @@</span>\n\n if &#39;PySide&#39; in sys.modules.copy():\n     from PySide.QtCore import *\n     from PySide.QtGui import *\n else:\n     from PyQt4.QtCore import *\n     from PyQt4.QtGui import *\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+class NoStealFocusDoubleSpinBox(QDoubleSpinBox):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;A QDoubleSpinBox that doesn&#39;t steal focus as you scroll over it with a</span>\n<span class=\"gi\">+    mouse wheel.&quot;&quot;&quot;</span>\n<span class=\"gi\">+    def __init__(self, *args, **kwargs):</span>\n<span class=\"gi\">+        QDoubleSpinBox.__init__(self, *args, **kwargs)</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.StrongFocus)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def focusInEvent(self, event):</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.WheelFocus)</span>\n<span class=\"gi\">+        return QDoubleSpinBox.focusInEvent(self, event)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def focusOutEvent(self, event):</span>\n<span class=\"gi\">+        self.setFocusPolicy(Qt.StrongFocus)</span>\n<span class=\"gi\">+        return QDoubleSpinBox.focusOutEvent(self, event)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def wheelEvent(self, event):</span>\n<span class=\"gi\">+        if self.hasFocus():</span>\n<span class=\"gi\">+            return QDoubleSpinBox.wheelEvent(self, event)</span>\n<span class=\"gi\">+        else:</span>\n<span class=\"gi\">+            event.ignore()</span>\n<span class=\"gi\">+</span>\n class AnalogOutput(QWidget):\n     def __init__(self, hardware_name, connection_name=&#39;-&#39;, display_name=None, horizontal_alignment=False, parent=None):\n         QWidget.__init__(self,parent)\n\n         self._connection_name = connection_name\n         self._hardware_name = hardware_name\n\n         label_text = (self._hardware_name + &#39;\\n&#39; + self._connection_name) if display_name is None else display_name\n         self._label = QLabel(label_text)\n         self._label.setAlignment(Qt.AlignCenter)\n         self._label.setSizePolicy(QSizePolicy.Fixed,QSizePolicy.Minimum)\n<span class=\"gd\">-        self._spin_widget = QDoubleSpinBox()</span>\n<span class=\"gi\">+        self._spin_widget = NoStealFocusDoubleSpinBox()</span>\n         self._spin_widget.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Minimum)\n         self._spin_widget.setKeyboardTracking(False)\n         self._combobox = QComboBox()\n         self._combobox.setSizePolicy(QSizePolicy.Minimum,QSizePolicy.Minimum)\n         self._combobox.currentIndexChanged.connect(self._on_combobox_change)\n\n         self._value_changed_function = None\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "814986b7174f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/814986b7174f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/814986b7174f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "feature2"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2017-06-27T06:54:04.345480+00:00", "type": "participant", "approved": true, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "REVIEWER", "participated_on": "2017-06-20T06:40:30.546676+00:00", "type": "participant", "approved": true, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}], "reason": "", "updated_on": "2017-06-27T06:54:27.670190+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "f5c421e37ab4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/f5c421e37ab4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/f5c421e37ab4"}}}, "closed_by": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}