{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/20/comments/42119530.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/20/_/diff#comment-42119530"}}, "parent": {"id": 42034605, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/20/comments/42034605.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/20/_/diff#comment-42034605"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 20, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/20.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/20"}}, "title": "qtutils 2.0.0 support and experimental PyQt5 support"}, "content": {"raw": "I made another implementation of drag-drop tabs based on Phil's code, and I'm not sure what was wrong in PyQt4 but my reimplementation doesn't appear to have remaining problems problem there (in linux at least). The remaining problem in PyQt5 is that events are being processed re-entrantly. That is, if during event processing (for a 'drag enter' for example), you call code that manipulates the GUI (like adding a tab), this can trigger further events that will be processed immediately, and so the event handler you are already running may be called again, essentially recursively. This can invalidate state that original event handler  was assuming, such as instance attributes and the state of the GUI itself.\n\nSo the code needs to be written with the possibility of re-entrancy in mind. I might try something like a context manager that catches the drag events and defers processing them until after the context exits, or something like that, or otherwise make the code re-check its assumptions before acting everywhere it is relevant. This drag-drop tab stuff is definitely non-trivial! There's a reason you don't find draggable tabs in any open source Qt projects if you go looking for them...\n\nThis re-entrancy could also possibly be considered a bug in Qt5 (ot PyQt5, I'm not sure). The [documentation for Qt](http://doc.qt.io/qt-5.6/qdragleaveevent.html) says for DragLeave events:\n\n> This event is always preceded by a QDragEnterEvent and a series of QDragMoveEvents. It is not sent if a QDropEvent is sent instead.\n\nWhich appears to not be true, since I seem to be pretty easily able to get the code to make multiple QDragLeave events without anything in between (without even finishing processing the previous QDragLeave).\n\nAnyway I think I should be able to fix it and hopefully have a robust dragdrop tab implementation by the end of it.", "markup": "markdown", "html": "<p>I made another implementation of drag-drop tabs based on Phil's code, and I'm not sure what was wrong in PyQt4 but my reimplementation doesn't appear to have remaining problems problem there (in linux at least). The remaining problem in PyQt5 is that events are being processed re-entrantly. That is, if during event processing (for a 'drag enter' for example), you call code that manipulates the GUI (like adding a tab), this can trigger further events that will be processed immediately, and so the event handler you are already running may be called again, essentially recursively. This can invalidate state that original event handler  was assuming, such as instance attributes and the state of the GUI itself.</p>\n<p>So the code needs to be written with the possibility of re-entrancy in mind. I might try something like a context manager that catches the drag events and defers processing them until after the context exits, or something like that, or otherwise make the code re-check its assumptions before acting everywhere it is relevant. This drag-drop tab stuff is definitely non-trivial! There's a reason you don't find draggable tabs in any open source Qt projects if you go looking for them...</p>\n<p>This re-entrancy could also possibly be considered a bug in Qt5 (ot PyQt5, I'm not sure). The <a data-is-external-link=\"true\" href=\"http://doc.qt.io/qt-5.6/qdragleaveevent.html\" rel=\"nofollow\">documentation for Qt</a> says for DragLeave events:</p>\n<blockquote>\n<p>This event is always preceded by a QDragEnterEvent and a series of QDragMoveEvents. It is not sent if a QDropEvent is sent instead.</p>\n</blockquote>\n<p>Which appears to not be true, since I seem to be pretty easily able to get the code to make multiple QDragLeave events without anything in between (without even finishing processing the previous QDragLeave).</p>\n<p>Anyway I think I should be able to fix it and hopefully have a robust dragdrop tab implementation by the end of it.</p>", "type": "rendered"}, "created_on": "2017-08-03T15:35:32.727408+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-03T15:35:32.731774+00:00", "type": "pullrequest_comment", "id": 42119530}