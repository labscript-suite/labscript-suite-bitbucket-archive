{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/21/comments/42521048.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/21/_/diff#comment-42521048"}}, "parent": {"id": 42517201, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/21/comments/42517201.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/21/_/diff#comment-42517201"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/21"}}, "title": "Dragdroptab"}, "content": {"raw": "Fixed. Wasn't really a bug, it was a backward compatibility thing of their own. They had this class called `QStyleOptionTab` which you use if you want to reimplement the painting of widgets themselves. Qt itself on two occasions updated the way the tabs painted by default, but so as to not break other people's custom painting code, they named the new objects `QStyleOptionTabV2` and `QStyleOptionTabV3` and used them internally - letting existing painting code continue to use the older objects that worked in the old way. So to reproduce the default behaviour I just needed to use `QStyleOptionTabV3` in PyQt4. In PyQt5 they removed these backward compatibility objects and there is only one `QStyleOptionTab` referring to the latest functionality.\n\nIf the Qt wrapper were really pedantic, it could alias the name `QStyleOptionTab` to refer to  `QStyleOptionTabV3` in PyQt4, but unless there is a complete list of renames somewhere I suspect this isn't worth it. I just put a flag in there.\n\nGood to hear macos icon size is fixed in Qt5 - I saw your screenshot of runmanager was looking pretty miserable and wasn't looking forward to fixing it!", "markup": "markdown", "html": "<p>Fixed. Wasn't really a bug, it was a backward compatibility thing of their own. They had this class called <code>QStyleOptionTab</code> which you use if you want to reimplement the painting of widgets themselves. Qt itself on two occasions updated the way the tabs painted by default, but so as to not break other people's custom painting code, they named the new objects <code>QStyleOptionTabV2</code> and <code>QStyleOptionTabV3</code> and used them internally - letting existing painting code continue to use the older objects that worked in the old way. So to reproduce the default behaviour I just needed to use <code>QStyleOptionTabV3</code> in PyQt4. In PyQt5 they removed these backward compatibility objects and there is only one <code>QStyleOptionTab</code> referring to the latest functionality.</p>\n<p>If the Qt wrapper were really pedantic, it could alias the name <code>QStyleOptionTab</code> to refer to  <code>QStyleOptionTabV3</code> in PyQt4, but unless there is a complete list of renames somewhere I suspect this isn't worth it. I just put a flag in there.</p>\n<p>Good to hear macos icon size is fixed in Qt5 - I saw your screenshot of runmanager was looking pretty miserable and wasn't looking forward to fixing it!</p>", "type": "rendered"}, "created_on": "2017-08-09T21:16:11.579218+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-09T21:16:11.581881+00:00", "type": "pullrequest_comment", "id": 42521048}