{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/28/comments/57371529.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/28/_/diff#comment-57371529"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 28, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/28.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/28"}}, "title": "Python3"}, "content": {"raw": "Things are looking pretty good! I've made some changes to this code, mostly to how `properties.py` handles strings.\n\nI've made it store native string types, and be able to read all string types, when storing and retrieving JSON encoded objects. Since what you get back is the object that was JSON encoded, and you don't care what type of string was stored, this ensures properties can be read regardless of how they were written. I think this should be the approach for Python 3 compatibility with other strings in h5 files: write native strings, be able to read anything.\n\nI also changed properties so that it can extract connection table properties regardless of whether the *name* of the device was stored in the connection table as a fixed-length bytestring or as a variable length unicode string. At the moment they're all stored as fixed length strings, but this allows us to change how they are stored when porting labscript to python 3, whilst ensuring everyone can still read them regardless of what Python version they are on. \n\ntl;dr: code that reads strings should be able to read them no matter what type of string they are. There'll be more work like this in the BLACS connection table code. As usual this is most of the subtlety in porting to Python 3.\n\nI also did some minor cleanups (based on things highlighted by running 2to3) and removed the `dtypeslist2dict` hack. But, I'll put that back in if there is a good reason for it that I'm overlooking, if you could let me know.\n\nI've run 2to3 over the whole thing and looked at every issue it raised - there are none remaining that require action as far as I can tell.\n\nI've done rudimentary testing of the result of all this, and been able to compile, run and analyse shots.\n\nIf you're happy with the `dtypeslist2dict` hack being removed, then it would be great if you could `hg pull --branch Python3 #!/cbillington/labscript_utils` to get my additional commits into this pull request, then we can proceed to test a bit more.\n\nAnd we shouldn't merge until qtutils gets a 2.1.0 release on PyPI so that this code can depend on it. In the meantime this can be tested by installing the release candidate of qtutils 2.1.0 with: \n\n`pip install https://pstarkey.github.io/bitbucket-archive/#!/downloads/qtutils-2.1.0-rc1.zip`", "markup": "markdown", "html": "<p>Things are looking pretty good! I've made some changes to this code, mostly to how <code>properties.py</code> handles strings.</p>\n<p>I've made it store native string types, and be able to read all string types, when storing and retrieving JSON encoded objects. Since what you get back is the object that was JSON encoded, and you don't care what type of string was stored, this ensures properties can be read regardless of how they were written. I think this should be the approach for Python 3 compatibility with other strings in h5 files: write native strings, be able to read anything.</p>\n<p>I also changed properties so that it can extract connection table properties regardless of whether the <em>name</em> of the device was stored in the connection table as a fixed-length bytestring or as a variable length unicode string. At the moment they're all stored as fixed length strings, but this allows us to change how they are stored when porting labscript to python 3, whilst ensuring everyone can still read them regardless of what Python version they are on. </p>\n<p>tl;dr: code that reads strings should be able to read them no matter what type of string they are. There'll be more work like this in the BLACS connection table code. As usual this is most of the subtlety in porting to Python 3.</p>\n<p>I also did some minor cleanups (based on things highlighted by running 2to3) and removed the <code>dtypeslist2dict</code> hack. But, I'll put that back in if there is a good reason for it that I'm overlooking, if you could let me know.</p>\n<p>I've run 2to3 over the whole thing and looked at every issue it raised - there are none remaining that require action as far as I can tell.</p>\n<p>I've done rudimentary testing of the result of all this, and been able to compile, run and analyse shots.</p>\n<p>If you're happy with the <code>dtypeslist2dict</code> hack being removed, then it would be great if you could <code>hg pull --branch Python3 #!/cbillington/labscript_utils</code> to get my additional commits into this pull request, then we can proceed to test a bit more.</p>\n<p>And we shouldn't merge until qtutils gets a 2.1.0 release on PyPI so that this code can depend on it. In the meantime this can be tested by installing the release candidate of qtutils 2.1.0 with: </p>\n<p><code>pip install https://pstarkey.github.io/bitbucket-archive/#!/downloads/qtutils-2.1.0-rc1.zip</code></p>", "type": "rendered"}, "created_on": "2018-02-27T05:58:48.014879+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-02-27T06:00:03.816995+00:00", "type": "pullrequest_comment", "id": 57371529}