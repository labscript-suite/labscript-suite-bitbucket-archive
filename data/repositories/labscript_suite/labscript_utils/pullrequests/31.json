{"rendered": {"description": {"raw": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "markup": "markdown", "html": "<ul>\n<li>\n<p>The way <code>exec()</code> was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use <code>exec()</code>.</p>\n</li>\n<li>\n<p>Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of <code>eval()</code> in operations involving them.</p>\n</li>\n<li>\n<p>renamed <code>UnitConversion.units</code> \u2192 <code>UnitConversion._magnitude_list</code> since it is internal and to make it slightly less confusable with all the other things called units.</p>\n</li>\n<li>\n<p>Simplified the sorting logic</p>\n</li>\n</ul>\n<p>I grepped labscript_suite to check that nothing was depending on the class variable <code>UnitConversion.units</code> since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.</p>\n<p>I've tested basic functionality on Python 2 and 3:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">labscript_utils.unitconversions.example</span> <span class=\"kn\">as</span> <span class=\"nn\">example</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">magnitudes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;m&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;T&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">magnitudes</span><span class=\"p\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">example3</span><span class=\"p\">({</span><span class=\"s1\">&#39;magnitudes&#39;</span><span class=\"p\">:</span> <span class=\"n\">magnitudes</span><span class=\"p\">})</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">W_to_base</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">mW_to_base</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">mW_from_base</span><span class=\"p\">(</span><span class=\"mf\">0.000325</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_magnitudes</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">derived_units</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>python2:</p>\n<div class=\"codehilite\"><pre><span></span>0.325\n0.000325\n0.7\n[&#39;G&#39;, &#39;M&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;u&#39;, &#39;T&#39;]\n[u&#39;pW&#39;, u&#39;nW&#39;, u&#39;uW&#39;, u&#39;mW&#39;, u&#39;W&#39;, u&#39;kW&#39;, u&#39;MW&#39;, u&#39;GW&#39;, u&#39;TW&#39;]\n</pre></div>\n\n\n<p>python3:</p>\n<div class=\"codehilite\"><pre><span></span>0.32499999999999996\n0.000325\n0.7\ndict_keys([&#39;m&#39;, &#39;p&#39;, &#39;T&#39;, &#39;k&#39;, &#39;n&#39;, &#39;M&#39;, &#39;G&#39;, &#39;u&#39;])\n[&#39;pW&#39;, &#39;nW&#39;, &#39;uW&#39;, &#39;mW&#39;, &#39;W&#39;, &#39;kW&#39;, &#39;MW&#39;, &#39;GW&#39;, &#39;TW&#39;]\n</pre></div>\n\n\n<p>Note that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces <code>derived_units</code> doesn't require it to be sorted anymore.</p>", "type": "rendered"}, "title": {"raw": "Unit conversions Python3 bugfix and cleanup", "markup": "markdown", "html": "<p>Unit conversions Python3 bugfix and cleanup</p>", "type": "rendered"}}, "type": "pullrequest", "description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/31/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:e29ac30bd43a%0D81b5932d59b6?from_pullrequest_id=31"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/31/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:e29ac30bd43a%0D81b5932d59b6?from_pullrequest_id=31"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/31/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/statuses_page=1.json"}}, "title": "Unit conversions Python3 bugfix and cleanup", "close_source_branch": true, "reviewers": [{"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}], "id": 31, "destination": {"commit": {"hash": "81b5932d59b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/81b5932d59b6.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/81b5932d59b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-03-02T05:41:24.463940+00:00", "summary": {"raw": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "markup": "markdown", "html": "<ul>\n<li>\n<p>The way <code>exec()</code> was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use <code>exec()</code>.</p>\n</li>\n<li>\n<p>Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of <code>eval()</code> in operations involving them.</p>\n</li>\n<li>\n<p>renamed <code>UnitConversion.units</code> \u2192 <code>UnitConversion._magnitude_list</code> since it is internal and to make it slightly less confusable with all the other things called units.</p>\n</li>\n<li>\n<p>Simplified the sorting logic</p>\n</li>\n</ul>\n<p>I grepped labscript_suite to check that nothing was depending on the class variable <code>UnitConversion.units</code> since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.</p>\n<p>I've tested basic functionality on Python 2 and 3:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">labscript_utils.unitconversions.example</span> <span class=\"kn\">as</span> <span class=\"nn\">example</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">magnitudes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;m&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;T&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">magnitudes</span><span class=\"p\">)</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">example3</span><span class=\"p\">({</span><span class=\"s1\">&#39;magnitudes&#39;</span><span class=\"p\">:</span> <span class=\"n\">magnitudes</span><span class=\"p\">})</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">W_to_base</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">mW_to_base</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">mW_from_base</span><span class=\"p\">(</span><span class=\"mf\">0.000325</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_magnitudes</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">derived_units</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>python2:</p>\n<div class=\"codehilite\"><pre><span></span>0.325\n0.000325\n0.7\n[&#39;G&#39;, &#39;M&#39;, &#39;k&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;u&#39;, &#39;T&#39;]\n[u&#39;pW&#39;, u&#39;nW&#39;, u&#39;uW&#39;, u&#39;mW&#39;, u&#39;W&#39;, u&#39;kW&#39;, u&#39;MW&#39;, u&#39;GW&#39;, u&#39;TW&#39;]\n</pre></div>\n\n\n<p>python3:</p>\n<div class=\"codehilite\"><pre><span></span>0.32499999999999996\n0.000325\n0.7\ndict_keys([&#39;m&#39;, &#39;p&#39;, &#39;T&#39;, &#39;k&#39;, &#39;n&#39;, &#39;M&#39;, &#39;G&#39;, &#39;u&#39;])\n[&#39;pW&#39;, &#39;nW&#39;, &#39;uW&#39;, &#39;mW&#39;, &#39;W&#39;, &#39;kW&#39;, &#39;MW&#39;, &#39;GW&#39;, &#39;TW&#39;]\n</pre></div>\n\n\n<p>Note that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces <code>derived_units</code> doesn't require it to be sorted anymore.</p>", "type": "rendered"}, "source": {"commit": {"hash": "54afef439300", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/54afef439300"}, "html": {"href": "#!/cbillington/labscript_utils/commits/54afef439300"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 10, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2018-03-13T07:46:20.589558+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2018-03-13T07:48:40.895353+00:00", "type": "participant", "approved": true, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "REVIEWER", "participated_on": "2018-03-02T07:28:19.516142+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}], "reason": "", "updated_on": "2018-03-13T07:49:31.614235+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e29ac30bd43a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e29ac30bd43a.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e29ac30bd43a"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}