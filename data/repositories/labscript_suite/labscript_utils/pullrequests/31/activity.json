{"pagelen": 50, "values": [{"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "81b5932d59b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/81b5932d59b6.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/81b5932d59b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "54afef439300", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/54afef439300"}, "html": {"href": "#!/cbillington/labscript_utils/commits/54afef439300"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-13T07:49:31.626949+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "81b5932d59b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/81b5932d59b6.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/81b5932d59b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "54afef439300", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/54afef439300"}, "html": {"href": "#!/cbillington/labscript_utils/commits/54afef439300"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-13T07:49:31.182636+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"approval": {"date": "2018-03-13T07:48:40.895353+00:00", "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/58630559.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-58630559"}}, "parent": {"id": 58624861, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/58624861.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-58624861"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Ah, ok I've added aliases for backward compatibility. No deprecation warning because you can't make a property for a class attribute without way more metaprogramming than is warranted for this.\n\n\nHere's the diff of the backward compatibility:\n\n\n```\n#!diff\n\n# HG changeset patch\n# User chrisjbillington\n# Date 1520926984 -39600\n#      Tue Mar 13 18:43:04 2018 +1100\n# Branch bugfix\n# Node ID 54afef439300cb5920fe2655501dc6cdc23e47d4\n# Parent  41bb9023a443f1a19b2efcb64158e603de7d4e56\nAdded .units and .unit_list for backward compat\n\ndiff -r 41bb9023a443 -r 54afef439300 unitconversions/UnitConversionBase.py\n--- a/unitconversions/UnitConversionBase.py\tFri Mar 02 16:24:43 2018 +1100\n+++ b/unitconversions/UnitConversionBase.py\tTue Mar 13 18:43:04 2018 +1100\n@@ -51,6 +51,9 @@\n class UnitConversion(object):\n     _magnitude_list = {'p': 1e-12,'n':1e-9, 'u':1e-6,'m': 1e-3,\n                        'k': 1e3, 'M': 1e6,'G': 1e9,'T': 1e12}\n+\n+    unit_list = _magnitude_list # alias for backward compat\n+\n     def __init__(self, params):\n         magnitudes = params.get('magnitudes', [])\n         \n@@ -85,3 +88,5 @@\n         # list of derived_units without prefixes, then by magnitude:\n         derived_units_sortlist.sort()\n         self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]\n+\n+        self.units = self._magnitudes # alias for backward compat\n\n```\n", "markup": "markdown", "html": "<p>Ah, ok I've added aliases for backward compatibility. No deprecation warning because you can't make a property for a class attribute without way more metaprogramming than is warranted for this.</p>\n<p>Here's the diff of the backward compatibility:</p>\n<div class=\"codehilite language-diff\"><pre><span></span># HG changeset patch\n# User chrisjbillington\n# Date 1520926984 -39600\n#      Tue Mar 13 18:43:04 2018 +1100\n# Branch bugfix\n# Node ID 54afef439300cb5920fe2655501dc6cdc23e47d4\n# Parent  41bb9023a443f1a19b2efcb64158e603de7d4e56\nAdded .units and .unit_list for backward compat\n\n<span class=\"gh\">diff -r 41bb9023a443 -r 54afef439300 unitconversions/UnitConversionBase.py</span>\n<span class=\"gd\">--- a/unitconversions/UnitConversionBase.py Fri Mar 02 16:24:43 2018 +1100</span>\n<span class=\"gi\">+++ b/unitconversions/UnitConversionBase.py Tue Mar 13 18:43:04 2018 +1100</span>\n<span class=\"gu\">@@ -51,6 +51,9 @@</span>\n class UnitConversion(object):\n     _magnitude_list = {&#39;p&#39;: 1e-12,&#39;n&#39;:1e-9, &#39;u&#39;:1e-6,&#39;m&#39;: 1e-3,\n                        &#39;k&#39;: 1e3, &#39;M&#39;: 1e6,&#39;G&#39;: 1e9,&#39;T&#39;: 1e12}\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    unit_list = _magnitude_list # alias for backward compat</span>\n<span class=\"gi\">+</span>\n     def __init__(self, params):\n         magnitudes = params.get(&#39;magnitudes&#39;, [])\n\n<span class=\"gu\">@@ -85,3 +88,5 @@</span>\n         # list of derived_units without prefixes, then by magnitude:\n         derived_units_sortlist.sort()\n         self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        self.units = self._magnitudes # alias for backward compat</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-13T07:46:20.586677+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-13T07:46:20.589558+00:00", "type": "pullrequest_comment", "id": 58630559}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "81b5932d59b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/81b5932d59b6.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/81b5932d59b6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "54afef439300", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/54afef439300"}, "html": {"href": "#!/cbillington/labscript_utils/commits/54afef439300"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-13T07:43:27.994650+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/58624861.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-58624861"}}, "parent": {"id": 58613825, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/58613825.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-58613825"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Um, still uncertain about my second dot point above. While you may not have found anything committed to the repos that use it, people aren't committing back their unit conversions so it still may break other peoples \\(uncomitted\\) code. Can we just alias the variables to the old names as well to be safe?", "markup": "markdown", "html": "<p>Um, still uncertain about my second dot point above. While you may not have found anything committed to the repos that use it, people aren't committing back their unit conversions so it still may break other peoples (uncomitted) code. Can we just alias the variables to the old names as well to be safe?</p>", "type": "rendered"}, "created_on": "2018-03-13T06:24:11.141549+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-03-13T06:24:11.145040+00:00", "type": "pullrequest_comment", "id": 58624861}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/58613825.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-58613825"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Ok to merge @pstarkey ?", "markup": "markdown", "html": "<p>Ok to merge @pstarkey ?</p>", "type": "rendered"}, "created_on": "2018-03-13T01:36:23.162684+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-13T01:36:23.172246+00:00", "type": "pullrequest_comment", "id": 58613825}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57759519.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57759519"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "For an example of the sort of thing we need to look out for, [this commit](#!/cbillington/labscript_devices/commits/15e0b6876afda714bc03a19831360ebeae46995a) when porting `labscript_devices` fixes breakage that would have occured otherwise since the code got a bytestring and was expecting a unicode one. A lot of these things can be found by explicitly searching for references to `str`, which is part of my mental checklist for porting.", "markup": "markdown", "html": "<p>For an example of the sort of thing we need to look out for, <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_devices/commits/15e0b6876afda714bc03a19831360ebeae46995a\" rel=\"nofollow\">this commit</a> when porting <code>labscript_devices</code> fixes breakage that would have occured otherwise since the code got a bytestring and was expecting a unicode one. A lot of these things can be found by explicitly searching for references to <code>str</code>, which is part of my mental checklist for porting.</p>", "type": "rendered"}, "created_on": "2018-03-02T07:39:46.562761+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T07:39:46.566844+00:00", "type": "pullrequest_comment", "id": 57759519}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57758848.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57758848"}}, "parent": {"id": 57758733, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57758733.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57758733"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "No worries! I added you because it superseded your PR, not because I wanted to create more work for you :P", "markup": "markdown", "html": "<p>No worries! I added you because it superseded your PR, not because I wanted to create more work for you :P</p>", "type": "rendered"}, "created_on": "2018-03-02T07:30:08.235905+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T07:30:08.238627+00:00", "type": "pullrequest_comment", "id": 57758848}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57758733.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57758733"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Our lab doesn't use unitconversions so I'm not much use testing this pull request. \n\nI could only do very basic testing so I'll pass on reviewing this one.", "markup": "markdown", "html": "<p>Our lab doesn't use unitconversions so I'm not much use testing this pull request. </p>\n<p>I could only do very basic testing so I'll pass on reviewing this one.</p>", "type": "rendered"}, "created_on": "2018-03-02T07:28:19.459026+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-03-02T07:28:19.516142+00:00", "type": "pullrequest_comment", "id": 57758733}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57758453.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57758453"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "I've confirmed that the selection and value in BLACS survives closing BLACS, updating to this commit and then reopening BLACS.", "markup": "markdown", "html": "<p>I've confirmed that the selection and value in BLACS survives closing BLACS, updating to this commit and then reopening BLACS.</p>", "type": "rendered"}, "created_on": "2018-03-02T07:23:45.655245+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T07:23:45.658229+00:00", "type": "pullrequest_comment", "id": 57758453}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57757904.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57757904"}}, "parent": {"id": 57756786, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57756786.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57756786"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "* Yes I did, I modified the example class to have multiple derived units to confirm the order was preserved.\n* I grepped for `.units` and `.unit_list`, so I'm pretty confident I would have seen anything using them.\n* The unit list used to be:\n\n```\n#!python\n\n    unit_list = {'p':'10**-12','n':'10**-9','u':'10**-6','m':'10**-3',\n                 'k':'10**3','M':'10**6','G':'10**9','T':'10**12'}\n```\nWith strings as the dictionary values. These values were being `eval()`'d in `UnitConversionBase.py` every time they were used, except in the `exec()` calls, where they were inserted as strings into the string being `exec()`'d. Since I determined nothing in labscript was reading `unit_list` except for the code in `UnitConversionBase.py`, I figured it was harmless to turn these into floats instead of strings, so that sorting and multiplying wouldn't need `eval()` to be called on them first.\n\n* I'll do this with BLACS, I haven't tested this.\n\n* In python 2, comparisons between bytestrings and unicode strings are extremely liberal:\n\n\n```\n#!python\n\n>>> b'x' == u'x'\nTrue\n>>> b'x' in [u'x']\nTrue\n>>> u'x' in [b'x']\nTrue\n>>> {b'x': 1}[u'x']\n1\n>>> {u'x': 1}[b'x']\n1\n>>> [u'x'].index(b'x')\n0\n>>> [b'x'].index(u'x')\n0\n\n```\n\nIn Python 3 all of these are False or raise an exception.\n\nSo in porting apps to Python 3, any time a string is read from a file or whatnot, it will need to be able to deal with it regardless of whether it is a unicode string or a bytestring, and as we port things, the aim is to turn more and more strings into into the right type of string that they should be (i.e unicode pretty much everywhere, except when dealing with IO that requires bytes), and because the types are so interchangeable in Python 2, we have not hit on much trouble with doing this one file/repo at a time (For example, the only reason `print(e._magnitudes.keys())` resulted in bytestrings in Python 2 is because the test file didn't have `unicode_literals` imported from `__future__`, and so it passed in bytestrings for the desired magnitudes, but everything still worked because they were treated as the same as the unicode ones in UnitConversionBase.py for the purpose of dictionary lookups).\n\nThe only Python 2 code that will break is code that is explicitly checking whether something is a bytestring, since in Python 2, since:\n\n```\n#!python\n\n>>> isinstance(u'', str)\nFalse\n\n```\n\nAs well as code that goes on to pass the now-unicode strings into some IO that definitely requires bytes. So this trickiness is mostly only an issue with file IO such as `properties.py` and `connections.py`.", "markup": "markdown", "html": "<ul>\n<li>Yes I did, I modified the example class to have multiple derived units to confirm the order was preserved.</li>\n<li>I grepped for <code>.units</code> and <code>.unit_list</code>, so I'm pretty confident I would have seen anything using them.</li>\n<li>The unit list used to be:</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"n\">unit_list</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**-12&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**-9&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;u&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**-6&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;m&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**-3&#39;</span><span class=\"p\">,</span>\n                 <span class=\"s1\">&#39;k&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**3&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;M&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**6&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;G&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**9&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;T&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;10**12&#39;</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>With strings as the dictionary values. These values were being <code>eval()</code>'d in <code>UnitConversionBase.py</code> every time they were used, except in the <code>exec()</code> calls, where they were inserted as strings into the string being <code>exec()</code>'d. Since I determined nothing in labscript was reading <code>unit_list</code> except for the code in <code>UnitConversionBase.py</code>, I figured it was harmless to turn these into floats instead of strings, so that sorting and multiplying wouldn't need <code>eval()</code> to be called on them first.</p>\n<ul>\n<li>\n<p>I'll do this with BLACS, I haven't tested this.</p>\n</li>\n<li>\n<p>In python 2, comparisons between bytestrings and unicode strings are extremely liberal:</p>\n</li>\n</ul>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span> <span class=\"o\">==</span> <span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span>\n<span class=\"bp\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"bp\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"bp\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}[</span><span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}[</span><span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>In Python 3 all of these are False or raise an exception.</p>\n<p>So in porting apps to Python 3, any time a string is read from a file or whatnot, it will need to be able to deal with it regardless of whether it is a unicode string or a bytestring, and as we port things, the aim is to turn more and more strings into into the right type of string that they should be (i.e unicode pretty much everywhere, except when dealing with IO that requires bytes), and because the types are so interchangeable in Python 2, we have not hit on much trouble with doing this one file/repo at a time (For example, the only reason <code>print(e._magnitudes.keys())</code> resulted in bytestrings in Python 2 is because the test file didn't have <code>unicode_literals</code> imported from <code>__future__</code>, and so it passed in bytestrings for the desired magnitudes, but everything still worked because they were treated as the same as the unicode ones in UnitConversionBase.py for the purpose of dictionary lookups).</p>\n<p>The only Python 2 code that will break is code that is explicitly checking whether something is a bytestring, since in Python 2, since:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"bp\">False</span>\n</pre></div>\n\n\n<p>As well as code that goes on to pass the now-unicode strings into some IO that definitely requires bytes. So this trickiness is mostly only an issue with file IO such as <code>properties.py</code> and <code>connections.py</code>.</p>", "type": "rendered"}, "created_on": "2018-03-02T07:13:37.615022+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T07:14:02.696954+00:00", "type": "pullrequest_comment", "id": 57757904}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57756786.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57756786"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "* Did you test with more than one derived unit \\(most notably that the order of the derived units along with autogenerated derived units with prefixes stays the same between the old code and the new code\\). I think it does, but your test case only shows using one derived unit \\('W'\\).  \n* I don't think that grepping for `UnitConversion.units` is sufficient as most of the internal code throughout the labscript suite works with instantiated unit conversions \\(with a dynamic class name used in determining the type of object to instantiate\\). Probably nothing uses it....but it's not guaranteed and that also doesn't stop people having used it when creating unit conversions that have not been committed back to the repository. The same goes for the class attribute `unit_list` that is now `_magnitude_list`.  \n* Could you expand on what you mean by \"that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\" because I don't understand what you mean  \n* Could you verify that the selected unit in BLACS is restored correctly \\(and that the unit conversion is correctly applied\\) when switching between the old code and the new code \\(as in, value saved when closing BLACS running the old code, everything is correct when launching BLACS with the new code\\).   \n* Somewhat related to the last point....I notice that `derived_units` seems to contain unicode strings under Python 2 now, is this a problem compatibility wise \\(for instance when saving/loading from HDF5 files, etc or comparing between HDF5 files produces under different versions of this code\\)  \n\nThink that all the comments I have for now!\n\n\u200c", "markup": "markdown", "html": "<ul>\n<li>Did you test with more than one derived unit (most notably that the order of the derived units along with autogenerated derived units with prefixes stays the same between the old code and the new code). I think it does, but your test case only shows using one derived unit ('W').  </li>\n<li>I don't think that grepping for <code>UnitConversion.units</code> is sufficient as most of the internal code throughout the labscript suite works with instantiated unit conversions (with a dynamic class name used in determining the type of object to instantiate). Probably nothing uses it....but it's not guaranteed and that also doesn't stop people having used it when creating unit conversions that have not been committed back to the repository. The same goes for the class attribute <code>unit_list</code> that is now <code>_magnitude_list</code>.  </li>\n<li>Could you expand on what you mean by \"that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\" because I don't understand what you mean  </li>\n<li>Could you verify that the selected unit in BLACS is restored correctly (and that the unit conversion is correctly applied) when switching between the old code and the new code (as in, value saved when closing BLACS running the old code, everything is correct when launching BLACS with the new code).   </li>\n<li>Somewhat related to the last point....I notice that <code>derived_units</code> seems to contain unicode strings under Python 2 now, is this a problem compatibility wise (for instance when saving/loading from HDF5 files, etc or comparing between HDF5 files produces under different versions of this code)  </li>\n</ul>\n<p>Think that all the comments I have for now!</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2018-03-02T06:48:07.857946+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2018-03-02T06:48:07.861734+00:00", "type": "pullrequest_comment", "id": 57756786}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested basic functionality on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "4d200324079d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4d200324079d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4d200324079d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "41bb9023a443", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/41bb9023a443"}, "html": {"href": "#!/cbillington/labscript_utils/commits/41bb9023a443"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-02T06:15:14.718738+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57754996.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57754996"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Wow, that diff looks terrible. \n\nHere'a  a diff where I've artificially inserted whitespace to make diff identify which chunk corresponds to which a bit better:\n\n```\n#!diff\n\n--- UnitConversionBase.py.orig\t2018-03-02 16:58:46.128541294 +1100\n+++ UnitConversionBase.py.changed\t2018-03-02 16:58:21.876453153 +1100\n@@ -18,6 +18,27 @@\n import math\n from numpy import iterable, array\n \n+\n+class _MultiplicativeConversion(object):\n+    \"\"\"Callable for conversion functions that are just multiplicative\n+       transformations of another conversion function\"\"\"\n+    def __init__(self, name, unprefixed_method, factor, to_base):\n+        self.unprefixed_method = unprefixed_method\n+        self.factor = float(factor)\n+        self.to_base = bool(to_base)\n+        self.__name__ = name\n+\n+    def __get__(self, instance, class_):\n+        \"\"\"Bind like an instance method\"\"\"\n+        return MethodType(self, instance)\n+\n+    def __call__(self, value):\n+        if self.to_base:\n+            return self.unprefixed_method(value) * self.factor\n+        else:\n+            return self.unprefixed_method(value / self.factor)\n+\n+\n def vectorise(method):\n     def f(instance, arg):\n         if iterable(arg):\n@@ -26,45 +47,16 @@\n             return method(instance, arg)\n     return f\n             \n+\n class UnitConversion(object):\n-    unit_list = {'p':'10**-12','n':'10**-9','u':'10**-6','m':'10**-3',\n-                 'k':'10**3','M':'10**6','G':'10**9','T':'10**12'}\n-    def __init__(self,params):\n-        magnitudes = []\n-        if 'magnitudes' in params:\n-            magnitudes = params['magnitudes']\n-        \n-        # order the unit order of magnitudes\n-        # We want lowest (negative) to -3 and then largest positive to 3\n-        temp_units = []\n-        for unit in magnitudes:\n-            try:\n-                if unit == u'\\u03bc': # a unicode 'mu' symbol\n-                    unit = 'u'\n-                magnitude = math.log10(eval(self.unit_list[unit]))\n-                if magnitude < 0:\n-                    position = 0\n-                    for u in temp_units:\n-                        if math.log10(eval(u[1])) > magnitude:\n-                            break\n-                        else:\n-                            position += 1\n-                    \n-                else:\n-                    position = 0\n-                    for u in temp_units:                        \n-                        if math.log10(eval(u[1])) < 0:\n-                            position += 1\n-                        elif math.log10(eval(u[1])) > magnitude:\n-                            position += 1\n-                        else:\n-                            break\n-                \n-                temp_units.insert(position,(unit,self.unit_list[unit]))\n-            except Exception as e:\n-                print(e)\n-                pass\n+    _magnitude_list = {'p': 1e-12,'n':1e-9, 'u':1e-6,'m': 1e-3,\n+                       'k': 1e3, 'M': 1e6,'G': 1e9,'T': 1e12}\n+    def __init__(self, params):\n+        magnitudes = params.get('magnitudes', [])\n         \n+        # Convert any unicode 'mu' symbol to a 'u':\n+        magnitudes = [p if p != '\\u03bc' else 'u' for p in magnitudes]\n+        self._magnitudes = {prefix: self._magnitude_list[prefix] for prefix in magnitudes}\n \n \n \n@@ -75,18 +67,29 @@\n \n \n \n-                \n-        self.units = temp_units\n-        \n-        for unit in self.units:\n-            for derived_unit in self.derived_units:\n-                #if derived_unit == unit[2]:\n-                exec(\"def \"+unit[0]+derived_unit+\"_to_base(self,value): return self.\"+derived_unit+\"_to_base(value)*\"+unit[1])\n-                exec (\"a=\"+unit[0]+derived_unit+\"_to_base\")\n-                self.__dict__[unit[0]+derived_unit+\"_to_base\"] = MethodType(a,self,UnitConversion)\n-                exec(\"def \"+unit[0]+derived_unit+\"_from_base(self,value): return self.\"+derived_unit+\"_from_base(value/float(\"+unit[1]+\"))\")\n-                exec (\"a=\"+unit[0]+derived_unit+\"_from_base\")\n-                self.__dict__[unit[0]+derived_unit+\"_from_base\"] = MethodType(a,self,UnitConversion)\n+\n+        # A list of tuples we will use to sort the list of derived units once\n+        # we produce the units for the provided magnitudes:\n+        derived_units_sortlist = []\n+\n+        for i, derived_unit in enumerate(self.derived_units):\n+            # Append the unit magnitude derived unit to the list:\n+            sortinfo = (i, 1)\n+            derived_units_sortlist.append((sortinfo, derived_unit))\n+\n+            # Dynamically create instance methods for each other magnitude:\n+            unprefixed_to_base = getattr(self, derived_unit + \"_to_base\")\n+            unprefixed_from_base = getattr(self, derived_unit + \"_from_base\")\n+            for prefix, factor in self._magnitudes.items():\n+                unit = prefix + derived_unit\n+                to_base_name = unit + \"_to_base\"\n+                from_base_name = unit + \"_from_base\"\n+                self.__dict__[to_base_name] = _MultiplicativeConversion(to_base_name, unprefixed_to_base, factor, to_base=True)\n+                self.__dict__[from_base_name] = _MultiplicativeConversion(from_base_name, unprefixed_from_base, factor, to_base=False)\n+\n+                # Append to the sortlist:\n+                sortinfo = (i, factor)\n+                derived_units_sortlist.append((sortinfo, unit))\n \n \n \n@@ -98,18 +101,7 @@\n \n \n \n-        # Make another loop to stop infinite regression!\n-        derived_copy = copy.copy(self.derived_units)\n-        for unit in self.units:\n-            for derived_unit in derived_copy:        \n-                # Add unit to derived unit list (put in correct order)\n-                # Find derived unit location in list\n-                pos = self.derived_units.index(derived_unit)\n-                if math.log10(eval(unit[1])) > 0:\n-                    pos+=1\n-                # Is this unit a negative or positive order of magnitude?\n-                \n-                #if unit[0] == 'u':\n-                #    self.derived_units.insert(pos,'\u00b5'+derived_unit)\n-                #else:\n-                self.derived_units.insert(pos,unit[0]+derived_unit)\n+        # Sort derived units first by position of the unit in the original\n+        # list of derived_units without prefixes, then by magnitude:\n+        derived_units_sortlist.sort()\n+        self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]\n\n```\n", "markup": "markdown", "html": "<p>Wow, that diff looks terrible. </p>\n<p>Here'a  a diff where I've artificially inserted whitespace to make diff identify which chunk corresponds to which a bit better:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- UnitConversionBase.py.orig  2018-03-02 16:58:46.128541294 +1100</span>\n<span class=\"gi\">+++ UnitConversionBase.py.changed   2018-03-02 16:58:21.876453153 +1100</span>\n<span class=\"gu\">@@ -18,6 +18,27 @@</span>\n import math\n from numpy import iterable, array\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+class _MultiplicativeConversion(object):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;Callable for conversion functions that are just multiplicative</span>\n<span class=\"gi\">+       transformations of another conversion function&quot;&quot;&quot;</span>\n<span class=\"gi\">+    def __init__(self, name, unprefixed_method, factor, to_base):</span>\n<span class=\"gi\">+        self.unprefixed_method = unprefixed_method</span>\n<span class=\"gi\">+        self.factor = float(factor)</span>\n<span class=\"gi\">+        self.to_base = bool(to_base)</span>\n<span class=\"gi\">+        self.__name__ = name</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def __get__(self, instance, class_):</span>\n<span class=\"gi\">+        &quot;&quot;&quot;Bind like an instance method&quot;&quot;&quot;</span>\n<span class=\"gi\">+        return MethodType(self, instance)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def __call__(self, value):</span>\n<span class=\"gi\">+        if self.to_base:</span>\n<span class=\"gi\">+            return self.unprefixed_method(value) * self.factor</span>\n<span class=\"gi\">+        else:</span>\n<span class=\"gi\">+            return self.unprefixed_method(value / self.factor)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def vectorise(method):\n     def f(instance, arg):\n         if iterable(arg):\n<span class=\"gu\">@@ -26,45 +47,16 @@</span>\n             return method(instance, arg)\n     return f\n\n<span class=\"gi\">+</span>\n class UnitConversion(object):\n<span class=\"gd\">-    unit_list = {&#39;p&#39;:&#39;10**-12&#39;,&#39;n&#39;:&#39;10**-9&#39;,&#39;u&#39;:&#39;10**-6&#39;,&#39;m&#39;:&#39;10**-3&#39;,</span>\n<span class=\"gd\">-                 &#39;k&#39;:&#39;10**3&#39;,&#39;M&#39;:&#39;10**6&#39;,&#39;G&#39;:&#39;10**9&#39;,&#39;T&#39;:&#39;10**12&#39;}</span>\n<span class=\"gd\">-    def __init__(self,params):</span>\n<span class=\"gd\">-        magnitudes = []</span>\n<span class=\"gd\">-        if &#39;magnitudes&#39; in params:</span>\n<span class=\"gd\">-            magnitudes = params[&#39;magnitudes&#39;]</span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        # order the unit order of magnitudes</span>\n<span class=\"gd\">-        # We want lowest (negative) to -3 and then largest positive to 3</span>\n<span class=\"gd\">-        temp_units = []</span>\n<span class=\"gd\">-        for unit in magnitudes:</span>\n<span class=\"gd\">-            try:</span>\n<span class=\"gd\">-                if unit == u&#39;\\u03bc&#39;: # a unicode &#39;mu&#39; symbol</span>\n<span class=\"gd\">-                    unit = &#39;u&#39;</span>\n<span class=\"gd\">-                magnitude = math.log10(eval(self.unit_list[unit]))</span>\n<span class=\"gd\">-                if magnitude &lt; 0:</span>\n<span class=\"gd\">-                    position = 0</span>\n<span class=\"gd\">-                    for u in temp_units:</span>\n<span class=\"gd\">-                        if math.log10(eval(u[1])) &gt; magnitude:</span>\n<span class=\"gd\">-                            break</span>\n<span class=\"gd\">-                        else:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                    </span>\n<span class=\"gd\">-                else:</span>\n<span class=\"gd\">-                    position = 0</span>\n<span class=\"gd\">-                    for u in temp_units:                        </span>\n<span class=\"gd\">-                        if math.log10(eval(u[1])) &lt; 0:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                        elif math.log10(eval(u[1])) &gt; magnitude:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                        else:</span>\n<span class=\"gd\">-                            break</span>\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-                temp_units.insert(position,(unit,self.unit_list[unit]))</span>\n<span class=\"gd\">-            except Exception as e:</span>\n<span class=\"gd\">-                print(e)</span>\n<span class=\"gd\">-                pass</span>\n<span class=\"gi\">+    _magnitude_list = {&#39;p&#39;: 1e-12,&#39;n&#39;:1e-9, &#39;u&#39;:1e-6,&#39;m&#39;: 1e-3,</span>\n<span class=\"gi\">+                       &#39;k&#39;: 1e3, &#39;M&#39;: 1e6,&#39;G&#39;: 1e9,&#39;T&#39;: 1e12}</span>\n<span class=\"gi\">+    def __init__(self, params):</span>\n<span class=\"gi\">+        magnitudes = params.get(&#39;magnitudes&#39;, [])</span>\n\n<span class=\"gi\">+        # Convert any unicode &#39;mu&#39; symbol to a &#39;u&#39;:</span>\n<span class=\"gi\">+        magnitudes = [p if p != &#39;\\u03bc&#39; else &#39;u&#39; for p in magnitudes]</span>\n<span class=\"gi\">+        self._magnitudes = {prefix: self._magnitude_list[prefix] for prefix in magnitudes}</span>\n\n\n\n<span class=\"gu\">@@ -75,18 +67,29 @@</span>\n\n\n\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-        self.units = temp_units</span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        for unit in self.units:</span>\n<span class=\"gd\">-            for derived_unit in self.derived_units:</span>\n<span class=\"gd\">-                #if derived_unit == unit[2]:</span>\n<span class=\"gd\">-                exec(&quot;def &quot;+unit[0]+derived_unit+&quot;_to_base(self,value): return self.&quot;+derived_unit+&quot;_to_base(value)*&quot;+unit[1])</span>\n<span class=\"gd\">-                exec (&quot;a=&quot;+unit[0]+derived_unit+&quot;_to_base&quot;)</span>\n<span class=\"gd\">-                self.__dict__[unit[0]+derived_unit+&quot;_to_base&quot;] = MethodType(a,self,UnitConversion)</span>\n<span class=\"gd\">-                exec(&quot;def &quot;+unit[0]+derived_unit+&quot;_from_base(self,value): return self.&quot;+derived_unit+&quot;_from_base(value/float(&quot;+unit[1]+&quot;))&quot;)</span>\n<span class=\"gd\">-                exec (&quot;a=&quot;+unit[0]+derived_unit+&quot;_from_base&quot;)</span>\n<span class=\"gd\">-                self.__dict__[unit[0]+derived_unit+&quot;_from_base&quot;] = MethodType(a,self,UnitConversion)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        # A list of tuples we will use to sort the list of derived units once</span>\n<span class=\"gi\">+        # we produce the units for the provided magnitudes:</span>\n<span class=\"gi\">+        derived_units_sortlist = []</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        for i, derived_unit in enumerate(self.derived_units):</span>\n<span class=\"gi\">+            # Append the unit magnitude derived unit to the list:</span>\n<span class=\"gi\">+            sortinfo = (i, 1)</span>\n<span class=\"gi\">+            derived_units_sortlist.append((sortinfo, derived_unit))</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            # Dynamically create instance methods for each other magnitude:</span>\n<span class=\"gi\">+            unprefixed_to_base = getattr(self, derived_unit + &quot;_to_base&quot;)</span>\n<span class=\"gi\">+            unprefixed_from_base = getattr(self, derived_unit + &quot;_from_base&quot;)</span>\n<span class=\"gi\">+            for prefix, factor in self._magnitudes.items():</span>\n<span class=\"gi\">+                unit = prefix + derived_unit</span>\n<span class=\"gi\">+                to_base_name = unit + &quot;_to_base&quot;</span>\n<span class=\"gi\">+                from_base_name = unit + &quot;_from_base&quot;</span>\n<span class=\"gi\">+                self.__dict__[to_base_name] = _MultiplicativeConversion(to_base_name, unprefixed_to_base, factor, to_base=True)</span>\n<span class=\"gi\">+                self.__dict__[from_base_name] = _MultiplicativeConversion(from_base_name, unprefixed_from_base, factor, to_base=False)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+                # Append to the sortlist:</span>\n<span class=\"gi\">+                sortinfo = (i, factor)</span>\n<span class=\"gi\">+                derived_units_sortlist.append((sortinfo, unit))</span>\n\n\n\n<span class=\"gu\">@@ -98,18 +101,7 @@</span>\n\n\n\n<span class=\"gd\">-        # Make another loop to stop infinite regression!</span>\n<span class=\"gd\">-        derived_copy = copy.copy(self.derived_units)</span>\n<span class=\"gd\">-        for unit in self.units:</span>\n<span class=\"gd\">-            for derived_unit in derived_copy:        </span>\n<span class=\"gd\">-                # Add unit to derived unit list (put in correct order)</span>\n<span class=\"gd\">-                # Find derived unit location in list</span>\n<span class=\"gd\">-                pos = self.derived_units.index(derived_unit)</span>\n<span class=\"gd\">-                if math.log10(eval(unit[1])) &gt; 0:</span>\n<span class=\"gd\">-                    pos+=1</span>\n<span class=\"gd\">-                # Is this unit a negative or positive order of magnitude?</span>\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-                #if unit[0] == &#39;u&#39;:</span>\n<span class=\"gd\">-                #    self.derived_units.insert(pos,&#39;\u00b5&#39;+derived_unit)</span>\n<span class=\"gd\">-                #else:</span>\n<span class=\"gd\">-                self.derived_units.insert(pos,unit[0]+derived_unit)</span>\n<span class=\"gi\">+        # Sort derived units first by position of the unit in the original</span>\n<span class=\"gi\">+        # list of derived_units without prefixes, then by magnitude:</span>\n<span class=\"gi\">+        derived_units_sortlist.sort()</span>\n<span class=\"gi\">+        self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-02T06:01:39.734015+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T06:01:39.737435+00:00", "type": "pullrequest_comment", "id": 57754996}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "4d200324079d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4d200324079d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4d200324079d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "41bb9023a443", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/41bb9023a443"}, "html": {"href": "#!/cbillington/labscript_utils/commits/41bb9023a443"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-02T05:41:24.523793+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}, {"update": {"description": "* The way `exec()` was used in unit conversions was not Python 3 compatible and not really possible  to make Python 3 compatible in a clean way, so I've changed it to not use `exec()`.\r\n\r\n* Made the metric prefix conversion factors be stored as floats instead of strings, removing the use of `eval()` in operations involving them.\r\n\r\n* renamed `UnitConversion.units` \u2192 `UnitConversion._magnitude_list` since it is internal and to make it slightly less confusable with all the other things called units.\r\n\r\n* Simplified the sorting logic\r\n\r\nI grepped labscript_suite to check that nothing was depending on the class variable `UnitConversion.units` since I changed it's name, and that nothing was depending on the fact that the metric prefix conversion factors were previously strings.\r\n\r\nI've tested on Python 2 and 3:\r\n\r\n\r\n```\r\n#!python\r\n\r\nimport labscript_utils.unitconversions.example as example\r\nimport random\r\nmagnitudes = ['p', 'n', 'u', 'm', 'k', 'M', 'G', 'T']\r\nrandom.shuffle(magnitudes)\r\ne = example.example3({'magnitudes': magnitudes})\r\nprint(e.W_to_base(0.7))\r\nprint(e.mW_to_base(0.7))\r\nprint(e.mW_from_base(0.000325))\r\n\r\nprint(e._magnitudes.keys())\r\nprint(e.derived_units)\r\n```\r\n\r\npython2:\r\n```\r\n0.325\r\n0.000325\r\n0.7\r\n['G', 'M', 'k', 'm', 'n', 'p', 'u', 'T']\r\n[u'pW', u'nW', u'uW', u'mW', u'W', u'kW', u'MW', u'GW', u'TW']\r\n```\r\npython3:\r\n```\r\n0.32499999999999996\r\n0.000325\r\n0.7\r\ndict_keys(['m', 'p', 'T', 'k', 'n', 'M', 'G', 'u'])\r\n['pW', 'nW', 'uW', 'mW', 'W', 'kW', 'MW', 'GW', 'TW']\r\n```\r\nNote that the magnitudes list is in an arbitrary order (its a dict now), but that doesn't matter since its a private variable and the sorting logic that produces `derived_units` doesn't require it to be sorted anymore.", "title": "Unit conversions Python3 bugfix and cleanup", "destination": {"commit": {"hash": "4d200324079d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4d200324079d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4d200324079d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "41bb9023a443", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/41bb9023a443"}, "html": {"href": "#!/cbillington/labscript_utils/commits/41bb9023a443"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-03-02T05:41:24.477262+00:00"}, "pull_request": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}}]}