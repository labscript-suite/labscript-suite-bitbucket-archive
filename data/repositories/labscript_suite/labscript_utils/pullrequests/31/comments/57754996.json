{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31/comments/57754996.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31/_/diff#comment-57754996"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/31"}}, "title": "Unit conversions Python3 bugfix and cleanup"}, "content": {"raw": "Wow, that diff looks terrible. \n\nHere'a  a diff where I've artificially inserted whitespace to make diff identify which chunk corresponds to which a bit better:\n\n```\n#!diff\n\n--- UnitConversionBase.py.orig\t2018-03-02 16:58:46.128541294 +1100\n+++ UnitConversionBase.py.changed\t2018-03-02 16:58:21.876453153 +1100\n@@ -18,6 +18,27 @@\n import math\n from numpy import iterable, array\n \n+\n+class _MultiplicativeConversion(object):\n+    \"\"\"Callable for conversion functions that are just multiplicative\n+       transformations of another conversion function\"\"\"\n+    def __init__(self, name, unprefixed_method, factor, to_base):\n+        self.unprefixed_method = unprefixed_method\n+        self.factor = float(factor)\n+        self.to_base = bool(to_base)\n+        self.__name__ = name\n+\n+    def __get__(self, instance, class_):\n+        \"\"\"Bind like an instance method\"\"\"\n+        return MethodType(self, instance)\n+\n+    def __call__(self, value):\n+        if self.to_base:\n+            return self.unprefixed_method(value) * self.factor\n+        else:\n+            return self.unprefixed_method(value / self.factor)\n+\n+\n def vectorise(method):\n     def f(instance, arg):\n         if iterable(arg):\n@@ -26,45 +47,16 @@\n             return method(instance, arg)\n     return f\n             \n+\n class UnitConversion(object):\n-    unit_list = {'p':'10**-12','n':'10**-9','u':'10**-6','m':'10**-3',\n-                 'k':'10**3','M':'10**6','G':'10**9','T':'10**12'}\n-    def __init__(self,params):\n-        magnitudes = []\n-        if 'magnitudes' in params:\n-            magnitudes = params['magnitudes']\n-        \n-        # order the unit order of magnitudes\n-        # We want lowest (negative) to -3 and then largest positive to 3\n-        temp_units = []\n-        for unit in magnitudes:\n-            try:\n-                if unit == u'\\u03bc': # a unicode 'mu' symbol\n-                    unit = 'u'\n-                magnitude = math.log10(eval(self.unit_list[unit]))\n-                if magnitude < 0:\n-                    position = 0\n-                    for u in temp_units:\n-                        if math.log10(eval(u[1])) > magnitude:\n-                            break\n-                        else:\n-                            position += 1\n-                    \n-                else:\n-                    position = 0\n-                    for u in temp_units:                        \n-                        if math.log10(eval(u[1])) < 0:\n-                            position += 1\n-                        elif math.log10(eval(u[1])) > magnitude:\n-                            position += 1\n-                        else:\n-                            break\n-                \n-                temp_units.insert(position,(unit,self.unit_list[unit]))\n-            except Exception as e:\n-                print(e)\n-                pass\n+    _magnitude_list = {'p': 1e-12,'n':1e-9, 'u':1e-6,'m': 1e-3,\n+                       'k': 1e3, 'M': 1e6,'G': 1e9,'T': 1e12}\n+    def __init__(self, params):\n+        magnitudes = params.get('magnitudes', [])\n         \n+        # Convert any unicode 'mu' symbol to a 'u':\n+        magnitudes = [p if p != '\\u03bc' else 'u' for p in magnitudes]\n+        self._magnitudes = {prefix: self._magnitude_list[prefix] for prefix in magnitudes}\n \n \n \n@@ -75,18 +67,29 @@\n \n \n \n-                \n-        self.units = temp_units\n-        \n-        for unit in self.units:\n-            for derived_unit in self.derived_units:\n-                #if derived_unit == unit[2]:\n-                exec(\"def \"+unit[0]+derived_unit+\"_to_base(self,value): return self.\"+derived_unit+\"_to_base(value)*\"+unit[1])\n-                exec (\"a=\"+unit[0]+derived_unit+\"_to_base\")\n-                self.__dict__[unit[0]+derived_unit+\"_to_base\"] = MethodType(a,self,UnitConversion)\n-                exec(\"def \"+unit[0]+derived_unit+\"_from_base(self,value): return self.\"+derived_unit+\"_from_base(value/float(\"+unit[1]+\"))\")\n-                exec (\"a=\"+unit[0]+derived_unit+\"_from_base\")\n-                self.__dict__[unit[0]+derived_unit+\"_from_base\"] = MethodType(a,self,UnitConversion)\n+\n+        # A list of tuples we will use to sort the list of derived units once\n+        # we produce the units for the provided magnitudes:\n+        derived_units_sortlist = []\n+\n+        for i, derived_unit in enumerate(self.derived_units):\n+            # Append the unit magnitude derived unit to the list:\n+            sortinfo = (i, 1)\n+            derived_units_sortlist.append((sortinfo, derived_unit))\n+\n+            # Dynamically create instance methods for each other magnitude:\n+            unprefixed_to_base = getattr(self, derived_unit + \"_to_base\")\n+            unprefixed_from_base = getattr(self, derived_unit + \"_from_base\")\n+            for prefix, factor in self._magnitudes.items():\n+                unit = prefix + derived_unit\n+                to_base_name = unit + \"_to_base\"\n+                from_base_name = unit + \"_from_base\"\n+                self.__dict__[to_base_name] = _MultiplicativeConversion(to_base_name, unprefixed_to_base, factor, to_base=True)\n+                self.__dict__[from_base_name] = _MultiplicativeConversion(from_base_name, unprefixed_from_base, factor, to_base=False)\n+\n+                # Append to the sortlist:\n+                sortinfo = (i, factor)\n+                derived_units_sortlist.append((sortinfo, unit))\n \n \n \n@@ -98,18 +101,7 @@\n \n \n \n-        # Make another loop to stop infinite regression!\n-        derived_copy = copy.copy(self.derived_units)\n-        for unit in self.units:\n-            for derived_unit in derived_copy:        \n-                # Add unit to derived unit list (put in correct order)\n-                # Find derived unit location in list\n-                pos = self.derived_units.index(derived_unit)\n-                if math.log10(eval(unit[1])) > 0:\n-                    pos+=1\n-                # Is this unit a negative or positive order of magnitude?\n-                \n-                #if unit[0] == 'u':\n-                #    self.derived_units.insert(pos,'\u00b5'+derived_unit)\n-                #else:\n-                self.derived_units.insert(pos,unit[0]+derived_unit)\n+        # Sort derived units first by position of the unit in the original\n+        # list of derived_units without prefixes, then by magnitude:\n+        derived_units_sortlist.sort()\n+        self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]\n\n```\n", "markup": "markdown", "html": "<p>Wow, that diff looks terrible. </p>\n<p>Here'a  a diff where I've artificially inserted whitespace to make diff identify which chunk corresponds to which a bit better:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- UnitConversionBase.py.orig  2018-03-02 16:58:46.128541294 +1100</span>\n<span class=\"gi\">+++ UnitConversionBase.py.changed   2018-03-02 16:58:21.876453153 +1100</span>\n<span class=\"gu\">@@ -18,6 +18,27 @@</span>\n import math\n from numpy import iterable, array\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+class _MultiplicativeConversion(object):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;Callable for conversion functions that are just multiplicative</span>\n<span class=\"gi\">+       transformations of another conversion function&quot;&quot;&quot;</span>\n<span class=\"gi\">+    def __init__(self, name, unprefixed_method, factor, to_base):</span>\n<span class=\"gi\">+        self.unprefixed_method = unprefixed_method</span>\n<span class=\"gi\">+        self.factor = float(factor)</span>\n<span class=\"gi\">+        self.to_base = bool(to_base)</span>\n<span class=\"gi\">+        self.__name__ = name</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def __get__(self, instance, class_):</span>\n<span class=\"gi\">+        &quot;&quot;&quot;Bind like an instance method&quot;&quot;&quot;</span>\n<span class=\"gi\">+        return MethodType(self, instance)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def __call__(self, value):</span>\n<span class=\"gi\">+        if self.to_base:</span>\n<span class=\"gi\">+            return self.unprefixed_method(value) * self.factor</span>\n<span class=\"gi\">+        else:</span>\n<span class=\"gi\">+            return self.unprefixed_method(value / self.factor)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def vectorise(method):\n     def f(instance, arg):\n         if iterable(arg):\n<span class=\"gu\">@@ -26,45 +47,16 @@</span>\n             return method(instance, arg)\n     return f\n\n<span class=\"gi\">+</span>\n class UnitConversion(object):\n<span class=\"gd\">-    unit_list = {&#39;p&#39;:&#39;10**-12&#39;,&#39;n&#39;:&#39;10**-9&#39;,&#39;u&#39;:&#39;10**-6&#39;,&#39;m&#39;:&#39;10**-3&#39;,</span>\n<span class=\"gd\">-                 &#39;k&#39;:&#39;10**3&#39;,&#39;M&#39;:&#39;10**6&#39;,&#39;G&#39;:&#39;10**9&#39;,&#39;T&#39;:&#39;10**12&#39;}</span>\n<span class=\"gd\">-    def __init__(self,params):</span>\n<span class=\"gd\">-        magnitudes = []</span>\n<span class=\"gd\">-        if &#39;magnitudes&#39; in params:</span>\n<span class=\"gd\">-            magnitudes = params[&#39;magnitudes&#39;]</span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        # order the unit order of magnitudes</span>\n<span class=\"gd\">-        # We want lowest (negative) to -3 and then largest positive to 3</span>\n<span class=\"gd\">-        temp_units = []</span>\n<span class=\"gd\">-        for unit in magnitudes:</span>\n<span class=\"gd\">-            try:</span>\n<span class=\"gd\">-                if unit == u&#39;\\u03bc&#39;: # a unicode &#39;mu&#39; symbol</span>\n<span class=\"gd\">-                    unit = &#39;u&#39;</span>\n<span class=\"gd\">-                magnitude = math.log10(eval(self.unit_list[unit]))</span>\n<span class=\"gd\">-                if magnitude &lt; 0:</span>\n<span class=\"gd\">-                    position = 0</span>\n<span class=\"gd\">-                    for u in temp_units:</span>\n<span class=\"gd\">-                        if math.log10(eval(u[1])) &gt; magnitude:</span>\n<span class=\"gd\">-                            break</span>\n<span class=\"gd\">-                        else:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                    </span>\n<span class=\"gd\">-                else:</span>\n<span class=\"gd\">-                    position = 0</span>\n<span class=\"gd\">-                    for u in temp_units:                        </span>\n<span class=\"gd\">-                        if math.log10(eval(u[1])) &lt; 0:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                        elif math.log10(eval(u[1])) &gt; magnitude:</span>\n<span class=\"gd\">-                            position += 1</span>\n<span class=\"gd\">-                        else:</span>\n<span class=\"gd\">-                            break</span>\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-                temp_units.insert(position,(unit,self.unit_list[unit]))</span>\n<span class=\"gd\">-            except Exception as e:</span>\n<span class=\"gd\">-                print(e)</span>\n<span class=\"gd\">-                pass</span>\n<span class=\"gi\">+    _magnitude_list = {&#39;p&#39;: 1e-12,&#39;n&#39;:1e-9, &#39;u&#39;:1e-6,&#39;m&#39;: 1e-3,</span>\n<span class=\"gi\">+                       &#39;k&#39;: 1e3, &#39;M&#39;: 1e6,&#39;G&#39;: 1e9,&#39;T&#39;: 1e12}</span>\n<span class=\"gi\">+    def __init__(self, params):</span>\n<span class=\"gi\">+        magnitudes = params.get(&#39;magnitudes&#39;, [])</span>\n\n<span class=\"gi\">+        # Convert any unicode &#39;mu&#39; symbol to a &#39;u&#39;:</span>\n<span class=\"gi\">+        magnitudes = [p if p != &#39;\\u03bc&#39; else &#39;u&#39; for p in magnitudes]</span>\n<span class=\"gi\">+        self._magnitudes = {prefix: self._magnitude_list[prefix] for prefix in magnitudes}</span>\n\n\n\n<span class=\"gu\">@@ -75,18 +67,29 @@</span>\n\n\n\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-        self.units = temp_units</span>\n<span class=\"gd\">-        </span>\n<span class=\"gd\">-        for unit in self.units:</span>\n<span class=\"gd\">-            for derived_unit in self.derived_units:</span>\n<span class=\"gd\">-                #if derived_unit == unit[2]:</span>\n<span class=\"gd\">-                exec(&quot;def &quot;+unit[0]+derived_unit+&quot;_to_base(self,value): return self.&quot;+derived_unit+&quot;_to_base(value)*&quot;+unit[1])</span>\n<span class=\"gd\">-                exec (&quot;a=&quot;+unit[0]+derived_unit+&quot;_to_base&quot;)</span>\n<span class=\"gd\">-                self.__dict__[unit[0]+derived_unit+&quot;_to_base&quot;] = MethodType(a,self,UnitConversion)</span>\n<span class=\"gd\">-                exec(&quot;def &quot;+unit[0]+derived_unit+&quot;_from_base(self,value): return self.&quot;+derived_unit+&quot;_from_base(value/float(&quot;+unit[1]+&quot;))&quot;)</span>\n<span class=\"gd\">-                exec (&quot;a=&quot;+unit[0]+derived_unit+&quot;_from_base&quot;)</span>\n<span class=\"gd\">-                self.__dict__[unit[0]+derived_unit+&quot;_from_base&quot;] = MethodType(a,self,UnitConversion)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        # A list of tuples we will use to sort the list of derived units once</span>\n<span class=\"gi\">+        # we produce the units for the provided magnitudes:</span>\n<span class=\"gi\">+        derived_units_sortlist = []</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        for i, derived_unit in enumerate(self.derived_units):</span>\n<span class=\"gi\">+            # Append the unit magnitude derived unit to the list:</span>\n<span class=\"gi\">+            sortinfo = (i, 1)</span>\n<span class=\"gi\">+            derived_units_sortlist.append((sortinfo, derived_unit))</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            # Dynamically create instance methods for each other magnitude:</span>\n<span class=\"gi\">+            unprefixed_to_base = getattr(self, derived_unit + &quot;_to_base&quot;)</span>\n<span class=\"gi\">+            unprefixed_from_base = getattr(self, derived_unit + &quot;_from_base&quot;)</span>\n<span class=\"gi\">+            for prefix, factor in self._magnitudes.items():</span>\n<span class=\"gi\">+                unit = prefix + derived_unit</span>\n<span class=\"gi\">+                to_base_name = unit + &quot;_to_base&quot;</span>\n<span class=\"gi\">+                from_base_name = unit + &quot;_from_base&quot;</span>\n<span class=\"gi\">+                self.__dict__[to_base_name] = _MultiplicativeConversion(to_base_name, unprefixed_to_base, factor, to_base=True)</span>\n<span class=\"gi\">+                self.__dict__[from_base_name] = _MultiplicativeConversion(from_base_name, unprefixed_from_base, factor, to_base=False)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+                # Append to the sortlist:</span>\n<span class=\"gi\">+                sortinfo = (i, factor)</span>\n<span class=\"gi\">+                derived_units_sortlist.append((sortinfo, unit))</span>\n\n\n\n<span class=\"gu\">@@ -98,18 +101,7 @@</span>\n\n\n\n<span class=\"gd\">-        # Make another loop to stop infinite regression!</span>\n<span class=\"gd\">-        derived_copy = copy.copy(self.derived_units)</span>\n<span class=\"gd\">-        for unit in self.units:</span>\n<span class=\"gd\">-            for derived_unit in derived_copy:        </span>\n<span class=\"gd\">-                # Add unit to derived unit list (put in correct order)</span>\n<span class=\"gd\">-                # Find derived unit location in list</span>\n<span class=\"gd\">-                pos = self.derived_units.index(derived_unit)</span>\n<span class=\"gd\">-                if math.log10(eval(unit[1])) &gt; 0:</span>\n<span class=\"gd\">-                    pos+=1</span>\n<span class=\"gd\">-                # Is this unit a negative or positive order of magnitude?</span>\n<span class=\"gd\">-                </span>\n<span class=\"gd\">-                #if unit[0] == &#39;u&#39;:</span>\n<span class=\"gd\">-                #    self.derived_units.insert(pos,&#39;\u00b5&#39;+derived_unit)</span>\n<span class=\"gd\">-                #else:</span>\n<span class=\"gd\">-                self.derived_units.insert(pos,unit[0]+derived_unit)</span>\n<span class=\"gi\">+        # Sort derived units first by position of the unit in the original</span>\n<span class=\"gi\">+        # list of derived_units without prefixes, then by magnitude:</span>\n<span class=\"gi\">+        derived_units_sortlist.sort()</span>\n<span class=\"gi\">+        self.derived_units = [unit for sortinfo, unit in derived_units_sortlist]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2018-03-02T06:01:39.734015+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-02T06:01:39.737435+00:00", "type": "pullrequest_comment", "id": 57754996}