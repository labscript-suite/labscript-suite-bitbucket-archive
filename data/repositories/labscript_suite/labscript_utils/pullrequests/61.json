{"rendered": {"description": {"raw": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "markup": "markdown", "html": "<p>Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. <code>callback</code> function can take a third argument, to discriminate between file modified, restored, or deleted events. <code>FileWatcher</code> is presently used in the <code>connection_table</code> plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:</p>\n<p><em>Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect.</em> </p>\n<p>This feature would permit the prompt to disappear should watched files be restored to their earlier state.</p>\n<p>Per the <code>FileWatcher</code> docstring:</p>\n<div class=\"codehilite\"><pre><span></span>    Detect modification, deletion, creation, or restoration of specific files\n    (and all files in specific folders).\n\n    callback -- elicited whenever file events are detected, requires at least\n        (name, info) arguments. Event specific callback requires \n        (name, info, event) arguments, where event is on of:\n        &#39;modified&#39;, &#39;deleted&#39; (or None), &#39;created&#39;, &#39;restored&#39;, &#39;original&#39;\n        The &#39;original&#39; event corresponds to a state change that results in \n        the original file info at instantiation.\n\n    Keyword arguments:\n    files -- List of specific files to watch.\n        A single file can be specified as a string (default None).\n    folders -- List of specific folders to watch.\n        A single folder can be specified as a string (default None).\n        If a file is created/deleted in/from any watched folder, it is added/\n        removed to/from the FileWatcher.files attribute.\n    modified_info -- File info to detect modification/restoration with.\n        If None (default), the initial modified info will be based on the \n        first polling of files.\n    hashable_types -- File extensions for which MD5 checksum will be used to\n        detect modification/restoration with (default None). Files of any \n        other type will be watched using their modified time. \n        Restoration cannot be detected for types not in hashable_types.\n    interval -- Polling interval in seconds (default 1).\n</pre></div>\n\n\n<ul>\n<li>In addition to <code>hashable_types</code>, added <code>polling_interval</code> keyword argument (formerly hard-coded).</li>\n<li>Use <code>inspect.getfullargspec</code> for Python 3 (<code>getargspec</code> is deprecated).</li>\n<li>Catch <code>IOError</code> in addition to <code>OSError</code> when file is deleted or unavailable.</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Allow FileWatcher to use hash for specified file types", "markup": "markdown", "html": "<p>Allow FileWatcher to use hash for specified file types</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:68b30562f3e1%0Dcddc6bf3d4a4?from_pullrequest_id=61"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:68b30562f3e1%0Dcddc6bf3d4a4?from_pullrequest_id=61"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/statuses_page=1.json"}}, "title": "Allow FileWatcher to use hash for specified file types", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}], "id": 61, "destination": {"commit": {"hash": "cddc6bf3d4a4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/cddc6bf3d4a4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/cddc6bf3d4a4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-11-26T04:34:26.517912+00:00", "summary": {"raw": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "markup": "markdown", "html": "<p>Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. <code>callback</code> function can take a third argument, to discriminate between file modified, restored, or deleted events. <code>FileWatcher</code> is presently used in the <code>connection_table</code> plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:</p>\n<p><em>Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect.</em> </p>\n<p>This feature would permit the prompt to disappear should watched files be restored to their earlier state.</p>\n<p>Per the <code>FileWatcher</code> docstring:</p>\n<div class=\"codehilite\"><pre><span></span>    Detect modification, deletion, creation, or restoration of specific files\n    (and all files in specific folders).\n\n    callback -- elicited whenever file events are detected, requires at least\n        (name, info) arguments. Event specific callback requires \n        (name, info, event) arguments, where event is on of:\n        &#39;modified&#39;, &#39;deleted&#39; (or None), &#39;created&#39;, &#39;restored&#39;, &#39;original&#39;\n        The &#39;original&#39; event corresponds to a state change that results in \n        the original file info at instantiation.\n\n    Keyword arguments:\n    files -- List of specific files to watch.\n        A single file can be specified as a string (default None).\n    folders -- List of specific folders to watch.\n        A single folder can be specified as a string (default None).\n        If a file is created/deleted in/from any watched folder, it is added/\n        removed to/from the FileWatcher.files attribute.\n    modified_info -- File info to detect modification/restoration with.\n        If None (default), the initial modified info will be based on the \n        first polling of files.\n    hashable_types -- File extensions for which MD5 checksum will be used to\n        detect modification/restoration with (default None). Files of any \n        other type will be watched using their modified time. \n        Restoration cannot be detected for types not in hashable_types.\n    interval -- Polling interval in seconds (default 1).\n</pre></div>\n\n\n<ul>\n<li>In addition to <code>hashable_types</code>, added <code>polling_interval</code> keyword argument (formerly hard-coded).</li>\n<li>Use <code>inspect.getfullargspec</code> for Python 3 (<code>getargspec</code> is deprecated).</li>\n<li>Catch <code>IOError</code> in addition to <code>OSError</code> when file is deleted or unavailable.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "38f2c9f5b526", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/38f2c9f5b526"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/38f2c9f5b526"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-02-05T16:26:22.383095+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}], "reason": "", "updated_on": "2019-12-05T02:21:01.990842+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "68b30562f3e1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/68b30562f3e1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/68b30562f3e1"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}