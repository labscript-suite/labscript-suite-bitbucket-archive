{"pagelen": 50, "values": [{"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "cddc6bf3d4a4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/cddc6bf3d4a4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/cddc6bf3d4a4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "38f2c9f5b526", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/38f2c9f5b526"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/38f2c9f5b526"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-12-05T02:21:02.006938+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/comments/90504360.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61/_/diff#comment-90504360"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}, "content": {"raw": "This sounds great! Sorry it took me so long to get around to looking at the PR.\n\nHas this been in use anywhere? I'm happy to merge if you're satisfied with the level of risk, however much it's been tested.\n\nI'll bump the version post-merge.", "markup": "markdown", "html": "<p>This sounds great! Sorry it took me so long to get around to looking at the PR.</p>\n<p>Has this been in use anywhere? I'm happy to merge if you're satisfied with the level of risk, however much it's been tested.</p>\n<p>I'll bump the version post-merge.</p>", "type": "rendered"}, "created_on": "2019-02-05T16:26:22.368598+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-05T16:26:22.383095+00:00", "type": "pullrequest_comment", "id": 90504360}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "2c5e11938aba", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2c5e11938aba.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2c5e11938aba"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "38f2c9f5b526", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/38f2c9f5b526"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/38f2c9f5b526"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2018-11-27T09:02:14.056227+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "5e2604b7cec2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5e2604b7cec2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5e2604b7cec2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c5bb2c1563f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/4c5bb2c1563f"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/4c5bb2c1563f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2018-11-26T05:28:14.967553+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "5e2604b7cec2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5e2604b7cec2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5e2604b7cec2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb16356e91f7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/cb16356e91f7"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/cb16356e91f7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2018-11-26T05:26:09.553446+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "5e2604b7cec2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5e2604b7cec2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5e2604b7cec2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f9cb1d8ea2c6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/f9cb1d8ea2c6"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/f9cb1d8ea2c6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2018-11-26T04:34:26.638865+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}, {"update": {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "title": "Allow FileWatcher to use hash for specified file types", "destination": {"commit": {"hash": "5e2604b7cec2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5e2604b7cec2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5e2604b7cec2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f9cb1d8ea2c6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/f9cb1d8ea2c6"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/f9cb1d8ea2c6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "state": "OPEN", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "date": "2018-11-26T04:34:26.576860+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}}, "title": "Allow FileWatcher to use hash for specified file types"}}]}