{"rendered": {"description": {"raw": "This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.\r\n\r\n* Added ls_zprocess, which wraps zprocess classes with singletons and\r\n  subclasses configured to use labconfig encryption settings, as well\r\n  as zlock host and port settings, and zprocess.remote  port setting.\r\n\r\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\r\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\r\n  not normally be run manually.\r\n\r\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\r\n  Note that once h5_lock is imported by an application, or once a logging handler\r\n  is configured, the ProcessTree object created is set as the zprocess default\r\n  process tree. This is backward compatibility for applications not using the\r\n  wrapped classes. This does not mean encryption can be turned on and work\r\n  everywhere, that will still be a backward incompatible jump. But it does mean\r\n  that the settings are inherited by subprocesses using\r\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\r\n  compatibility for labscript suite programs in their current form.\r\n\r\n* Bump version so applications may make use of these classes and we can\r\n  begin to move them to a state where encryption can be turned on.\r\n  This should be in place before remote devices are implemented in BLACS.\r\n\r\nThese changes are intended to be backward compatible so far, but encryption\r\ncannot be used until applications have their use of zprocess ported to use\r\nthese wrappers.\r\n\r\nI would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.", "markup": "markdown", "html": "<p>This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.</p>\n<ul>\n<li>\n<p>Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.</p>\n</li>\n<li>\n<p>Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.</p>\n</li>\n<li>\n<p>Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\n  compatibility for labscript suite programs in their current form.</p>\n</li>\n<li>\n<p>Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.</p>\n</li>\n</ul>\n<p>These changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.</p>\n<p>I would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.</p>", "type": "rendered"}, "title": {"raw": "Beginning the great zprocess migration for remote device support", "markup": "markdown", "html": "<p>Beginning the great zprocess migration for remote device support</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.\r\n\r\n* Added ls_zprocess, which wraps zprocess classes with singletons and\r\n  subclasses configured to use labconfig encryption settings, as well\r\n  as zlock host and port settings, and zprocess.remote  port setting.\r\n\r\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\r\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\r\n  not normally be run manually.\r\n\r\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\r\n  Note that once h5_lock is imported by an application, or once a logging handler\r\n  is configured, the ProcessTree object created is set as the zprocess default\r\n  process tree. This is backward compatibility for applications not using the\r\n  wrapped classes. This does not mean encryption can be turned on and work\r\n  everywhere, that will still be a backward incompatible jump. But it does mean\r\n  that the settings are inherited by subprocesses using\r\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\r\n  compatibility for labscript suite programs in their current form.\r\n\r\n* Bump version so applications may make use of these classes and we can\r\n  begin to move them to a state where encryption can be turned on.\r\n  This should be in place before remote devices are implemented in BLACS.\r\n\r\nThese changes are intended to be backward compatible so far, but encryption\r\ncannot be used until applications have their use of zprocess ported to use\r\nthese wrappers.\r\n\r\nI would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:e31de7d5a310%0D922b19ea1447?from_pullrequest_id=66"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/66"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:e31de7d5a310%0D922b19ea1447?from_pullrequest_id=66"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/statuses_page=1.json"}}, "title": "Beginning the great zprocess migration for remote device support", "close_source_branch": true, "reviewers": [{"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}], "id": 66, "destination": {"commit": {"hash": "922b19ea1447", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/922b19ea1447.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/922b19ea1447"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-06T19:14:08.095632+00:00", "summary": {"raw": "This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.\r\n\r\n* Added ls_zprocess, which wraps zprocess classes with singletons and\r\n  subclasses configured to use labconfig encryption settings, as well\r\n  as zlock host and port settings, and zprocess.remote  port setting.\r\n\r\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\r\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\r\n  not normally be run manually.\r\n\r\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\r\n  Note that once h5_lock is imported by an application, or once a logging handler\r\n  is configured, the ProcessTree object created is set as the zprocess default\r\n  process tree. This is backward compatibility for applications not using the\r\n  wrapped classes. This does not mean encryption can be turned on and work\r\n  everywhere, that will still be a backward incompatible jump. But it does mean\r\n  that the settings are inherited by subprocesses using\r\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\r\n  compatibility for labscript suite programs in their current form.\r\n\r\n* Bump version so applications may make use of these classes and we can\r\n  begin to move them to a state where encryption can be turned on.\r\n  This should be in place before remote devices are implemented in BLACS.\r\n\r\nThese changes are intended to be backward compatible so far, but encryption\r\ncannot be used until applications have their use of zprocess ported to use\r\nthese wrappers.\r\n\r\nI would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.", "markup": "markdown", "html": "<p>This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.</p>\n<ul>\n<li>\n<p>Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.</p>\n</li>\n<li>\n<p>Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.</p>\n</li>\n<li>\n<p>Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\n  compatibility for labscript suite programs in their current form.</p>\n</li>\n<li>\n<p>Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.</p>\n</li>\n</ul>\n<p>These changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.</p>\n<p>I would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.</p>", "type": "rendered"}, "source": {"commit": {"hash": "23495fab0c54", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/23495fab0c54"}, "html": {"href": "#!/cbillington/labscript_utils/commits/23495fab0c54"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "zprocess_changes"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "PARTICIPANT", "participated_on": "2019-02-11T17:19:21.967868+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "", "updated_on": "2019-02-11T17:19:28.750299+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e31de7d5a310", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e31de7d5a310.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e31de7d5a310"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}