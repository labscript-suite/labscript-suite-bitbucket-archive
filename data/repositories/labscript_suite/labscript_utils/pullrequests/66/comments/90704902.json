{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/comments/90704902.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/66/_/diff#comment-90704902"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 66, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/66"}}, "title": "Beginning the great zprocess migration for remote device support"}, "content": {"raw": "To give some context, zprocess used to be very stateless, since launching a subprocess was just that, and didn't require any extra knowledge about encryption keys or whatnot. It has since been refactored so that everything is done through a ProcessTree object, from which you launch subprocesses, instantiate zlock Locks, etc. The ProcessTree object holds state that needs to be inherited by subprocesses about where the zlock server is, where the zlog server is, and what encryption key to use for everything. \n\nPart of this refactoring was adding backward-compatibility functions and classes in place to translate the old way of doing things into the new way so that things keep working (though without the new features). Also, there are checks to make sure you're not doing insecure communication, but these are all disabled for the moment for backward compatibility. So there has been a lot of work going on in zprocess behind the scenes to get it ready for remote devices and encrypted everything, but it has been mostly invisible from the perspective of labscript apps because of the backward compatibility wrappers. The backward compatibility is to allow everything to be ported - once that's all done, there will be a major version bump of zprocess removing the backward compatibility, or at least forcing you to add a \"I know this is insecure\" flag to continue to use it, and applications that have been ported should continue to work. Ideally this will coincide with documentation about how to use the zprocess API, so that any non-labscript code using it can be ported too. Porting is pretty straightforward, but without docs or examples probably wouldn't seem like it.", "markup": "markdown", "html": "<p>To give some context, zprocess used to be very stateless, since launching a subprocess was just that, and didn't require any extra knowledge about encryption keys or whatnot. It has since been refactored so that everything is done through a ProcessTree object, from which you launch subprocesses, instantiate zlock Locks, etc. The ProcessTree object holds state that needs to be inherited by subprocesses about where the zlock server is, where the zlog server is, and what encryption key to use for everything. </p>\n<p>Part of this refactoring was adding backward-compatibility functions and classes in place to translate the old way of doing things into the new way so that things keep working (though without the new features). Also, there are checks to make sure you're not doing insecure communication, but these are all disabled for the moment for backward compatibility. So there has been a lot of work going on in zprocess behind the scenes to get it ready for remote devices and encrypted everything, but it has been mostly invisible from the perspective of labscript apps because of the backward compatibility wrappers. The backward compatibility is to allow everything to be ported - once that's all done, there will be a major version bump of zprocess removing the backward compatibility, or at least forcing you to add a \"I know this is insecure\" flag to continue to use it, and applications that have been ported should continue to work. Ideally this will coincide with documentation about how to use the zprocess API, so that any non-labscript code using it can be ported too. Porting is pretty straightforward, but without docs or examples probably wouldn't seem like it.</p>", "type": "rendered"}, "created_on": "2019-02-06T21:35:33.377785+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-06T21:35:33.386397+00:00", "type": "pullrequest_comment", "id": 90704902}