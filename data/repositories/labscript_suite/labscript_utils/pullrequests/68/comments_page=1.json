{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91022980.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91022980"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 68, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68"}}, "title": "Winshell exe removal"}, "content": {"raw": "The renaming of the file obscures the diff, here it is:\n\n```diff\n--- winshell/__init__.py\t2019-02-08 23:47:55.103007933 -0500\n+++ winshell.py\t2019-02-08 16:39:15.541223000 -0500\n@@ -2,10 +2,8 @@\n \n import os\n import sys\n-import subprocess\n-\n-this_folder = os.path.realpath(os.path.dirname(__file__))\n-Win7AppId = os.path.join(this_folder, 'Win7AppId1.1.exe')\n+if sys.version_info.major == 2:\n+    str = unicode\n \n for path in sys.path:\n     if os.path.exists(os.path.join(path, '.is_labscript_suite_install_dir')):\n@@ -31,8 +29,10 @@\n                    'lyse': 'lyse - the labscript suite'}\n \n def make_shortcut(path, target, arguments, working_directory, icon_path, description, appid):\n-    import sys, os\n+    from win32com.shell import shellcon\n     from win32com.client import Dispatch\n+    from win32com.propsys import propsys, pscon\n+    import pythoncom\n     shell = Dispatch('WScript.Shell')\n     shortcut = shell.CreateShortcut(path)\n     shortcut.TargetPath = target\n@@ -41,14 +41,16 @@\n     shortcut.IconLocation = icon_path\n     shortcut.Description = description\n     shortcut.save()\n-    # The normal windows API calls don't seem to be able to set the appid of the shortcut.\n-    # The required API calls are either absent or not wrapped by pywin32. So we use this\n-    # command line utility that does it in C++:\n-    child = subprocess.Popen([Win7AppId, path, appid],\n-                             stdout = subprocess.PIPE, stderr = subprocess.PIPE)\n-    stdout, stderr = child.communicate()\n-    if child.returncode != 0:\n-        raise OSError('Failed to set UserModelAppId of shortcut.\\n' + stdout + stderr)\n+\n+    store = propsys.SHGetPropertyStoreFromParsingName(\n+        path, None, shellcon.GPS_READWRITE, propsys.IID_IPropertyStore\n+    )\n+    store.SetValue(\n+        pscon.PKEY_AppUserModel_ID,\n+        propsys.PROPVARIANTType(str(appid), pythoncom.VT_LPWSTR),\n+    )\n+    store.Commit()\n+\n \n def set_appusermodel(window_id, appid, icon_path, relaunch_command, relaunch_display_name):\n     from win32com.propsys import propsys, pscon\n@@ -70,7 +72,6 @@\n     \"\"\"Removes given .lnk file from the start menu.\n     If entry not present, does nothing.\"\"\"\n     from win32com.client import Dispatch\n-    import shutil\n     name = os.path.basename(name)\n     objShell = Dispatch(\"WScript.Shell\")\n     start_menu_programs = objShell.SpecialFolders(\"Programs\")\n```", "markup": "markdown", "html": "<p>The renaming of the file obscures the diff, here it is:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- winshell/__init__.py    2019-02-08 23:47:55.103007933 -0500</span>\n<span class=\"gi\">+++ winshell.py 2019-02-08 16:39:15.541223000 -0500</span>\n<span class=\"gu\">@@ -2,10 +2,8 @@</span>\n\n import os\n import sys\n<span class=\"gd\">-import subprocess</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-this_folder = os.path.realpath(os.path.dirname(__file__))</span>\n<span class=\"gd\">-Win7AppId = os.path.join(this_folder, &#39;Win7AppId1.1.exe&#39;)</span>\n<span class=\"gi\">+if sys.version_info.major == 2:</span>\n<span class=\"gi\">+    str = unicode</span>\n\n for path in sys.path:\n     if os.path.exists(os.path.join(path, &#39;.is_labscript_suite_install_dir&#39;)):\n<span class=\"gu\">@@ -31,8 +29,10 @@</span>\n                    &#39;lyse&#39;: &#39;lyse - the labscript suite&#39;}\n\n def make_shortcut(path, target, arguments, working_directory, icon_path, description, appid):\n<span class=\"gd\">-    import sys, os</span>\n<span class=\"gi\">+    from win32com.shell import shellcon</span>\n     from win32com.client import Dispatch\n<span class=\"gi\">+    from win32com.propsys import propsys, pscon</span>\n<span class=\"gi\">+    import pythoncom</span>\n     shell = Dispatch(&#39;WScript.Shell&#39;)\n     shortcut = shell.CreateShortcut(path)\n     shortcut.TargetPath = target\n<span class=\"gu\">@@ -41,14 +41,16 @@</span>\n     shortcut.IconLocation = icon_path\n     shortcut.Description = description\n     shortcut.save()\n<span class=\"gd\">-    # The normal windows API calls don&#39;t seem to be able to set the appid of the shortcut.</span>\n<span class=\"gd\">-    # The required API calls are either absent or not wrapped by pywin32. So we use this</span>\n<span class=\"gd\">-    # command line utility that does it in C++:</span>\n<span class=\"gd\">-    child = subprocess.Popen([Win7AppId, path, appid],</span>\n<span class=\"gd\">-                             stdout = subprocess.PIPE, stderr = subprocess.PIPE)</span>\n<span class=\"gd\">-    stdout, stderr = child.communicate()</span>\n<span class=\"gd\">-    if child.returncode != 0:</span>\n<span class=\"gd\">-        raise OSError(&#39;Failed to set UserModelAppId of shortcut.\\n&#39; + stdout + stderr)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    store = propsys.SHGetPropertyStoreFromParsingName(</span>\n<span class=\"gi\">+        path, None, shellcon.GPS_READWRITE, propsys.IID_IPropertyStore</span>\n<span class=\"gi\">+    )</span>\n<span class=\"gi\">+    store.SetValue(</span>\n<span class=\"gi\">+        pscon.PKEY_AppUserModel_ID,</span>\n<span class=\"gi\">+        propsys.PROPVARIANTType(str(appid), pythoncom.VT_LPWSTR),</span>\n<span class=\"gi\">+    )</span>\n<span class=\"gi\">+    store.Commit()</span>\n<span class=\"gi\">+</span>\n\n def set_appusermodel(window_id, appid, icon_path, relaunch_command, relaunch_display_name):\n     from win32com.propsys import propsys, pscon\n<span class=\"gu\">@@ -70,7 +72,6 @@</span>\n     &quot;&quot;&quot;Removes given .lnk file from the start menu.\n     If entry not present, does nothing.&quot;&quot;&quot;\n     from win32com.client import Dispatch\n<span class=\"gd\">-    import shutil</span>\n     name = os.path.basename(name)\n     objShell = Dispatch(&quot;WScript.Shell&quot;)\n     start_menu_programs = objShell.SpecialFolders(&quot;Programs&quot;)\n</pre></div>", "type": "rendered"}, "created_on": "2019-02-09T04:50:10.366508+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-09T04:52:54.834511+00:00", "type": "pullrequest_comment", "id": 91022980}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91032369.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91032369"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 68, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68"}}, "title": "Winshell exe removal"}, "content": {"raw": "How does this interact with [labscript installer pull request 6](#!/labscript_suite/installer/pull-requests/6/make-shortcuts-compatible-with-conda/)? I\u2019m mainly wondering if the app id\u2019s need to also be virtual environment specific?\n\nI guess that\u2019s not necessarily strictly part of this pull request, but doing that would make it easy to test this pull request, as we would be certain there weren\u2019t weird windows caching effects going on \\(since each labscript install would have a unique app id\\)", "markup": "markdown", "html": "<p>How does this interact with <a data-is-external-link=\"true\" href=\"#!/labscript_suite/installer/pull-requests/6/make-shortcuts-compatible-with-conda/\" rel=\"nofollow\">labscript installer pull request 6</a>? I\u2019m mainly wondering if the app id\u2019s need to also be virtual environment specific?</p>\n<p>I guess that\u2019s not necessarily strictly part of this pull request, but doing that would make it easy to test this pull request, as we would be certain there weren\u2019t weird windows caching effects going on (since each labscript install would have a unique app id)</p>", "type": "rendered"}, "created_on": "2019-02-10T03:24:19.616883+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2019-02-10T03:24:19.623336+00:00", "type": "pullrequest_comment", "id": 91032369}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91032443.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91032443"}}, "parent": {"id": 91032369, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91032369.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91032369"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 68, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68"}}, "title": "Winshell exe removal"}, "content": {"raw": "It seems to work excellently - I\u2019ve got two pinned lyse launchers on the panel for different envs, and their windows associate with the correct one.  If I launch from a terminal with \u2018python -m lyse\u2019 it associates with the correct one depending on what environment I\u2019m launching from. however, this is because the _install directory_ is part of the appid, so they are already kept separate.\n\nFor the case where you might have two environments hooked up to the _same_ labscript install, it presumably won\u2019t work, so I think we should add the environment to the appID as well.\n\nTo support this officially, I\u2019m looking into considering \u2018installing' and \u2018registering\u2019 to be two different things - installing would mean putting the labscript suite files in a folder, and \u2018registering\u2019 would be putting the .pth file in the Python environment and creating start menu shortcuts. In this way you could \u2018register\u2019 the same install with multiple Python environments. Or, more what I\u2019m thinking, you could re-attach the labscript suite to a new anaconda if you need to bomb out your anaconda install for some reason \\(I\u2019m also thinking that depending on where the .pth file is exactly, it may be removed if the minor version of Python is updated in a conda environment\\). I\u2019ve already been doing this more or less to test the same code on both Python 2 and Python 3 without making two labscript suite installs.\n\nThis might as well be supported - the installer does it anyway, I\u2019m just thinking of exposing that functionality in the script that gets left in the labscript suite directory, it\u2019s currently called \u2018uninstall.py\u2019 but it\u2019s actually the same script as the installer, just with different options available. So I\u2019m thinking of renaming it \u2018manage.py\u2019 and exposing a \u2018register\u2019 and \u2018unregister\u2019 command to hook and unhook it from different python envs, and to add and remove shortcuts, without changing the actual labscript suite files on disk. It would also be able to detect dangling shortcuts and clean them up, this would not be hard and would ensure things remain neat without having to reinstall.\n\nThat\u2019s a \\(slightly\\) bigger job, but I\u2019m looking into improving installing at the moment anyway so I\u2019ll probably get to it, but it\u2019s totally consistent with just including the env in the appid. I\u2019ll include the file path to the current conda environment as well as the install directory.", "markup": "markdown", "html": "<p>It seems to work excellently - I\u2019ve got two pinned lyse launchers on the panel for different envs, and their windows associate with the correct one.  If I launch from a terminal with \u2018python -m lyse\u2019 it associates with the correct one depending on what environment I\u2019m launching from. however, this is because the <em>install directory</em> is part of the appid, so they are already kept separate.</p>\n<p>For the case where you might have two environments hooked up to the <em>same</em> labscript install, it presumably won\u2019t work, so I think we should add the environment to the appID as well.</p>\n<p>To support this officially, I\u2019m looking into considering \u2018installing' and \u2018registering\u2019 to be two different things - installing would mean putting the labscript suite files in a folder, and \u2018registering\u2019 would be putting the .pth file in the Python environment and creating start menu shortcuts. In this way you could \u2018register\u2019 the same install with multiple Python environments. Or, more what I\u2019m thinking, you could re-attach the labscript suite to a new anaconda if you need to bomb out your anaconda install for some reason (I\u2019m also thinking that depending on where the .pth file is exactly, it may be removed if the minor version of Python is updated in a conda environment). I\u2019ve already been doing this more or less to test the same code on both Python 2 and Python 3 without making two labscript suite installs.</p>\n<p>This might as well be supported - the installer does it anyway, I\u2019m just thinking of exposing that functionality in the script that gets left in the labscript suite directory, it\u2019s currently called \u2018uninstall.py\u2019 but it\u2019s actually the same script as the installer, just with different options available. So I\u2019m thinking of renaming it \u2018manage.py\u2019 and exposing a \u2018register\u2019 and \u2018unregister\u2019 command to hook and unhook it from different python envs, and to add and remove shortcuts, without changing the actual labscript suite files on disk. It would also be able to detect dangling shortcuts and clean them up, this would not be hard and would ensure things remain neat without having to reinstall.</p>\n<p>That\u2019s a (slightly) bigger job, but I\u2019m looking into improving installing at the moment anyway so I\u2019ll probably get to it, but it\u2019s totally consistent with just including the env in the appid. I\u2019ll include the file path to the current conda environment as well as the install directory.</p>", "type": "rendered"}, "created_on": "2019-02-10T03:47:26.584832+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-10T03:47:26.594096+00:00", "type": "pullrequest_comment", "id": 91032443}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91032541.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91032541"}}, "parent": {"id": 91032443, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments/91032443.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68/_/diff#comment-91032443"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 68, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68"}}, "title": "Winshell exe removal"}, "content": {"raw": "And after including the Python interpreter path in the AppIDs it seems to work well still, which is some evidence that the python appid code is actually working.", "markup": "markdown", "html": "<p>And after including the Python interpreter path in the AppIDs it seems to work well still, which is some evidence that the python appid code is actually working.</p>", "type": "rendered"}, "created_on": "2019-02-10T04:08:27.087363+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-10T04:08:27.097274+00:00", "type": "pullrequest_comment", "id": 91032541}], "page": 1, "size": 4}