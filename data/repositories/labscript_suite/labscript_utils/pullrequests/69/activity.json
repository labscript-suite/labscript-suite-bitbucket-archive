{"pagelen": 50, "values": [{"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "73c42f98ed4c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/73c42f98ed4c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/73c42f98ed4c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0f31a19e38e2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0f31a19e38e2"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0f31a19e38e2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-15T21:22:17.335977+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "73c42f98ed4c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/73c42f98ed4c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/73c42f98ed4c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0f31a19e38e2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0f31a19e38e2"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0f31a19e38e2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-15T21:22:16.572032+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/comments/105020357.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69/_/diff#comment-105020357"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}, "content": {"raw": "Testing shows no issues. Will merge Monday June 17th if there are no issues.", "markup": "markdown", "html": "<p>Testing shows no issues. Will merge Monday June 17th if there are no issues.</p>", "type": "rendered"}, "created_on": "2019-06-09T16:32:06.896046+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-09T16:32:06.902308+00:00", "type": "pullrequest_comment", "id": 105020357}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/comments/104870903.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69/_/diff#comment-104870903"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}, "content": {"raw": "importlib_metadata has been updated to fix the bug, and the relevant version is in anaconda.\n\nI updated this PR to rely on that version.\n\nThis is now ready for testing. It should be a speed boost for startup time of all the labscript suite apps as they will no longer need to import a bunch of unnecessary things just to check versions of things that they *might* import later.\n\nI will deploy to our lab for testing.", "markup": "markdown", "html": "<p>importlib_metadata has been updated to fix the bug, and the relevant version is in anaconda.</p>\n<p>I updated this PR to rely on that version.</p>\n<p>This is now ready for testing. It should be a speed boost for startup time of all the labscript suite apps as they will no longer need to import a bunch of unnecessary things just to check versions of things that they <em>might</em> import later.</p>\n<p>I will deploy to our lab for testing.</p>", "type": "rendered"}, "created_on": "2019-06-07T03:31:03.697838+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-06-07T03:31:03.707763+00:00", "type": "pullrequest_comment", "id": 104870903}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "783680f0d6f0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/783680f0d6f0.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/783680f0d6f0"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0f31a19e38e2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0f31a19e38e2"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0f31a19e38e2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-07T03:28:37.213915+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "783680f0d6f0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/783680f0d6f0.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/783680f0d6f0"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2200f9e21d14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/2200f9e21d14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/2200f9e21d14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-06-05T19:58:18.041037+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "d51bd1da3391", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d51bd1da3391.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d51bd1da3391"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2200f9e21d14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/2200f9e21d14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/2200f9e21d14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-23T17:45:02.531174+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/comments/91161972.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69/_/diff#comment-91161972"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}, "content": {"raw": "I\u2019m going to leave this pull request to sit until my fix for importlib\\_metadata is in anaconda repos - maybe 2 months.", "markup": "markdown", "html": "<p>I\u2019m going to leave this pull request to sit until my fix for importlib_metadata is in anaconda repos - maybe 2 months.</p>", "type": "rendered"}, "created_on": "2019-02-11T17:16:31.169599+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-11T17:16:31.178880+00:00", "type": "pullrequest_comment", "id": 91161972}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "922b19ea1447", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/922b19ea1447.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/922b19ea1447"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2200f9e21d14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/2200f9e21d14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/2200f9e21d14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-11T17:04:22.211864+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "06b85480baa7", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/06b85480baa7"}, "html": {"href": "#!/cbillington/labscript_utils/commits/06b85480baa7"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-11T16:00:49.483137+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "165e4a7156bf", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/165e4a7156bf"}, "html": {"href": "#!/cbillington/labscript_utils/commits/165e4a7156bf"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-11T07:05:39.349005+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/comments/91051783.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69/_/diff#comment-91051783"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}, "content": {"raw": "This is not satisfactory at the moment because [this bug](https://gitlab.com/python-devs/importlib_metadata/issues/43) in importlib\\_metadata means it does not work with all packages. I don\u2019t think I will change anything about how this PRw works - there is basicaly no other way to do this, so the bug in importlib\\_metadata would need to be fixed if we want to check versions without importing modules.\n\nAt the moment none of the packages we use have this issue, but still. Maybe I will fix the bug in importlib\\_metadata \\(which is included in anaconda and en-route to being a standard library module in Python 3.8\\). In any case let\u2019s not merge this yet.\n\nEdit: [pull request](https://gitlab.com/python-devs/importlib_metadata/merge_requests/38) submitted to fix importlib\\_metadata.", "markup": "markdown", "html": "<p>This is not satisfactory at the moment because <a data-is-external-link=\"true\" href=\"https://gitlab.com/python-devs/importlib_metadata/issues/43\" rel=\"nofollow\">this bug</a> in importlib_metadata means it does not work with all packages. I don\u2019t think I will change anything about how this PRw works - there is basicaly no other way to do this, so the bug in importlib_metadata would need to be fixed if we want to check versions without importing modules.</p>\n<p>At the moment none of the packages we use have this issue, but still. Maybe I will fix the bug in importlib_metadata (which is included in anaconda and en-route to being a standard library module in Python 3.8). In any case let\u2019s not merge this yet.</p>\n<p>Edit: <a data-is-external-link=\"true\" href=\"https://gitlab.com/python-devs/importlib_metadata/merge_requests/38\" rel=\"nofollow\">pull request</a> submitted to fix importlib_metadata.</p>", "type": "rendered"}, "created_on": "2019-02-11T03:44:54.838710+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-02-11T05:20:49.549820+00:00", "type": "pullrequest_comment", "id": 91051783}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5251521c0ac4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5251521c0ac4"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5251521c0ac4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-11T03:31:09.423610+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "94dd223cbe71", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/94dd223cbe71"}, "html": {"href": "#!/cbillington/labscript_utils/commits/94dd223cbe71"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-11T03:16:51.050824+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "befd20d5b765", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/befd20d5b765"}, "html": {"href": "#!/cbillington/labscript_utils/commits/befd20d5b765"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-10T02:56:48.751136+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}, {"update": {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "title": "check_version without importing modules", "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "befd20d5b765", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/befd20d5b765"}, "html": {"href": "#!/cbillington/labscript_utils/commits/befd20d5b765"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-02-10T02:56:48.690005+00:00"}, "pull_request": {"type": "pullrequest", "id": 69, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}}, "title": "check_version without importing modules"}}]}