{"rendered": {"description": {"raw": "Expand environment variables in labconfig using `configparser.BasicInterpolation`.\r\n\r\n* Requires using the backport of configparser for Python 2.\r\n* Replaced all instances of `SafeConfigParser` class as it has been renamed to `ConfigParser`.\r\n\r\nExample usage in labconfig on Windows:\r\n\r\n```\r\n[programs]\r\ntext_editor = %%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe\r\ntext_editor_arguments = {file}\r\nhdf5_viewer = %%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\r\nhdf5_viewer_arguments = {file}\r\n```\r\n\r\nI opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.\r\n\r\nPre-filtering also works \\(and doesn\u2019t require escaping % characters\\) but is potentially less safe/backwards compatible. This can be implemented using:\r\n\r\n```python\r\nclass EnvInterpolation(configparser.BasicInterpolation):\r\n    \"\"\"Interpolation which expands environment variables in values,\r\n    by pre-filtering BasicInterpolation.before_get()\"\"\"\r\n\r\n    def before_get(self, parser, section, option, value, defaults):\r\n        value = os.path.expandvars(value)\r\n        return super(EnvInterpolation, self).before_get(parser, section, option, value, defaults)\r\n```\r\n\r\nIdea for method override is from [https://stackoverflow.com/a/49529659](https://stackoverflow.com/a/49529659).", "markup": "markdown", "html": "<p>Expand environment variables in labconfig using <code>configparser.BasicInterpolation</code>.</p>\n<ul>\n<li>Requires using the backport of configparser for Python 2.</li>\n<li>Replaced all instances of <code>SafeConfigParser</code> class as it has been renamed to <code>ConfigParser</code>.</li>\n</ul>\n<p>Example usage in labconfig on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[programs]</span>\n<span class=\"na\">text_editor</span> <span class=\"o\">=</span> <span class=\"s\">%%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe</span>\n<span class=\"na\">text_editor_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n<span class=\"na\">hdf5_viewer</span> <span class=\"o\">=</span> <span class=\"s\">%%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat</span>\n<span class=\"na\">hdf5_viewer_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n</pre></div>\n\n\n<p>I opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.</p>\n<p>Pre-filtering also works (and doesn\u2019t require escaping % characters) but is potentially less safe/backwards compatible. This can be implemented using:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">EnvInterpolation</span><span class=\"p\">(</span><span class=\"n\">configparser</span><span class=\"o\">.</span><span class=\"n\">BasicInterpolation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Interpolation which expands environment variables in values,</span>\n<span class=\"sd\">    by pre-filtering BasicInterpolation.before_get()&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">before_get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expandvars</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">EnvInterpolation</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">before_get</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Idea for method override is from <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/49529659\" rel=\"nofollow\">https://stackoverflow.com/a/49529659</a>.</p>", "type": "rendered"}, "title": {"raw": "Expand environment variables in labconfig", "markup": "markdown", "html": "<p>Expand environment variables in labconfig</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Expand environment variables in labconfig using `configparser.BasicInterpolation`.\r\n\r\n* Requires using the backport of configparser for Python 2.\r\n* Replaced all instances of `SafeConfigParser` class as it has been renamed to `ConfigParser`.\r\n\r\nExample usage in labconfig on Windows:\r\n\r\n```\r\n[programs]\r\ntext_editor = %%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe\r\ntext_editor_arguments = {file}\r\nhdf5_viewer = %%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\r\nhdf5_viewer_arguments = {file}\r\n```\r\n\r\nI opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.\r\n\r\nPre-filtering also works \\(and doesn\u2019t require escaping % characters\\) but is potentially less safe/backwards compatible. This can be implemented using:\r\n\r\n```python\r\nclass EnvInterpolation(configparser.BasicInterpolation):\r\n    \"\"\"Interpolation which expands environment variables in values,\r\n    by pre-filtering BasicInterpolation.before_get()\"\"\"\r\n\r\n    def before_get(self, parser, section, option, value, defaults):\r\n        value = os.path.expandvars(value)\r\n        return super(EnvInterpolation, self).before_get(parser, section, option, value, defaults)\r\n```\r\n\r\nIdea for method override is from [https://stackoverflow.com/a/49529659](https://stackoverflow.com/a/49529659).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:1bd00db6968c%0Dd51bd1da3391?from_pullrequest_id=76"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/76"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:1bd00db6968c%0Dd51bd1da3391?from_pullrequest_id=76"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/statuses_page=1.json"}}, "title": "Expand environment variables in labconfig", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}], "id": 76, "destination": {"commit": {"hash": "d51bd1da3391", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d51bd1da3391.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d51bd1da3391"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-04-24T07:04:17.038709+00:00", "summary": {"raw": "Expand environment variables in labconfig using `configparser.BasicInterpolation`.\r\n\r\n* Requires using the backport of configparser for Python 2.\r\n* Replaced all instances of `SafeConfigParser` class as it has been renamed to `ConfigParser`.\r\n\r\nExample usage in labconfig on Windows:\r\n\r\n```\r\n[programs]\r\ntext_editor = %%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe\r\ntext_editor_arguments = {file}\r\nhdf5_viewer = %%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\r\nhdf5_viewer_arguments = {file}\r\n```\r\n\r\nI opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.\r\n\r\nPre-filtering also works \\(and doesn\u2019t require escaping % characters\\) but is potentially less safe/backwards compatible. This can be implemented using:\r\n\r\n```python\r\nclass EnvInterpolation(configparser.BasicInterpolation):\r\n    \"\"\"Interpolation which expands environment variables in values,\r\n    by pre-filtering BasicInterpolation.before_get()\"\"\"\r\n\r\n    def before_get(self, parser, section, option, value, defaults):\r\n        value = os.path.expandvars(value)\r\n        return super(EnvInterpolation, self).before_get(parser, section, option, value, defaults)\r\n```\r\n\r\nIdea for method override is from [https://stackoverflow.com/a/49529659](https://stackoverflow.com/a/49529659).", "markup": "markdown", "html": "<p>Expand environment variables in labconfig using <code>configparser.BasicInterpolation</code>.</p>\n<ul>\n<li>Requires using the backport of configparser for Python 2.</li>\n<li>Replaced all instances of <code>SafeConfigParser</code> class as it has been renamed to <code>ConfigParser</code>.</li>\n</ul>\n<p>Example usage in labconfig on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[programs]</span>\n<span class=\"na\">text_editor</span> <span class=\"o\">=</span> <span class=\"s\">%%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe</span>\n<span class=\"na\">text_editor_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n<span class=\"na\">hdf5_viewer</span> <span class=\"o\">=</span> <span class=\"s\">%%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat</span>\n<span class=\"na\">hdf5_viewer_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n</pre></div>\n\n\n<p>I opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.</p>\n<p>Pre-filtering also works (and doesn\u2019t require escaping % characters) but is potentially less safe/backwards compatible. This can be implemented using:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">EnvInterpolation</span><span class=\"p\">(</span><span class=\"n\">configparser</span><span class=\"o\">.</span><span class=\"n\">BasicInterpolation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Interpolation which expands environment variables in values,</span>\n<span class=\"sd\">    by pre-filtering BasicInterpolation.before_get()&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">before_get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expandvars</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">EnvInterpolation</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">before_get</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Idea for method override is from <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/49529659\" rel=\"nofollow\">https://stackoverflow.com/a/49529659</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "20e6199ebfe0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils/commit/20e6199ebfe0"}, "html": {"href": "#!/rpanderson/labscript_utils/commits/20e6199ebfe0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils"}, "html": {"href": "#!/rpanderson/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{ab48a23d-f1bf-4808-8458-2fb85655c5de}ts=2203674"}}, "type": "repository", "name": "labscript_utils", "full_name": "rpanderson/labscript_utils", "uuid": "{ab48a23d-f1bf-4808-8458-2fb85655c5de}"}, "branch": {"name": "labconfig_expandvars"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2019-04-24T15:35:47.296170+00:00", "type": "participant", "approved": true, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}], "reason": "", "updated_on": "2019-04-24T23:23:24.383157+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}