{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101020191.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101020191"}}, "parent": {"id": 101018618, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101018618.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101018618"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "For what it's worth, some other code was probably conditionally importing pywintypes when running with a console, but not otherwise. For example, there is a zprocess function disabling the 'quick edit' console functionality conditional on there being a console. It was probably that leading to the difference.", "markup": "markdown", "html": "<p>For what it's worth, some other code was probably conditionally importing pywintypes when running with a console, but not otherwise. For example, there is a zprocess function disabling the 'quick edit' console functionality conditional on there being a console. It was probably that leading to the difference.</p>", "type": "rendered"}, "created_on": "2019-05-06T15:51:47.315810+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T15:51:47.333542+00:00", "type": "pullrequest_comment", "id": 101020191}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"approval": {"date": "2019-05-06T15:40:37.228081+00:00", "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101018618.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101018618"}}, "parent": {"id": 101018017, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101018017.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101018017"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Agreed.", "markup": "markdown", "html": "<p>Agreed.</p>", "type": "rendered"}, "created_on": "2019-05-06T15:40:28.399852+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-06T15:40:28.427845+00:00", "type": "pullrequest_comment", "id": 101018618}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"update": {"description": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "title": "Import pywin32 at module-level rather than lazily", "destination": {"commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7a2223a0359f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7a2223a0359f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7a2223a0359f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-imports"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-06T15:38:10.785595+00:00"}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"update": {"description": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "title": "Import pywin32 at module-level rather than lazily", "destination": {"commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7a2223a0359f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7a2223a0359f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7a2223a0359f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-imports"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-06T15:38:10.059814+00:00"}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101018017.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101018017"}}, "parent": {"id": 101009960, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101009960.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101009960"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Ok, this should now be resolved by a further change to [lyse PR 61](#!/labscript_suite/lyse/pull-requests/61/fix-for-48-make-analysis_subprocesspy/diff).\n\nLyse was also importing winshell lazily, so it was not solving the problem. I now see your minimal breaking example resolved.", "markup": "markdown", "html": "<p>Ok, this should now be resolved by a further change to <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/pull-requests/61/fix-for-48-make-analysis_subprocesspy/diff\" rel=\"nofollow\">lyse PR 61</a>.</p>\n<p>Lyse was also importing winshell lazily, so it was not solving the problem. I now see your minimal breaking example resolved.</p>", "type": "rendered"}, "created_on": "2019-05-06T15:36:22.346256+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T15:36:22.361274+00:00", "type": "pullrequest_comment", "id": 101018017}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101012938.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101012938"}}, "parent": {"id": 101009960, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101009960.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101009960"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Oh, that's nuts. I will look into this using your minimal breaking example to see why it's not whitelisted (because I thought it would be!) under pythonw specifically, but I have also been experimenting with just *not* using pythonw.exe anymore (since pythonw also breaks some kinds of output redirection since stdout and stderr don't exist to be redirected). It turns out that so long as you can start  processes programmatically, you can start a process using python.exe but with the console hidden (not just minimised, but totally hidden). So if you were to put this at a the top of lyse's `__main__.py` (first thing after the `__future__` imports):\n\n```python\nimport sys\nimport subprocess\n\nif 'pythonw.exe' in sys.executable.lower():\n    # Re-launch with python.exe with hidden console window. This prevents issues with\n    # stdio streams not existing on pythonw.\n    CREATE_NO_WINDOW = 1 << 27\n    cmd = [sys.executable.lower().replace('pythonw.exe', 'python.exe')] + sys.argv\n    subprocess.Popen(cmd, creationflags=CREATE_NO_WINDOW)\n    sys.exit(0)\n\n```\nThat may fix the thread crashing issue as well as the output redirection issue. \n\nI'm still playing with this but will submit a pull request to each GUI app with the above it it looks promising. Pythonw is a pain in the neck, if we can do away with it I will be happy!", "markup": "markdown", "html": "<p>Oh, that's nuts. I will look into this using your minimal breaking example to see why it's not whitelisted (because I thought it would be!) under pythonw specifically, but I have also been experimenting with just <em>not</em> using pythonw.exe anymore (since pythonw also breaks some kinds of output redirection since stdout and stderr don't exist to be redirected). It turns out that so long as you can start  processes programmatically, you can start a process using python.exe but with the console hidden (not just minimised, but totally hidden). So if you were to put this at a the top of lyse's <code>__main__.py</code> (first thing after the <code>__future__</code> imports):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"k\">if</span> <span class=\"s1\">&#39;pythonw.exe&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Re-launch with python.exe with hidden console window. This prevents issues with</span>\n    <span class=\"c1\"># stdio streams not existing on pythonw.</span>\n    <span class=\"n\">CREATE_NO_WINDOW</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">27</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;pythonw.exe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;python.exe&#39;</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">creationflags</span><span class=\"o\">=</span><span class=\"n\">CREATE_NO_WINDOW</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That may fix the thread crashing issue as well as the output redirection issue. </p>\n<p>I'm still playing with this but will submit a pull request to each GUI app with the above it it looks promising. Pythonw is a pain in the neck, if we can do away with it I will be happy!</p>", "type": "rendered"}, "created_on": "2019-05-06T15:01:18.608540+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T15:01:45.573577+00:00", "type": "pullrequest_comment", "id": 101012938}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101012636.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101012636"}}, "parent": {"id": 101002275, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101002275.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101002275"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Yes!", "markup": "markdown", "html": "<p>Yes!</p>", "type": "rendered"}, "created_on": "2019-05-06T14:59:26.088545+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T14:59:26.117582+00:00", "type": "pullrequest_comment", "id": 101012636}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101009960.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101009960"}}, "parent": {"id": 101006032, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101006032.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101006032"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "This issue occurs when lyse is started with pythonw.exe, but not with python.exe \\(with or without these changes\\). Setting `debug=True` in ModuleWatcher confirms this is because `pywintypes` is not white-listed when launching with pythonw.exe.", "markup": "markdown", "html": "<p>This issue occurs when lyse is started with pythonw.exe, but not with python.exe (with or without these changes). Setting <code>debug=True</code> in ModuleWatcher confirms this is because <code>pywintypes</code> is not white-listed when launching with pythonw.exe.</p>", "type": "rendered"}, "created_on": "2019-05-06T14:43:21.141881+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-06T14:44:44.601419+00:00", "type": "pullrequest_comment", "id": 101009960}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101006032.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101006032"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "This might not be whitelisting `pywintypes`, which is the origin of the exception observed in the above thread hijack. I\u2019ve got a minimal breaking example, which this PR doesn\u2019t resolve. Load the following as a lyse routine and run it: \n\n```python\nfrom some_module import some_function\r\nimport pywintypes\n```\n\nsome\\_module contains:\n\n```python\ndef some_function():\r\n    return\n```\n\nModify some\\_module and get the `some_module.py modified: all modules will be reloaded next run.` message. Subsequent runs return the following traceback:\n\n```python\nTraceback (most recent call last):\r\n  File \"C:\\labscript_suite\\userlib\\analysislib\\common\\pkg_resources_bug.py\", line 2, in <module>\r\n    import pywintypes\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py\", line 136, in <module>\r\n    __import_pywin32_system_module__(\"pywintypes\", globals())\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py\", line 129, in __import_pywin32_system_module__\r\n    assert sys.modules[modname] is not old_mod\r\nAssertionError\n```\n\nIf `pywintypes` is imported in some\\_module instead, the same error is observed.", "markup": "markdown", "html": "<p>This might not be whitelisting <code>pywintypes</code>, which is the origin of the exception observed in the above thread hijack. I\u2019ve got a minimal breaking example, which this PR doesn\u2019t resolve. Load the following as a lyse routine and run it: </p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">some_module</span> <span class=\"kn\">import</span> <span class=\"n\">some_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pywintypes</span>\n</pre></div>\n\n\n<p>some_module contains:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">some_function</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span>\n</pre></div>\n\n\n<p>Modify some_module and get the <code>some_module.py modified: all modules will be reloaded next run.</code> message. Subsequent runs return the following traceback:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\labscript_suite\\userlib</span><span class=\"se\">\\a</span><span class=\"s2\">nalysislib\\common\\pkg_resources_bug.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pywintypes</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">136</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">__import_pywin32_system_module__</span><span class=\"p\">(</span><span class=\"s2\">&quot;pywintypes&quot;</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">())</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">129</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__import_pywin32_system_module__</span>\n    <span class=\"k\">assert</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">[</span><span class=\"n\">modname</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">old_mod</span>\n<span class=\"ne\">AssertionError</span>\n</pre></div>\n\n\n<p>If <code>pywintypes</code> is imported in some_module instead, the same error is observed.</p>", "type": "rendered"}, "created_on": "2019-05-06T14:20:07.725862+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-06T14:20:07.915440+00:00", "type": "pullrequest_comment", "id": 101006032}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101002275.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101002275"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Was this intended to resolve [this issue](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse#comment-51927740) \\(thread hijack of lyse issue #48\\)?", "markup": "markdown", "html": "<p>Was this intended to resolve <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse#comment-51927740\" rel=\"nofollow\">this issue</a> (thread hijack of lyse issue #48)?</p>", "type": "rendered"}, "created_on": "2019-05-06T13:58:07.436892+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-06T13:58:07.493115+00:00", "type": "pullrequest_comment", "id": 101002275}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"update": {"description": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "title": "Import pywin32 at module-level rather than lazily", "destination": {"commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7a2223a0359f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7a2223a0359f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7a2223a0359f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-imports"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-03T14:55:15.185253+00:00"}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}, {"update": {"description": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "title": "Import pywin32 at module-level rather than lazily", "destination": {"commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7a2223a0359f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7a2223a0359f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7a2223a0359f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-imports"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-03T14:55:15.099057+00:00"}, "pull_request": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}}]}