{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101012938.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101012938"}}, "parent": {"id": 101009960, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments/101009960.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78/_/diff#comment-101009960"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 78, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}}, "title": "Import pywin32 at module-level rather than lazily"}, "content": {"raw": "Oh, that's nuts. I will look into this using your minimal breaking example to see why it's not whitelisted (because I thought it would be!) under pythonw specifically, but I have also been experimenting with just *not* using pythonw.exe anymore (since pythonw also breaks some kinds of output redirection since stdout and stderr don't exist to be redirected). It turns out that so long as you can start  processes programmatically, you can start a process using python.exe but with the console hidden (not just minimised, but totally hidden). So if you were to put this at a the top of lyse's `__main__.py` (first thing after the `__future__` imports):\n\n```python\nimport sys\nimport subprocess\n\nif 'pythonw.exe' in sys.executable.lower():\n    # Re-launch with python.exe with hidden console window. This prevents issues with\n    # stdio streams not existing on pythonw.\n    CREATE_NO_WINDOW = 1 << 27\n    cmd = [sys.executable.lower().replace('pythonw.exe', 'python.exe')] + sys.argv\n    subprocess.Popen(cmd, creationflags=CREATE_NO_WINDOW)\n    sys.exit(0)\n\n```\nThat may fix the thread crashing issue as well as the output redirection issue. \n\nI'm still playing with this but will submit a pull request to each GUI app with the above it it looks promising. Pythonw is a pain in the neck, if we can do away with it I will be happy!", "markup": "markdown", "html": "<p>Oh, that's nuts. I will look into this using your minimal breaking example to see why it's not whitelisted (because I thought it would be!) under pythonw specifically, but I have also been experimenting with just <em>not</em> using pythonw.exe anymore (since pythonw also breaks some kinds of output redirection since stdout and stderr don't exist to be redirected). It turns out that so long as you can start  processes programmatically, you can start a process using python.exe but with the console hidden (not just minimised, but totally hidden). So if you were to put this at a the top of lyse's <code>__main__.py</code> (first thing after the <code>__future__</code> imports):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"k\">if</span> <span class=\"s1\">&#39;pythonw.exe&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Re-launch with python.exe with hidden console window. This prevents issues with</span>\n    <span class=\"c1\"># stdio streams not existing on pythonw.</span>\n    <span class=\"n\">CREATE_NO_WINDOW</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">27</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;pythonw.exe&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;python.exe&#39;</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"n\">creationflags</span><span class=\"o\">=</span><span class=\"n\">CREATE_NO_WINDOW</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>That may fix the thread crashing issue as well as the output redirection issue. </p>\n<p>I'm still playing with this but will submit a pull request to each GUI app with the above it it looks promising. Pythonw is a pain in the neck, if we can do away with it I will be happy!</p>", "type": "rendered"}, "created_on": "2019-05-06T15:01:18.608540+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T15:01:45.573577+00:00", "type": "pullrequest_comment", "id": 101012938}