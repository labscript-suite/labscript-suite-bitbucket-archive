{"pagelen": 50, "values": [{"update": {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n```\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "title": "Modified launching of apps on Windows for conda envs and other issues", "destination": {"commit": {"hash": "9b4dbe2f4e92", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9b4dbe2f4e92.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9b4dbe2f4e92"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-14T23:54:15.420133+00:00"}, "pull_request": {"type": "pullrequest", "id": 79, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}}, "title": "Modified launching of apps on Windows for conda envs and other issues"}}, {"update": {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n```\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "title": "Modified launching of apps on Windows for conda envs and other issues", "destination": {"commit": {"hash": "9b4dbe2f4e92", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9b4dbe2f4e92.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9b4dbe2f4e92"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-14T23:54:14.677256+00:00"}, "pull_request": {"type": "pullrequest", "id": 79, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}}, "title": "Modified launching of apps on Windows for conda envs and other issues"}}, {"update": {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n```\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "title": "Modified launching of apps on Windows for conda envs and other issues", "destination": {"commit": {"hash": "3604a14d9bc5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3604a14d9bc5.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3604a14d9bc5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-07T13:06:15.634354+00:00"}, "pull_request": {"type": "pullrequest", "id": 79, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}}, "title": "Modified launching of apps on Windows for conda envs and other issues"}}, {"update": {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n````\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "title": "Modified launching of apps on Windows for conda envs and other issues", "destination": {"commit": {"hash": "3604a14d9bc5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3604a14d9bc5.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3604a14d9bc5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-07T13:05:27.536336+00:00"}, "pull_request": {"type": "pullrequest", "id": 79, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}}, "title": "Modified launching of apps on Windows for conda envs and other issues"}}, {"update": {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n````\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "title": "Modified launching of apps on Windows for conda envs and other issues", "destination": {"commit": {"hash": "3604a14d9bc5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3604a14d9bc5.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3604a14d9bc5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-07T13:05:27.383045+00:00"}, "pull_request": {"type": "pullrequest", "id": 79, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}}, "title": "Modified launching of apps on Windows for conda envs and other issues"}}]}