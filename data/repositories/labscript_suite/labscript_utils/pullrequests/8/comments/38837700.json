{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/8/comments/38837700.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/8/_/diff#comment-38837700"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 8, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/8.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/8"}}, "title": "Icons and smaller buttons for toolpalette widget"}, "content": {"raw": "I encountered a problem when restarting a tab repeatedly in quick succession, occasionally the QTimer that was being used to delay relaying out the widgets would fire and find that the widgets no longer existed due to a device restart, raising an exception.\n\nI've now made it so that the relaying out happens immediately rather than after a timeout. This does not seem to have any negative performance implications, and makes the resizing more responsive, so seems like a win, if I haven't missed anything here. My guess is that the QTimer was to prevent doing needless re-laying-out when a resize was in progress, i.e. it was to \"stack\" the resize events so that only the latest would be responded to in effect, rather than building up a backlog of events to be processed. However, I believe Qt already stacks resize events like this - if there are two resize events in its event queue it discards the older one. So I think there is unlikely to be any performance problems to writing code that responds to every resize event without delay.", "markup": "markdown", "html": "<p>I encountered a problem when restarting a tab repeatedly in quick succession, occasionally the QTimer that was being used to delay relaying out the widgets would fire and find that the widgets no longer existed due to a device restart, raising an exception.</p>\n<p>I've now made it so that the relaying out happens immediately rather than after a timeout. This does not seem to have any negative performance implications, and makes the resizing more responsive, so seems like a win, if I haven't missed anything here. My guess is that the QTimer was to prevent doing needless re-laying-out when a resize was in progress, i.e. it was to \"stack\" the resize events so that only the latest would be responded to in effect, rather than building up a backlog of events to be processed. However, I believe Qt already stacks resize events like this - if there are two resize events in its event queue it discards the older one. So I think there is unlikely to be any performance problems to writing code that responds to every resize event without delay.</p>", "type": "rendered"}, "created_on": "2017-06-14T16:18:46.912577+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-14T16:18:46.915377+00:00", "type": "pullrequest_comment", "id": 38837700}