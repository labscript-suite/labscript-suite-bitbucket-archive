{"rendered": {"reason": {"raw": "incomplete WIP, will re-create once we're on gthub", "markup": "markdown", "html": "<p>incomplete WIP, will re-create once we're on gthub</p>", "type": "rendered"}, "description": {"raw": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "markup": "markdown", "html": "<p>Edit: this description is now outdated, see below comments instead.</p>\n<p>This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.</p>\n<p>This is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.</p>\n<p>Implementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their <code>handler()</code> method during <code>__init__</code> with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.</p>\n<p>Clients can call <code>zmq_get(..., data=['get_version', *args])</code>, and this will\ntranslate to a call <code>labscript_utils.versions.get_version(*args</code>) and return\nthe result as a string. So normally this would be <code>['get_version', 'labscript']</code>\nbut could also be <code>['get_version', 'serial', 'pyserial']</code> for the case where the\nproject name and its import name are not the same.</p>\n<p>This was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.ls_zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">ZMQServer</span><span class=\"p\">,</span> <span class=\"n\">zmq_get</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyServer</span><span class=\"p\">(</span><span class=\"n\">ZMQServer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;handler!&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;response&#39;</span>\n\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">MyServer</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;get_version&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;labscript&#39;</span><span class=\"p\">]))</span>\n\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Prints:</p>\n<div class=\"codehilite\"><pre><span></span>2.6.0\n</pre></div>\n\n\n<p>So the wrapped <code>handler()</code> method is intercepting the request and returning the version, and the original handler does not run.</p>", "type": "rendered"}, "title": {"raw": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "markup": "markdown", "html": "<p>Add RCPServer and RPCCLient base clients for more organised communication between labscript programs</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/cbillington/labscript_utils:cb1ea05e2c14%0De5a908bdc9cb?from_pullrequest_id=89"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/cbillington/labscript_utils:cb1ea05e2c14%0De5a908bdc9cb?from_pullrequest_id=89"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/statuses_page=1.json"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "close_source_branch": false, "reviewers": [{"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, {"display_name": "Shaun Johnstone", "uuid": "{29b89d33-dfb4-4651-9a79-ffb35b7ca689}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B29b89d33-dfb4-4651-9a79-ffb35b7ca689%7D"}, "html": {"href": "https://bitbucket.org/%7B29b89d33-dfb4-4651-9a79-ffb35b7ca689%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8105ae398115f6a5b58ce40d07fa431fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-0.png"}}, "nickname": "shaunj", "type": "user", "account_id": "557058:af791b1b-04dd-4b89-8a97-fd688cb64b82"}], "id": 89, "destination": {"commit": {"hash": "e5a908bdc9cb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e5a908bdc9cb.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e5a908bdc9cb"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-08-06T17:47:51.002064+00:00", "summary": {"raw": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "markup": "markdown", "html": "<p>Edit: this description is now outdated, see below comments instead.</p>\n<p>This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.</p>\n<p>This is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.</p>\n<p>Implementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their <code>handler()</code> method during <code>__init__</code> with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.</p>\n<p>Clients can call <code>zmq_get(..., data=['get_version', *args])</code>, and this will\ntranslate to a call <code>labscript_utils.versions.get_version(*args</code>) and return\nthe result as a string. So normally this would be <code>['get_version', 'labscript']</code>\nbut could also be <code>['get_version', 'serial', 'pyserial']</code> for the case where the\nproject name and its import name are not the same.</p>\n<p>This was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.ls_zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">ZMQServer</span><span class=\"p\">,</span> <span class=\"n\">zmq_get</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyServer</span><span class=\"p\">(</span><span class=\"n\">ZMQServer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;handler!&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;response&#39;</span>\n\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">MyServer</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;get_version&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;labscript&#39;</span><span class=\"p\">]))</span>\n\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Prints:</p>\n<div class=\"codehilite\"><pre><span></span>2.6.0\n</pre></div>\n\n\n<p>So the wrapped <code>handler()</code> method is intercepting the request and returning the version, and the original handler does not run.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cb1ea05e2c14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cb1ea05e2c14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cb1ea05e2c14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "comment_count": 9, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shaun Johnstone", "uuid": "{29b89d33-dfb4-4651-9a79-ffb35b7ca689}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B29b89d33-dfb4-4651-9a79-ffb35b7ca689%7D"}, "html": {"href": "https://bitbucket.org/%7B29b89d33-dfb4-4651-9a79-ffb35b7ca689%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/8105ae398115f6a5b58ce40d07fa431fd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-0.png"}}, "nickname": "shaunj", "type": "user", "account_id": "557058:af791b1b-04dd-4b89-8a97-fd688cb64b82"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-28T21:08:56.570540+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2020-01-16T05:09:23.193588+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "incomplete WIP, will re-create once we're on gthub", "updated_on": "2020-01-28T21:09:19.136190+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}