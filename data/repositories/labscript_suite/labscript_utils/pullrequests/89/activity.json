{"pagelen": 50, "values": [{"update": {"description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "destination": {"commit": {"hash": "e5a908bdc9cb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e5a908bdc9cb.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e5a908bdc9cb"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "incomplete WIP, will re-create once we're on gthub", "source": {"commit": {"hash": "cb1ea05e2c14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cb1ea05e2c14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cb1ea05e2c14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "DECLINED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2020-01-28T21:09:19.146207+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/133511377.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-133511377"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "Closing this, will reconstruct git-side.", "markup": "markdown", "html": "<p>Closing this, will reconstruct git-side.</p>", "type": "rendered"}, "created_on": "2020-01-28T21:08:56.563701+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2020-01-28T21:08:56.570540+00:00", "type": "pullrequest_comment", "id": 133511377}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/131861141.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-131861141"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "I haven\u2019t implemented all of it, no. So although we could merge this one despite being incomplete, I wouldn\u2019t want to merge the corresponding runmanager PR that uses it in case something changes. \n\nI\u2019m happy re-create this on the git side and we can close it here if you\u2019d like.", "markup": "markdown", "html": "<p>I haven\u2019t implemented all of it, no. So although we could merge this one despite being incomplete, I wouldn\u2019t want to merge the corresponding runmanager PR that uses it in case something changes. </p>\n<p>I\u2019m happy re-create this on the git side and we can close it here if you\u2019d like.</p>", "type": "rendered"}, "created_on": "2020-01-16T05:44:18.583915+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2020-01-16T05:44:18.590179+00:00", "type": "pullrequest_comment", "id": 131861141}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/131858994.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-131858994"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "@{557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3} do you want to resolve the merge conflict and then merge?\n\nI believe you\u2019ve implemented the list of \u201cmore things to do\u201d above?", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3\">@Chris Billington</span> do you want to resolve the merge conflict and then merge?</p>\n<p>I believe you\u2019ve implemented the list of \u201cmore things to do\u201d above?</p>", "type": "rendered"}, "created_on": "2020-01-16T05:09:23.179824+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2020-01-16T05:09:23.193588+00:00", "type": "pullrequest_comment", "id": 131858994}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "destination": {"commit": {"hash": "5d95a20678c4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5d95a20678c4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5d95a20678c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "cb1ea05e2c14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cb1ea05e2c14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cb1ea05e2c14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-11-14T20:56:48.722874+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "07111b639cbd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/07111b639cbd"}, "html": {"href": "#!/cbillington/labscript_utils/commits/07111b639cbd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-09-06T15:48:55.105080+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/113248020.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-113248020"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "More things to do:\n\n* Add a `require_client_version()`method to the server that will return an error to the client if its declared versions don\u2019t match its requirements.\n* Make the version error messages clearer such that it\u2019s obvious whether the error is about versions on the server or on the client.\n\n\u200c", "markup": "markdown", "html": "<p>More things to do:</p>\n<ul>\n<li>Add a <code>require_client_version()</code>method to the server that will return an error to the client if its declared versions don\u2019t match its requirements.</li>\n<li>Make the version error messages clearer such that it\u2019s obvious whether the error is about versions on the server or on the client.</li>\n</ul>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-08-15T13:06:00.004072+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-15T13:06:00.016820+00:00", "type": "pullrequest_comment", "id": 113248020}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5794fd4b9f83", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5794fd4b9f83"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5794fd4b9f83"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-14T15:37:58.474965+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5794fd4b9f83", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5794fd4b9f83"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5794fd4b9f83"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-14T15:37:31.664518+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/113090989.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-113090989"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "Ok, known problems resolved. A request such as the following:\n```python\nrunmanager.remote.set_globals({'x': 7}, raw=False)\n```\n now results in the following object being sent over the wire:\n```python\n[\n    'set_globals', # method_name\n    ({'x': 7},),   # args tuple\n    {'raw': False}, # kwargs dict\n    # request_metadata dict:\n    {\n        # required_server_versions is a list of (args, kwargs) to be passed to\n        # check_version. Therefore the protocol is tied to the call signature of\n        # check_version, and the protocol version must be bumped and these calls\n        # converted for backward compatibility if the call signature of check_version\n        # ever changes in a backward-incompatible way.\n        'required_server_versions': [(('runmanager', '2.6.0', '3.0'), {})],\n        # client_versions is a list of (module_or_component_name, version) tuples\n        # for versions of components on the client that it has declared.\n        'client_versions': [('runmanager', '2.6.0'), ('_rpc_proto', '1.0.0')],\n    },\n]\n```\n\nAnd if the four elements of the list can't be converted to the expected types (str, tuple, dict, dict), or the request_metadata dict doesn't have the two expected keys, then the fallback method is called.", "markup": "markdown", "html": "<p>Ok, known problems resolved. A request such as the following:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">runmanager</span><span class=\"o\">.</span><span class=\"n\">remote</span><span class=\"o\">.</span><span class=\"n\">set_globals</span><span class=\"p\">({</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span> <span class=\"n\">raw</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>now results in the following object being sent over the wire:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"s1\">&#39;set_globals&#39;</span><span class=\"p\">,</span> <span class=\"c1\"># method_name</span>\n    <span class=\"p\">({</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},),</span>   <span class=\"c1\"># args tuple</span>\n    <span class=\"p\">{</span><span class=\"s1\">&#39;raw&#39;</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">},</span> <span class=\"c1\"># kwargs dict</span>\n    <span class=\"c1\"># request_metadata dict:</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># required_server_versions is a list of (args, kwargs) to be passed to</span>\n        <span class=\"c1\"># check_version. Therefore the protocol is tied to the call signature of</span>\n        <span class=\"c1\"># check_version, and the protocol version must be bumped and these calls</span>\n        <span class=\"c1\"># converted for backward compatibility if the call signature of check_version</span>\n        <span class=\"c1\"># ever changes in a backward-incompatible way.</span>\n        <span class=\"s1\">&#39;required_server_versions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[((</span><span class=\"s1\">&#39;runmanager&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2.6.0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3.0&#39;</span><span class=\"p\">),</span> <span class=\"p\">{})],</span>\n        <span class=\"c1\"># client_versions is a list of (module_or_component_name, version) tuples</span>\n        <span class=\"c1\"># for versions of components on the client that it has declared.</span>\n        <span class=\"s1\">&#39;client_versions&#39;</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s1\">&#39;runmanager&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2.6.0&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;_rpc_proto&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1.0.0&#39;</span><span class=\"p\">)],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n\n<p>And if the four elements of the list can't be converted to the expected types (str, tuple, dict, dict), or the request_metadata dict doesn't have the two expected keys, then the fallback method is called.</p>", "type": "rendered"}, "created_on": "2019-08-14T12:15:44.086132+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-14T12:16:50.627859+00:00", "type": "pullrequest_comment", "id": 113090989}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5794fd4b9f83", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5794fd4b9f83"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5794fd4b9f83"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-14T12:10:41.806093+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e21ff643b8a4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/e21ff643b8a4"}, "html": {"href": "#!/cbillington/labscript_utils/commits/e21ff643b8a4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-14T12:03:31.365320+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/113004662.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-113004662"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "One thing Phil pointed out by email is that the client should probably send its version information too, to allow servers to be backward compatible in the future. So I will probably add more to this so that clients can send some of their version info in the request metadata, and even though that is not currently being used, future servers may use that for backward compatibility reasons when we change things further.\n\nRight now servers can easily tell that clients are old since none of the old requests are a four-part list or list like the new protocol expects. So getting a ValueError on unpacking the request data is how it knows to call the fallback handler for old clients. But future changes won't be as dramatic now that the protocol supports arbitrary method names, args and kwargs as the interface, so version info from the client will be more important to tell apart client versions. \n\nEdit: I just realised that the check for an old client makes too many assumptions - the request data coming in might not even be a list, so just checking that it has the right number of elements won't do. So I will need to make that check that the whole format of the request matches the new protocol, and call the fallback method if it is anything else.", "markup": "markdown", "html": "<p>One thing Phil pointed out by email is that the client should probably send its version information too, to allow servers to be backward compatible in the future. So I will probably add more to this so that clients can send some of their version info in the request metadata, and even though that is not currently being used, future servers may use that for backward compatibility reasons when we change things further.</p>\n<p>Right now servers can easily tell that clients are old since none of the old requests are a four-part list or list like the new protocol expects. So getting a ValueError on unpacking the request data is how it knows to call the fallback handler for old clients. But future changes won't be as dramatic now that the protocol supports arbitrary method names, args and kwargs as the interface, so version info from the client will be more important to tell apart client versions. </p>\n<p>Edit: I just realised that the check for an old client makes too many assumptions - the request data coming in might not even be a list, so just checking that it has the right number of elements won't do. So I will need to make that check that the whole format of the request matches the new protocol, and call the fallback method if it is anything else.</p>", "type": "rendered"}, "created_on": "2019-08-13T21:28:11.818185+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-14T01:46:15.816528+00:00", "type": "pullrequest_comment", "id": 113004662}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "580d2eb4cd69", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/580d2eb4cd69"}, "html": {"href": "#!/cbillington/labscript_utils/commits/580d2eb4cd69"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-13T21:08:16.336240+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/113001533.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-113001533"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "I've now modified this to include two new base classes for servers and clients, that allow sending version requirement information with every request, as well as getting a sensible error if a new client contacts an old server. See [runmanager PR #42](#!/labscript_suite/runmanager/pull-requests/42/) for an example and some more information.\n\nCopying and pasting the commit message for convenience:\n\n```\nAdd RPCServer and RPCClient classes appropriate for labscript programs\nto use for their inter-process communication. These are modelled after the\nrunmanager remote client and server classes, providing a base class to implement\nthe same type of clients and servers in other applications.\n\nThe idea is that we will make a blacs.remote, runviewer.remote and lyse.remote\nmodule containing client classes for making these calls, instead of using\nzmq_get directly. Servers must be upgraded before clients.\n\nEvery request sends the required versions of any necessary components on the\nserver, which allows us to make modifications to protocols whilst raising\nhelpful version exceptions instead of just crashing unhelpfully. Fallback\nmethods allow new style servers to still handle old requests. However, new\nclients communicating with old servers will raise exceptions instructing the\nuser to update the server, since they cannot know in advance whether the server\nis old or new.\n\nSince every RPC call checks versions, add a cache to check_version so that it\ndoes not do disk access every time a version is checked. This makes the\nperformance hit of doing these checks for every call negligable.\n```\n\n", "markup": "markdown", "html": "<p>I've now modified this to include two new base classes for servers and clients, that allow sending version requirement information with every request, as well as getting a sensible error if a new client contacts an old server. See <a data-is-external-link=\"true\" href=\"#!/labscript_suite/runmanager/pull-requests/42/\" rel=\"nofollow\">runmanager PR #42</a> for an example and some more information.</p>\n<p>Copying and pasting the commit message for convenience:</p>\n<div class=\"codehilite\"><pre><span></span>Add RPCServer and RPCClient classes appropriate for labscript programs\nto use for their inter-process communication. These are modelled after the\nrunmanager remote client and server classes, providing a base class to implement\nthe same type of clients and servers in other applications.\n\nThe idea is that we will make a blacs.remote, runviewer.remote and lyse.remote\nmodule containing client classes for making these calls, instead of using\nzmq_get directly. Servers must be upgraded before clients.\n\nEvery request sends the required versions of any necessary components on the\nserver, which allows us to make modifications to protocols whilst raising\nhelpful version exceptions instead of just crashing unhelpfully. Fallback\nmethods allow new style servers to still handle old requests. However, new\nclients communicating with old servers will raise exceptions instructing the\nuser to update the server, since they cannot know in advance whether the server\nis old or new.\n\nSince every RPC call checks versions, add a cache to check_version so that it\ndoes not do disk access every time a version is checked. This makes the\nperformance hit of doing these checks for every call negligable.\n</pre></div>", "type": "rendered"}, "created_on": "2019-08-13T20:54:37.597185+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-13T21:04:56.986719+00:00", "type": "pullrequest_comment", "id": 113001533}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f5722ddf7c7c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/f5722ddf7c7c"}, "html": {"href": "#!/cbillington/labscript_utils/commits/f5722ddf7c7c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-13T21:02:20.442381+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "29b8de92f23f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/29b8de92f23f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/29b8de92f23f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-13T20:59:17.101347+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "1c5cc2767439", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/1c5cc2767439"}, "html": {"href": "#!/cbillington/labscript_utils/commits/1c5cc2767439"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-13T20:37:18.330534+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ee093ad1cccf", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/ee093ad1cccf"}, "html": {"href": "#!/cbillington/labscript_utils/commits/ee093ad1cccf"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-13T20:36:30.635784+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/112164933.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-112164933"}}, "parent": {"id": 112164569, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/112164569.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-112164569"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "Oh, I did not think about this at all. I guess I subconsciously thought of the programs as being in a long-lived connection to each other and assumed they would check at the start that versions were as required. But of course BLACS can come and go and might not be the same versions of things each time, so a single check won't do at all - will probably have to be integrated into the requests as you said.\n\nWill sleep on it and see if any other possibilities present themselves.", "markup": "markdown", "html": "<p>Oh, I did not think about this at all. I guess I subconsciously thought of the programs as being in a long-lived connection to each other and assumed they would check at the start that versions were as required. But of course BLACS can come and go and might not be the same versions of things each time, so a single check won't do at all - will probably have to be integrated into the requests as you said.</p>\n<p>Will sleep on it and see if any other possibilities present themselves.</p>", "type": "rendered"}, "created_on": "2019-08-07T01:56:50.804896+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-07T01:56:50.813734+00:00", "type": "pullrequest_comment", "id": 112164933}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/112164569.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-112164569"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "Looks good!\n\nUnfortunately this won't help catch the case of old runmanager \\(using `zmq_get`\\) talking to new BLACS \\(using `ZMQServer`\\). For that I think we need to go through and find each instance of `zmq_get` and update them to send the versions of labscript suite components along with the request? Can't think of any other nice way of detecting that.", "markup": "markdown", "html": "<p>Looks good!</p>\n<p>Unfortunately this won't help catch the case of old runmanager (using <code>zmq_get</code>) talking to new BLACS (using <code>ZMQServer</code>). For that I think we need to go through and find each instance of <code>zmq_get</code> and update them to send the versions of labscript suite components along with the request? Can't think of any other nice way of detecting that.</p>", "type": "rendered"}, "created_on": "2019-08-07T01:49:18.385269+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-08-07T01:49:18.392336+00:00", "type": "pullrequest_comment", "id": 112164569}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "1c809e64145d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1c809e64145d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1c809e64145d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2e6d2fbe343", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343"}, "html": {"href": "#!/cbillington/labscript_utils/commits/c2e6d2fbe343"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-06T17:47:51.076793+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}, {"update": {"description": "This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "title": "Add 'get_version' remote method to all servers in labscript.", "destination": {"commit": {"hash": "1c809e64145d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1c809e64145d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1c809e64145d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "c2e6d2fbe343", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/c2e6d2fbe343"}, "html": {"href": "#!/cbillington/labscript_utils/commits/c2e6d2fbe343"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-08-06T17:47:51.016644+00:00"}, "pull_request": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}}]}