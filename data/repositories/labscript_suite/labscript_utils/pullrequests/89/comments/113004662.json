{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments/113004662.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89/_/diff#comment-113004662"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 89, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs"}, "content": {"raw": "One thing Phil pointed out by email is that the client should probably send its version information too, to allow servers to be backward compatible in the future. So I will probably add more to this so that clients can send some of their version info in the request metadata, and even though that is not currently being used, future servers may use that for backward compatibility reasons when we change things further.\n\nRight now servers can easily tell that clients are old since none of the old requests are a four-part list or list like the new protocol expects. So getting a ValueError on unpacking the request data is how it knows to call the fallback handler for old clients. But future changes won't be as dramatic now that the protocol supports arbitrary method names, args and kwargs as the interface, so version info from the client will be more important to tell apart client versions. \n\nEdit: I just realised that the check for an old client makes too many assumptions - the request data coming in might not even be a list, so just checking that it has the right number of elements won't do. So I will need to make that check that the whole format of the request matches the new protocol, and call the fallback method if it is anything else.", "markup": "markdown", "html": "<p>One thing Phil pointed out by email is that the client should probably send its version information too, to allow servers to be backward compatible in the future. So I will probably add more to this so that clients can send some of their version info in the request metadata, and even though that is not currently being used, future servers may use that for backward compatibility reasons when we change things further.</p>\n<p>Right now servers can easily tell that clients are old since none of the old requests are a four-part list or list like the new protocol expects. So getting a ValueError on unpacking the request data is how it knows to call the fallback handler for old clients. But future changes won't be as dramatic now that the protocol supports arbitrary method names, args and kwargs as the interface, so version info from the client will be more important to tell apart client versions. </p>\n<p>Edit: I just realised that the check for an old client makes too many assumptions - the request data coming in might not even be a list, so just checking that it has the right number of elements won't do. So I will need to make that check that the whole format of the request matches the new protocol, and call the fallback method if it is anything else.</p>", "type": "rendered"}, "created_on": "2019-08-13T21:28:11.818185+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-08-14T01:46:15.816528+00:00", "type": "pullrequest_comment", "id": 113004662}