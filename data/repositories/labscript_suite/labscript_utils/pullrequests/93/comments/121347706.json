{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121347706.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121347706"}}, "parent": {"id": 121334721, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121334721.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121334721"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "Sorry for not being clearer, I was referring to the use of a `QStandardItemModel` as the datastore for the combobox rather than just passing in a list of strings. If you haven\u2019t come across them before, they are quite powerful, see [here](https://doc.qt.io/qt-5/model-view-programming.html) and [here](https://doc.qt.io/qt-5/qstandarditemmodel.html) for some documentation. Basically you store data in a model object, and connect it to one or more widgets. When the data is updated, the widget is automatically updated. This paradigm underpins a lot of things from runmanager globals interface, the BLACS queue, the units on analog outputs, the shot and channels lists in runviewer and the dataframe in lyse.\n\nUsing it here would allow you to store more than just a string with each combobox entry. The model can store a whole list of data per \u201crow\u201d, so you could store both the string name and the programming value \\(assigning them different \u201croles\u201d in the model so that one gets displayed and the other is only accessed programmatically\\). This would probably help with both of the points you raised as you get to store the programming index and you could store it as the base\\_value in the front panel settings, which keeps the restore of a selected item independent of the order of the items and more closely matches a real `Enum`.\n\nP.S. While we don\u2019t do it yet, a long term goal has been to connect multiple widgets to a single AO/DO/etc. object. The AO/DO/etc. classes support this. Ultimately I\u2019d like to create a plugin that allows you to create new tabs that contain widgets drawn from multiple devices. Figured I should mention this as it will probably provide context to some of the complexity in the AO/DO/etc. classes!\n\nP.P.S This comment probably belongs in [the other thread](#!/labscript_suite/blacs/pull-requests/75/device-properties/diff), but\u2026you might want to see if it makes sense to pass in the `options` to the EO as a Python `Enum`. Maybe not because that limits you to only 2 pieces of information \\(integer and Python compatible variable name for the string\\) but figured I should mention them as I only recently discovered they existed myself!\n\n\u200c", "markup": "markdown", "html": "<p>Sorry for not being clearer, I was referring to the use of a <code>QStandardItemModel</code> as the datastore for the combobox rather than just passing in a list of strings. If you haven\u2019t come across them before, they are quite powerful, see <a data-is-external-link=\"true\" href=\"https://doc.qt.io/qt-5/model-view-programming.html\" rel=\"nofollow\">here</a> and <a data-is-external-link=\"true\" href=\"https://doc.qt.io/qt-5/qstandarditemmodel.html\" rel=\"nofollow\">here</a> for some documentation. Basically you store data in a model object, and connect it to one or more widgets. When the data is updated, the widget is automatically updated. This paradigm underpins a lot of things from runmanager globals interface, the BLACS queue, the units on analog outputs, the shot and channels lists in runviewer and the dataframe in lyse.</p>\n<p>Using it here would allow you to store more than just a string with each combobox entry. The model can store a whole list of data per \u201crow\u201d, so you could store both the string name and the programming value (assigning them different \u201croles\u201d in the model so that one gets displayed and the other is only accessed programmatically). This would probably help with both of the points you raised as you get to store the programming index and you could store it as the base_value in the front panel settings, which keeps the restore of a selected item independent of the order of the items and more closely matches a real <code>Enum</code>.</p>\n<p>P.S. While we don\u2019t do it yet, a long term goal has been to connect multiple widgets to a single AO/DO/etc. object. The AO/DO/etc. classes support this. Ultimately I\u2019d like to create a plugin that allows you to create new tabs that contain widgets drawn from multiple devices. Figured I should mention this as it will probably provide context to some of the complexity in the AO/DO/etc. classes!</p>\n<p>P.P.S This comment probably belongs in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/75/device-properties/diff\" rel=\"nofollow\">the other thread</a>, but\u2026you might want to see if it makes sense to pass in the <code>options</code> to the EO as a Python <code>Enum</code>. Maybe not because that limits you to only 2 pieces of information (integer and Python compatible variable name for the string) but figured I should mention them as I only recently discovered they existed myself!</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-10-18T15:01:08.969832+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-10-18T15:01:08.978167+00:00", "type": "pullrequest_comment", "id": 121347706}