{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121137893.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121137893"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "Hi David,\n\nSorry for being slow with looking at these. I haven\u2019t had chance to test this, but it generally looks fine. The only question I have is regarding the `set_options` method and whether the combo-box would be better suited to using a shared model contained within the `EO` object in a similar way to the units of an analog output?", "markup": "markdown", "html": "<p>Hi David,</p>\n<p>Sorry for being slow with looking at these. I haven\u2019t had chance to test this, but it generally looks fine. The only question I have is regarding the <code>set_options</code> method and whether the combo-box would be better suited to using a shared model contained within the <code>EO</code> object in a similar way to the units of an analog output?</p>", "type": "rendered"}, "created_on": "2019-10-17T12:20:50.794417+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-10-17T12:20:50.800745+00:00", "type": "pullrequest_comment", "id": 121137893}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121334721.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121334721"}}, "parent": {"id": 121137893, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121137893.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121137893"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "Maybe? To be honest I\u2019m still getting used to the more subtle points of Qt programming so I\u2019m not exactly sure what you mean. What other model would I share in? Right now I am assuming the enum strings are the actual data that is needed by the device. Note that because front\\_panel\\_settings needs a number value but the actual settings are strings I need to keep track of both the index and the associated text. \n\nI\u2019m also still debating how much of the index to expose to the user since many enum-like settings for devices often use the index as the programming value so it might be nice for the enum output to reflect the same index values as well. I didn\u2019t find a great way to allow for that on my first pass but I hope to revisit it soon. ", "markup": "markdown", "html": "<p>Maybe? To be honest I\u2019m still getting used to the more subtle points of Qt programming so I\u2019m not exactly sure what you mean. What other model would I share in? Right now I am assuming the enum strings are the actual data that is needed by the device. Note that because front_panel_settings needs a number value but the actual settings are strings I need to keep track of both the index and the associated text. </p>\n<p>I\u2019m also still debating how much of the index to expose to the user since many enum-like settings for devices often use the index as the programming value so it might be nice for the enum output to reflect the same index values as well. I didn\u2019t find a great way to allow for that on my first pass but I hope to revisit it soon. </p>", "type": "rendered"}, "created_on": "2019-10-18T13:55:48.185467+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-10-18T13:55:48.414154+00:00", "type": "pullrequest_comment", "id": 121334721}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121347706.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121347706"}}, "parent": {"id": 121334721, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121334721.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121334721"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "Sorry for not being clearer, I was referring to the use of a `QStandardItemModel` as the datastore for the combobox rather than just passing in a list of strings. If you haven\u2019t come across them before, they are quite powerful, see [here](https://doc.qt.io/qt-5/model-view-programming.html) and [here](https://doc.qt.io/qt-5/qstandarditemmodel.html) for some documentation. Basically you store data in a model object, and connect it to one or more widgets. When the data is updated, the widget is automatically updated. This paradigm underpins a lot of things from runmanager globals interface, the BLACS queue, the units on analog outputs, the shot and channels lists in runviewer and the dataframe in lyse.\n\nUsing it here would allow you to store more than just a string with each combobox entry. The model can store a whole list of data per \u201crow\u201d, so you could store both the string name and the programming value \\(assigning them different \u201croles\u201d in the model so that one gets displayed and the other is only accessed programmatically\\). This would probably help with both of the points you raised as you get to store the programming index and you could store it as the base\\_value in the front panel settings, which keeps the restore of a selected item independent of the order of the items and more closely matches a real `Enum`.\n\nP.S. While we don\u2019t do it yet, a long term goal has been to connect multiple widgets to a single AO/DO/etc. object. The AO/DO/etc. classes support this. Ultimately I\u2019d like to create a plugin that allows you to create new tabs that contain widgets drawn from multiple devices. Figured I should mention this as it will probably provide context to some of the complexity in the AO/DO/etc. classes!\n\nP.P.S This comment probably belongs in [the other thread](#!/labscript_suite/blacs/pull-requests/75/device-properties/diff), but\u2026you might want to see if it makes sense to pass in the `options` to the EO as a Python `Enum`. Maybe not because that limits you to only 2 pieces of information \\(integer and Python compatible variable name for the string\\) but figured I should mention them as I only recently discovered they existed myself!\n\n\u200c", "markup": "markdown", "html": "<p>Sorry for not being clearer, I was referring to the use of a <code>QStandardItemModel</code> as the datastore for the combobox rather than just passing in a list of strings. If you haven\u2019t come across them before, they are quite powerful, see <a data-is-external-link=\"true\" href=\"https://doc.qt.io/qt-5/model-view-programming.html\" rel=\"nofollow\">here</a> and <a data-is-external-link=\"true\" href=\"https://doc.qt.io/qt-5/qstandarditemmodel.html\" rel=\"nofollow\">here</a> for some documentation. Basically you store data in a model object, and connect it to one or more widgets. When the data is updated, the widget is automatically updated. This paradigm underpins a lot of things from runmanager globals interface, the BLACS queue, the units on analog outputs, the shot and channels lists in runviewer and the dataframe in lyse.</p>\n<p>Using it here would allow you to store more than just a string with each combobox entry. The model can store a whole list of data per \u201crow\u201d, so you could store both the string name and the programming value (assigning them different \u201croles\u201d in the model so that one gets displayed and the other is only accessed programmatically). This would probably help with both of the points you raised as you get to store the programming index and you could store it as the base_value in the front panel settings, which keeps the restore of a selected item independent of the order of the items and more closely matches a real <code>Enum</code>.</p>\n<p>P.S. While we don\u2019t do it yet, a long term goal has been to connect multiple widgets to a single AO/DO/etc. object. The AO/DO/etc. classes support this. Ultimately I\u2019d like to create a plugin that allows you to create new tabs that contain widgets drawn from multiple devices. Figured I should mention this as it will probably provide context to some of the complexity in the AO/DO/etc. classes!</p>\n<p>P.P.S This comment probably belongs in <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/pull-requests/75/device-properties/diff\" rel=\"nofollow\">the other thread</a>, but\u2026you might want to see if it makes sense to pass in the <code>options</code> to the EO as a Python <code>Enum</code>. Maybe not because that limits you to only 2 pieces of information (integer and Python compatible variable name for the string) but figured I should mention them as I only recently discovered they existed myself!</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-10-18T15:01:08.969832+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2019-10-18T15:01:08.978167+00:00", "type": "pullrequest_comment", "id": 121347706}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/122303530.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-122303530"}}, "parent": {"id": 121347706, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/121347706.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-121347706"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "I understand now. I had intentionally avoided that to keep things simpler but looking again I found some obvious benefits so I went ahead and reworked to use the shared model. Other than flexibility, it also allows for easy tooltips on the options which will likely be helpful down the road.\n\nI\u2019ve also recently encountered Python enums and have found them pretty helpful. I avoided them here because they are limiting and their instantiation is a bit cumbersome. At the easiest you pass in a dictionary, but I can also just use that dictionary directly to create the EO. Unless there is a need to the Enum in actual programming of the device I figured I would leave it be.", "markup": "markdown", "html": "<p>I understand now. I had intentionally avoided that to keep things simpler but looking again I found some obvious benefits so I went ahead and reworked to use the shared model. Other than flexibility, it also allows for easy tooltips on the options which will likely be helpful down the road.</p>\n<p>I\u2019ve also recently encountered Python enums and have found them pretty helpful. I avoided them here because they are limiting and their instantiation is a bit cumbersome. At the easiest you pass in a dictionary, but I can also just use that dictionary directly to create the EO. Unless there is a need to the Enum in actual programming of the device I figured I would leave it be.</p>", "type": "rendered"}, "created_on": "2019-10-25T18:15:42.900486+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": "2019-10-25T18:15:43.124685+00:00", "type": "pullrequest_comment", "id": 122303530}, {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments/127665629.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93/_/diff#comment-127665629"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 93, "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}}, "title": "Add EnumOutput widget type."}, "content": {"raw": "This seems decent! I\u2019m content not using an Enum since you want to be able to include tooltips and things like that, so they\u2019re not super flexible.\n\nI\u2019ll get rid of the f string for token Python2 compat, and change the copyright to \u201cMonash University and contributors\u201d and merge.\n\nWe can fix any issues that arise later, since this is just a widget that no code will be using unless it opts in.\n\nThanks David.\n\n\u200c", "markup": "markdown", "html": "<p>This seems decent! I\u2019m content not using an Enum since you want to be able to include tooltips and things like that, so they\u2019re not super flexible.</p>\n<p>I\u2019ll get rid of the f string for token Python2 compat, and change the copyright to \u201cMonash University and contributors\u201d and merge.</p>\n<p>We can fix any issues that arise later, since this is just a widget that no code will be using unless it opts in.</p>\n<p>Thanks David.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-12-05T16:58:42.487197+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-12-05T16:58:42.496064+00:00", "type": "pullrequest_comment", "id": 127665629}], "page": 1, "size": 5}