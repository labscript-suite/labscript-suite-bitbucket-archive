{"pagelen": 50, "previous": "data/repositories/labscript_suite/labscript_utils/pullrequests_state=MERGED&state=OPEN&state=SUPERSEDED&state=DECLINED&page=1.json", "values": [{"description": "Fix [BLACS issue #22](#!/labscript_suite/blacs/issues/22/blacs-log-file-rollover-not-working) by using the third-party `concurrent-log-handler` package which resolves the race condition in rotating logs used by multiple processes.\r\n\r\nThis introduces the `concurrent-log-handler` package as a dependency, a separate pull request will\r\nadd it to the dependency list in the labscript suite installer.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/51/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:4238f12047e4%0D32b236b19f44?from_pullrequest_id=51"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/51/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/51.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/51/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/51/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/51"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/51/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:4238f12047e4%0D32b236b19f44?from_pullrequest_id=51"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/51/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/51/statuses_page=1.json"}}, "title": "Concurrent logging", "close_source_branch": true, "type": "pullrequest", "id": 51, "destination": {"commit": {"hash": "32b236b19f44", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/32b236b19f44.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/32b236b19f44"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-08-14T15:14:28.755766+00:00", "summary": {"raw": "Fix [BLACS issue #22](#!/labscript_suite/blacs/issues/22/blacs-log-file-rollover-not-working) by using the third-party `concurrent-log-handler` package which resolves the race condition in rotating logs used by multiple processes.\r\n\r\nThis introduces the `concurrent-log-handler` package as a dependency, a separate pull request will\r\nadd it to the dependency list in the labscript suite installer.", "markup": "markdown", "html": "<p>Fix <a data-is-external-link=\"true\" href=\"#!/labscript_suite/blacs/issues/22/blacs-log-file-rollover-not-working\" rel=\"nofollow\">BLACS issue #22</a> by using the third-party <code>concurrent-log-handler</code> package which resolves the race condition in rotating logs used by multiple processes.</p>\n<p>This introduces the <code>concurrent-log-handler</code> package as a dependency, a separate pull request will\nadd it to the dependency list in the labscript suite installer.</p>", "type": "rendered"}, "source": {"commit": {"hash": "8c11a8c1565b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/8c11a8c1565b"}, "html": {"href": "#!/cbillington/labscript_utils/commits/8c11a8c1565b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "concurrent_logging"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-20T14:44:56.009353+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "4238f12047e4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4238f12047e4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4238f12047e4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fixed bug in linear coil driver so that can handle both numpy arrays and single values as input when converting from base to amps \\(likely only used in analysis scripts\\)\r\n\r\n@shjohnst I would appreciate if you could test this in the lab to make sure I didn\u2019t screw anything up!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/52/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:2b3cd24e835e%0D4238f12047e4?from_pullrequest_id=52"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/52/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/52.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/52/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/52/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/52"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/52/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:2b3cd24e835e%0D4238f12047e4?from_pullrequest_id=52"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/52/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/52/statuses_page=1.json"}}, "title": "Fixed bug in linear coil driver so that can handle both numpy arrays and single values as input when converting from base to amps (likely only used in analysis scripts)", "close_source_branch": true, "type": "pullrequest", "id": 52, "destination": {"commit": {"hash": "4238f12047e4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4238f12047e4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4238f12047e4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-08-23T04:53:34.604824+00:00", "summary": {"raw": "Fixed bug in linear coil driver so that can handle both numpy arrays and single values as input when converting from base to amps \\(likely only used in analysis scripts\\)\r\n\r\n@shjohnst I would appreciate if you could test this in the lab to make sure I didn\u2019t screw anything up!", "markup": "markdown", "html": "<p>Fixed bug in linear coil driver so that can handle both numpy arrays and single values as input when converting from base to amps (likely only used in analysis scripts)</p>\n<p>@shjohnst I would appreciate if you could test this in the lab to make sure I didn\u2019t screw anything up!</p>", "type": "rendered"}, "source": {"commit": {"hash": "52cca8d2d7fd", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/52cca8d2d7fd.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/52cca8d2d7fd"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "pstarkey/linear_coil_driver"}}, "comment_count": 6, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-24T02:43:00.938089+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "2b3cd24e835e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2b3cd24e835e.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2b3cd24e835e"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Added check to kwarg in BiDirectionalCoilDriver to force it to an empty dictionary if no kwarg is specified when it is instantiated. This prevents exceptions occurring if you instantiate it with no kwarg.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/53/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:547696e50559%0D2b3cd24e835e?from_pullrequest_id=53"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/53/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/53.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/53/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/53/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/53"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/53/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:547696e50559%0D2b3cd24e835e?from_pullrequest_id=53"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/53/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/53/statuses_page=1.json"}}, "title": "Added check to kwarg in BiDirectionalCoilDriver to force it to an empty dictionary if no kwarg is specified when it is instantiated. This prevents exceptions occurring if you instantiate it with no kwarg.", "close_source_branch": true, "type": "pullrequest", "id": 53, "destination": {"commit": {"hash": "2b3cd24e835e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2b3cd24e835e.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2b3cd24e835e"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-08-28T06:11:56.457509+00:00", "summary": {"raw": "Added check to kwarg in BiDirectionalCoilDriver to force it to an empty dictionary if no kwarg is specified when it is instantiated. This prevents exceptions occurring if you instantiate it with no kwarg.", "markup": "markdown", "html": "<p>Added check to kwarg in BiDirectionalCoilDriver to force it to an empty dictionary if no kwarg is specified when it is instantiated. This prevents exceptions occurring if you instantiate it with no kwarg.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e520f3fe2cf8", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e520f3fe2cf8.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e520f3fe2cf8"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "pstarkey/linear_coil_driverpy-edited-online-with--1535436578217"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-08-30T05:50:57.715806+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "547696e50559", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/547696e50559.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/547696e50559"}}}, "closed_by": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, {"description": "Make use of zlock's new readers-writer locks, if both client and server code\r\nis new enough to support them.\r\nThis allows multiple clients to acquire a lock on a file simultaneously, so long\r\nas they have it open in read-only mode.\r\n\r\nreaders-writer locks are new in zprocess 2.7.0, but I have not made h5_lock depend on this version of zprocess. It just uses the functionality if present, and doesn't if not. The way that the changes are implemented in zprocess, a client that does not know about these changes gets a read-write lock (i.e. exclusive access), so it is safe for clients running different versions of zprocess to communicate with the same server.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/54/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:7075805627aa%0D736203440afa?from_pullrequest_id=54"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/54/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/54.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/54/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/54/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/54"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/54/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:7075805627aa%0D736203440afa?from_pullrequest_id=54"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/54/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/54/statuses_page=1.json"}}, "title": "support read-only locks in h5_lock", "close_source_branch": true, "type": "pullrequest", "id": 54, "destination": {"commit": {"hash": "736203440afa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/736203440afa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/736203440afa"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-09-11T20:29:56.881730+00:00", "summary": {"raw": "Make use of zlock's new readers-writer locks, if both client and server code\r\nis new enough to support them.\r\nThis allows multiple clients to acquire a lock on a file simultaneously, so long\r\nas they have it open in read-only mode.\r\n\r\nreaders-writer locks are new in zprocess 2.7.0, but I have not made h5_lock depend on this version of zprocess. It just uses the functionality if present, and doesn't if not. The way that the changes are implemented in zprocess, a client that does not know about these changes gets a read-write lock (i.e. exclusive access), so it is safe for clients running different versions of zprocess to communicate with the same server.", "markup": "markdown", "html": "<p>Make use of zlock's new readers-writer locks, if both client and server code\nis new enough to support them.\nThis allows multiple clients to acquire a lock on a file simultaneously, so long\nas they have it open in read-only mode.</p>\n<p>readers-writer locks are new in zprocess 2.7.0, but I have not made h5_lock depend on this version of zprocess. It just uses the functionality if present, and doesn't if not. The way that the changes are implemented in zprocess, a client that does not know about these changes gets a read-write lock (i.e. exclusive access), so it is safe for clients running different versions of zprocess to communicate with the same server.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a6d855159a3b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/a6d855159a3b"}, "html": {"href": "#!/cbillington/labscript_utils/commits/a6d855159a3b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "zlock_readwrite"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T18:57:59.941380+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "7075805627aa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/7075805627aa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/7075805627aa"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Raise TypeError rather than silently converting non-string keys in JSON encoding.\r\n\r\nPython's JSON encoder silently converts non-string dict keys to strings. This can cause subtle bugs, and the user should be made aware that they can only store strings as keys. Conversion to strings should be done explicitly to minimise surprise.\r\n\r\nThis bit me whilst adding some connection table properties to a device class I'm working on. One of the properties was a dictionary mapping ints to ints, and when read in in BLACS, the int keys had magically turned into strings. I could of course just convert them back to ints, but I'd rather be forced to store strings in the first place, if this is a limitation of JSON.\r\n\r\nThis change should be tested, as it's possible that code somewhere is relying on this implicit conversion.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/55/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:6f10cc76b2de%0D7075805627aa?from_pullrequest_id=55"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/55/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/55.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/55/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/55/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/55"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/55/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:6f10cc76b2de%0D7075805627aa?from_pullrequest_id=55"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/55/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/55/statuses_page=1.json"}}, "title": "Raise TypeError rather than silently converting non-string keys in JSON encoding.", "close_source_branch": true, "type": "pullrequest", "id": 55, "destination": {"commit": {"hash": "7075805627aa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/7075805627aa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/7075805627aa"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-09-18T17:56:41.270179+00:00", "summary": {"raw": "Raise TypeError rather than silently converting non-string keys in JSON encoding.\r\n\r\nPython's JSON encoder silently converts non-string dict keys to strings. This can cause subtle bugs, and the user should be made aware that they can only store strings as keys. Conversion to strings should be done explicitly to minimise surprise.\r\n\r\nThis bit me whilst adding some connection table properties to a device class I'm working on. One of the properties was a dictionary mapping ints to ints, and when read in in BLACS, the int keys had magically turned into strings. I could of course just convert them back to ints, but I'd rather be forced to store strings in the first place, if this is a limitation of JSON.\r\n\r\nThis change should be tested, as it's possible that code somewhere is relying on this implicit conversion.", "markup": "markdown", "html": "<p>Raise TypeError rather than silently converting non-string keys in JSON encoding.</p>\n<p>Python's JSON encoder silently converts non-string dict keys to strings. This can cause subtle bugs, and the user should be made aware that they can only store strings as keys. Conversion to strings should be done explicitly to minimise surprise.</p>\n<p>This bit me whilst adding some connection table properties to a device class I'm working on. One of the properties was a dictionary mapping ints to ints, and when read in in BLACS, the int keys had magically turned into strings. I could of course just convert them back to ints, but I'd rather be forced to store strings in the first place, if this is a limitation of JSON.</p>\n<p>This change should be tested, as it's possible that code somewhere is relying on this implicit conversion.</p>", "type": "rendered"}, "source": {"commit": {"hash": "3cefb40dd871", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/3cefb40dd871"}, "html": {"href": "#!/cbillington/labscript_utils/commits/3cefb40dd871"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T18:58:15.151762+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "6f10cc76b2de", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6f10cc76b2de.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6f10cc76b2de"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Solve issue #21 by using zlog for file logging.\r\n\r\n`zprocess` has gained a logging server in v2.8.1, called zlog.\r\n\r\n`labscript_utils.setup_logging` now checks for a running zlog server, and starts one if it doesn't exist. It then uses a logging handler that passes log messages to the server instead of writing them to disk. The server uses Python standard library logging handlers to do file rotation, and as it alone is the process interacting with the files, there is no conflict over the files, and no performance penalties of having to coordinate file opening and closing between processes.\r\n\r\nAt instantiation of a `zprocess.zlog.ZMQLoggingHandler`, the zlog client contacts the server to confirm it can write to the log file, and the client raises the error if the server says it can't.\r\n\r\nThen, while the application is running and logging is being done, communication to the server is one-way, with the client sending data to the server only. There is no way for the client to know that the file is still being written to, though if the server goes down and the outgoing zmq queue reaches the high water mark, a warning will be printed.\r\n\r\nAt interpreter shutdown the clients send a 'done' message to the server, and it closes the file once all clients are done.  It also closes the file after 5 seconds if no clients send any log messages (but then just opens it again if log messages subsequently arrive). This is to ensure that the file is still closed if programs do not close cleanly. For example I notice that the logger in BLACS' analysis submission thread doesn't seem to send a 'done ' message. I think this is because it is a daemon thread and is not `join()`ed cleanly when BLACS closes. This should be fixed at some point, but it does not cause problems with logging other than delaying the file being closed by the server for up to 5 seconds.\r\n\r\n\r\nA full description of the zlog protocol can be found [here](https://bitbucket.org/cbillington/zprocess/src/default/zprocess/zlog/__main__.py?at=default&fileviewer=file-view-default#__main__.py-31)\r\n\r\nAt present zlog is configured to only listen on localhost, and this change to labscript_utils assumes one is running on localhost. In the future this can be modified so that remote devices etc can send their logs back to a zlog server on the computer running BLACS so that even a muli-computer instance of BLACS will still have a single log file.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/56/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:736203440afa%0D547696e50559?from_pullrequest_id=56"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/56/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/56.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/56/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/56/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/56"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/56/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:736203440afa%0D547696e50559?from_pullrequest_id=56"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/56/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/56/statuses_page=1.json"}}, "title": "Use zlog for logging", "close_source_branch": true, "type": "pullrequest", "id": 56, "destination": {"commit": {"hash": "547696e50559", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/547696e50559.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/547696e50559"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-09-21T21:28:37.072274+00:00", "summary": {"raw": "Solve issue #21 by using zlog for file logging.\r\n\r\n`zprocess` has gained a logging server in v2.8.1, called zlog.\r\n\r\n`labscript_utils.setup_logging` now checks for a running zlog server, and starts one if it doesn't exist. It then uses a logging handler that passes log messages to the server instead of writing them to disk. The server uses Python standard library logging handlers to do file rotation, and as it alone is the process interacting with the files, there is no conflict over the files, and no performance penalties of having to coordinate file opening and closing between processes.\r\n\r\nAt instantiation of a `zprocess.zlog.ZMQLoggingHandler`, the zlog client contacts the server to confirm it can write to the log file, and the client raises the error if the server says it can't.\r\n\r\nThen, while the application is running and logging is being done, communication to the server is one-way, with the client sending data to the server only. There is no way for the client to know that the file is still being written to, though if the server goes down and the outgoing zmq queue reaches the high water mark, a warning will be printed.\r\n\r\nAt interpreter shutdown the clients send a 'done' message to the server, and it closes the file once all clients are done.  It also closes the file after 5 seconds if no clients send any log messages (but then just opens it again if log messages subsequently arrive). This is to ensure that the file is still closed if programs do not close cleanly. For example I notice that the logger in BLACS' analysis submission thread doesn't seem to send a 'done ' message. I think this is because it is a daemon thread and is not `join()`ed cleanly when BLACS closes. This should be fixed at some point, but it does not cause problems with logging other than delaying the file being closed by the server for up to 5 seconds.\r\n\r\n\r\nA full description of the zlog protocol can be found [here](https://bitbucket.org/cbillington/zprocess/src/default/zprocess/zlog/__main__.py?at=default&fileviewer=file-view-default#__main__.py-31)\r\n\r\nAt present zlog is configured to only listen on localhost, and this change to labscript_utils assumes one is running on localhost. In the future this can be modified so that remote devices etc can send their logs back to a zlog server on the computer running BLACS so that even a muli-computer instance of BLACS will still have a single log file.", "markup": "markdown", "html": "<p>Solve issue <a href=\"#!/labscript_suite/labscript_utils/issues/21/concurrent-log-handler-causes-unbearable\" rel=\"nofollow\" title=\"Concurrent log handler causes unbearable slowdown\" class=\"ap-connect-link\"><s>#21</s></a> by using zlog for file logging.</p>\n<p><code>zprocess</code> has gained a logging server in v2.8.1, called zlog.</p>\n<p><code>labscript_utils.setup_logging</code> now checks for a running zlog server, and starts one if it doesn't exist. It then uses a logging handler that passes log messages to the server instead of writing them to disk. The server uses Python standard library logging handlers to do file rotation, and as it alone is the process interacting with the files, there is no conflict over the files, and no performance penalties of having to coordinate file opening and closing between processes.</p>\n<p>At instantiation of a <code>zprocess.zlog.ZMQLoggingHandler</code>, the zlog client contacts the server to confirm it can write to the log file, and the client raises the error if the server says it can't.</p>\n<p>Then, while the application is running and logging is being done, communication to the server is one-way, with the client sending data to the server only. There is no way for the client to know that the file is still being written to, though if the server goes down and the outgoing zmq queue reaches the high water mark, a warning will be printed.</p>\n<p>At interpreter shutdown the clients send a 'done' message to the server, and it closes the file once all clients are done.  It also closes the file after 5 seconds if no clients send any log messages (but then just opens it again if log messages subsequently arrive). This is to ensure that the file is still closed if programs do not close cleanly. For example I notice that the logger in BLACS' analysis submission thread doesn't seem to send a 'done ' message. I think this is because it is a daemon thread and is not <code>join()</code>ed cleanly when BLACS closes. This should be fixed at some point, but it does not cause problems with logging other than delaying the file being closed by the server for up to 5 seconds.</p>\n<p>A full description of the zlog protocol can be found <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/default/zprocess/zlog/__main__.py?at=default&amp;fileviewer=file-view-default#__main__.py-31\" rel=\"nofollow\">here</a></p>\n<p>At present zlog is configured to only listen on localhost, and this change to labscript_utils assumes one is running on localhost. In the future this can be modified so that remote devices etc can send their logs back to a zlog server on the computer running BLACS so that even a muli-computer instance of BLACS will still have a single log file.</p>", "type": "rendered"}, "source": {"commit": {"hash": "bbf10d6e8024", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/bbf10d6e8024"}, "html": {"href": "#!/cbillington/labscript_utils/commits/bbf10d6e8024"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "use_zlog"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T18:57:35.258049+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "736203440afa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/736203440afa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/736203440afa"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add dedent() function, which dedents and removes newlines from strings so\r\nthat you can more easily write multiline error message etc, such as:\r\n```python\r\ndef foo()\r\n    msg = \"\"\"There was an error, which we have written in code\r\n        over multiple lines, but with indentation. This indentation\r\n        and these line breaks should be ignored.\r\n\r\n            1. But this extra indentation\r\n            2. and line endings\r\n            3. should be included verbatim\r\n\r\n        and then this text at the original indentation level should be\r\n        unwrapped again.\"\"\"\r\n    raise ValueError(dedent(msg))\r\n```\r\n\r\nThis function is not quite the same as Python's textwrap.dedent, as this one\r\nexcludes the first line from the indentation calculation, removes newlines,\r\nand includes lines with additional indentation, or blank lines, verbatim. I've been using it to\r\nmake long error messages without having to manually join strings with '+' for\r\neach line, which plays well with auto-wrapping text in text editors, e.g.\r\nalt-Q in sublime text.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/57/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:6eaaf4e51f5c%0D6f10cc76b2de?from_pullrequest_id=57"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/57/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/57.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/57/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/57/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/57"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/57/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:6eaaf4e51f5c%0D6f10cc76b2de?from_pullrequest_id=57"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/57/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/57/statuses_page=1.json"}}, "title": "text dedent utility function", "close_source_branch": true, "type": "pullrequest", "id": 57, "destination": {"commit": {"hash": "6f10cc76b2de", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6f10cc76b2de.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6f10cc76b2de"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-09-28T19:18:42.901472+00:00", "summary": {"raw": "Add dedent() function, which dedents and removes newlines from strings so\r\nthat you can more easily write multiline error message etc, such as:\r\n```python\r\ndef foo()\r\n    msg = \"\"\"There was an error, which we have written in code\r\n        over multiple lines, but with indentation. This indentation\r\n        and these line breaks should be ignored.\r\n\r\n            1. But this extra indentation\r\n            2. and line endings\r\n            3. should be included verbatim\r\n\r\n        and then this text at the original indentation level should be\r\n        unwrapped again.\"\"\"\r\n    raise ValueError(dedent(msg))\r\n```\r\n\r\nThis function is not quite the same as Python's textwrap.dedent, as this one\r\nexcludes the first line from the indentation calculation, removes newlines,\r\nand includes lines with additional indentation, or blank lines, verbatim. I've been using it to\r\nmake long error messages without having to manually join strings with '+' for\r\neach line, which plays well with auto-wrapping text in text editors, e.g.\r\nalt-Q in sublime text.", "markup": "markdown", "html": "<p>Add dedent() function, which dedents and removes newlines from strings so\nthat you can more easily write multiline error message etc, such as:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">()</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;There was an error, which we have written in code</span>\n<span class=\"s2\">        over multiple lines, but with indentation. This indentation</span>\n<span class=\"s2\">        and these line breaks should be ignored.</span>\n\n<span class=\"s2\">            1. But this extra indentation</span>\n<span class=\"s2\">            2. and line endings</span>\n<span class=\"s2\">            3. should be included verbatim</span>\n\n<span class=\"s2\">        and then this text at the original indentation level should be</span>\n<span class=\"s2\">        unwrapped again.&quot;&quot;&quot;</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">dedent</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n</pre></div>\n\n\n<p>This function is not quite the same as Python's textwrap.dedent, as this one\nexcludes the first line from the indentation calculation, removes newlines,\nand includes lines with additional indentation, or blank lines, verbatim. I've been using it to\nmake long error messages without having to manually join strings with '+' for\neach line, which plays well with auto-wrapping text in text editors, e.g.\nalt-Q in sublime text.</p>", "type": "rendered"}, "source": {"commit": {"hash": "2e1582443159", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/2e1582443159"}, "html": {"href": "#!/cbillington/labscript_utils/commits/2e1582443159"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "text_dedent"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-01T19:03:40.049979+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "6eaaf4e51f5c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6eaaf4e51f5c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6eaaf4e51f5c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add a function `get_unit_conversion_class(fullname)` to unitconversions module. If a fully qualified class name is provided, this will import just the class specified (even if it is not located within the unitconversions folder), without importing the entire contents of the unitconversions submodule, as is presently done.\r\n\r\nOtherwise, if just a class name is given without a full import path,\r\nthe function falls back to importing everything to find the class of the given\r\nname. This provides backward compatibility with shots compiled with versions\r\nof labscript that save the class name only (i.e. the current version).\r\n\r\nA custom `__all__` provides backward compatibility for versions of BLACS\r\n(i.e. the current version) that dont' know about this new function, and which import * from unitconversions. Submodules\r\nare only imported en-masse if `__all__` is actually accessed, at which point\r\nall the classes are imported and loaded into the globals dictionary (and their\r\nnames added to `__all__`).\r\n\r\nThis custom `__all__` even takes the bizarre step of adding items to the\r\n`globals()` dictionary (and to `__all__`) with the fully qualified names, e.g.\r\n'labscript_utils.unitconversions.submodule.SomeClass', usually disallowed\r\nvariable names in Python. This ensures that if an old version of BLACS\r\n(i.e. the current version) imports * and inspects its `globals()` dict looking\r\nfor unit conversion classes, it will still find them, even if the shot file\r\nthe conversion class name is coming from was compiled with a newer version of\r\nlabscript that saves the full paths.\r\n\r\nThis change paves the way for:\r\n\r\n* lascript to save fully qualified unit conversion class names, allowing\r\n  unit conversion classes to be stored within userlib instead of labscript_utils.\r\n\r\n* BLACS to improve performance by not importing all the classes en-masse.\r\n\r\nwhilst supporting full backward compatibility.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/58/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:5f7618c64d6c%0D49f8562b0620?from_pullrequest_id=58"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/58/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/58.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/58/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/58/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/58"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/58/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:5f7618c64d6c%0D49f8562b0620?from_pullrequest_id=58"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/58/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/58/statuses_page=1.json"}}, "title": "Unit conversion restructuring", "close_source_branch": true, "type": "pullrequest", "id": 58, "destination": {"commit": {"hash": "49f8562b0620", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/49f8562b0620.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/49f8562b0620"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-10-04T03:17:17.226078+00:00", "summary": {"raw": "Add a function `get_unit_conversion_class(fullname)` to unitconversions module. If a fully qualified class name is provided, this will import just the class specified (even if it is not located within the unitconversions folder), without importing the entire contents of the unitconversions submodule, as is presently done.\r\n\r\nOtherwise, if just a class name is given without a full import path,\r\nthe function falls back to importing everything to find the class of the given\r\nname. This provides backward compatibility with shots compiled with versions\r\nof labscript that save the class name only (i.e. the current version).\r\n\r\nA custom `__all__` provides backward compatibility for versions of BLACS\r\n(i.e. the current version) that dont' know about this new function, and which import * from unitconversions. Submodules\r\nare only imported en-masse if `__all__` is actually accessed, at which point\r\nall the classes are imported and loaded into the globals dictionary (and their\r\nnames added to `__all__`).\r\n\r\nThis custom `__all__` even takes the bizarre step of adding items to the\r\n`globals()` dictionary (and to `__all__`) with the fully qualified names, e.g.\r\n'labscript_utils.unitconversions.submodule.SomeClass', usually disallowed\r\nvariable names in Python. This ensures that if an old version of BLACS\r\n(i.e. the current version) imports * and inspects its `globals()` dict looking\r\nfor unit conversion classes, it will still find them, even if the shot file\r\nthe conversion class name is coming from was compiled with a newer version of\r\nlabscript that saves the full paths.\r\n\r\nThis change paves the way for:\r\n\r\n* lascript to save fully qualified unit conversion class names, allowing\r\n  unit conversion classes to be stored within userlib instead of labscript_utils.\r\n\r\n* BLACS to improve performance by not importing all the classes en-masse.\r\n\r\nwhilst supporting full backward compatibility.", "markup": "markdown", "html": "<p>Add a function <code>get_unit_conversion_class(fullname)</code> to unitconversions module. If a fully qualified class name is provided, this will import just the class specified (even if it is not located within the unitconversions folder), without importing the entire contents of the unitconversions submodule, as is presently done.</p>\n<p>Otherwise, if just a class name is given without a full import path,\nthe function falls back to importing everything to find the class of the given\nname. This provides backward compatibility with shots compiled with versions\nof labscript that save the class name only (i.e. the current version).</p>\n<p>A custom <code>__all__</code> provides backward compatibility for versions of BLACS\n(i.e. the current version) that dont' know about this new function, and which import * from unitconversions. Submodules\nare only imported en-masse if <code>__all__</code> is actually accessed, at which point\nall the classes are imported and loaded into the globals dictionary (and their\nnames added to <code>__all__</code>).</p>\n<p>This custom <code>__all__</code> even takes the bizarre step of adding items to the\n<code>globals()</code> dictionary (and to <code>__all__</code>) with the fully qualified names, e.g.\n'labscript_utils.unitconversions.submodule.SomeClass', usually disallowed\nvariable names in Python. This ensures that if an old version of BLACS\n(i.e. the current version) imports * and inspects its <code>globals()</code> dict looking\nfor unit conversion classes, it will still find them, even if the shot file\nthe conversion class name is coming from was compiled with a newer version of\nlabscript that saves the full paths.</p>\n<p>This change paves the way for:</p>\n<ul>\n<li>\n<p>lascript to save fully qualified unit conversion class names, allowing\n  unit conversion classes to be stored within userlib instead of labscript_utils.</p>\n</li>\n<li>\n<p>BLACS to improve performance by not importing all the classes en-masse.</p>\n</li>\n</ul>\n<p>whilst supporting full backward compatibility.</p>", "type": "rendered"}, "source": {"commit": {"hash": "b419656e0ce8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/b419656e0ce8"}, "html": {"href": "#!/cbillington/labscript_utils/commits/b419656e0ce8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "defer_unit_conversion_imports"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-10-25T18:53:15.018981+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "5f7618c64d6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5f7618c64d6c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5f7618c64d6c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Resolve issue #39 by having modulewatcher also reset the contents of `sys.meta_path`.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/59/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:99d603f176d0%0D5f7618c64d6c?from_pullrequest_id=59"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/59/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/59.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/59/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/59/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/59"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/59/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:99d603f176d0%0D5f7618c64d6c?from_pullrequest_id=59"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/59/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/59/statuses_page=1.json"}}, "title": "Modulewatcher handle sys.meta_path (Issue #39).", "close_source_branch": true, "type": "pullrequest", "id": 59, "destination": {"commit": {"hash": "5f7618c64d6c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5f7618c64d6c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5f7618c64d6c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-10-24T21:11:09.996383+00:00", "summary": {"raw": "Resolve issue #39 by having modulewatcher also reset the contents of `sys.meta_path`.", "markup": "markdown", "html": "<p>Resolve issue #39 by having modulewatcher also reset the contents of <code>sys.meta_path</code>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ceba0e9c648e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/ceba0e9c648e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/ceba0e9c648e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "module_watcher_bugfix"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-02T12:23:44.472442+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "99d603f176d0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/99d603f176d0.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/99d603f176d0"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fix bug where labconfig did not make intermediate directories when creating\r\na config file, causing a file not found error if parent directories absent.\r\n\r\nBump labscript_utils version to 2.9.1 so applications may ensure they have the fix.\r\n\r\nThis should fix [lyse issue #43](#!/labscript_suite/lyse/issues/43/configuration-file-not-created-if-it-does).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/60/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:4fab625785b6%0D5e2604b7cec2?from_pullrequest_id=60"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/60/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/60.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/60/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/60/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/60"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/60/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:4fab625785b6%0D5e2604b7cec2?from_pullrequest_id=60"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/60/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/60/statuses_page=1.json"}}, "title": "Labconfig: make intermediate directories", "close_source_branch": true, "type": "pullrequest", "id": 60, "destination": {"commit": {"hash": "5e2604b7cec2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5e2604b7cec2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5e2604b7cec2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-11-08T20:31:25.356613+00:00", "summary": {"raw": "Fix bug where labconfig did not make intermediate directories when creating\r\na config file, causing a file not found error if parent directories absent.\r\n\r\nBump labscript_utils version to 2.9.1 so applications may ensure they have the fix.\r\n\r\nThis should fix [lyse issue #43](#!/labscript_suite/lyse/issues/43/configuration-file-not-created-if-it-does).", "markup": "markdown", "html": "<p>Fix bug where labconfig did not make intermediate directories when creating\na config file, causing a file not found error if parent directories absent.</p>\n<p>Bump labscript_utils version to 2.9.1 so applications may ensure they have the fix.</p>\n<p>This should fix <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/issues/43/configuration-file-not-created-if-it-does\" rel=\"nofollow\">lyse issue #43</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "383076d6423c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/383076d6423c"}, "html": {"href": "#!/cbillington/labscript_utils/commits/383076d6423c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-11-26T16:05:57.999409+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "4fab625785b6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4fab625785b6.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4fab625785b6"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:68b30562f3e1%0Dcddc6bf3d4a4?from_pullrequest_id=61"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/61"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:68b30562f3e1%0Dcddc6bf3d4a4?from_pullrequest_id=61"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/61/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/61/statuses_page=1.json"}}, "title": "Allow FileWatcher to use hash for specified file types", "close_source_branch": true, "type": "pullrequest", "id": 61, "destination": {"commit": {"hash": "cddc6bf3d4a4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/cddc6bf3d4a4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/cddc6bf3d4a4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2018-11-26T04:34:26.517912+00:00", "summary": {"raw": "Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. `callback` function can take a third argument, to discriminate between file modified, restored, or deleted events. `FileWatcher` is presently used in the `connection_table` plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:\r\n\r\n_Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect._ \r\n\r\nThis feature would permit the prompt to disappear should watched files be restored to their earlier state.\r\n\r\nPer the `FileWatcher` docstring:\r\n\r\n        Detect modification, deletion, creation, or restoration of specific files\r\n        (and all files in specific folders).\r\n    \r\n        callback -- elicited whenever file events are detected, requires at least\r\n            (name, info) arguments. Event specific callback requires \r\n            (name, info, event) arguments, where event is on of:\r\n            'modified', 'deleted' (or None), 'created', 'restored', 'original'\r\n            The 'original' event corresponds to a state change that results in \r\n            the original file info at instantiation.\r\n    \r\n        Keyword arguments:\r\n        files -- List of specific files to watch.\r\n            A single file can be specified as a string (default None).\r\n        folders -- List of specific folders to watch.\r\n            A single folder can be specified as a string (default None).\r\n            If a file is created/deleted in/from any watched folder, it is added/\r\n            removed to/from the FileWatcher.files attribute.\r\n        modified_info -- File info to detect modification/restoration with.\r\n            If None (default), the initial modified info will be based on the \r\n            first polling of files.\r\n        hashable_types -- File extensions for which MD5 checksum will be used to\r\n            detect modification/restoration with (default None). Files of any \r\n            other type will be watched using their modified time. \r\n            Restoration cannot be detected for types not in hashable_types.\r\n        interval -- Polling interval in seconds (default 1).\r\n\r\n* In addition to `hashable_types`, added `polling_interval` keyword argument \\(formerly hard-coded\\).\r\n* Use `inspect.getfullargspec` for Python 3 \\(`getargspec` is deprecated\\).\r\n* Catch `IOError` in addition to `OSError` when file is deleted or unavailable.", "markup": "markdown", "html": "<p>Watch files of a specified type using MD5 hash, so that restoration of original watch-list can be detected. <code>callback</code> function can take a third argument, to discriminate between file modified, restored, or deleted events. <code>FileWatcher</code> is presently used in the <code>connection_table</code> plugin of blacs, whereby any modification to the connection table python script or associated globals files elicits a prompt:</p>\n<p><em>Your connection table, or related files, have been modified. Please recompile your connection table for these changes to take effect.</em> </p>\n<p>This feature would permit the prompt to disappear should watched files be restored to their earlier state.</p>\n<p>Per the <code>FileWatcher</code> docstring:</p>\n<div class=\"codehilite\"><pre><span></span>    Detect modification, deletion, creation, or restoration of specific files\n    (and all files in specific folders).\n\n    callback -- elicited whenever file events are detected, requires at least\n        (name, info) arguments. Event specific callback requires \n        (name, info, event) arguments, where event is on of:\n        &#39;modified&#39;, &#39;deleted&#39; (or None), &#39;created&#39;, &#39;restored&#39;, &#39;original&#39;\n        The &#39;original&#39; event corresponds to a state change that results in \n        the original file info at instantiation.\n\n    Keyword arguments:\n    files -- List of specific files to watch.\n        A single file can be specified as a string (default None).\n    folders -- List of specific folders to watch.\n        A single folder can be specified as a string (default None).\n        If a file is created/deleted in/from any watched folder, it is added/\n        removed to/from the FileWatcher.files attribute.\n    modified_info -- File info to detect modification/restoration with.\n        If None (default), the initial modified info will be based on the \n        first polling of files.\n    hashable_types -- File extensions for which MD5 checksum will be used to\n        detect modification/restoration with (default None). Files of any \n        other type will be watched using their modified time. \n        Restoration cannot be detected for types not in hashable_types.\n    interval -- Polling interval in seconds (default 1).\n</pre></div>\n\n\n<ul>\n<li>In addition to <code>hashable_types</code>, added <code>polling_interval</code> keyword argument (formerly hard-coded).</li>\n<li>Use <code>inspect.getfullargspec</code> for Python 3 (<code>getargspec</code> is deprecated).</li>\n<li>Catch <code>IOError</code> in addition to <code>OSError</code> when file is deleted or unavailable.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "38f2c9f5b526", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils/commit/38f2c9f5b526"}, "html": {"href": "#!/monashspinor/labscript_utils/commits/38f2c9f5b526"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/labscript_utils"}, "html": {"href": "#!/monashspinor/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5cf13304-6f31-4f15-bb60-526dd53a2385}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "monashspinor/labscript_utils", "uuid": "{5cf13304-6f31-4f15-bb60-526dd53a2385}"}, "branch": {"name": "filewatcher_events"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T02:21:01.990842+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "68b30562f3e1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/68b30562f3e1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/68b30562f3e1"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Remove the h5py monkeypatch for allowing lists of unicode strings.\r\nDepend on h5py 2.9, which includes this functionality.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/62/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:4593be2adc0f%0D2c5e11938aba?from_pullrequest_id=62"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/62/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/62.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/62/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/62/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/62"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/62/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:4593be2adc0f%0D2c5e11938aba?from_pullrequest_id=62"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/62/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/62/statuses_page=1.json"}}, "title": "Remove h5py monkeypatch", "close_source_branch": true, "type": "pullrequest", "id": 62, "destination": {"commit": {"hash": "2c5e11938aba", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2c5e11938aba.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2c5e11938aba"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-01-27T16:23:58.990698+00:00", "summary": {"raw": "Remove the h5py monkeypatch for allowing lists of unicode strings.\r\nDepend on h5py 2.9, which includes this functionality.", "markup": "markdown", "html": "<p>Remove the h5py monkeypatch for allowing lists of unicode strings.\nDepend on h5py 2.9, which includes this functionality.</p>", "type": "rendered"}, "source": {"commit": {"hash": "d3f1d4c664e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/d3f1d4c664e3"}, "html": {"href": "#!/cbillington/labscript_utils/commits/d3f1d4c664e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remove-workaround"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-04T18:29:55.598403+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "4593be2adc0f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4593be2adc0f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4593be2adc0f"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add a class for showing a splash screen. The class takes an image file as an argument, and has a show() and hide() method.\r\n\r\nWe used to have splash screens, they didn't survive the port to Qt. But I've been using some slow computers lately and splash screens are nice to know something's happening, so I thought I'd resurrect them.\r\n\r\nThis one is using tkinter for the GUI so there are no expensive imports required for it to run, and it can be run early in program startup, maximising the proportion of time that something is showing.\r\n\r\nIt's not as fancy as the old one that used to print log info as it was starting. It just says 'loading' statically.\r\n\r\nRequires pillow. Pillow comes with Anaconda, but I'll add it to the installer requirements.\r\n\r\nMinor version bump so programs can rely on it.\r\n\r\nLooks like this:\r\n\r\n![splashscreen.png](data/bitbucket.org/repo/KEMMje/images/2601513210-splashscreen.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/63/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:6e292e1ed6e2%0D4593be2adc0f?from_pullrequest_id=63"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/63/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/63.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/63/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/63/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/63"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/63/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:6e292e1ed6e2%0D4593be2adc0f?from_pullrequest_id=63"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/63/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/63/statuses_page=1.json"}}, "title": "Splash Screen", "close_source_branch": true, "type": "pullrequest", "id": 63, "destination": {"commit": {"hash": "4593be2adc0f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4593be2adc0f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4593be2adc0f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-01-29T00:32:19.574693+00:00", "summary": {"raw": "Add a class for showing a splash screen. The class takes an image file as an argument, and has a show() and hide() method.\r\n\r\nWe used to have splash screens, they didn't survive the port to Qt. But I've been using some slow computers lately and splash screens are nice to know something's happening, so I thought I'd resurrect them.\r\n\r\nThis one is using tkinter for the GUI so there are no expensive imports required for it to run, and it can be run early in program startup, maximising the proportion of time that something is showing.\r\n\r\nIt's not as fancy as the old one that used to print log info as it was starting. It just says 'loading' statically.\r\n\r\nRequires pillow. Pillow comes with Anaconda, but I'll add it to the installer requirements.\r\n\r\nMinor version bump so programs can rely on it.\r\n\r\nLooks like this:\r\n\r\n![splashscreen.png](data/bitbucket.org/repo/KEMMje/images/2601513210-splashscreen.png)", "markup": "markdown", "html": "<p>Add a class for showing a splash screen. The class takes an image file as an argument, and has a show() and hide() method.</p>\n<p>We used to have splash screens, they didn't survive the port to Qt. But I've been using some slow computers lately and splash screens are nice to know something's happening, so I thought I'd resurrect them.</p>\n<p>This one is using tkinter for the GUI so there are no expensive imports required for it to run, and it can be run early in program startup, maximising the proportion of time that something is showing.</p>\n<p>It's not as fancy as the old one that used to print log info as it was starting. It just says 'loading' statically.</p>\n<p>Requires pillow. Pillow comes with Anaconda, but I'll add it to the installer requirements.</p>\n<p>Minor version bump so programs can rely on it.</p>\n<p>Looks like this:</p>\n<p><img alt=\"splashscreen.png\" src=\"data/bitbucket.org/repo/KEMMje/images/2601513210-splashscreen.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "2739d810e36c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/2739d810e36c"}, "html": {"href": "#!/cbillington/labscript_utils/commits/2739d810e36c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "splash"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-04T19:58:33.818952+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "6e292e1ed6e2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6e292e1ed6e2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6e292e1ed6e2"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR disables the quick-edit feature of the windows console while labscript-suite applications are running.\r\n\r\nQuick edit was enabled by default in Windows 10. It causes applications that output text to hang if the console is in 'select' mode, which the console will go into indefinitely (until you press a key) if you merely click on it. This has caused zlock servers to time-out, and all sorts of other crashes due to applications hanging after someone innocuously clicks on their consoles.\r\n\r\nIf the user wants to select text from the console, they can right click and go into select mode as has always been possible, or if the program crashes and quits the console will go back into quick-edit mode anyhow.\r\n\r\nWorth testing this to ensure it doesn't break if there are no console windows, or console windows that have child processes, that sort of thing. I've tested a bit, but would be good to be sure.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/64/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:9443c92c7c8b%0D6b2f9766b657?from_pullrequest_id=64"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/64/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/64.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/64/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/64/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/64"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/64/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:9443c92c7c8b%0D6b2f9766b657?from_pullrequest_id=64"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/64/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/64/statuses_page=1.json"}}, "title": "Disable quick-edit", "close_source_branch": true, "type": "pullrequest", "id": 64, "destination": {"commit": {"hash": "6b2f9766b657", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6b2f9766b657.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6b2f9766b657"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-05T22:29:48.644637+00:00", "summary": {"raw": "This PR disables the quick-edit feature of the windows console while labscript-suite applications are running.\r\n\r\nQuick edit was enabled by default in Windows 10. It causes applications that output text to hang if the console is in 'select' mode, which the console will go into indefinitely (until you press a key) if you merely click on it. This has caused zlock servers to time-out, and all sorts of other crashes due to applications hanging after someone innocuously clicks on their consoles.\r\n\r\nIf the user wants to select text from the console, they can right click and go into select mode as has always been possible, or if the program crashes and quits the console will go back into quick-edit mode anyhow.\r\n\r\nWorth testing this to ensure it doesn't break if there are no console windows, or console windows that have child processes, that sort of thing. I've tested a bit, but would be good to be sure.", "markup": "markdown", "html": "<p>This PR disables the quick-edit feature of the windows console while labscript-suite applications are running.</p>\n<p>Quick edit was enabled by default in Windows 10. It causes applications that output text to hang if the console is in 'select' mode, which the console will go into indefinitely (until you press a key) if you merely click on it. This has caused zlock servers to time-out, and all sorts of other crashes due to applications hanging after someone innocuously clicks on their consoles.</p>\n<p>If the user wants to select text from the console, they can right click and go into select mode as has always been possible, or if the program crashes and quits the console will go back into quick-edit mode anyhow.</p>\n<p>Worth testing this to ensure it doesn't break if there are no console windows, or console windows that have child processes, that sort of thing. I've tested a bit, but would be good to be sure.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4fef72575a71", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/4fef72575a71"}, "html": {"href": "#!/cbillington/labscript_utils/commits/4fef72575a71"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "disable-quick-edit"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T16:18:31.561332+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "9443c92c7c8b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9443c92c7c8b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9443c92c7c8b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Delete some long-unused modules. We no longer use gtk and no longer need to\r\nhack strings in HDF5 files to be fixed-length ones.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/65/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:9fdcbae4e0bf%0D9443c92c7c8b?from_pullrequest_id=65"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/65/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/65.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/65/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/65/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/65"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/65/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:9fdcbae4e0bf%0D9443c92c7c8b?from_pullrequest_id=65"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/65/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/65/statuses_page=1.json"}}, "title": "Delete unused submodules", "close_source_branch": true, "type": "pullrequest", "id": 65, "destination": {"commit": {"hash": "9443c92c7c8b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9443c92c7c8b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9443c92c7c8b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-05T23:01:35.828820+00:00", "summary": {"raw": "Delete some long-unused modules. We no longer use gtk and no longer need to\r\nhack strings in HDF5 files to be fixed-length ones.", "markup": "markdown", "html": "<p>Delete some long-unused modules. We no longer use gtk and no longer need to\nhack strings in HDF5 files to be fixed-length ones.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5bd379d9661b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5bd379d9661b"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5bd379d9661b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remove_cruft"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T16:18:48.618565+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "9fdcbae4e0bf", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9fdcbae4e0bf.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9fdcbae4e0bf"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.\r\n\r\n* Added ls_zprocess, which wraps zprocess classes with singletons and\r\n  subclasses configured to use labconfig encryption settings, as well\r\n  as zlock host and port settings, and zprocess.remote  port setting.\r\n\r\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\r\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\r\n  not normally be run manually.\r\n\r\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\r\n  Note that once h5_lock is imported by an application, or once a logging handler\r\n  is configured, the ProcessTree object created is set as the zprocess default\r\n  process tree. This is backward compatibility for applications not using the\r\n  wrapped classes. This does not mean encryption can be turned on and work\r\n  everywhere, that will still be a backward incompatible jump. But it does mean\r\n  that the settings are inherited by subprocesses using\r\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\r\n  compatibility for labscript suite programs in their current form.\r\n\r\n* Bump version so applications may make use of these classes and we can\r\n  begin to move them to a state where encryption can be turned on.\r\n  This should be in place before remote devices are implemented in BLACS.\r\n\r\nThese changes are intended to be backward compatible so far, but encryption\r\ncannot be used until applications have their use of zprocess ported to use\r\nthese wrappers.\r\n\r\nI would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:e31de7d5a310%0D922b19ea1447?from_pullrequest_id=66"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/66"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:e31de7d5a310%0D922b19ea1447?from_pullrequest_id=66"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/66/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/66/statuses_page=1.json"}}, "title": "Beginning the great zprocess migration for remote device support", "close_source_branch": true, "type": "pullrequest", "id": 66, "destination": {"commit": {"hash": "922b19ea1447", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/922b19ea1447.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/922b19ea1447"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-06T19:14:08.095632+00:00", "summary": {"raw": "This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.\r\n\r\n* Added ls_zprocess, which wraps zprocess classes with singletons and\r\n  subclasses configured to use labconfig encryption settings, as well\r\n  as zlock host and port settings, and zprocess.remote  port setting.\r\n\r\n* Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\r\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\r\n  not normally be run manually.\r\n\r\n* Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\r\n  Note that once h5_lock is imported by an application, or once a logging handler\r\n  is configured, the ProcessTree object created is set as the zprocess default\r\n  process tree. This is backward compatibility for applications not using the\r\n  wrapped classes. This does not mean encryption can be turned on and work\r\n  everywhere, that will still be a backward incompatible jump. But it does mean\r\n  that the settings are inherited by subprocesses using\r\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\r\n  compatibility for labscript suite programs in their current form.\r\n\r\n* Bump version so applications may make use of these classes and we can\r\n  begin to move them to a state where encryption can be turned on.\r\n  This should be in place before remote devices are implemented in BLACS.\r\n\r\nThese changes are intended to be backward compatible so far, but encryption\r\ncannot be used until applications have their use of zprocess ported to use\r\nthese wrappers.\r\n\r\nI would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.", "markup": "markdown", "html": "<p>This PR adds wrappers around zprocess functionality configuring it according to labconfig. Use of these wrappers will enable applications to use zprocess with its encryption functionality, without having to configure everything within each application. We should get the encryption stuff working before enabling remote devices in BLACS.</p>\n<ul>\n<li>\n<p>Added ls_zprocess, which wraps zprocess classes with singletons and\n  subclasses configured to use labconfig encryption settings, as well\n  as zlock host and port settings, and zprocess.remote  port setting.</p>\n</li>\n<li>\n<p>Added zlock.py, zlog.py and remote.py, which can be used to start zlock,\n  zlog and zprocess.remote servers according to labconfig settings. zlog should\n  not normally be run manually.</p>\n</li>\n<li>\n<p>Modified setup_logging.py and h5_lock.py to make use of the wrapped classes.\n  Note that once h5_lock is imported by an application, or once a logging handler\n  is configured, the ProcessTree object created is set as the zprocess default\n  process tree. This is backward compatibility for applications not using the\n  wrapped classes. This does not mean encryption can be turned on and work\n  everywhere, that will still be a backward incompatible jump. But it does mean\n  that the settings are inherited by subprocesses using\n  Process() classes without specifying ProcessTree (which is dprecated). So it provides backward\n  compatibility for labscript suite programs in their current form.</p>\n</li>\n<li>\n<p>Bump version so applications may make use of these classes and we can\n  begin to move them to a state where encryption can be turned on.\n  This should be in place before remote devices are implemented in BLACS.</p>\n</li>\n</ul>\n<p>These changes are intended to be backward compatible so far, but encryption\ncannot be used until applications have their use of zprocess ported to use\nthese wrappers.</p>\n<p>I would want to test these changes for regressions before merging them, preferably on a real setup! It should work talking with existing zlock servers without them needing to be restarted or anything.</p>", "type": "rendered"}, "source": {"commit": {"hash": "23495fab0c54", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/23495fab0c54"}, "html": {"href": "#!/cbillington/labscript_utils/commits/23495fab0c54"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "zprocess_changes"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T17:19:28.750299+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e31de7d5a310", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e31de7d5a310.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e31de7d5a310"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Every now and again I get bitten by leftover .pyc files and empty folders when updating\r\nusing mercurial.\r\n\r\nSince updating via mercurial is more or less our official way of updating labscript suite programs, this ought to be a bit cleaner.\r\n\r\nThis PR has labscript_utils configure labscript suite repos to have a hook that deletes .pyc files and empty folders whenever hg update is run.\r\n\r\nThe configuration is checked and applied whenever labscript_utils is imported,\r\nand runs when hg update is run.\r\n\r\nThis helps avoid trouble when leftover .pyc files from the wrong branch or\r\npossibly even wrong Python version are importable even though their .py files\r\nare gone.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/67/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:d304940ddb55%0D9fdcbae4e0bf?from_pullrequest_id=67"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/67/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/67.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/67/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/67/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/67"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/67/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:d304940ddb55%0D9fdcbae4e0bf?from_pullrequest_id=67"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/67/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/67/statuses_page=1.json"}}, "title": "Update hook to clean .pyc files and empty folders", "close_source_branch": true, "type": "pullrequest", "id": 67, "destination": {"commit": {"hash": "9fdcbae4e0bf", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9fdcbae4e0bf.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9fdcbae4e0bf"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-08T20:08:42.011461+00:00", "summary": {"raw": "Every now and again I get bitten by leftover .pyc files and empty folders when updating\r\nusing mercurial.\r\n\r\nSince updating via mercurial is more or less our official way of updating labscript suite programs, this ought to be a bit cleaner.\r\n\r\nThis PR has labscript_utils configure labscript suite repos to have a hook that deletes .pyc files and empty folders whenever hg update is run.\r\n\r\nThe configuration is checked and applied whenever labscript_utils is imported,\r\nand runs when hg update is run.\r\n\r\nThis helps avoid trouble when leftover .pyc files from the wrong branch or\r\npossibly even wrong Python version are importable even though their .py files\r\nare gone.", "markup": "markdown", "html": "<p>Every now and again I get bitten by leftover .pyc files and empty folders when updating\nusing mercurial.</p>\n<p>Since updating via mercurial is more or less our official way of updating labscript suite programs, this ought to be a bit cleaner.</p>\n<p>This PR has labscript_utils configure labscript suite repos to have a hook that deletes .pyc files and empty folders whenever hg update is run.</p>\n<p>The configuration is checked and applied whenever labscript_utils is imported,\nand runs when hg update is run.</p>\n<p>This helps avoid trouble when leftover .pyc files from the wrong branch or\npossibly even wrong Python version are importable even though their .py files\nare gone.</p>", "type": "rendered"}, "source": {"commit": {"hash": "8f99cb572fae", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/8f99cb572fae"}, "html": {"href": "#!/cbillington/labscript_utils/commits/8f99cb572fae"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "update_hook"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T17:01:25.983973+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d304940ddb55", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d304940ddb55.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d304940ddb55"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Replace Win7AppId1.1.exe with Python implementation as proposed by phil in issue #22.\r\n\r\nRemove winshell subfolder and move to single-file submodule winshell.py.\r\n\r\nI've tested this, but might be worth an additional test somewhere else since windows seems to\r\nhave a long memory about appid stuff, and just because it all looked good for me doesn't mean it wasn't a false positive from Windows' previous knowledge of the matter.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/68/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:922b19ea1447%0Dd304940ddb55?from_pullrequest_id=68"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/68/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/68"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:922b19ea1447%0Dd304940ddb55?from_pullrequest_id=68"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/68/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/68/statuses_page=1.json"}}, "title": "Winshell exe removal", "close_source_branch": true, "type": "pullrequest", "id": 68, "destination": {"commit": {"hash": "d304940ddb55", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d304940ddb55.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d304940ddb55"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-08T22:30:56.216110+00:00", "summary": {"raw": "Replace Win7AppId1.1.exe with Python implementation as proposed by phil in issue #22.\r\n\r\nRemove winshell subfolder and move to single-file submodule winshell.py.\r\n\r\nI've tested this, but might be worth an additional test somewhere else since windows seems to\r\nhave a long memory about appid stuff, and just because it all looked good for me doesn't mean it wasn't a false positive from Windows' previous knowledge of the matter.", "markup": "markdown", "html": "<p>Replace Win7AppId1.1.exe with Python implementation as proposed by phil in issue <a href=\"#!/labscript_suite/labscript_utils/issues/22/the-win7appid-executable-can-be-replaced\" rel=\"nofollow\" title=\"The Win7AppId executable can be replaced with Python calls now\" class=\"ap-connect-link\"><s>#22</s></a>.</p>\n<p>Remove winshell subfolder and move to single-file submodule winshell.py.</p>\n<p>I've tested this, but might be worth an additional test somewhere else since windows seems to\nhave a long memory about appid stuff, and just because it all looked good for me doesn't mean it wasn't a false positive from Windows' previous knowledge of the matter.</p>", "type": "rendered"}, "source": {"commit": {"hash": "86f4dbc159e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/86f4dbc159e3"}, "html": {"href": "#!/cbillington/labscript_utils/commits/86f4dbc159e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T17:01:45.880685+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "922b19ea1447", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/922b19ea1447.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/922b19ea1447"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/69/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:0675faebc6c4%0D73c42f98ed4c?from_pullrequest_id=69"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/69/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/69"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:0675faebc6c4%0D73c42f98ed4c?from_pullrequest_id=69"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/69/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/69/statuses_page=1.json"}}, "title": "check_version without importing modules", "close_source_branch": true, "type": "pullrequest", "id": 69, "destination": {"commit": {"hash": "73c42f98ed4c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/73c42f98ed4c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/73c42f98ed4c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-10T02:56:48.677972+00:00", "summary": {"raw": "A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. \r\n\r\nThis PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. \r\n\r\nI used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.\r\n\r\nBut I realised we can ensure this by calling `imp.find_module` (Py2) or `importlib.find_spec` (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).\r\n\r\nThe one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.\r\n\r\nAlso, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a `__version__` literal. Much faster than actually importing them.\r\n\r\nRemoved brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).\r\n\r\nBLACS starts up and restarts tabs noticeably snappier with this.\r\n\r\nSpeed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.\r\n\r\nIn particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)", "markup": "markdown", "html": "<p>A major source of sluggishness in labscript suite programs is importing things just to check that they are a compatible version, even though the modules might not be used. For example, some devices in labscript_devices depend on a certain version of labscript, and so importing labscript_devices (even if just for a BLACS tab) means importing labscript which means importing scipy...it adds up quick. </p>\n<p>This PR changes the check_version function to use Python's pkg_resources module to identify the version of a package without importing it. </p>\n<p>I used to not think this was a good idea, because I wanted to know the version actually being imported was the one that we were checking the version of - in case there were multiple copies of a module on the system, which is still way too easy to do, you could get false positives saying versions were fine when they were in fact totally borked.</p>\n<p>But I realised we can ensure this by calling <code>imp.find_module</code> (Py2) or <code>importlib.find_spec</code> (Py3) to find the location of a module without importing it, and compare that with the path in pkg_resources to confirm the version being checked is the one that would be imported (and to also check the module exists and it's not just dead .egg-info files lying around with version info for things that have been deleted).</p>\n<p>The one downside is that if you're checking the version of a package with a different 'project name' to its import name (i.e. pyserial vs serial), then you now have to give the check_version function the project name too. This is not the case for any of our present uses of check_version though.</p>\n<p>Also, of course labscript suite repos don't have .egg-info files saying what version they are. So this code also just reads their code looking for a <code>__version__</code> literal. Much faster than actually importing them.</p>\n<p>Removed brute_import since we're not importing the modules anymore, and move version checking code to versions.py (still imported from labscript_utils so no changes needed to application code).</p>\n<p>BLACS starts up and restarts tabs noticeably snappier with this.</p>\n<p>Speed isn't what motivated me to do this though, I'm thinking of centralising version checking a bit more so that you don't need to wait to hit the code that needs the version before you get an error. A list of incompatible modules all at once, and even the offer to automatically fix the situation if it is straightforward (not hg updating any repos, but pip or conda packages, perhaps) would be much nicer. But it's untenable to centralise the checks for the whole suite at startup if it means actually importing everything. But with this check_version we can do a consistency check all at once and whenever we want.</p>\n<p>In particular I'm looking at specifying versions in the installer, since we already depend on versions of things newer than what is in default anaconda (even though the updated package is one call to conda away)</p>", "type": "rendered"}, "source": {"commit": {"hash": "0f31a19e38e2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0f31a19e38e2"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0f31a19e38e2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-15T21:22:17.318844+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "0675faebc6c4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/0675faebc6c4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/0675faebc6c4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fix issue where servers would have console windows when they were supposed to be started in the background.\r\n\r\n* Add '--daemon' arg to servers, otherwise they start with cmd consoles in\r\nWindows even if their parent process does not have one. Call them with this\r\narg from labscript setup code that expects them to be daemons.\r\n\r\nThis is pretty simple and has been tested, so I'll merge it on Friday if there are no comments.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/70/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:27ba4252bbfa%0D759a6c9532d2?from_pullrequest_id=70"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/70/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/70.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/70/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/70/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/70"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/70/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:27ba4252bbfa%0D759a6c9532d2?from_pullrequest_id=70"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/70/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/70/statuses_page=1.json"}}, "title": "Fix issue with spurious console windows popping up", "close_source_branch": true, "type": "pullrequest", "id": 70, "destination": {"commit": {"hash": "759a6c9532d2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/759a6c9532d2.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/759a6c9532d2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-02-26T21:41:56.666183+00:00", "summary": {"raw": "Fix issue where servers would have console windows when they were supposed to be started in the background.\r\n\r\n* Add '--daemon' arg to servers, otherwise they start with cmd consoles in\r\nWindows even if their parent process does not have one. Call them with this\r\narg from labscript setup code that expects them to be daemons.\r\n\r\nThis is pretty simple and has been tested, so I'll merge it on Friday if there are no comments.", "markup": "markdown", "html": "<p>Fix issue where servers would have console windows when they were supposed to be started in the background.</p>\n<ul>\n<li>Add '--daemon' arg to servers, otherwise they start with cmd consoles in\nWindows even if their parent process does not have one. Call them with this\narg from labscript setup code that expects them to be daemons.</li>\n</ul>\n<p>This is pretty simple and has been tested, so I'll merge it on Friday if there are no comments.</p>", "type": "rendered"}, "source": {"commit": {"hash": "d1a797eb3ca9", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d1a797eb3ca9.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d1a797eb3ca9"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "server_console_fix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-03-01T19:08:49.831172+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "27ba4252bbfa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/27ba4252bbfa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/27ba4252bbfa"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This function imports a module by name, or reloads it if it has already been imported.\r\n\r\nThis is useful for when you have a connection table that is imported by multiple scripts. For example, here in the chip lab we have a connectiontable.py which has at the bottom:\r\n\r\n```\r\nif __name__ == '__main__':\r\n    start()\r\n    stop(1)\r\n```\r\n\r\nWith experiment scripts importing this as a module instead of duplicating it as their own connection table. Whilst that duplication does have advantages, it is painful in practice to actually duplicate everything as opposed to having one well-maintained connection table file, and if it is in labscriptlib it is still saved to the h5 file for posterity. With that plus version control of userlib, it is not so bad to have a single shared connection table rather than duplication.\r\n\r\nHowever, in batch_compiler.py, module imports are of course cached. We need the connection table code to run every time, and module_watcher doesn't cut it since the file is not being modified (and if it were, *all* modules would be unloaded, which would defeat most of the purpose of batch_compiler and affect performance considerably).\r\n\r\nSo a function like this is necessary. This one has been in use in the chip lab since 2014.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/71/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:2145a5ca7c12%0D27ba4252bbfa?from_pullrequest_id=71"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/71/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/71.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/71/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/71/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/71"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/71/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:2145a5ca7c12%0D27ba4252bbfa?from_pullrequest_id=71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/71/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/71/statuses_page=1.json"}}, "title": "add import_or_reload function", "close_source_branch": true, "type": "pullrequest", "id": 71, "destination": {"commit": {"hash": "27ba4252bbfa", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/27ba4252bbfa.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/27ba4252bbfa"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-03-13T20:28:28.432518+00:00", "summary": {"raw": "This function imports a module by name, or reloads it if it has already been imported.\r\n\r\nThis is useful for when you have a connection table that is imported by multiple scripts. For example, here in the chip lab we have a connectiontable.py which has at the bottom:\r\n\r\n```\r\nif __name__ == '__main__':\r\n    start()\r\n    stop(1)\r\n```\r\n\r\nWith experiment scripts importing this as a module instead of duplicating it as their own connection table. Whilst that duplication does have advantages, it is painful in practice to actually duplicate everything as opposed to having one well-maintained connection table file, and if it is in labscriptlib it is still saved to the h5 file for posterity. With that plus version control of userlib, it is not so bad to have a single shared connection table rather than duplication.\r\n\r\nHowever, in batch_compiler.py, module imports are of course cached. We need the connection table code to run every time, and module_watcher doesn't cut it since the file is not being modified (and if it were, *all* modules would be unloaded, which would defeat most of the purpose of batch_compiler and affect performance considerably).\r\n\r\nSo a function like this is necessary. This one has been in use in the chip lab since 2014.", "markup": "markdown", "html": "<p>This function imports a module by name, or reloads it if it has already been imported.</p>\n<p>This is useful for when you have a connection table that is imported by multiple scripts. For example, here in the chip lab we have a connectiontable.py which has at the bottom:</p>\n<div class=\"codehilite\"><pre><span></span>if __name__ == &#39;__main__&#39;:\n    start()\n    stop(1)\n</pre></div>\n\n\n<p>With experiment scripts importing this as a module instead of duplicating it as their own connection table. Whilst that duplication does have advantages, it is painful in practice to actually duplicate everything as opposed to having one well-maintained connection table file, and if it is in labscriptlib it is still saved to the h5 file for posterity. With that plus version control of userlib, it is not so bad to have a single shared connection table rather than duplication.</p>\n<p>However, in batch_compiler.py, module imports are of course cached. We need the connection table code to run every time, and module_watcher doesn't cut it since the file is not being modified (and if it were, <em>all</em> modules would be unloaded, which would defeat most of the purpose of batch_compiler and affect performance considerably).</p>\n<p>So a function like this is necessary. This one has been in use in the chip lab since 2014.</p>", "type": "rendered"}, "source": {"commit": {"hash": "88567a9b3f46", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/88567a9b3f46"}, "html": {"href": "#!/cbillington/labscript_utils/commits/88567a9b3f46"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "import_or_reload"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-03-18T16:10:16.957008+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "2145a5ca7c12", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2145a5ca7c12.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2145a5ca7c12"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Move `ensure_connected_to_zlog()` and `connect_to_zlock()` into `ls_zprocess`. Have `Lock()` ignore the `read_only` argument if the zlock server does not support it. This way callers may use the argument without having to check first. Have h5_lock pass the read_only kwarg as-is, since\r\nit will be ignored later if it is not supported.\r\n\r\nThis was motivated by the runmanager `sequence_id` changes, which use a zlock `Lock`\r\nto serialise access to the file that stores the current sequence index. This\r\nway the runmanager code will work with old zlock servers.\r\n\r\nPatch version bump so the runmanager changes can rely on this.\r\n\r\nTodo: tag version after merging", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/72/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:b228f9e7ce3c%0D2145a5ca7c12?from_pullrequest_id=72"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/72/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/72.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/72/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/72/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/72"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/72/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:b228f9e7ce3c%0D2145a5ca7c12?from_pullrequest_id=72"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/72/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/72/statuses_page=1.json"}}, "title": "refactor zprocess stuff slightly for easier backward compatibility with old zlock servers", "close_source_branch": true, "type": "pullrequest", "id": 72, "destination": {"commit": {"hash": "2145a5ca7c12", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2145a5ca7c12.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2145a5ca7c12"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-03-15T18:21:51.485729+00:00", "summary": {"raw": "Move `ensure_connected_to_zlog()` and `connect_to_zlock()` into `ls_zprocess`. Have `Lock()` ignore the `read_only` argument if the zlock server does not support it. This way callers may use the argument without having to check first. Have h5_lock pass the read_only kwarg as-is, since\r\nit will be ignored later if it is not supported.\r\n\r\nThis was motivated by the runmanager `sequence_id` changes, which use a zlock `Lock`\r\nto serialise access to the file that stores the current sequence index. This\r\nway the runmanager code will work with old zlock servers.\r\n\r\nPatch version bump so the runmanager changes can rely on this.\r\n\r\nTodo: tag version after merging", "markup": "markdown", "html": "<p>Move <code>ensure_connected_to_zlog()</code> and <code>connect_to_zlock()</code> into <code>ls_zprocess</code>. Have <code>Lock()</code> ignore the <code>read_only</code> argument if the zlock server does not support it. This way callers may use the argument without having to check first. Have h5_lock pass the read_only kwarg as-is, since\nit will be ignored later if it is not supported.</p>\n<p>This was motivated by the runmanager <code>sequence_id</code> changes, which use a zlock <code>Lock</code>\nto serialise access to the file that stores the current sequence index. This\nway the runmanager code will work with old zlock servers.</p>\n<p>Patch version bump so the runmanager changes can rely on this.</p>\n<p>Todo: tag version after merging</p>", "type": "rendered"}, "source": {"commit": {"hash": "7c1d4ca95a3e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7c1d4ca95a3e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7c1d4ca95a3e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "zlock_backcompat"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-03-18T16:11:03.620252+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "b228f9e7ce3c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/b228f9e7ce3c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/b228f9e7ce3c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Do not require zprocess merely to disable quick edit. Only disable quick edit if zprocess is importable and new enough, otherwise ignore.\r\n\r\nThis is important so that we are not throwing version errors just because\r\nsomeone imported labscript_utils, such as in the installer, where we would\r\nlike to print more friendly errors.\r\n\r\nI'll merge this on Monday if there are no comments.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/73/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:9e14175116f3%0Dce867e414043?from_pullrequest_id=73"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/73/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/73.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/73/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/73/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/73"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/73/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:9e14175116f3%0Dce867e414043?from_pullrequest_id=73"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/73/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/73/statuses_page=1.json"}}, "title": "Do not raise error if zprocess.disable_quick_edit() cannot be called", "close_source_branch": true, "type": "pullrequest", "id": 73, "destination": {"commit": {"hash": "ce867e414043", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/ce867e414043.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/ce867e414043"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-03-22T17:37:55.072185+00:00", "summary": {"raw": "Do not require zprocess merely to disable quick edit. Only disable quick edit if zprocess is importable and new enough, otherwise ignore.\r\n\r\nThis is important so that we are not throwing version errors just because\r\nsomeone imported labscript_utils, such as in the installer, where we would\r\nlike to print more friendly errors.\r\n\r\nI'll merge this on Monday if there are no comments.", "markup": "markdown", "html": "<p>Do not require zprocess merely to disable quick edit. Only disable quick edit if zprocess is importable and new enough, otherwise ignore.</p>\n<p>This is important so that we are not throwing version errors just because\nsomeone imported labscript_utils, such as in the installer, where we would\nlike to print more friendly errors.</p>\n<p>I'll merge this on Monday if there are no comments.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ed0d579c9a30", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/ed0d579c9a30"}, "html": {"href": "#!/cbillington/labscript_utils/commits/ed0d579c9a30"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-03-25T14:39:10.001074+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "9e14175116f3", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9e14175116f3.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9e14175116f3"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "JSON does not distinguish between bytestrings and unicode strings, but Python\r\ndoes, and Python 3 has stricter requirements not to confuse the two.\r\n\r\nIn order for a bytestrings to survive serialisation and deserialisation, this\r\nchange encodes bytestrings as base64, adds a prefix, and the result is serialised\r\nin the JSON ouput the same as any unicode string. Upon deserialisation, strings\r\nare inspected for the prefix and decoded.\r\n\r\nThis is motivated by the labscript driver for NI IMAQdx-controlled cameras. Camera attributes\r\ncan be set, which are currently stored as connection table properties or device\r\nproperties. Currently they are stored as strings, even though this leads to\r\nvarious issues with the Python nivision API choking on some of them since they\r\nare not the right datatype. Not only can attributes be strings or integers or floats\r\netc, but nivision makes a distinction between byestrings and unicode strings.\r\nSo to correctly set these, our serialisation needs to allow this distinction to\r\nround-trip.\r\n\r\nThis encoding of bytestrings is only performed for Python 3. This is a perfectly backward-compatible change because in Python 3 the JSON serialiser previously threw an error if a value was a bytestring. (The NI IMAQdx camera driver is Python3-only in any case.)\r\n\r\neg:\r\n\r\n```python\r\n>>> print(serialise({'foo': b'bar'}))\r\nContent-Type: application/json {\"foo\": \"Content-Transfer-Encoding: base64 YmFy\"}\r\n```", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/74/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:45525cf8fd40%0Dc58c5cf83d26?from_pullrequest_id=74"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/74/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/74.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/74/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/74/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/74"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/74/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:45525cf8fd40%0Dc58c5cf83d26?from_pullrequest_id=74"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/74/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/74/statuses_page=1.json"}}, "title": "Allow serialiser to serialise bytestings, by base64 encoding them with a prefix.", "close_source_branch": true, "type": "pullrequest", "id": 74, "destination": {"commit": {"hash": "c58c5cf83d26", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/c58c5cf83d26.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/c58c5cf83d26"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-03-29T17:35:03.814050+00:00", "summary": {"raw": "JSON does not distinguish between bytestrings and unicode strings, but Python\r\ndoes, and Python 3 has stricter requirements not to confuse the two.\r\n\r\nIn order for a bytestrings to survive serialisation and deserialisation, this\r\nchange encodes bytestrings as base64, adds a prefix, and the result is serialised\r\nin the JSON ouput the same as any unicode string. Upon deserialisation, strings\r\nare inspected for the prefix and decoded.\r\n\r\nThis is motivated by the labscript driver for NI IMAQdx-controlled cameras. Camera attributes\r\ncan be set, which are currently stored as connection table properties or device\r\nproperties. Currently they are stored as strings, even though this leads to\r\nvarious issues with the Python nivision API choking on some of them since they\r\nare not the right datatype. Not only can attributes be strings or integers or floats\r\netc, but nivision makes a distinction between byestrings and unicode strings.\r\nSo to correctly set these, our serialisation needs to allow this distinction to\r\nround-trip.\r\n\r\nThis encoding of bytestrings is only performed for Python 3. This is a perfectly backward-compatible change because in Python 3 the JSON serialiser previously threw an error if a value was a bytestring. (The NI IMAQdx camera driver is Python3-only in any case.)\r\n\r\neg:\r\n\r\n```python\r\n>>> print(serialise({'foo': b'bar'}))\r\nContent-Type: application/json {\"foo\": \"Content-Transfer-Encoding: base64 YmFy\"}\r\n```", "markup": "markdown", "html": "<p>JSON does not distinguish between bytestrings and unicode strings, but Python\ndoes, and Python 3 has stricter requirements not to confuse the two.</p>\n<p>In order for a bytestrings to survive serialisation and deserialisation, this\nchange encodes bytestrings as base64, adds a prefix, and the result is serialised\nin the JSON ouput the same as any unicode string. Upon deserialisation, strings\nare inspected for the prefix and decoded.</p>\n<p>This is motivated by the labscript driver for NI IMAQdx-controlled cameras. Camera attributes\ncan be set, which are currently stored as connection table properties or device\nproperties. Currently they are stored as strings, even though this leads to\nvarious issues with the Python nivision API choking on some of them since they\nare not the right datatype. Not only can attributes be strings or integers or floats\netc, but nivision makes a distinction between byestrings and unicode strings.\nSo to correctly set these, our serialisation needs to allow this distinction to\nround-trip.</p>\n<p>This encoding of bytestrings is only performed for Python 3. This is a perfectly backward-compatible change because in Python 3 the JSON serialiser previously threw an error if a value was a bytestring. (The NI IMAQdx camera driver is Python3-only in any case.)</p>\n<p>eg:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">serialise</span><span class=\"p\">({</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">}))</span>\n<span class=\"n\">Content</span><span class=\"o\">-</span><span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">json</span> <span class=\"p\">{</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Content-Transfer-Encoding: base64 YmFy&quot;</span><span class=\"p\">}</span>\n</pre></div>", "type": "rendered"}, "source": {"commit": {"hash": "31e8af650817", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/31e8af650817"}, "html": {"href": "#!/cbillington/labscript_utils/commits/31e8af650817"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "JSON_bytestrings"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-28T09:37:22.155512+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "45525cf8fd40", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/45525cf8fd40.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/45525cf8fd40"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Not all the imported modules exist in all versions of zprocess, so to get a version error instead of an import error, we have to move the version check to before the imports.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/75/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:d51bd1da3391%0D6c3555a116c4?from_pullrequest_id=75"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/75/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/75.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/75/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/75/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/75"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/75/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:d51bd1da3391%0D6c3555a116c4?from_pullrequest_id=75"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/75/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/75/statuses_page=1.json"}}, "title": "Check zprocess version *before* importing zprocess", "close_source_branch": true, "type": "pullrequest", "id": 75, "destination": {"commit": {"hash": "6c3555a116c4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/6c3555a116c4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/6c3555a116c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-04-10T00:15:09.836441+00:00", "summary": {"raw": "Not all the imported modules exist in all versions of zprocess, so to get a version error instead of an import error, we have to move the version check to before the imports.", "markup": "markdown", "html": "<p>Not all the imported modules exist in all versions of zprocess, so to get a version error instead of an import error, we have to move the version check to before the imports.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a074afd08112", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/a074afd08112"}, "html": {"href": "#!/cbillington/labscript_utils/commits/a074afd08112"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-10T00:34:32.365788+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d51bd1da3391", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d51bd1da3391.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d51bd1da3391"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Expand environment variables in labconfig using `configparser.BasicInterpolation`.\r\n\r\n* Requires using the backport of configparser for Python 2.\r\n* Replaced all instances of `SafeConfigParser` class as it has been renamed to `ConfigParser`.\r\n\r\nExample usage in labconfig on Windows:\r\n\r\n```\r\n[programs]\r\ntext_editor = %%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe\r\ntext_editor_arguments = {file}\r\nhdf5_viewer = %%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\r\nhdf5_viewer_arguments = {file}\r\n```\r\n\r\nI opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.\r\n\r\nPre-filtering also works \\(and doesn\u2019t require escaping % characters\\) but is potentially less safe/backwards compatible. This can be implemented using:\r\n\r\n```python\r\nclass EnvInterpolation(configparser.BasicInterpolation):\r\n    \"\"\"Interpolation which expands environment variables in values,\r\n    by pre-filtering BasicInterpolation.before_get()\"\"\"\r\n\r\n    def before_get(self, parser, section, option, value, defaults):\r\n        value = os.path.expandvars(value)\r\n        return super(EnvInterpolation, self).before_get(parser, section, option, value, defaults)\r\n```\r\n\r\nIdea for method override is from [https://stackoverflow.com/a/49529659](https://stackoverflow.com/a/49529659).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:1bd00db6968c%0Dd51bd1da3391?from_pullrequest_id=76"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/76"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:1bd00db6968c%0Dd51bd1da3391?from_pullrequest_id=76"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/76/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/76/statuses_page=1.json"}}, "title": "Expand environment variables in labconfig", "close_source_branch": true, "type": "pullrequest", "id": 76, "destination": {"commit": {"hash": "d51bd1da3391", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d51bd1da3391.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d51bd1da3391"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-04-24T07:04:17.038709+00:00", "summary": {"raw": "Expand environment variables in labconfig using `configparser.BasicInterpolation`.\r\n\r\n* Requires using the backport of configparser for Python 2.\r\n* Replaced all instances of `SafeConfigParser` class as it has been renamed to `ConfigParser`.\r\n\r\nExample usage in labconfig on Windows:\r\n\r\n```\r\n[programs]\r\ntext_editor = %%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe\r\ntext_editor_arguments = {file}\r\nhdf5_viewer = %%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat\r\nhdf5_viewer_arguments = {file}\r\n```\r\n\r\nI opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.\r\n\r\nPre-filtering also works \\(and doesn\u2019t require escaping % characters\\) but is potentially less safe/backwards compatible. This can be implemented using:\r\n\r\n```python\r\nclass EnvInterpolation(configparser.BasicInterpolation):\r\n    \"\"\"Interpolation which expands environment variables in values,\r\n    by pre-filtering BasicInterpolation.before_get()\"\"\"\r\n\r\n    def before_get(self, parser, section, option, value, defaults):\r\n        value = os.path.expandvars(value)\r\n        return super(EnvInterpolation, self).before_get(parser, section, option, value, defaults)\r\n```\r\n\r\nIdea for method override is from [https://stackoverflow.com/a/49529659](https://stackoverflow.com/a/49529659).", "markup": "markdown", "html": "<p>Expand environment variables in labconfig using <code>configparser.BasicInterpolation</code>.</p>\n<ul>\n<li>Requires using the backport of configparser for Python 2.</li>\n<li>Replaced all instances of <code>SafeConfigParser</code> class as it has been renamed to <code>ConfigParser</code>.</li>\n</ul>\n<p>Example usage in labconfig on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[programs]</span>\n<span class=\"na\">text_editor</span> <span class=\"o\">=</span> <span class=\"s\">%%PROGRAMFILES%%\\Sublime Text 3\\sublime_text.exe</span>\n<span class=\"na\">text_editor_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n<span class=\"na\">hdf5_viewer</span> <span class=\"o\">=</span> <span class=\"s\">%%LOCALAPPDATA%%\\HDF_Group\\HDFView\\3.1.0\\hdfview.bat</span>\n<span class=\"na\">hdf5_viewer_arguments</span> <span class=\"o\">=</span> <span class=\"s\">{file}</span>\n</pre></div>\n\n\n<p>I opted to post-filter the default interpolation. Thus environment variables specified with % symbols need to be escaped, as above.</p>\n<p>Pre-filtering also works (and doesn\u2019t require escaping % characters) but is potentially less safe/backwards compatible. This can be implemented using:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">EnvInterpolation</span><span class=\"p\">(</span><span class=\"n\">configparser</span><span class=\"o\">.</span><span class=\"n\">BasicInterpolation</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Interpolation which expands environment variables in values,</span>\n<span class=\"sd\">    by pre-filtering BasicInterpolation.before_get()&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">before_get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expandvars</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">EnvInterpolation</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">before_get</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">section</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Idea for method override is from <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/a/49529659\" rel=\"nofollow\">https://stackoverflow.com/a/49529659</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "20e6199ebfe0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils/commit/20e6199ebfe0"}, "html": {"href": "#!/rpanderson/labscript_utils/commits/20e6199ebfe0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils"}, "html": {"href": "#!/rpanderson/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{ab48a23d-f1bf-4808-8458-2fb85655c5de}ts=2203674"}}, "type": "repository", "name": "labscript_utils", "full_name": "rpanderson/labscript_utils", "uuid": "{ab48a23d-f1bf-4808-8458-2fb85655c5de}"}, "branch": {"name": "labconfig_expandvars"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-04-24T23:23:24.383157+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR fixes issues I've come across in getting remote workers working.\r\n\r\n* Have RemoteProcessClient accept a port number and use default port if not provided.\r\n\r\n* Require zprocess 2.12.4, which has fixes for remote processes.\r\n\r\n* Use new zprocess functionality to share log paths by name to child processes.\r\n    Otherwise, programs running with subprocesses on different computers will\r\n    create additional log files with unrelated filepaths on the computer running\r\n    the top-level process.\r\n\r\n* Fix a bug in calling remote server: curses interface didn't work with execv\r\n\r\n* Patch version bump so that other programs' remote workers implementation can rely on these changes.\r\n\r\nNote to self, version tag required after merging.\r\n\r\nMight be worth leaving this open for a little bit since I will probably come across more issues. Or I can fix them in a separate PR, either way is fine really.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/77/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:e1db05c9e0e4%0Dd04b924dbb4b?from_pullrequest_id=77"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/77/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/77.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/77/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/77/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/77"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/77/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:e1db05c9e0e4%0Dd04b924dbb4b?from_pullrequest_id=77"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/77/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/77/statuses_page=1.json"}}, "title": "Fixes for remote workers.", "close_source_branch": true, "type": "pullrequest", "id": 77, "destination": {"commit": {"hash": "d04b924dbb4b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d04b924dbb4b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d04b924dbb4b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-04-24T17:37:11.774820+00:00", "summary": {"raw": "This PR fixes issues I've come across in getting remote workers working.\r\n\r\n* Have RemoteProcessClient accept a port number and use default port if not provided.\r\n\r\n* Require zprocess 2.12.4, which has fixes for remote processes.\r\n\r\n* Use new zprocess functionality to share log paths by name to child processes.\r\n    Otherwise, programs running with subprocesses on different computers will\r\n    create additional log files with unrelated filepaths on the computer running\r\n    the top-level process.\r\n\r\n* Fix a bug in calling remote server: curses interface didn't work with execv\r\n\r\n* Patch version bump so that other programs' remote workers implementation can rely on these changes.\r\n\r\nNote to self, version tag required after merging.\r\n\r\nMight be worth leaving this open for a little bit since I will probably come across more issues. Or I can fix them in a separate PR, either way is fine really.", "markup": "markdown", "html": "<p>This PR fixes issues I've come across in getting remote workers working.</p>\n<ul>\n<li>\n<p>Have RemoteProcessClient accept a port number and use default port if not provided.</p>\n</li>\n<li>\n<p>Require zprocess 2.12.4, which has fixes for remote processes.</p>\n</li>\n<li>\n<p>Use new zprocess functionality to share log paths by name to child processes.\n    Otherwise, programs running with subprocesses on different computers will\n    create additional log files with unrelated filepaths on the computer running\n    the top-level process.</p>\n</li>\n<li>\n<p>Fix a bug in calling remote server: curses interface didn't work with execv</p>\n</li>\n<li>\n<p>Patch version bump so that other programs' remote workers implementation can rely on these changes.</p>\n</li>\n</ul>\n<p>Note to self, version tag required after merging.</p>\n<p>Might be worth leaving this open for a little bit since I will probably come across more issues. Or I can fix them in a separate PR, either way is fine really.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f900472dc393", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/f900472dc393"}, "html": {"href": "#!/cbillington/labscript_utils/commits/f900472dc393"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-processes"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-06T15:38:28.641646+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e1db05c9e0e4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e1db05c9e0e4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e1db05c9e0e4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/78/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:d04b924dbb4b%0D1bd00db6968c?from_pullrequest_id=78"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/78/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/78"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:d04b924dbb4b%0D1bd00db6968c?from_pullrequest_id=78"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/78/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/78/statuses_page=1.json"}}, "title": "Import pywin32 at module-level rather than lazily", "close_source_branch": true, "type": "pullrequest", "id": 78, "destination": {"commit": {"hash": "1bd00db6968c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1bd00db6968c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1bd00db6968c"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-03T14:55:15.077921+00:00", "summary": {"raw": "Import pywin32 modules at the module level of winshell. This makes winshell\r\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\r\nin ModuleWatcher's whitelist if winshell has been imported.", "markup": "markdown", "html": "<p>Import pywin32 modules at the module level of winshell. This makes winshell\nfriendlier to ModuleWatcher unloading, since it means pywin32 can be included\nin ModuleWatcher's whitelist if winshell has been imported.</p>", "type": "rendered"}, "source": {"commit": {"hash": "7a2223a0359f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/7a2223a0359f"}, "html": {"href": "#!/cbillington/labscript_utils/commits/7a2223a0359f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-imports"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-06T15:51:47.341947+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "d04b924dbb4b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/d04b924dbb4b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/d04b924dbb4b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n```\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/79/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:19585a8ba658%0D9b4dbe2f4e92?from_pullrequest_id=79"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/79/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/79"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:19585a8ba658%0D9b4dbe2f4e92?from_pullrequest_id=79"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/79/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/79/statuses_page=1.json"}}, "title": "Modified launching of apps on Windows for conda envs and other issues", "close_source_branch": true, "type": "pullrequest", "id": 79, "destination": {"commit": {"hash": "9b4dbe2f4e92", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9b4dbe2f4e92.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9b4dbe2f4e92"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-07T13:05:27.332420+00:00", "summary": {"raw": "This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving [installer issue #28](#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked).\r\n\r\nTo this end, this PR adds a short launcher script, `winshell.py`, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the `cwp.py` launcher script from the `menuinst` project, which we were previously using. There were three deficiencies in our use of the `cwp.py` script that are addressed by the `winshell.py` script.\r\n\r\n1. `cwp.py` does an unconditional `os.chdir()` into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. `winshell.py` simply doesn't do an `os.chdir()` before running the target script.\r\n2. `cwp.py` doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).\r\n3. `cwp.py` allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with `pythonw.exe`so as not to create a console window. However, we then want the launcher script to run the target application using `python.exe`, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of [lyse issue #48](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse). Basically, when running under `pythonw.exe`, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with `python.exe`. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the `NO_CREATE_WINDOW` flag to run with `python.exe` but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!\r\n\r\nThese changes are backward compatible with apps, but not with the installer. The corresponding [changes to the installer](#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell) will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. \r\n\r\nFor the time being, the apps will continue to be borked - they will need to change to call `set_appusermodel` like the following:\r\n\r\n```python\r\nfrom labscript_utils.winshell import set_appusermodel\r\n    \r\ndef set_win_appusermodel(window_id):\r\n    set_appusermodel(window_id, appname='lyse')\r\n```\r\n\r\ninstead of passing in all the details themselves. But `set_appusermodel` is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.\r\n\r\nAfter all is said and done, existing shortcuts will still launch the apps either using `cwp.py`, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the `labscript_suite` directory, and then run:\r\n\r\n```python\r\nfrom labscript_utils.winshell import APPS, make_shortcut, add_to_start_menu\r\n\r\nfor app in APPS:\r\n    shortcut_path = make_shortcut(app)\r\n    add_to_start_menu(shortcut_path)\r\n```\r\n\r\nfrom within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.", "markup": "markdown", "html": "<p>This PR moves some functionality from the installer script into the winshell module, so that the app descriptions in pinned apps, and the relaunch commands for them can be the same as the start menu shortcuts as created by the installer. Importantly, this means the relaunch commands can use a wrapper script to launch the app in a conda environment, solving <a data-is-external-link=\"true\" href=\"#!/labscript_suite/installer/issues/28/relaunching-of-pinned-apps-is-borked\" rel=\"nofollow\">installer issue #28</a>.</p>\n<p>To this end, this PR adds a short launcher script, <code>winshell.py</code>, which accepts a conda prefix and env name as additional command line args, and can run a target script in that env similarly to the <code>cwp.py</code> launcher script from the <code>menuinst</code> project, which we were previously using. There were three deficiencies in our use of the <code>cwp.py</code> script that are addressed by the <code>winshell.py</code> script.</p>\n<ol>\n<li><code>cwp.py</code> does an unconditional <code>os.chdir()</code> into the user's Documents folder, so the \"start in\" directory of the shortcuts that point to it is ignored. <code>winshell.py</code> simply doesn't do an <code>os.chdir()</code> before running the target script.</li>\n<li><code>cwp.py</code> doesn't set the conda environment variable for the name of the environment, so the app can't know the env name. Our apps need to know the env name since it is part of the app descriptions (the name of the app according to the pinned taskbar entries).</li>\n<li><code>cwp.py</code> allows you to pass either python or pythonw as the interpreter to run, but writing our own launcher allows us to customise process startup a bit more to fix issues using pythonw. Basically, we want shortcuts pointing to the launcher script to start it with <code>pythonw.exe</code>so as not to create a console window. However, we then want the launcher script to run the target application using <code>python.exe</code>, in order that stdio streams exist and can be redirected, otherwise zprocess output redirection does not work for C/cython extensions and non-zprocess subprocesses. This was discussed in the thread of <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse\" rel=\"nofollow\">lyse issue #48</a>. Basically, when running under <code>pythonw.exe</code>, for example the rfblaster's compilation output (which is printed by a cython extension) is not visible in BLACS' connection table compilation window or runmanager's outputbox, and if using multiprocessing in lyse routines the subprocesses output is not visible in the outputbox. The only way to fix this that I have been able to find is to run the app with <code>python.exe</code>. Normally this means you will have a console window, but if we control process creation via a launcher script anyway, we can launch the app with the <code>NO_CREATE_WINDOW</code> flag to run with <code>python.exe</code> but without a visible console window. This is perfect and obviates many workarounds we have where any code in a toplevel process that prints needs to check if stdout/stderr exist first otherwise they can crash the app!</li>\n</ol>\n<p>These changes are backward compatible with apps, but not with the installer. The corresponding <a data-is-external-link=\"true\" href=\"#!/labscript_suite/installer/pull-requests/12/move-functions-into-winshell\" rel=\"nofollow\">changes to the installer</a> will need to be merged after this is merged and stamped with a version number, and then the new version of the installer will not be able to be used to install older versions of labscript_utils. </p>\n<p>For the time being, the apps will continue to be borked - they will need to change to call <code>set_appusermodel</code> like the following:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.winshell</span> <span class=\"kn\">import</span> <span class=\"n\">set_appusermodel</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">set_win_appusermodel</span><span class=\"p\">(</span><span class=\"n\">window_id</span><span class=\"p\">):</span>\n    <span class=\"n\">set_appusermodel</span><span class=\"p\">(</span><span class=\"n\">window_id</span><span class=\"p\">,</span> <span class=\"n\">appname</span><span class=\"o\">=</span><span class=\"s1\">&#39;lyse&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>instead of passing in all the details themselves. But <code>set_appusermodel</code> is backward compatible such that if the apps continue to pass in details, they will be used as before. This results in borked relaunching of apps on recent conda versions, but so be it until the apps are updated.</p>\n<p>After all is said and done, existing shortcuts will still launch the apps either using <code>cwp.py</code>, or with no launcher script at all, and so the fix will not help anyone except new installations. Anyone affected by the bug on an existing install can manually delete all start menu shortcuts to labscript suite apps, delete the launchers in the <code>labscript_suite</code> directory, and then run:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.winshell</span> <span class=\"kn\">import</span> <span class=\"n\">APPS</span><span class=\"p\">,</span> <span class=\"n\">make_shortcut</span><span class=\"p\">,</span> <span class=\"n\">add_to_start_menu</span>\n\n<span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">APPS</span><span class=\"p\">:</span>\n    <span class=\"n\">shortcut_path</span> <span class=\"o\">=</span> <span class=\"n\">make_shortcut</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n    <span class=\"n\">add_to_start_menu</span><span class=\"p\">(</span><span class=\"n\">shortcut_path</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>from within a Python interpreter in the activated conda environment, if any, that the labscript suite was installed to.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cd6ed88dc28e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cd6ed88dc28e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cd6ed88dc28e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winlauncher"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-14T23:54:15.405563+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "19585a8ba658", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/19585a8ba658.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/19585a8ba658"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Allow ZMQClient to be instantiated with default security settings, and not just used as a singleton. This is used by the (work in progress) `runmanager.remote.Client` subclass.\r\n\r\nPatch version bump for this fix so runmanager may rely on it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/80/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:b8f5edd28617%0D3604a14d9bc5?from_pullrequest_id=80"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/80/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/80.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/80/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/80/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/80"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/80/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:b8f5edd28617%0D3604a14d9bc5?from_pullrequest_id=80"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/80/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/80/statuses_page=1.json"}}, "title": "wrapped ZMQClient fix", "close_source_branch": true, "type": "pullrequest", "id": 80, "destination": {"commit": {"hash": "3604a14d9bc5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3604a14d9bc5.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3604a14d9bc5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-08T22:27:06.510748+00:00", "summary": {"raw": "Allow ZMQClient to be instantiated with default security settings, and not just used as a singleton. This is used by the (work in progress) `runmanager.remote.Client` subclass.\r\n\r\nPatch version bump for this fix so runmanager may rely on it.", "markup": "markdown", "html": "<p>Allow ZMQClient to be instantiated with default security settings, and not just used as a singleton. This is used by the (work in progress) <code>runmanager.remote.Client</code> subclass.</p>\n<p>Patch version bump for this fix so runmanager may rely on it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "77e53706e016", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/77e53706e016"}, "html": {"href": "#!/cbillington/labscript_utils/commits/77e53706e016"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-12T22:53:48.346215+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "b8f5edd28617", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/b8f5edd28617.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/b8f5edd28617"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Have modulewatcher whitelist all modules within standard package directories. This way, only 'user' code will be unloaded or monitored for changes.\r\nThis addresses issue #23, though it is different to the solution proposed there.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/81/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:3f58146828ce%0D69450526194f?from_pullrequest_id=81"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/81/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/81.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/81/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/81/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/81"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/81/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:3f58146828ce%0D69450526194f?from_pullrequest_id=81"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/81/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/81/statuses_page=1.json"}}, "title": "Include all package dirs in Modulewatcher whitelist", "close_source_branch": true, "type": "pullrequest", "id": 81, "destination": {"commit": {"hash": "69450526194f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/69450526194f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/69450526194f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-09T22:48:36.895498+00:00", "summary": {"raw": "Have modulewatcher whitelist all modules within standard package directories. This way, only 'user' code will be unloaded or monitored for changes.\r\nThis addresses issue #23, though it is different to the solution proposed there.", "markup": "markdown", "html": "<p>Have modulewatcher whitelist all modules within standard package directories. This way, only 'user' code will be unloaded or monitored for changes.\nThis addresses issue <a href=\"#!/labscript_suite/labscript_utils/issues/23/modulewatcher-ability-to-append-to\" rel=\"nofollow\" title=\"ModuleWatcher: ability to append to whitelist\" class=\"ap-connect-link\">#23</a>, though it is different to the solution proposed there.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f1f1f2011e80", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/f1f1f2011e80"}, "html": {"href": "#!/cbillington/labscript_utils/commits/f1f1f2011e80"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "modulewatcher-whitelist"}}, "comment_count": 8, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-29T18:52:36.672168+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "3f58146828ce", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3f58146828ce.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3f58146828ce"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Applied workaround from Python bug report: https://bugs.python.org/issue24313", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/82/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:69450526194f%0D3fec7ed04156?from_pullrequest_id=82"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/82/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/82.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/82/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/82/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/82"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/82/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:69450526194f%0D3fec7ed04156?from_pullrequest_id=82"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/82/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/82/statuses_page=1.json"}}, "title": "Fix issue #24: can't save integer connection table properties that are globals", "close_source_branch": true, "type": "pullrequest", "id": 82, "destination": {"commit": {"hash": "3fec7ed04156", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3fec7ed04156.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3fec7ed04156"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-14T15:02:12.416715+00:00", "summary": {"raw": "Applied workaround from Python bug report: https://bugs.python.org/issue24313", "markup": "markdown", "html": "<p>Applied workaround from Python bug report: <a href=\"https://bugs.python.org/issue24313\" rel=\"nofollow\" class=\"ap-connect-link\">https://bugs.python.org/issue24313</a></p>", "type": "rendered"}, "source": {"commit": {"hash": "3c5d52fa49e3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/3c5d52fa49e3"}, "html": {"href": "#!/cbillington/labscript_utils/commits/3c5d52fa49e3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-20T14:55:50.422978+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "69450526194f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/69450526194f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/69450526194f"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "These are Python 3 compatibility changes for the `ImageOutput` widget, which currently doesn't\r\nwork on Python 3.\r\n\r\nThis code hasn't been tested on Python 2.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/83/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:364a252c7e50%0Dfd18b69c0f76?from_pullrequest_id=83"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/83/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/83.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/83/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/83/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/83"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/83/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:364a252c7e50%0Dfd18b69c0f76?from_pullrequest_id=83"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/83/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/83/statuses_page=1.json"}}, "title": "PY3 fixes for imageoutput widget", "close_source_branch": true, "type": "pullrequest", "id": 83, "destination": {"commit": {"hash": "fd18b69c0f76", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/fd18b69c0f76.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/fd18b69c0f76"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-14T21:42:50.239281+00:00", "summary": {"raw": "These are Python 3 compatibility changes for the `ImageOutput` widget, which currently doesn't\r\nwork on Python 3.\r\n\r\nThis code hasn't been tested on Python 2.", "markup": "markdown", "html": "<p>These are Python 3 compatibility changes for the <code>ImageOutput</code> widget, which currently doesn't\nwork on Python 3.</p>\n<p>This code hasn't been tested on Python 2.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f46eb209ce83", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/f46eb209ce83"}, "html": {"href": "#!/cbillington/labscript_utils/commits/f46eb209ce83"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "image-output-py3"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-01T17:24:09.877765+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "364a252c7e50", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/364a252c7e50.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/364a252c7e50"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Zprocess's kill lock has gained the ability to have the process ignore SIGTERM until the lock is released. Previously, holding the kill lock would only prevent process termination due to losing heartbeats from the parent process.\r\n\r\nThis PR has h5_lock acquire the kill lock whilst any HDF5 files are open, which means the process will ignore SIGTERM whilst the file is open. The process will instead terminate once the lock is released.\r\n\r\nThis will both reduce the chance of data corruption when restarting BLACS workers or lyse routines, and will also ensure zlocks get released (sometimes we get ~15 second hangs whilst zlocks time out because a process was terminated still holding a lock on a file that still needs to be read elsewhere).\r\n\r\nBecause we use zlock everywhere in labscript suite programs anyway, we know that we are not holding HDF5 files open for very long anywhere, so I don't expect this to result in any zombie processes. It'll just delay termination slightly occasionally and not corrupt data.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/84/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:73c42f98ed4c%0D783680f0d6f0?from_pullrequest_id=84"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/84/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/84.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/84/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/84/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/84"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/84/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:73c42f98ed4c%0D783680f0d6f0?from_pullrequest_id=84"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/84/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/84/statuses_page=1.json"}}, "title": "Delay handling SIGTERM until HDF5 files are closed", "close_source_branch": true, "type": "pullrequest", "id": 84, "destination": {"commit": {"hash": "783680f0d6f0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/783680f0d6f0.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/783680f0d6f0"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-19T00:03:54.302151+00:00", "summary": {"raw": "Zprocess's kill lock has gained the ability to have the process ignore SIGTERM until the lock is released. Previously, holding the kill lock would only prevent process termination due to losing heartbeats from the parent process.\r\n\r\nThis PR has h5_lock acquire the kill lock whilst any HDF5 files are open, which means the process will ignore SIGTERM whilst the file is open. The process will instead terminate once the lock is released.\r\n\r\nThis will both reduce the chance of data corruption when restarting BLACS workers or lyse routines, and will also ensure zlocks get released (sometimes we get ~15 second hangs whilst zlocks time out because a process was terminated still holding a lock on a file that still needs to be read elsewhere).\r\n\r\nBecause we use zlock everywhere in labscript suite programs anyway, we know that we are not holding HDF5 files open for very long anywhere, so I don't expect this to result in any zombie processes. It'll just delay termination slightly occasionally and not corrupt data.", "markup": "markdown", "html": "<p>Zprocess's kill lock has gained the ability to have the process ignore SIGTERM until the lock is released. Previously, holding the kill lock would only prevent process termination due to losing heartbeats from the parent process.</p>\n<p>This PR has h5_lock acquire the kill lock whilst any HDF5 files are open, which means the process will ignore SIGTERM whilst the file is open. The process will instead terminate once the lock is released.</p>\n<p>This will both reduce the chance of data corruption when restarting BLACS workers or lyse routines, and will also ensure zlocks get released (sometimes we get ~15 second hangs whilst zlocks time out because a process was terminated still holding a lock on a file that still needs to be read elsewhere).</p>\n<p>Because we use zlock everywhere in labscript suite programs anyway, we know that we are not holding HDF5 files open for very long anywhere, so I don't expect this to result in any zombie processes. It'll just delay termination slightly occasionally and not corrupt data.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fae3f499b558", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/fae3f499b558"}, "html": {"href": "#!/cbillington/labscript_utils/commits/fae3f499b558"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "h5lock-delay-sigterm"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-15T21:21:40.452633+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "73c42f98ed4c", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/73c42f98ed4c.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/73c42f98ed4c"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add function fix_shortcuts() to winshell, and have it run if winshell is run as main with:\r\n\r\npython -m labscript_utils.winshell --fix-shortcuts\r\n\r\nThis function will re-make labscript suite application shortcuts and start menu\r\nentries. This can fix broken shortcuts in the case that old shortcuts were from\r\nbefore winshell could make shortcuts interact well with newer versions of conda.\r\n\r\nCatch DLL load error upon importing Qt in the splash submodule, and raise\r\nan exception advising that the user might try running the above command to fix\r\ntheir shortcuts, since this DLL load error is the first one to be hit in the\r\napplications when they are launched from incorrect shortcuts.\r\n\r\nAlso modified `set_appusermodel()` to ignore the incorrect relaunch information as passed from current versions of the apps. This way pinning of current versions of the apps will work without them having to be updated to not pass bad details to `set_appusermodel()` (though I will still update them).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/85/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:3fec7ed04156%0Da3a4077301b7?from_pullrequest_id=85"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/85/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/85.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/85/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/85/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/85"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/85/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:3fec7ed04156%0Da3a4077301b7?from_pullrequest_id=85"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/85/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/85/statuses_page=1.json"}}, "title": "Add fix_shortcuts() function and catch DLL load error", "close_source_branch": true, "type": "pullrequest", "id": 85, "destination": {"commit": {"hash": "a3a4077301b7", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/a3a4077301b7.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/a3a4077301b7"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-05-19T03:46:55.742186+00:00", "summary": {"raw": "Add function fix_shortcuts() to winshell, and have it run if winshell is run as main with:\r\n\r\npython -m labscript_utils.winshell --fix-shortcuts\r\n\r\nThis function will re-make labscript suite application shortcuts and start menu\r\nentries. This can fix broken shortcuts in the case that old shortcuts were from\r\nbefore winshell could make shortcuts interact well with newer versions of conda.\r\n\r\nCatch DLL load error upon importing Qt in the splash submodule, and raise\r\nan exception advising that the user might try running the above command to fix\r\ntheir shortcuts, since this DLL load error is the first one to be hit in the\r\napplications when they are launched from incorrect shortcuts.\r\n\r\nAlso modified `set_appusermodel()` to ignore the incorrect relaunch information as passed from current versions of the apps. This way pinning of current versions of the apps will work without them having to be updated to not pass bad details to `set_appusermodel()` (though I will still update them).", "markup": "markdown", "html": "<p>Add function fix_shortcuts() to winshell, and have it run if winshell is run as main with:</p>\n<p>python -m labscript_utils.winshell --fix-shortcuts</p>\n<p>This function will re-make labscript suite application shortcuts and start menu\nentries. This can fix broken shortcuts in the case that old shortcuts were from\nbefore winshell could make shortcuts interact well with newer versions of conda.</p>\n<p>Catch DLL load error upon importing Qt in the splash submodule, and raise\nan exception advising that the user might try running the above command to fix\ntheir shortcuts, since this DLL load error is the first one to be hit in the\napplications when they are launched from incorrect shortcuts.</p>\n<p>Also modified <code>set_appusermodel()</code> to ignore the incorrect relaunch information as passed from current versions of the apps. This way pinning of current versions of the apps will work without them having to be updated to not pass bad details to <code>set_appusermodel()</code> (though I will still update them).</p>", "type": "rendered"}, "source": {"commit": {"hash": "1abd329a722a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/1abd329a722a"}, "html": {"href": "#!/cbillington/labscript_utils/commits/1abd329a722a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "fix-shortcuts"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-03T03:52:13.642746+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "3fec7ed04156", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/3fec7ed04156.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/3fec7ed04156"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add two new functions get_attributes and set_attributes, for getting and setting attributes with the automatic JSON serialisation/deserialisation on arbitrary HDF5 groups, not just device groups. This is basically just exposing the same functionality as t\r\n\r\nThis can be used by BLACS workers and by the lyse API to enable saving\r\nacquisition metadata and analysis results that are more complex datatypes.\r\n\r\nThis is motivated by [labscript devices pull request #71](#!/labscript_suite/labscript_devices/pull-requests/71)\r\nwhich is a camera device that would like to save nested dictionaries as\r\nattributes.\r\n\r\nMinor version bump so other code can rely on this.\r\n\r\nSince the serialisation is only done if the data does not map to a native HDF5 datatype,  use of these functions is completely backward compatible.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/86/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:91c10dc77784%0D0675faebc6c4?from_pullrequest_id=86"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/86/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/86.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/86/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/86/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/86"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/86/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:91c10dc77784%0D0675faebc6c4?from_pullrequest_id=86"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/86/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/86/statuses_page=1.json"}}, "title": "Add functions for JSON serialisation of attributes on arbitrary groups", "close_source_branch": true, "type": "pullrequest", "id": 86, "destination": {"commit": {"hash": "0675faebc6c4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/0675faebc6c4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/0675faebc6c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-06-20T14:14:42.525759+00:00", "summary": {"raw": "Add two new functions get_attributes and set_attributes, for getting and setting attributes with the automatic JSON serialisation/deserialisation on arbitrary HDF5 groups, not just device groups. This is basically just exposing the same functionality as t\r\n\r\nThis can be used by BLACS workers and by the lyse API to enable saving\r\nacquisition metadata and analysis results that are more complex datatypes.\r\n\r\nThis is motivated by [labscript devices pull request #71](#!/labscript_suite/labscript_devices/pull-requests/71)\r\nwhich is a camera device that would like to save nested dictionaries as\r\nattributes.\r\n\r\nMinor version bump so other code can rely on this.\r\n\r\nSince the serialisation is only done if the data does not map to a native HDF5 datatype,  use of these functions is completely backward compatible.", "markup": "markdown", "html": "<p>Add two new functions get_attributes and set_attributes, for getting and setting attributes with the automatic JSON serialisation/deserialisation on arbitrary HDF5 groups, not just device groups. This is basically just exposing the same functionality as t</p>\n<p>This can be used by BLACS workers and by the lyse API to enable saving\nacquisition metadata and analysis results that are more complex datatypes.</p>\n<p>This is motivated by <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_devices/pull-requests/71\" rel=\"nofollow\">labscript devices pull request #71</a>\nwhich is a camera device that would like to save nested dictionaries as\nattributes.</p>\n<p>Minor version bump so other code can rely on this.</p>\n<p>Since the serialisation is only done if the data does not map to a native HDF5 datatype,  use of these functions is completely backward compatible.</p>", "type": "rendered"}, "source": {"commit": {"hash": "0586c019cbbe", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/0586c019cbbe"}, "html": {"href": "#!/cbillington/labscript_utils/commits/0586c019cbbe"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "serialised_attributes"}}, "comment_count": 3, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-06-25T18:46:47.211309+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "91c10dc77784", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/91c10dc77784.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/91c10dc77784"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "It was pointed out to me that our automatic metric prefixes for unit conversions don't have the correct behaviour when the unit conversion isn't a linear function.\r\n\r\nFor example, if you're going from say, MHz (non base unit) to V (base unit) via a nonlinear function, you want to *first* convert to Hz, *then* call the Hz \u2192 base conversion function. We had it the wrong way around and were only applying the factor of 10^6 *after* going through the unit conversion function to base units. This gives the same results if the conversion function is linear, which is why we probably didn't notice the problem before. The same argument applies for the reverse transformation: We should convert from base to derived, *then* apply the metric prefix factor.\r\n\r\nSo this fix makes sense to me, but worth someone else verifying that it makes sense to them too.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/87/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:2a1cbf0e5be9%0D76fa74b8d20e?from_pullrequest_id=87"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/87/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/87.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/87/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/87/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/87"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/87/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:2a1cbf0e5be9%0D76fa74b8d20e?from_pullrequest_id=87"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/87/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/87/statuses_page=1.json"}}, "title": "unit conversions: fix metrix prefixes for nonlinear conversions", "close_source_branch": true, "type": "pullrequest", "id": 87, "destination": {"commit": {"hash": "76fa74b8d20e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/76fa74b8d20e.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/76fa74b8d20e"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-07-09T01:42:40.505878+00:00", "summary": {"raw": "It was pointed out to me that our automatic metric prefixes for unit conversions don't have the correct behaviour when the unit conversion isn't a linear function.\r\n\r\nFor example, if you're going from say, MHz (non base unit) to V (base unit) via a nonlinear function, you want to *first* convert to Hz, *then* call the Hz \u2192 base conversion function. We had it the wrong way around and were only applying the factor of 10^6 *after* going through the unit conversion function to base units. This gives the same results if the conversion function is linear, which is why we probably didn't notice the problem before. The same argument applies for the reverse transformation: We should convert from base to derived, *then* apply the metric prefix factor.\r\n\r\nSo this fix makes sense to me, but worth someone else verifying that it makes sense to them too.", "markup": "markdown", "html": "<p>It was pointed out to me that our automatic metric prefixes for unit conversions don't have the correct behaviour when the unit conversion isn't a linear function.</p>\n<p>For example, if you're going from say, MHz (non base unit) to V (base unit) via a nonlinear function, you want to <em>first</em> convert to Hz, <em>then</em> call the Hz \u2192 base conversion function. We had it the wrong way around and were only applying the factor of 10^6 <em>after</em> going through the unit conversion function to base units. This gives the same results if the conversion function is linear, which is why we probably didn't notice the problem before. The same argument applies for the reverse transformation: We should convert from base to derived, <em>then</em> apply the metric prefix factor.</p>\n<p>So this fix makes sense to me, but worth someone else verifying that it makes sense to them too.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f93989fb456b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/f93989fb456b"}, "html": {"href": "#!/cbillington/labscript_utils/commits/f93989fb456b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T03:02:21.826384+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "2a1cbf0e5be9", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2a1cbf0e5be9.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2a1cbf0e5be9"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Using `importlib_metadata` to inspect its own version number is circular logic - failure has the potential to raise an unrelated error if the version is wrong instead of a version error.  \r\n\r\nThis PR changes it to do the simple check on `importlib_metadata.__version__` initially, then follow up with a full check only if that is high enough.\r\n\r\nThe \"full check\" is useful in that it detects broken installations where the metadata might not match what was actually imported due to multiple or old-but-not-properly-removed installations of the package. So it's useful to still follow up with that.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/88/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:61f4c846e51b%0D1c809e64145d?from_pullrequest_id=88"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/88/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/88.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/88/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/88/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/88"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/88/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:61f4c846e51b%0D1c809e64145d?from_pullrequest_id=88"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/88/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/88/statuses_page=1.json"}}, "title": "Do not use importlib_metadata to inspect its own version initially", "close_source_branch": true, "type": "pullrequest", "id": 88, "destination": {"commit": {"hash": "1c809e64145d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/1c809e64145d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/1c809e64145d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-08-02T18:26:03.036719+00:00", "summary": {"raw": "Using `importlib_metadata` to inspect its own version number is circular logic - failure has the potential to raise an unrelated error if the version is wrong instead of a version error.  \r\n\r\nThis PR changes it to do the simple check on `importlib_metadata.__version__` initially, then follow up with a full check only if that is high enough.\r\n\r\nThe \"full check\" is useful in that it detects broken installations where the metadata might not match what was actually imported due to multiple or old-but-not-properly-removed installations of the package. So it's useful to still follow up with that.", "markup": "markdown", "html": "<p>Using <code>importlib_metadata</code> to inspect its own version number is circular logic - failure has the potential to raise an unrelated error if the version is wrong instead of a version error.  </p>\n<p>This PR changes it to do the simple check on <code>importlib_metadata.__version__</code> initially, then follow up with a full check only if that is high enough.</p>\n<p>The \"full check\" is useful in that it detects broken installations where the metadata might not match what was actually imported due to multiple or old-but-not-properly-removed installations of the package. So it's useful to still follow up with that.</p>", "type": "rendered"}, "source": {"commit": {"hash": "5a2cd0151b9a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/5a2cd0151b9a"}, "html": {"href": "#!/cbillington/labscript_utils/commits/5a2cd0151b9a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-08-12T16:10:13.920277+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/cbillington/labscript_utils:cb1ea05e2c14%0De5a908bdc9cb?from_pullrequest_id=89"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/89"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/cbillington/labscript_utils:cb1ea05e2c14%0De5a908bdc9cb?from_pullrequest_id=89"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/89/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/89/statuses_page=1.json"}}, "title": "Add RCPServer and RPCCLient base clients for more organised communication between labscript programs", "close_source_branch": false, "type": "pullrequest", "id": 89, "destination": {"commit": {"hash": "e5a908bdc9cb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e5a908bdc9cb.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e5a908bdc9cb"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-08-06T17:47:51.002064+00:00", "summary": {"raw": "Edit: this description is now outdated, see below comments instead.\r\n\r\nThis remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.\r\n\r\nThis is useful so that we may better error-check compatibility mismatches\r\nbetween programs communicating remotely, and so that we can evolve protocols to\r\nallow new functionality whilst either providing backward compatibility for old\r\npeers or raising errors about versions instead of crashing with less useful info.\r\n\r\nImplementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\r\nreplace their `handler()` method during `__init__` with a wrapped version implementing\r\nthe new method. This way all labscript programs get this remote method.\r\nAny other remote methods universal to labscript programs in the future can be\r\nput here.\r\n\r\nClients can call `zmq_get(..., data=['get_version', *args])`, and this will\r\ntranslate to a call `labscript_utils.versions.get_version(*args`) and return\r\nthe result as a string. So normally this would be `['get_version', 'labscript']`\r\nbut could also be `['get_version', 'serial', 'pyserial']` for the case where the\r\nproject name and its import name are not the same.\r\n\r\nThis was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.\r\n\r\nHere's an example:\r\n\r\n```python\r\nfrom labscript_utils.ls_zprocess import ZMQServer, zmq_get\r\n\r\n\r\nclass MyServer(ZMQServer):\r\n    def handler(self, data):\r\n        print('handler!', data)\r\n        return 'response'\r\n\r\n\r\nserver = MyServer()\r\n\r\nprint(zmq_get(server.port, data=['get_version', 'labscript']))\r\n\r\nserver.shutdown()\r\n```\r\n\r\nPrints:\r\n```\r\n2.6.0\r\n```\r\n\r\nSo the wrapped `handler()` method is intercepting the request and returning the version, and the original handler does not run.", "markup": "markdown", "html": "<p>Edit: this description is now outdated, see below comments instead.</p>\n<p>This remote method can be used to get the version of any package in the server's environment via labscript_utils.versions.get_version.</p>\n<p>This is useful so that we may better error-check compatibility mismatches\nbetween programs communicating remotely, and so that we can evolve protocols to\nallow new functionality whilst either providing backward compatibility for old\npeers or raising errors about versions instead of crashing with less useful info.</p>\n<p>Implementation is done by having labscript_utils.ls_zprocess.ZMQServer instances\nreplace their <code>handler()</code> method during <code>__init__</code> with a wrapped version implementing\nthe new method. This way all labscript programs get this remote method.\nAny other remote methods universal to labscript programs in the future can be\nput here.</p>\n<p>Clients can call <code>zmq_get(..., data=['get_version', *args])</code>, and this will\ntranslate to a call <code>labscript_utils.versions.get_version(*args</code>) and return\nthe result as a string. So normally this would be <code>['get_version', 'labscript']</code>\nbut could also be <code>['get_version', 'serial', 'pyserial']</code> for the case where the\nproject name and its import name are not the same.</p>\n<p>This was motivated by a discussion with Phil about how we can start changing some protocols in an update-friendly way.</p>\n<p>Here's an example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">labscript_utils.ls_zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">ZMQServer</span><span class=\"p\">,</span> <span class=\"n\">zmq_get</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyServer</span><span class=\"p\">(</span><span class=\"n\">ZMQServer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;handler!&#39;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;response&#39;</span>\n\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">MyServer</span><span class=\"p\">()</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;get_version&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;labscript&#39;</span><span class=\"p\">]))</span>\n\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>Prints:</p>\n<div class=\"codehilite\"><pre><span></span>2.6.0\n</pre></div>\n\n\n<p>So the wrapped <code>handler()</code> method is intercepting the request and returning the version, and the original handler does not run.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cb1ea05e2c14", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/cb1ea05e2c14"}, "html": {"href": "#!/cbillington/labscript_utils/commits/cb1ea05e2c14"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "remote-get-version"}}, "comment_count": 9, "state": "DECLINED", "task_count": 0, "reason": "incomplete WIP, will re-create once we're on gthub", "updated_on": "2020-01-28T21:09:19.136190+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Bugfix for double_import_denier and better error message for h5_lock\r\n\r\n* Double import denier had a bug where a module that was already imported\r\n  when double import denier was enabled would be stored in its list of modules\r\n  by its `__file__` attribute. However, the import machinery as used later\r\n  by double import denier actually identifies modules by their directory for the\r\n  case of an `__init__.py` file. Therefore to match with later checks, this\r\n  directory should be stored instead when the module's file is `__init__.py`.\r\n\r\n* h5_lock must be imported before h5py, and raises an error if h5py is already\r\n  imported. This commit improves the error message by using the double import\r\n  denier, if enabled, to show the traceback it saved from when h5py was imported.\r\n\r\nThe motivation for this is a bug I've heard about from two people that they're\r\ngetting an error from h5_lock saying h5py was already imported, and I don't know\r\nwhere. There are hacks you can do to diagnose this locally, but making the error\r\nmessage better will allow us to handle such bugs easier in the future.\r\n\r\nLonger term we should probably stop monkey-patching h5py and instead just use\r\na subclass, but that's a change for another day.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/90/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:c8879ce93e7d%0D61f4c846e51b?from_pullrequest_id=90"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/90/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/90.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/90/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/90/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/90"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/90/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:c8879ce93e7d%0D61f4c846e51b?from_pullrequest_id=90"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/90/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/90/statuses_page=1.json"}}, "title": "Bugfix for double_import_denier and better error message for h5_lock", "close_source_branch": true, "type": "pullrequest", "id": 90, "destination": {"commit": {"hash": "61f4c846e51b", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/61f4c846e51b.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/61f4c846e51b"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-08-22T14:55:37.597917+00:00", "summary": {"raw": "Bugfix for double_import_denier and better error message for h5_lock\r\n\r\n* Double import denier had a bug where a module that was already imported\r\n  when double import denier was enabled would be stored in its list of modules\r\n  by its `__file__` attribute. However, the import machinery as used later\r\n  by double import denier actually identifies modules by their directory for the\r\n  case of an `__init__.py` file. Therefore to match with later checks, this\r\n  directory should be stored instead when the module's file is `__init__.py`.\r\n\r\n* h5_lock must be imported before h5py, and raises an error if h5py is already\r\n  imported. This commit improves the error message by using the double import\r\n  denier, if enabled, to show the traceback it saved from when h5py was imported.\r\n\r\nThe motivation for this is a bug I've heard about from two people that they're\r\ngetting an error from h5_lock saying h5py was already imported, and I don't know\r\nwhere. There are hacks you can do to diagnose this locally, but making the error\r\nmessage better will allow us to handle such bugs easier in the future.\r\n\r\nLonger term we should probably stop monkey-patching h5py and instead just use\r\na subclass, but that's a change for another day.", "markup": "markdown", "html": "<p>Bugfix for double_import_denier and better error message for h5_lock</p>\n<ul>\n<li>\n<p>Double import denier had a bug where a module that was already imported\n  when double import denier was enabled would be stored in its list of modules\n  by its <code>__file__</code> attribute. However, the import machinery as used later\n  by double import denier actually identifies modules by their directory for the\n  case of an <code>__init__.py</code> file. Therefore to match with later checks, this\n  directory should be stored instead when the module's file is <code>__init__.py</code>.</p>\n</li>\n<li>\n<p>h5_lock must be imported before h5py, and raises an error if h5py is already\n  imported. This commit improves the error message by using the double import\n  denier, if enabled, to show the traceback it saved from when h5py was imported.</p>\n</li>\n</ul>\n<p>The motivation for this is a bug I've heard about from two people that they're\ngetting an error from h5_lock saying h5py was already imported, and I don't know\nwhere. There are hacks you can do to diagnose this locally, but making the error\nmessage better will allow us to handle such bugs easier in the future.</p>\n<p>Longer term we should probably stop monkey-patching h5py and instead just use\na subclass, but that's a change for another day.</p>", "type": "rendered"}, "source": {"commit": {"hash": "68178dac527d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/68178dac527d"}, "html": {"href": "#!/cbillington/labscript_utils/commits/68178dac527d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "h5_lock_better_error"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-13T20:33:25.784027+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "c8879ce93e7d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/c8879ce93e7d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/c8879ce93e7d"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Just a docs update to winlauncher. It can pass arbitrary arguments to Python in a conda environment, so it's good if the docs show this.\r\n\r\nI wonder if we should make the installer make launchers for zlock and the zprocess remote server, so that they can be started from the start menu instead of people making their own batch files and shortcuts, given that doing so can be fiddly.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/91/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:7337c4e62b3f%0Dc8879ce93e7d?from_pullrequest_id=91"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/91/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/91.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/91/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/91/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/91"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/91/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:7337c4e62b3f%0Dc8879ce93e7d?from_pullrequest_id=91"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/91/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/91/statuses_page=1.json"}}, "title": "Update docs to winlauncher to show how to run modules as well as scripts.", "close_source_branch": true, "type": "pullrequest", "id": 91, "destination": {"commit": {"hash": "c8879ce93e7d", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/c8879ce93e7d.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/c8879ce93e7d"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-09-06T16:03:40.269153+00:00", "summary": {"raw": "Just a docs update to winlauncher. It can pass arbitrary arguments to Python in a conda environment, so it's good if the docs show this.\r\n\r\nI wonder if we should make the installer make launchers for zlock and the zprocess remote server, so that they can be started from the start menu instead of people making their own batch files and shortcuts, given that doing so can be fiddly.", "markup": "markdown", "html": "<p>Just a docs update to winlauncher. It can pass arbitrary arguments to Python in a conda environment, so it's good if the docs show this.</p>\n<p>I wonder if we should make the installer make launchers for zlock and the zprocess remote server, so that they can be started from the start menu instead of people making their own batch files and shortcuts, given that doing so can be fiddly.</p>", "type": "rendered"}, "source": {"commit": {"hash": "92ceb1a89d99", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/92ceb1a89d99"}, "html": {"href": "#!/cbillington/labscript_utils/commits/92ceb1a89d99"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "winshell-docs"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-13T20:37:58.792468+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "7337c4e62b3f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/7337c4e62b3f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/7337c4e62b3f"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "importlib_metadata's interface changed in this version in a way that broke\r\nour functions. They have now been updated to work with newer versions of\r\nimportlib_metadata, whilst remaining compatible with older versions for now\r\n(at the very least we need to keep compatibility until new importlib_metadata is\r\nin the anaconda repositories).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/92/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:2e38b39f42b0%0D7337c4e62b3f?from_pullrequest_id=92"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/92/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/92.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/92/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/92/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/92"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/92/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:2e38b39f42b0%0D7337c4e62b3f?from_pullrequest_id=92"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/92/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/92/statuses_page=1.json"}}, "title": "Compatibility with importlib_metadata >= 0.21", "close_source_branch": true, "type": "pullrequest", "id": 92, "destination": {"commit": {"hash": "7337c4e62b3f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/7337c4e62b3f.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/7337c4e62b3f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-09-13T20:20:41.496672+00:00", "summary": {"raw": "importlib_metadata's interface changed in this version in a way that broke\r\nour functions. They have now been updated to work with newer versions of\r\nimportlib_metadata, whilst remaining compatible with older versions for now\r\n(at the very least we need to keep compatibility until new importlib_metadata is\r\nin the anaconda repositories).", "markup": "markdown", "html": "<p>importlib_metadata's interface changed in this version in a way that broke\nour functions. They have now been updated to work with newer versions of\nimportlib_metadata, whilst remaining compatible with older versions for now\n(at the very least we need to keep compatibility until new importlib_metadata is\nin the anaconda repositories).</p>", "type": "rendered"}, "source": {"commit": {"hash": "3bfbb67336e4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/3bfbb67336e4"}, "html": {"href": "#!/cbillington/labscript_utils/commits/3bfbb67336e4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "check_version"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-09-19T14:59:03.671529+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "2e38b39f42b0", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/2e38b39f42b0.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/2e38b39f42b0"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This PR adds an enum output widget type. It is basically a QComboBox with the window dressing of an analogoutput widget. \r\n\r\nThis directly addresses Issue #26, and is part of \\(at the moment\\) three PRs that address the overall concept discussed there of having BLACS\\_tab widgets that can control device\\_properties manually. The other PRs are to BLACS and labscript\\_devices.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/93/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:df4ce474d586%0D4a9297be548a?from_pullrequest_id=93"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/93/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/93"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:df4ce474d586%0D4a9297be548a?from_pullrequest_id=93"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/93/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/93/statuses_page=1.json"}}, "title": "Add EnumOutput widget type.", "close_source_branch": true, "type": "pullrequest", "id": 93, "destination": {"commit": {"hash": "4a9297be548a", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/4a9297be548a.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/4a9297be548a"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-10-08T23:02:44.788492+00:00", "summary": {"raw": "This PR adds an enum output widget type. It is basically a QComboBox with the window dressing of an analogoutput widget. \r\n\r\nThis directly addresses Issue #26, and is part of \\(at the moment\\) three PRs that address the overall concept discussed there of having BLACS\\_tab widgets that can control device\\_properties manually. The other PRs are to BLACS and labscript\\_devices.", "markup": "markdown", "html": "<p>This PR adds an enum output widget type. It is basically a QComboBox with the window dressing of an analogoutput widget. </p>\n<p>This directly addresses Issue <a href=\"#!/labscript_suite/labscript_utils/issues/26/add-enum-control-widget\" rel=\"nofollow\" title=\"Add enum control widget\" class=\"ap-connect-link\">#26</a>, and is part of (at the moment) three PRs that address the overall concept discussed there of having BLACS_tab widgets that can control device_properties manually. The other PRs are to BLACS and labscript_devices.</p>", "type": "rendered"}, "source": {"commit": {"hash": "2badeff2df5f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_utils/commit/2badeff2df5f"}, "html": {"href": "#!/dihm/labscript_utils/commits/2badeff2df5f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/dihm/labscript_utils"}, "html": {"href": "#!/dihm/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{036a6605-f1ab-4cbe-8379-268c4895810a}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "dihm/labscript_utils", "uuid": "{036a6605-f1ab-4cbe-8379-268c4895810a}"}, "branch": {"name": "device_properties"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T17:02:16.515171+00:00", "author": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "merge_commit": {"hash": "df4ce474d586", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/df4ce474d586.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/df4ce474d586"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "And require importlib_metadata >= 0.23 on Python < 3.8.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/94/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:cddc6bf3d4a4%0D5d95a20678c4?from_pullrequest_id=94"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/94/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/94.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/94/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/94/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/94"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/94/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:cddc6bf3d4a4%0D5d95a20678c4?from_pullrequest_id=94"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/94/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/94/statuses_page=1.json"}}, "title": "check_version Python 3.8 compatibility.", "close_source_branch": true, "type": "pullrequest", "id": 94, "destination": {"commit": {"hash": "5d95a20678c4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/5d95a20678c4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/5d95a20678c4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-11-14T20:57:50.001668+00:00", "summary": {"raw": "And require importlib_metadata >= 0.23 on Python < 3.8.", "markup": "markdown", "html": "<p>And require importlib_metadata &gt;= 0.23 on Python &lt; 3.8.</p>", "type": "rendered"}, "source": {"commit": {"hash": "00bbb91b5123", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/00bbb91b5123"}, "html": {"href": "#!/cbillington/labscript_utils/commits/00bbb91b5123"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix2"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-04T19:47:57.072474+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "cddc6bf3d4a4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/cddc6bf3d4a4.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/cddc6bf3d4a4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This will assist the move to regular Python packages, where it doesn't make a\r\nlot of sense to log to python/lib/site-packages.\r\n\r\nTell zprocess servers to log to the same directory, and require the version\r\nof zprocess that introduces that option.\r\n\r\nThis code migrates existing log files so as to not leave log files behind, which would be confusing.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/95/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:bc839f104a06%0D68b30562f3e1?from_pullrequest_id=95"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/95/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/95.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/95/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/95/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/95"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/95/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:bc839f104a06%0D68b30562f3e1?from_pullrequest_id=95"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/95/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/95/statuses_page=1.json"}}, "title": "Log to <labscript_suite>/logs instead of individual program directories", "close_source_branch": true, "type": "pullrequest", "id": 95, "destination": {"commit": {"hash": "68b30562f3e1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/68b30562f3e1.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/68b30562f3e1"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-11-21T20:05:13.997117+00:00", "summary": {"raw": "This will assist the move to regular Python packages, where it doesn't make a\r\nlot of sense to log to python/lib/site-packages.\r\n\r\nTell zprocess servers to log to the same directory, and require the version\r\nof zprocess that introduces that option.\r\n\r\nThis code migrates existing log files so as to not leave log files behind, which would be confusing.", "markup": "markdown", "html": "<p>This will assist the move to regular Python packages, where it doesn't make a\nlot of sense to log to python/lib/site-packages.</p>\n<p>Tell zprocess servers to log to the same directory, and require the version\nof zprocess that introduces that option.</p>\n<p>This code migrates existing log files so as to not leave log files behind, which would be confusing.</p>", "type": "rendered"}, "source": {"commit": {"hash": "fdf365dc5c64", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/fdf365dc5c64"}, "html": {"href": "#!/cbillington/labscript_utils/commits/fdf365dc5c64"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "logging-directory"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-12-05T02:35:04.707307+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "bc839f104a06", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/bc839f104a06.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/bc839f104a06"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Here are some changes for the upcoming shift to regular PyPI packages, as described [here](#!/labscript_suite/installer/issues/31/tasks-required-before-moving-to-standard)\r\n\r\n* Rename `labscript_suite_install_dir` to `labscript_suite_profile` (keeping the\r\n    old name as an alias for backward compatibility), since in the\r\n    upcoming restructuring, this will not be where the applications and libraries\r\n    are installed to, it will instead be the user's code, config and save data, and\r\n    app launchers, which we're calling a 'profile'.\r\n\r\n    Modify winshell functions to use the import path of each app instead of assuming\r\n    their locations within the profile directory (since they will not longer be\r\n    there in future).\r\n\r\n    Modify `versions._get_import_path()` to detect whether a package within the\r\n    `labscript_suite_profile` directory is a restructured repository with a\r\n    `setup.py`. If it is, then return the repository as the import\r\n    path, rather than the `labscript_suite_profile` directory.\r\n\r\n    This combined with 'shim' `__init__.py` and `__main__.py` files in restructured\r\n    packages to redirect imports and running `__main__.py` to the package one\r\n    directory down will allow these repositories to continue functioning as\r\n    previously even after they are restructured.\r\n\r\n    Minor version bump so that restructured packages can depend on the changed\r\n    functionality.\r\n\r\n* Automatically updated pinned apps when running fix_shortcuts()\r\n\r\n    Make fix_shortcuts() more cautious in deleting shortcuts, only deleting\r\n    a shortcut from the labscript suite install directory if it has a matching\r\n    entry in the start menu and has the name of one of the apps in it.\r\n\r\n    This makes it safer for code to call fix_shortcuts() automatically.\r\n\r\n* Start applications with current working directory set to userlib", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/96/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:76fa74b8d20e%0Dbc839f104a06?from_pullrequest_id=96"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/96/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/96.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/96/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/96/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/96"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/96/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:76fa74b8d20e%0Dbc839f104a06?from_pullrequest_id=96"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/96/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/96/statuses_page=1.json"}}, "title": "Preparations for apps to be restructured as standard Python packages", "close_source_branch": true, "type": "pullrequest", "id": 96, "destination": {"commit": {"hash": "bc839f104a06", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/bc839f104a06.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/bc839f104a06"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-11-30T04:39:10.389608+00:00", "summary": {"raw": "Here are some changes for the upcoming shift to regular PyPI packages, as described [here](#!/labscript_suite/installer/issues/31/tasks-required-before-moving-to-standard)\r\n\r\n* Rename `labscript_suite_install_dir` to `labscript_suite_profile` (keeping the\r\n    old name as an alias for backward compatibility), since in the\r\n    upcoming restructuring, this will not be where the applications and libraries\r\n    are installed to, it will instead be the user's code, config and save data, and\r\n    app launchers, which we're calling a 'profile'.\r\n\r\n    Modify winshell functions to use the import path of each app instead of assuming\r\n    their locations within the profile directory (since they will not longer be\r\n    there in future).\r\n\r\n    Modify `versions._get_import_path()` to detect whether a package within the\r\n    `labscript_suite_profile` directory is a restructured repository with a\r\n    `setup.py`. If it is, then return the repository as the import\r\n    path, rather than the `labscript_suite_profile` directory.\r\n\r\n    This combined with 'shim' `__init__.py` and `__main__.py` files in restructured\r\n    packages to redirect imports and running `__main__.py` to the package one\r\n    directory down will allow these repositories to continue functioning as\r\n    previously even after they are restructured.\r\n\r\n    Minor version bump so that restructured packages can depend on the changed\r\n    functionality.\r\n\r\n* Automatically updated pinned apps when running fix_shortcuts()\r\n\r\n    Make fix_shortcuts() more cautious in deleting shortcuts, only deleting\r\n    a shortcut from the labscript suite install directory if it has a matching\r\n    entry in the start menu and has the name of one of the apps in it.\r\n\r\n    This makes it safer for code to call fix_shortcuts() automatically.\r\n\r\n* Start applications with current working directory set to userlib", "markup": "markdown", "html": "<p>Here are some changes for the upcoming shift to regular PyPI packages, as described <a data-is-external-link=\"true\" href=\"#!/labscript_suite/installer/issues/31/tasks-required-before-moving-to-standard\" rel=\"nofollow\">here</a></p>\n<ul>\n<li>\n<p>Rename <code>labscript_suite_install_dir</code> to <code>labscript_suite_profile</code> (keeping the\n    old name as an alias for backward compatibility), since in the\n    upcoming restructuring, this will not be where the applications and libraries\n    are installed to, it will instead be the user's code, config and save data, and\n    app launchers, which we're calling a 'profile'.</p>\n<p>Modify winshell functions to use the import path of each app instead of assuming\ntheir locations within the profile directory (since they will not longer be\nthere in future).</p>\n<p>Modify <code>versions._get_import_path()</code> to detect whether a package within the\n<code>labscript_suite_profile</code> directory is a restructured repository with a\n<code>setup.py</code>. If it is, then return the repository as the import\npath, rather than the <code>labscript_suite_profile</code> directory.</p>\n<p>This combined with 'shim' <code>__init__.py</code> and <code>__main__.py</code> files in restructured\npackages to redirect imports and running <code>__main__.py</code> to the package one\ndirectory down will allow these repositories to continue functioning as\npreviously even after they are restructured.</p>\n<p>Minor version bump so that restructured packages can depend on the changed\nfunctionality.</p>\n</li>\n<li>\n<p>Automatically updated pinned apps when running fix_shortcuts()</p>\n<p>Make fix_shortcuts() more cautious in deleting shortcuts, only deleting\na shortcut from the labscript suite install directory if it has a matching\nentry in the start menu and has the name of one of the apps in it.</p>\n<p>This makes it safer for code to call fix_shortcuts() automatically.</p>\n</li>\n<li>\n<p>Start applications with current working directory set to userlib</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "62a9cc80249e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/62a9cc80249e"}, "html": {"href": "#!/cbillington/labscript_utils/commits/62a9cc80249e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "restructuring-preparations"}}, "comment_count": 11, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-01T08:54:33.590267+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "76fa74b8d20e", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/76fa74b8d20e.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/76fa74b8d20e"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Tensorflow contains true double imports. Bug reported here:\r\nhttps://github.com/tensorflow/tensorflow/issues/35369\r\n\r\nBut let's work around it in the meantime.\r\n\r\nThis issue was pointed out by Peter Elgee by email, so I've added him as a reviewer - if you could let me know if this solves your issue Peter, that would be good!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/97/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diffstat/labscript_suite/labscript_utils:e5a908bdc9cb%0D9a6d96f5e466?from_pullrequest_id=97"}, "commits": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/97/commits.json"}, "self": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/97.json"}, "comments": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/97/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/97/merge"}, "html": {"href": "#!/labscript_suite/labscript_utils/pull-requests/97"}, "activity": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/97/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/diff/labscript_suite/labscript_utils:e5a908bdc9cb%0D9a6d96f5e466?from_pullrequest_id=97"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/labscript_utils/pullrequests/97/approve"}, "statuses": {"href": "data/repositories/labscript_suite/labscript_utils/pullrequests/97/statuses_page=1.json"}}, "title": "Whitelist tensorflow in double import denier", "close_source_branch": true, "type": "pullrequest", "id": 97, "destination": {"commit": {"hash": "9a6d96f5e466", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/9a6d96f5e466.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/9a6d96f5e466"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils.json"}, "html": {"href": "#!/labscript_suite/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{68347210-fb1e-4b58-86c0-bd2c04396e63}ts=249922"}}, "type": "repository", "name": "labscript_utils", "full_name": "labscript_suite/labscript_utils", "uuid": "{68347210-fb1e-4b58-86c0-bd2c04396e63}"}, "branch": {"name": "default"}}, "created_on": "2019-12-24T00:19:30.954411+00:00", "summary": {"raw": "Tensorflow contains true double imports. Bug reported here:\r\nhttps://github.com/tensorflow/tensorflow/issues/35369\r\n\r\nBut let's work around it in the meantime.\r\n\r\nThis issue was pointed out by Peter Elgee by email, so I've added him as a reviewer - if you could let me know if this solves your issue Peter, that would be good!", "markup": "markdown", "html": "<p>Tensorflow contains true double imports. Bug reported here:\n<a href=\"https://github.com/tensorflow/tensorflow/issues/35369\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/tensorflow/tensorflow/issues/35369</a></p>\n<p>But let's work around it in the meantime.</p>\n<p>This issue was pointed out by Peter Elgee by email, so I've added him as a reviewer - if you could let me know if this solves your issue Peter, that would be good!</p>", "type": "rendered"}, "source": {"commit": {"hash": "216950652556", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils/commit/216950652556"}, "html": {"href": "#!/cbillington/labscript_utils/commits/216950652556"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/labscript_utils"}, "html": {"href": "#!/cbillington/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{455d0b5d-4852-4e4a-b8b1-f5ba77882210}ts=python"}}, "type": "repository", "name": "labscript_utils", "full_name": "cbillington/labscript_utils", "uuid": "{455d0b5d-4852-4e4a-b8b1-f5ba77882210}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2020-01-16T07:11:16.409573+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e5a908bdc9cb", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/labscript_utils/commit/e5a908bdc9cb.json"}, "html": {"href": "#!/labscript_suite/labscript_utils/commits/e5a908bdc9cb"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}], "page": 2, "size": 97}