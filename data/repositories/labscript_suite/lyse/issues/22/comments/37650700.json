{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37650700.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37650700"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Sending the data back to the lyse GUI directly, avoiding going via the file (even though the data is also in the file) might be the way to go for acceptable performance. I suspect if I implemented something which merely marked the shots as requiring updating, it would still be almost as slow as what you're doing now. This would not be too hard I imagine.\n\nProbably a modification to Run.save_result(), such that when it saves it to the file it also sends it to the lyse GUI (if it can establish that the current process is in fact running as a multishot analysis routine - probably via a flag set by lyse.data() when the user fetches the dataframe), or stores it somewhere for later sending to the lyse GUI, might be good.", "markup": "markdown", "html": "<p>Sending the data back to the lyse GUI directly, avoiding going via the file (even though the data is also in the file) might be the way to go for acceptable performance. I suspect if I implemented something which merely marked the shots as requiring updating, it would still be almost as slow as what you're doing now. This would not be too hard I imagine.</p>\n<p>Probably a modification to Run.save_result(), such that when it saves it to the file it also sends it to the lyse GUI (if it can establish that the current process is in fact running as a multishot analysis routine - probably via a flag set by lyse.data() when the user fetches the dataframe), or stores it somewhere for later sending to the lyse GUI, might be good.</p>", "type": "rendered"}, "created_on": "2017-06-16T17:02:25.886257+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37650700}