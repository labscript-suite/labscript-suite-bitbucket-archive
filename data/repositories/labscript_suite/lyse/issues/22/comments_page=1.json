{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37628514.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37628514"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "There used to be something like this, where a multishot analysis routine would be passed a a path to a h5 file for storing results in. I'm not sure if the results ended up in the dataframe, but you could use them by opening the h5 file from other routines. This saving of results would be done with something along the lines of:\n\n```\n#!python\n\nseq = Sequence(path, df)\nseq.save_result('result name',result)\n\n```\n\nIn fact, this was all listed in the (out of date) [documentation](https://bytebucket.org/labscript_suite/lyse/raw/gtk/docs/lyse.pdf) (based on the older gtk version). Somewhere along the way something was changed so that lyse.path = None for multishot, perhaps in the port to qt? @cbillington, was there a reason for this change, or is it just that no one here at Monash has been using the Sequence class in their scripts, so the functionality was forgotten about and broken as other things were changed?\n\nPerhaps rather than saving to a routine specific h5 file, we should be saving the result to each individual h5 file in the sequence? When you call Sequence.save_result() it could check if path == None, in which case it will then save to every run_path instead?", "markup": "markdown", "html": "<p>There used to be something like this, where a multishot analysis routine would be passed a a path to a h5 file for storing results in. I'm not sure if the results ended up in the dataframe, but you could use them by opening the h5 file from other routines. This saving of results would be done with something along the lines of:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">seq</span> <span class=\"o\">=</span> <span class=\"n\">Sequence</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">seq</span><span class=\"o\">.</span><span class=\"n\">save_result</span><span class=\"p\">(</span><span class=\"s1\">&#39;result name&#39;</span><span class=\"p\">,</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>In fact, this was all listed in the (out of date) <a data-is-external-link=\"true\" href=\"data/bytebucket.org/labscript_suite/lyse/raw/gtk/docs/lyse.pdf\" rel=\"nofollow\">documentation</a> (based on the older gtk version). Somewhere along the way something was changed so that lyse.path = None for multishot, perhaps in the port to qt? @cbillington, was there a reason for this change, or is it just that no one here at Monash has been using the Sequence class in their scripts, so the functionality was forgotten about and broken as other things were changed?</p>\n<p>Perhaps rather than saving to a routine specific h5 file, we should be saving the result to each individual h5 file in the sequence? When you call Sequence.save_result() it could check if path == None, in which case it will then save to every run_path instead?</p>", "type": "rendered"}, "created_on": "2017-06-16T06:46:26.857779+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": null, "type": "issue_comment", "id": 37628514}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37628920.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37628920"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Yes, it was lost in the port to Qt because nobody was using it.\n\nThat's not what @PhyNerd is getting at though, I think. He's saving the data to individual shot files, it's just that lyse isn't going out to the files again to get this new data and put it in the dataframe.\n\nWe could certainly do this, something like, communicating to lyse in some way a list of shots that need updating - or save_result() could automatically inform lyse in some way that that shot needs updating. That's a pretty good way of doing it actually, and would help avoid needlessy re-opening the h5 file when nothing had changed.\n\nThe trouble with it is that opening and closing lots of files is a bit slow. Lyse would hang for potentially some tens of seconds if you had a few hundreds of shots. So probably a progress bar would be in order. Perhaps there could be some way to make it more efficient. If it is useful despite the slowness, then it's probably worth adding functionality for it.\n\nA workaround for the moment might be to add a dummy singleshot analysis routine that does nothing, uncheck all other singleshot and multishot analysis routines, and then mark all shots as not done - lyse will run the do-nothing script on them and then slurp in the new data produced from the multishot routine.", "markup": "markdown", "html": "<p>Yes, it was lost in the port to Qt because nobody was using it.</p>\n<p>That's not what @PhyNerd is getting at though, I think. He's saving the data to individual shot files, it's just that lyse isn't going out to the files again to get this new data and put it in the dataframe.</p>\n<p>We could certainly do this, something like, communicating to lyse in some way a list of shots that need updating - or save_result() could automatically inform lyse in some way that that shot needs updating. That's a pretty good way of doing it actually, and would help avoid needlessy re-opening the h5 file when nothing had changed.</p>\n<p>The trouble with it is that opening and closing lots of files is a bit slow. Lyse would hang for potentially some tens of seconds if you had a few hundreds of shots. So probably a progress bar would be in order. Perhaps there could be some way to make it more efficient. If it is useful despite the slowness, then it's probably worth adding functionality for it.</p>\n<p>A workaround for the moment might be to add a dummy singleshot analysis routine that does nothing, uncheck all other singleshot and multishot analysis routines, and then mark all shots as not done - lyse will run the do-nothing script on them and then slurp in the new data produced from the multishot routine.</p>", "type": "rendered"}, "created_on": "2017-06-16T07:10:40.773314+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37628920}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37629823.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37629823"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Well @shaunj 's idea of saving it to the individuals I allready implemented. The problem just as @cbillington said is that the dataframe isn't updated.\nI am currently running a empty singleshot routine to update and yes is is quite slow. \nI guess the change I proposed would be faster and solve the problem of the user having to mark all shots as not done.\n\nAnother idea, to reduce the read and write operations and increase speed, could be upon saving results to the h5 file also creating a array, that is then added to the dataframe at the end of the routine. This would eliminate all read operations for the dataframe update. This kind of change could also bring a speed increase to singeshot routines.", "markup": "markdown", "html": "<p>Well @shaunj 's idea of saving it to the individuals I allready implemented. The problem just as @cbillington said is that the dataframe isn't updated.\nI am currently running a empty singleshot routine to update and yes is is quite slow. \nI guess the change I proposed would be faster and solve the problem of the user having to mark all shots as not done.</p>\n<p>Another idea, to reduce the read and write operations and increase speed, could be upon saving results to the h5 file also creating a array, that is then added to the dataframe at the end of the routine. This would eliminate all read operations for the dataframe update. This kind of change could also bring a speed increase to singeshot routines.</p>", "type": "rendered"}, "created_on": "2017-06-16T07:52:48.956576+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-06-16T07:55:21.301287+00:00", "type": "issue_comment", "id": 37629823}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37650700.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37650700"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Sending the data back to the lyse GUI directly, avoiding going via the file (even though the data is also in the file) might be the way to go for acceptable performance. I suspect if I implemented something which merely marked the shots as requiring updating, it would still be almost as slow as what you're doing now. This would not be too hard I imagine.\n\nProbably a modification to Run.save_result(), such that when it saves it to the file it also sends it to the lyse GUI (if it can establish that the current process is in fact running as a multishot analysis routine - probably via a flag set by lyse.data() when the user fetches the dataframe), or stores it somewhere for later sending to the lyse GUI, might be good.", "markup": "markdown", "html": "<p>Sending the data back to the lyse GUI directly, avoiding going via the file (even though the data is also in the file) might be the way to go for acceptable performance. I suspect if I implemented something which merely marked the shots as requiring updating, it would still be almost as slow as what you're doing now. This would not be too hard I imagine.</p>\n<p>Probably a modification to Run.save_result(), such that when it saves it to the file it also sends it to the lyse GUI (if it can establish that the current process is in fact running as a multishot analysis routine - probably via a flag set by lyse.data() when the user fetches the dataframe), or stores it somewhere for later sending to the lyse GUI, might be good.</p>", "type": "rendered"}, "created_on": "2017-06-16T17:02:25.886257+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37650700}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37650818.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37650818"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "I also think modifying Run.save_result() to send to the GUI is the way to go.\nBut why restrict this change to multishot analysis routines? This could also eliminate read operations after single shot routines.", "markup": "markdown", "html": "<p>I also think modifying Run.save_result() to send to the GUI is the way to go.\nBut why restrict this change to multishot analysis routines? This could also eliminate read operations after single shot routines.</p>", "type": "rendered"}, "created_on": "2017-06-16T17:10:53.289368+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37650818}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37651220.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37651220"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Hm, I suppose so, yes. So just modifying `Run.save_result()` to check \"are we running in lyse\", and if so, send back a dataframe once you're done processing.\n\nWhat I was thinking was that multishot routines can also be run from outside the lyse GUI - but since they call lyse.data() the process knows that there is a running instance of lyse, and so could still update it even though the script is not being run from lyse directly. Whereas a singleshot routine running outside lyse can't know for sure that lyse is running or on what computer.\n\nBut, we should fix this for routines running from within lyse, at least. At present lyse has no idea about what's running outside of it, and does not respect changes to the files that it didn't explicitly initiate, so this would be an improvement even if it doesn't make lyse 100 % aware of all changes made to files.", "markup": "markdown", "html": "<p>Hm, I suppose so, yes. So just modifying <code>Run.save_result()</code> to check \"are we running in lyse\", and if so, send back a dataframe once you're done processing.</p>\n<p>What I was thinking was that multishot routines can also be run from outside the lyse GUI - but since they call lyse.data() the process knows that there is a running instance of lyse, and so could still update it even though the script is not being run from lyse directly. Whereas a singleshot routine running outside lyse can't know for sure that lyse is running or on what computer.</p>\n<p>But, we should fix this for routines running from within lyse, at least. At present lyse has no idea about what's running outside of it, and does not respect changes to the files that it didn't explicitly initiate, so this would be an improvement even if it doesn't make lyse 100 % aware of all changes made to files.</p>", "type": "rendered"}, "created_on": "2017-06-16T17:40:55.452127+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37651220}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37651910.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37651910"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "It's quite easy making analysis routines aware of running in lyse:\n\nto __init__.py add:\n\n```\n#!python\n\n    def in_lyse():\n        return False\n```\n\nand to analysis_subprocess.py's AnalysisWorker class __init__() add \n\n```\n#!python\n\n        def in_lyse():\n            return True\n        lyse.in_lyse = in_lyse\n```\n\nThis is a bit hacky but works great.\nLeaving the problem of updating the dataframe.", "markup": "markdown", "html": "<p>It's quite easy making analysis routines aware of running in lyse:</p>\n<p>to <strong>init</strong>.py add:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">in_lyse</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</pre></div>\n\n\n<p>and to analysis_subprocess.py's AnalysisWorker class <strong>init</strong>() add </p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"k\">def</span> <span class=\"nf\">in_lyse</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"n\">lyse</span><span class=\"o\">.</span><span class=\"n\">in_lyse</span> <span class=\"o\">=</span> <span class=\"n\">in_lyse</span>\n</pre></div>\n\n\n<p>This is a bit hacky but works great.\nLeaving the problem of updating the dataframe.</p>", "type": "rendered"}, "created_on": "2017-06-16T18:32:01.121490+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-06-16T18:38:34.801670+00:00", "type": "issue_comment", "id": 37651910}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37652127.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37652127"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Oh, sure, and in fact there's a variable that already does that: it's called lyse.spinning_top...a lame reference to the movie Inception. Probably should give it a better name.\n\nWhilst it's easy to tell if a routine is running from within lyse or not, the distinction I was getting at was that multishot routines can get information about a running lyse instance even if they are running from outside it, because the user calls lyse.data() (potentially specifying a hostname other than localhost), which connects to a running lyse instance and returns the dataframe. Whereas a singleshot analysis routine running outside lyse does not make contact with lyse. So what I was getting at is that it's possible to ensure multishot routines outside of lyse also inform lyse about changed data, whereas it is not so easy with a singleshot analysis routine, since it does not make contact with lyse and lyse is not necessarily even running. But I think we should probably just not support keeping the lyse interface updated when running routines outside lyse. If you're running routines outside lyse you're on your own!", "markup": "markdown", "html": "<p>Oh, sure, and in fact there's a variable that already does that: it's called lyse.spinning_top...a lame reference to the movie Inception. Probably should give it a better name.</p>\n<p>Whilst it's easy to tell if a routine is running from within lyse or not, the distinction I was getting at was that multishot routines can get information about a running lyse instance even if they are running from outside it, because the user calls lyse.data() (potentially specifying a hostname other than localhost), which connects to a running lyse instance and returns the dataframe. Whereas a singleshot analysis routine running outside lyse does not make contact with lyse. So what I was getting at is that it's possible to ensure multishot routines outside of lyse also inform lyse about changed data, whereas it is not so easy with a singleshot analysis routine, since it does not make contact with lyse and lyse is not necessarily even running. But I think we should probably just not support keeping the lyse interface updated when running routines outside lyse. If you're running routines outside lyse you're on your own!</p>", "type": "rendered"}, "created_on": "2017-06-16T18:39:24.772793+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37652127}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37663136.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37663136"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Nice naming! Made me chuckel. You should definitely keep the name but maybe add a comment on what the variable is for.\n\nI now see what your getting at. \nAnd I would propose that we neglect everyone running scripts outside of lyse and in lyse simultaneously. I don't think this should be too many people and everyone else should be just fine with the change.\nThis would also allow for a easy implementation by using a variable like lyse.spinning_top to store a Qt Signal that can then be emited on every save to send the updated information back to the GUI.\nOr does anyone have a better solution for sending data back?", "markup": "markdown", "html": "<p>Nice naming! Made me chuckel. You should definitely keep the name but maybe add a comment on what the variable is for.</p>\n<p>I now see what your getting at. \nAnd I would propose that we neglect everyone running scripts outside of lyse and in lyse simultaneously. I don't think this should be too many people and everyone else should be just fine with the change.\nThis would also allow for a easy implementation by using a variable like lyse.spinning_top to store a Qt Signal that can then be emited on every save to send the updated information back to the GUI.\nOr does anyone have a better solution for sending data back?</p>", "type": "rendered"}, "created_on": "2017-06-17T19:45:21.586575+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37663136}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37663223.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37663223"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "It wouldn't be a Qt signal, as analysis routines are actually running in their own subprocess even when lyse is running them. I do have an interprocess signal system that we use for some things like that, but I think the solution is much simpler. The analysis subprocess already needs to say \"done\" to lyse - it would now say \"done, and by the way, here is a dictionary of values you should update or add to your dataframe\". The dictionary would be added to in each call to Run.save_result() if spinning_top was True. The dictionary itself would live in the lyse module, but probably be None or not exist if not running from within lyse. The wrapper code that calls your analysis routine would reset the dictionary to an empty one prior to each run of your code.\n\nThen lyse would need to grow a little bit of code to update the dataframe and GUI with this data.\n\nI see no remaining problems with implementing the feature this way, and I'm happy to do the coding for it, though I can't of course guarantee when! This change would I think speed up the simplest single-shot analyses for everyone quite a bit, since lyse would no longer need to read the HDF5 file after each one.", "markup": "markdown", "html": "<p>It wouldn't be a Qt signal, as analysis routines are actually running in their own subprocess even when lyse is running them. I do have an interprocess signal system that we use for some things like that, but I think the solution is much simpler. The analysis subprocess already needs to say \"done\" to lyse - it would now say \"done, and by the way, here is a dictionary of values you should update or add to your dataframe\". The dictionary would be added to in each call to Run.save_result() if spinning_top was True. The dictionary itself would live in the lyse module, but probably be None or not exist if not running from within lyse. The wrapper code that calls your analysis routine would reset the dictionary to an empty one prior to each run of your code.</p>\n<p>Then lyse would need to grow a little bit of code to update the dataframe and GUI with this data.</p>\n<p>I see no remaining problems with implementing the feature this way, and I'm happy to do the coding for it, though I can't of course guarantee when! This change would I think speed up the simplest single-shot analyses for everyone quite a bit, since lyse would no longer need to read the HDF5 file after each one.</p>", "type": "rendered"}, "created_on": "2017-06-17T19:58:24.975809+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37663223}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37663825.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37663825"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "Even better.\nIf you don't beat me to it I'll give it a try after finishing up my runviewer modification.", "markup": "markdown", "html": "<p>Even better.\nIf you don't beat me to it I'll give it a try after finishing up my runviewer modification.</p>", "type": "rendered"}, "created_on": "2017-06-17T21:34:47.592389+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37663825}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37726844.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37726844"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "I implemented the solution we discussed. I'd be really happy about feedback and proposals for improvement before creating a pull request.\n[UpdateDataframeNoRead](#!/PhyNerd/lyse/branch/UpdateDataframeNoRead)", "markup": "markdown", "html": "<p>I implemented the solution we discussed. I'd be really happy about feedback and proposals for improvement before creating a pull request.\n<a data-is-external-link=\"true\" href=\"#!/PhyNerd/lyse/branch/UpdateDataframeNoRead\" rel=\"nofollow\">UpdateDataframeNoRead</a></p>", "type": "rendered"}, "created_on": "2017-06-20T20:23:12.527893+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37726844}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/37726979.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-37726979"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "This is looking great! I have some minor quibbles but it seems to me to be basically the ideal way to implement this.\n\nYou should make a pull request, and we can discuss the specifics there (and seek approval from others).", "markup": "markdown", "html": "<p>This is looking great! I have some minor quibbles but it seems to me to be basically the ideal way to implement this.</p>\n<p>You should make a pull request, and we can discuss the specifics there (and seek approval from others).</p>", "type": "rendered"}, "created_on": "2017-06-20T20:30:32.329646+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-20T20:40:37.433419+00:00", "type": "issue_comment", "id": 37726979}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22/comments/39750326.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/22#comment-39750326"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/22.json"}}, "type": "issue", "id": 22, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Allow Multishot Routines to add to dataframe"}, "content": {"raw": "resolved as of commit 2e16928", "markup": "markdown", "html": "<p>resolved as of commit <a href=\"#!/labscript_suite/lyse/commits/2e16928\" rel=\"nofollow\" class=\"ap-connect-link\">2e16928</a></p>", "type": "rendered"}, "created_on": "2017-09-09T19:24:40.583090+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 39750326}], "page": 1, "size": 14}