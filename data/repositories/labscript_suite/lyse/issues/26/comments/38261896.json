{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/26/comments/38261896.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/26#comment-38261896"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/26.json"}}, "type": "issue", "id": 26, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Loading images takes too long"}, "content": {"raw": "Ok so I've been playing around with this and here is what I came up with till now:\n\n```\n#!python\n\nclass StorageServer(ZMQServer):\n    def __init__(self, *args, **kwargs):\n        super(StorageServer, self).__init__(*args, **kwargs)\n        self.storage = {}\n\n    def handler(self, request_data):\n        command, keys, data = request_data\n\n        storage = self.storage\n        if len(keys) > 1:\n            for key in keys[:-1]:\n                if key not in storage:\n                    storage[key] = {}\n                storage = storage[key]\n\n        if command == \"get\":\n            try:\n                return storage[keys[-1]]\n            except KeyError:\n                return None\n            except IndexError:\n                return storage\n\n        elif command == \"set\":\n            storage[keys[-1]] = data\n            return True\n        elif command == \"remove\":\n            try:\n                del storage[keys[-1]]\n            except KeyError and IndexError:\n                return False\n            return True\n        elif command == \"clear\":\n            del self.storage\n            self.storage = {}\n```\n\nThis is a generic StorageServer, that stores data in nested dicts. \nIt allows for saving, getting and deleting data as well as clearing the whole storage.\nThe server expects message of the form [command, index, data]. Command being one of get, set, remove or clear. Index is expected to be a list of Indexes. Data is the data that gets stored otherwise this should be None.\n\nFor a proof of concept I modified the Run.get_images:\n\n```\n#!python\n\n    def get_image(self, orientation, label, image):\n        storage_port = 9999\n        img = zmq_get(storage_port, 'localhost', ['get', ['images', orientation, label, image, self.h5_path], None])\n        if img is None:\n            with h5py.File(self.h5_path) as h5_file:\n                if not 'images' in h5_file:\n                    raise Exception('File does not contain any images')\n                if not orientation in h5_file['images']:\n                    raise Exception('File does not contain any images with orientation \\'%s\\'' % orientation)\n                if not label in h5_file['images'][orientation]:\n                    raise Exception('File does not contain any images with label \\'%s\\'' % label)\n                if not image in h5_file['images'][orientation][label]:\n                    raise Exception('Image \\'%s\\' not found in file' % image)\n                img = array(h5_file['images'][orientation][label][image])\n                zmq_get(storage_port, 'localhost', ['set', ['images', orientation, label, image, self.h5_path], img])\n        return img\n```\n\nand also implemented a get_images function for Multishot routines:\n\n```\n#!python\n\ndef get_images(host='localhost', timeout=5):\n    port = 9999\n    return zmq_get(port, host, ['get', ['images'], None], timeout)\n```\n\nSingleshot routines are not really effected when it comes to speed as they usually just run once. When using get_images instead of something like {run.get_image(...) for path, run in seq.runs.items()} this holds a great speed increase (if the storage has already been filled).\n\nSo we still have to solve the problem of filling the storage upon loading a shot in a away that keep this feature optional for everyone who doesn't need it (so their memory doesn't suffer). Any ideas how this could be done? \nThe server could also be used for other cross analysis routine storage. So we might want to think about some sort of API to make this available.\n\nI'm also open to the idea of running a singleshot script, that does nothing but adding the images to the cross routine storage as this is a simple fix for our problem and doesn't bloat everyones memory. But non the less we would need a API for the storage.\n\nAny thoughts or ideas for improvement?", "markup": "markdown", "html": "<p>Ok so I've been playing around with this and here is what I came up with till now:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">StorageServer</span><span class=\"p\">(</span><span class=\"n\">ZMQServer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">StorageServer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request_data</span><span class=\"p\">):</span>\n        <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">request_data</span>\n\n        <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">storage</span><span class=\"p\">:</span>\n                    <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;get&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">None</span>\n            <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">storage</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;set&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">elif</span> <span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;remove&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"ow\">and</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">False</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">elif</span> <span class=\"n\">command</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;clear&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n</pre></div>\n\n\n<p>This is a generic StorageServer, that stores data in nested dicts. \nIt allows for saving, getting and deleting data as well as clearing the whole storage.\nThe server expects message of the form [command, index, data]. Command being one of get, set, remove or clear. Index is expected to be a list of Indexes. Data is the data that gets stored otherwise this should be None.</p>\n<p>For a proof of concept I modified the Run.get_images:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">def</span> <span class=\"nf\">get_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">):</span>\n        <span class=\"n\">storage_port</span> <span class=\"o\">=</span> <span class=\"mi\">9999</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">storage_port</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;get&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">h5_path</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">img</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">h5_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">h5_file</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"s1\">&#39;images&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">h5_file</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;File does not contain any images&#39;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">orientation</span> <span class=\"ow\">in</span> <span class=\"n\">h5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;File does not contain any images with orientation </span><span class=\"se\">\\&#39;</span><span class=\"si\">%s</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">orientation</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">h5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">][</span><span class=\"n\">orientation</span><span class=\"p\">]:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;File does not contain any images with label </span><span class=\"se\">\\&#39;</span><span class=\"si\">%s</span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">label</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">image</span> <span class=\"ow\">in</span> <span class=\"n\">h5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">][</span><span class=\"n\">orientation</span><span class=\"p\">][</span><span class=\"n\">label</span><span class=\"p\">]:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Image </span><span class=\"se\">\\&#39;</span><span class=\"si\">%s</span><span class=\"se\">\\&#39;</span><span class=\"s1\"> not found in file&#39;</span> <span class=\"o\">%</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n                <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">h5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">][</span><span class=\"n\">orientation</span><span class=\"p\">][</span><span class=\"n\">label</span><span class=\"p\">][</span><span class=\"n\">image</span><span class=\"p\">])</span>\n                <span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">storage_port</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;set&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">h5_path</span><span class=\"p\">],</span> <span class=\"n\">img</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">img</span>\n</pre></div>\n\n\n<p>and also implemented a get_images function for Multishot routines:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_images</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">9999</span>\n    <span class=\"k\">return</span> <span class=\"n\">zmq_get</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;get&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;images&#39;</span><span class=\"p\">],</span> <span class=\"bp\">None</span><span class=\"p\">],</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Singleshot routines are not really effected when it comes to speed as they usually just run once. When using get_images instead of something like {run.get_image(...) for path, run in seq.runs.items()} this holds a great speed increase (if the storage has already been filled).</p>\n<p>So we still have to solve the problem of filling the storage upon loading a shot in a away that keep this feature optional for everyone who doesn't need it (so their memory doesn't suffer). Any ideas how this could be done? \nThe server could also be used for other cross analysis routine storage. So we might want to think about some sort of API to make this available.</p>\n<p>I'm also open to the idea of running a singleshot script, that does nothing but adding the images to the cross routine storage as this is a simple fix for our problem and doesn't bloat everyones memory. But non the less we would need a API for the storage.</p>\n<p>Any thoughts or ideas for improvement?</p>", "type": "rendered"}, "created_on": "2017-07-16T14:30:03.648760+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-16T18:21:23.873840+00:00", "type": "issue_comment", "id": 38261896}