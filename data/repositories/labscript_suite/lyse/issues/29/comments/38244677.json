{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/29/comments/38244677.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/29#comment-38244677"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/29.json"}}, "type": "issue", "id": 29, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "speed up shot loading"}, "content": {"raw": "Ok another thing that gives me a factor 2 speed improvement is instead of using the filepath to reference the line that needs updating(in update_row) rather use the dataframe index as this is 2 times faster. The filepath can then be retrieved from the dataframe row.\n\n\n```\n#!python\n\n    @inmain_decorator()\n    def update_row(self, filepath=None, dataframe_already_updated=False, status_percent=None, new_row_data=None, updated_row_data=None, df_row_index=None):\n        \"\"\"\"Updates a row in the dataframe and Qt model\n        to the data in the HDF5 file for that shot. Also sets the percent done, if specified\"\"\"\n        # Update the row in the dataframe first:\n        if df_row_index is None:\n            if filepath is None:\n                raise ValueError('Eigther df_row_index of filepath must be provided!')\n            df_row_index = np.where(self.dataframe['filepath'].values == filepath)\n            try:\n                df_row_index = df_row_index[0][0]\n            except IndexError:\n                # Row has been deleted, nothing to do here:\n                return\n```\nand\n\n```\n#!python\n\n        # Update the data in the Qt model:\n        dataframe_row = self.dataframe.iloc[df_row_index].to_dict()\n        if filepath is None:\n            filepath = dataframe_row['filepath', '']\n        model_row_number = self.get_model_row_by_filepath(filepath)\n```\n\n\nA small improvement in speed was also gained when reordering and rewriting add_files:\n\n```\n#!python\n\n    @inmain_decorator()\n    def add_files(self, filepaths, new_row_data):\n        \"\"\"Add files to the dataframe model. New_row_data should be a\n        dataframe containing the new rows.\"\"\"\n        filepaths = set(filepaths)\n        duplicates = set(self.dataframe['filepath'].values)-(set(self.dataframe['filepath'].values)-filepaths)\n        for filepath in duplicates:\n            app.output_box.output('Warning: Ignoring duplicate shot %s\\n' % filepath, red=True)\n            if new_row_data is not None:\n                df_row_index = np.where(new_row_data['filepath'].values == filepath)\n                new_row_data = new_row_data.drop(df_row_index[0])\n                new_row_data.index = pandas.Index(range(len(new_row_data)))\n\n        df_len = len(self.dataframe)\n        self.dataframe = concat_with_padding(self.dataframe, new_row_data)\n        self.update_column_levels()\n        filepaths = new_row_data[\"filepath\"].tolist()\n        for i, filepath in enumerate(filepaths):\n            # Add the new rows to the model:\n            self._model.appendRow(self.new_row(filepath))\n            vert_header_item = QtGui.QStandardItem('...loading...')\n            self._model.setVerticalHeaderItem(self._model.rowCount() - 1, vert_header_item)\n            self._view.resizeRowToContents(self._model.rowCount() - 1)\n            self.update_row(dataframe_already_updated=True, df_row_index=i+df_len)\n        self.renumber_rows()\n```\n\nTo test speed i'm using a feature that I'm currently writing to export and import dataframes. I reload the same dataframe of 2000 shots everytime(from one file).\nAt the beginning this took 45 s with all the changes I made I'm down to about 6 s. \nI'm trying to reach 2 s maybe 1 s.\nAny more suggestions for improvement?\nIf this feature is of interest I could also provide this to the main branch.", "markup": "markdown", "html": "<p>Ok another thing that gives me a factor 2 speed improvement is instead of using the filepath to reference the line that needs updating(in update_row) rather use the dataframe index as this is 2 times faster. The filepath can then be retrieved from the dataframe row.</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"nd\">@inmain_decorator</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_row</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">dataframe_already_updated</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"n\">status_percent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">new_row_data</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">updated_row_data</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">df_row_index</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;&quot;Updates a row in the dataframe and Qt model</span>\n<span class=\"sd\">        to the data in the HDF5 file for that shot. Also sets the percent done, if specified&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Update the row in the dataframe first:</span>\n        <span class=\"k\">if</span> <span class=\"n\">df_row_index</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">filepath</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Eigther df_row_index of filepath must be provided!&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">df_row_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span> <span class=\"o\">==</span> <span class=\"n\">filepath</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">df_row_index</span> <span class=\"o\">=</span> <span class=\"n\">df_row_index</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Row has been deleted, nothing to do here:</span>\n                <span class=\"k\">return</span>\n</pre></div>\n\n\n<p>and</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"c1\"># Update the data in the Qt model:</span>\n        <span class=\"n\">dataframe_row</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">df_row_index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">filepath</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"n\">dataframe_row</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">]</span>\n        <span class=\"n\">model_row_number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model_row_by_filepath</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>A small improvement in speed was also gained when reordering and rewriting add_files:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"nd\">@inmain_decorator</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_files</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filepaths</span><span class=\"p\">,</span> <span class=\"n\">new_row_data</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add files to the dataframe model. New_row_data should be a</span>\n<span class=\"sd\">        dataframe containing the new rows.&quot;&quot;&quot;</span>\n        <span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">)</span>\n        <span class=\"n\">duplicates</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">filepaths</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">filepath</span> <span class=\"ow\">in</span> <span class=\"n\">duplicates</span><span class=\"p\">:</span>\n            <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">output_box</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">(</span><span class=\"s1\">&#39;Warning: Ignoring duplicate shot </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">red</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">new_row_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">df_row_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">new_row_data</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span> <span class=\"o\">==</span> <span class=\"n\">filepath</span><span class=\"p\">)</span>\n                <span class=\"n\">new_row_data</span> <span class=\"o\">=</span> <span class=\"n\">new_row_data</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">df_row_index</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">new_row_data</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_row_data</span><span class=\"p\">)))</span>\n\n        <span class=\"n\">df_len</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">concat_with_padding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">,</span> <span class=\"n\">new_row_data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_column_levels</span><span class=\"p\">()</span>\n        <span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"n\">new_row_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;filepath&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">filepath</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Add the new rows to the model:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_model</span><span class=\"o\">.</span><span class=\"n\">appendRow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">new_row</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">))</span>\n            <span class=\"n\">vert_header_item</span> <span class=\"o\">=</span> <span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QStandardItem</span><span class=\"p\">(</span><span class=\"s1\">&#39;...loading...&#39;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_model</span><span class=\"o\">.</span><span class=\"n\">setVerticalHeaderItem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_model</span><span class=\"o\">.</span><span class=\"n\">rowCount</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">vert_header_item</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_view</span><span class=\"o\">.</span><span class=\"n\">resizeRowToContents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_model</span><span class=\"o\">.</span><span class=\"n\">rowCount</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_row</span><span class=\"p\">(</span><span class=\"n\">dataframe_already_updated</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">df_row_index</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">df_len</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renumber_rows</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>To test speed i'm using a feature that I'm currently writing to export and import dataframes. I reload the same dataframe of 2000 shots everytime(from one file).\nAt the beginning this took 45 s with all the changes I made I'm down to about 6 s. \nI'm trying to reach 2 s maybe 1 s.\nAny more suggestions for improvement?\nIf this feature is of interest I could also provide this to the main branch.</p>", "type": "rendered"}, "created_on": "2017-07-14T19:10:12.699874+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-15T12:58:42.294268+00:00", "type": "issue_comment", "id": 38244677}