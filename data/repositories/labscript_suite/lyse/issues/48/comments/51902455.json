{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48/comments/51902455.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/48#comment-51902455"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Unable to fork a process from a lyse script with multiprocessing"}, "content": {"raw": "Ah, tricky. \n\nThe problem is that lyse does not actually run the analysis script  as the `__main__` module. It adds a global variable `__name__ = '__main__'` so that analysis code *thinks* it's in the `__main__` module, but if you look up `sys.modules['__main__']`, you get analysis_subprocess.py, which of course is the actual initial script being run by Python.\n\nAnd in Windows since multiprocessing is not a fork at all, it expects to be able to run the file corresponding to the `__main__` module in the subprocess and that it will find `farm()` there. Of course farm is not in `analysis_subprocess.py`. (Also analysis_subprocess.py hangs at startup trying to connect to lyse, but that's another issue).\n\nSo I can fix lyse to be more convincing about running the analysis routine as the `__main__` module, so that multiprocessing works. I'll have a look at this, I'm sure it can be done!\n\nBut in the meantime, you should be able to make it work by defining `farm()` in a separate module and importing it into your analysis script. That way the multiprocessing module will be able to find it in the subprocess.\n\nZprocess actually has exactly the same issue with its `Process` class, so it will not be of any help! Being on Linux doesn't help either since Qt GUIs and zmq sockets do not seem to survive forking (or, something doesn't it just seems to hang indefinitely). You need to tell the multiprocessing module to 'spawn' processes the Windows way instead of forking.", "markup": "markdown", "html": "<p>Ah, tricky. </p>\n<p>The problem is that lyse does not actually run the analysis script  as the <code>__main__</code> module. It adds a global variable <code>__name__ = '__main__'</code> so that analysis code <em>thinks</em> it's in the <code>__main__</code> module, but if you look up <code>sys.modules['__main__']</code>, you get analysis_subprocess.py, which of course is the actual initial script being run by Python.</p>\n<p>And in Windows since multiprocessing is not a fork at all, it expects to be able to run the file corresponding to the <code>__main__</code> module in the subprocess and that it will find <code>farm()</code> there. Of course farm is not in <code>analysis_subprocess.py</code>. (Also analysis_subprocess.py hangs at startup trying to connect to lyse, but that's another issue).</p>\n<p>So I can fix lyse to be more convincing about running the analysis routine as the <code>__main__</code> module, so that multiprocessing works. I'll have a look at this, I'm sure it can be done!</p>\n<p>But in the meantime, you should be able to make it work by defining <code>farm()</code> in a separate module and importing it into your analysis script. That way the multiprocessing module will be able to find it in the subprocess.</p>\n<p>Zprocess actually has exactly the same issue with its <code>Process</code> class, so it will not be of any help! Being on Linux doesn't help either since Qt GUIs and zmq sockets do not seem to survive forking (or, something doesn't it just seems to hang indefinitely). You need to tell the multiprocessing module to 'spawn' processes the Windows way instead of forking.</p>", "type": "rendered"}, "created_on": "2019-05-01T01:28:10.658503+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 51902455}