{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48/comments/51908559.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/48#comment-51908559"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Unable to fork a process from a lyse script with multiprocessing"}, "content": {"raw": "Ah, my mistake - I did not test my code in an isolated way, I had made changes to analysis_subprocess.py that it turns out are necessary too.\n\nIt looks like the subprocess executes the `__main__` module unconditionally, so the fact that `analysis_subprocess.py` has import side-effects (i.e. making zmq connections to the parent process) is messing with things. I have no idea why `KeyError: 101` within unpickling is the result specifically, but probably zeromq ends up with multiple connections to lyse and is round-robining the messages, which is absolutely not as designed! \n\nI've made [a patch](#!/labscript_suite/lyse/pull-requests/61/partial-fix-for-48-make) to move all the side-effects of `analysis_subprocess.py` into its `__main__` block, such that they will not be executed in the subprocess.\n\nIt seems to fix the issue, at least, so long as the objects needed by the child process are defined in a separate module.\n\nYou (or Steven) can test by:\n```\nhg pull --branch bugfix #!/cbillington/lyse\nhg update bugfix\n```\nin the lyse repo.\n\nBut I'll also look into a more complete fix where Python treats your analysis routine as the `__main__` module for the purposes of multiprocessing.", "markup": "markdown", "html": "<p>Ah, my mistake - I did not test my code in an isolated way, I had made changes to analysis_subprocess.py that it turns out are necessary too.</p>\n<p>It looks like the subprocess executes the <code>__main__</code> module unconditionally, so the fact that <code>analysis_subprocess.py</code> has import side-effects (i.e. making zmq connections to the parent process) is messing with things. I have no idea why <code>KeyError: 101</code> within unpickling is the result specifically, but probably zeromq ends up with multiple connections to lyse and is round-robining the messages, which is absolutely not as designed! </p>\n<p>I've made <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/pull-requests/61/partial-fix-for-48-make\" rel=\"nofollow\">a patch</a> to move all the side-effects of <code>analysis_subprocess.py</code> into its <code>__main__</code> block, such that they will not be executed in the subprocess.</p>\n<p>It seems to fix the issue, at least, so long as the objects needed by the child process are defined in a separate module.</p>\n<p>You (or Steven) can test by:</p>\n<div class=\"codehilite\"><pre><span></span>hg pull --branch bugfix #!/cbillington/lyse\nhg update bugfix\n</pre></div>\n\n\n<p>in the lyse repo.</p>\n<p>But I'll also look into a more complete fix where Python treats your analysis routine as the <code>__main__</code> module for the purposes of multiprocessing.</p>", "type": "rendered"}, "created_on": "2019-05-01T15:20:26.330666+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 51908559}