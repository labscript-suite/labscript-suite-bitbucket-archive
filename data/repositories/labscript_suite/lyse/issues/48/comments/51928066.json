{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48/comments/51928066.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/48#comment-51928066"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Unable to fork a process from a lyse script with multiprocessing"}, "content": {"raw": "I suspect pywin32 modules aren't being whitelisted by ModuleWatcher, since they are not loaded until needed and so aren't present when ModuleWatcher is first instantiated (which is what determined the whitelist). The reason they aren't loaded until used is that they don't exist on linux, so their import is conditional on the functions actually getting called. But I can modify things so that they make it into the whitelist on Windows.\n\nHaving said that, I don't really expect long-lived threads to play well with reloading modules generally, since the thread can hold references to 'old' modules and then you can have two copies of the same module in the interpreter, which can lead to unpredictable results.\n\nI can make lyse not crash unrecoverably though, I'll look into it.\n\nstdout not making it surprises me. Output redirection in zprocess is pretty sophisticated! It does low-level hooking in to file descriptors to catch anything that would be written to stdout or stderr whether it's a subprocess or a C extension or whatever. I see the output on Linux Python 3.7, and Windows Python 3.7, but not Windows Python 2.7. Zprocess has a test suite that checks this, I'll run it in Python 2.7 and see what's up.", "markup": "markdown", "html": "<p>I suspect pywin32 modules aren't being whitelisted by ModuleWatcher, since they are not loaded until needed and so aren't present when ModuleWatcher is first instantiated (which is what determined the whitelist). The reason they aren't loaded until used is that they don't exist on linux, so their import is conditional on the functions actually getting called. But I can modify things so that they make it into the whitelist on Windows.</p>\n<p>Having said that, I don't really expect long-lived threads to play well with reloading modules generally, since the thread can hold references to 'old' modules and then you can have two copies of the same module in the interpreter, which can lead to unpredictable results.</p>\n<p>I can make lyse not crash unrecoverably though, I'll look into it.</p>\n<p>stdout not making it surprises me. Output redirection in zprocess is pretty sophisticated! It does low-level hooking in to file descriptors to catch anything that would be written to stdout or stderr whether it's a subprocess or a C extension or whatever. I see the output on Linux Python 3.7, and Windows Python 3.7, but not Windows Python 2.7. Zprocess has a test suite that checks this, I'll run it in Python 2.7 and see what's up.</p>", "type": "rendered"}, "created_on": "2019-05-02T00:53:25.110075+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 51928066}