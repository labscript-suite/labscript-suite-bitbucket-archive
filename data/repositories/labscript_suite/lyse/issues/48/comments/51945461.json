{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48/comments/51945461.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/48#comment-51945461"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/48.json"}}, "type": "issue", "id": 48, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "Unable to fork a process from a lyse script with multiprocessing"}, "content": {"raw": "For what it's worth, the zprocess way of running a subprocess to do something similar is like the following:\n\n```python\nfrom zprocess import Process, ProcessTree\n\n\nclass FarmProcess(Process):\n    def run(self, x, y):\n        print('Print something', x, y)\n        self.to_parent.put(x + y)\n\n\nif __name__ == '__main__':\n    farm_process = FarmProcess(ProcessTree.instance())\n    to_farm, from_farm = farm_process.start(1, 2)\n    result = from_farm.get()\n    print('result was:', result)\n\n```\n\nA little more complicated, but the redirection works in `pythonw.exe`! There are more arguments to Process and ProcessTree for configuring security and output redirection and such, but since lyse analysis routines are already zprocess subprocesses, `ProcessTree.instance()` gives one that has already been configured to redirect to the lyse output box. But the default `ProcessTree.instance()` means this will work fine in a standalone script too.", "markup": "markdown", "html": "<p>For what it's worth, the zprocess way of running a subprocess to do something similar is like the following:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span><span class=\"p\">,</span> <span class=\"n\">ProcessTree</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FarmProcess</span><span class=\"p\">(</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Print something&#39;</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_parent</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">farm_process</span> <span class=\"o\">=</span> <span class=\"n\">FarmProcess</span><span class=\"p\">(</span><span class=\"n\">ProcessTree</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">())</span>\n    <span class=\"n\">to_farm</span><span class=\"p\">,</span> <span class=\"n\">from_farm</span> <span class=\"o\">=</span> <span class=\"n\">farm_process</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">from_farm</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;result was:&#39;</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>A little more complicated, but the redirection works in <code>pythonw.exe</code>! There are more arguments to Process and ProcessTree for configuring security and output redirection and such, but since lyse analysis routines are already zprocess subprocesses, <code>ProcessTree.instance()</code> gives one that has already been configured to redirect to the lyse output box. But the default <code>ProcessTree.instance()</code> means this will work fine in a standalone script too.</p>", "type": "rendered"}, "created_on": "2019-05-03T02:19:23.400448+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 51945461}