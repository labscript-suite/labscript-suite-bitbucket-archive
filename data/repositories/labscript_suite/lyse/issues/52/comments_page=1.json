{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/52/comments/53412744.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/52#comment-53412744"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/52.json"}}, "type": "issue", "id": 52, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "df.convert_objects removed from pandas"}, "content": {"raw": "After simply removing the `convert_objects` call and looking at some dataframes, it looks like the dtype of columns are pretty much what you would expect - they are specific datatypes and not all of type `object`. So `convert_objects` is not doing much work - they are already floats and ints and datetimes when appropriate, and are only `object` when there is genuinely mixed data.\n\nBehaviour is slightly imperfect since you can accidentally make a column a mixed dtype by saving an analysis result that is a different datatype than all other shots, and then changing and re-running analysis (or removing the shot) such that the column contains all the same datatype again, but the column will still remain dtype `object` as if the data were mixed.\n\nThe lyse `update_row()` method is already converting to a column to dtype `object` when it gets a datatype incompatible with the current datatype of a column. So some code could be added to check when the dtype of an element changes and check if it can convert back to specific datatypes. But this would involve looping over the whole dataframe or at least whole columns, and I'm hesitant to do it.\n\nI think we should just remove the call to `convert_objects` and see how it goes.\n\nSee PR #70", "markup": "markdown", "html": "<p>After simply removing the <code>convert_objects</code> call and looking at some dataframes, it looks like the dtype of columns are pretty much what you would expect - they are specific datatypes and not all of type <code>object</code>. So <code>convert_objects</code> is not doing much work - they are already floats and ints and datetimes when appropriate, and are only <code>object</code> when there is genuinely mixed data.</p>\n<p>Behaviour is slightly imperfect since you can accidentally make a column a mixed dtype by saving an analysis result that is a different datatype than all other shots, and then changing and re-running analysis (or removing the shot) such that the column contains all the same datatype again, but the column will still remain dtype <code>object</code> as if the data were mixed.</p>\n<p>The lyse <code>update_row()</code> method is already converting to a column to dtype <code>object</code> when it gets a datatype incompatible with the current datatype of a column. So some code could be added to check when the dtype of an element changes and check if it can convert back to specific datatypes. But this would involve looping over the whole dataframe or at least whole columns, and I'm hesitant to do it.</p>\n<p>I think we should just remove the call to <code>convert_objects</code> and see how it goes.</p>\n<p>See <a href=\"#!/labscript_suite/lyse/pull-requests/70/fix-for-issue-52-remove-deprecated\" rel=\"nofollow\" class=\"ap-connect-link\">PR #70</a></p>", "type": "rendered"}, "created_on": "2019-08-14T14:08:03.478002+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 53412744}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/52/comments/53413010.json"}, "html": {"href": "#!/labscript_suite/lyse/issues/52#comment-53413010"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/issues/52.json"}}, "type": "issue", "id": 52, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "title": "df.convert_objects removed from pandas"}, "content": {"raw": "Ah, actually looks like there is a better way, `infer_objects`:\n\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.infer_objects.html\n\nThis is not deprecated and does what we want. Pull request updated.", "markup": "markdown", "html": "<p>Ah, actually looks like there is a better way, <code>infer_objects</code>:</p>\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.infer_objects.html\" rel=\"nofollow\" class=\"ap-connect-link\">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.infer_objects.html</a></p>\n<p>This is not deprecated and does what we want. Pull request updated.</p>", "type": "rendered"}, "created_on": "2019-08-14T14:24:20.579869+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 53413010}], "page": 1, "size": 2}