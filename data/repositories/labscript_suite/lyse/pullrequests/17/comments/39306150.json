{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/17/comments/39306150.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/17/_/diff#comment-39306150"}}, "parent": {"id": 39305061, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/17/comments/39305061.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/17/_/diff#comment-39305061"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 17, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/17.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/17"}}, "title": "Update Dataframe without Readoperations"}, "content": {"raw": "Excellent.\n\nI tested it a bit, got some errors and found some bugs. If you could apply the following changes to fix them, that would be great:\n\n\n```\n#!diff\ndiff -r 4658a395c076 __main__.py\n--- a/__main__.py\tWed Jun 21 17:55:12 2017 +0000\n+++ b/__main__.py\tWed Jun 21 14:22:35 2017 -0400\n@@ -242,9 +242,9 @@\n         self.to_worker.put(['analyse', filepath])\n         signal, data = self.from_worker.get()\n         if signal == 'error':\n-            return False\n+            return False, data\n         elif signal == 'done':\n-            return True\n+            return True, data\n         else:\n             raise ValueError('invalid signal %s'%str(signal))\n         \n@@ -1721,11 +1721,11 @@\n                 self.shots_model.update_row(filepath, status_percent=status_percent, dataframe_already_updated=True)\n                 return\n             if signal == 'error':\n-                # If new_row_data is None, that indicates that we got an\n-                # IOError error above. Do not pause analysis in this\n-                # case, as an error is expected given the shot file doesn't\n-                # exist.\n-                if new_row_data is not None:\n+                if not os.path.exists(filepath):\n+                    # Do not pause if the file has been deleted. An error is\n+                    # no surprise there:\n+                    self.shots_model.mark_as_deleted_off_disk(filepath)\n+                else:\n                     self.pause_analysis()\n                 return\n                         \n@@ -1733,10 +1733,10 @@\n         self.to_multishot.put(None)\n         while True:\n             signal, _, updated_data = self.from_multishot.get()\n+            for file in updated_data:\n+                self.shots_model.update_row(file, updated_row_data=updated_data[file])\n             if signal == 'done':\n                 self.multishot_required = False\n-                for file in updated_data:\n-                    self.shots_model.update_row(file, updated_row_data=updated_data[file])\n                 return\n             elif signal == 'error':\n                 self.pause_analysis()\n\n```\n", "markup": "markdown", "html": "<p>Excellent.</p>\n<p>I tested it a bit, got some errors and found some bugs. If you could apply the following changes to fix them, that would be great:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 4658a395c076 __main__.py</span>\n<span class=\"gd\">--- a/__main__.py   Wed Jun 21 17:55:12 2017 +0000</span>\n<span class=\"gi\">+++ b/__main__.py   Wed Jun 21 14:22:35 2017 -0400</span>\n<span class=\"gu\">@@ -242,9 +242,9 @@</span>\n         self.to_worker.put([&#39;analyse&#39;, filepath])\n         signal, data = self.from_worker.get()\n         if signal == &#39;error&#39;:\n<span class=\"gd\">-            return False</span>\n<span class=\"gi\">+            return False, data</span>\n         elif signal == &#39;done&#39;:\n<span class=\"gd\">-            return True</span>\n<span class=\"gi\">+            return True, data</span>\n         else:\n             raise ValueError(&#39;invalid signal %s&#39;%str(signal))\n\n<span class=\"gu\">@@ -1721,11 +1721,11 @@</span>\n                 self.shots_model.update_row(filepath, status_percent=status_percent, dataframe_already_updated=True)\n                 return\n             if signal == &#39;error&#39;:\n<span class=\"gd\">-                # If new_row_data is None, that indicates that we got an</span>\n<span class=\"gd\">-                # IOError error above. Do not pause analysis in this</span>\n<span class=\"gd\">-                # case, as an error is expected given the shot file doesn&#39;t</span>\n<span class=\"gd\">-                # exist.</span>\n<span class=\"gd\">-                if new_row_data is not None:</span>\n<span class=\"gi\">+                if not os.path.exists(filepath):</span>\n<span class=\"gi\">+                    # Do not pause if the file has been deleted. An error is</span>\n<span class=\"gi\">+                    # no surprise there:</span>\n<span class=\"gi\">+                    self.shots_model.mark_as_deleted_off_disk(filepath)</span>\n<span class=\"gi\">+                else:</span>\n                     self.pause_analysis()\n                 return\n\n<span class=\"gu\">@@ -1733,10 +1733,10 @@</span>\n         self.to_multishot.put(None)\n         while True:\n             signal, _, updated_data = self.from_multishot.get()\n<span class=\"gi\">+            for file in updated_data:</span>\n<span class=\"gi\">+                self.shots_model.update_row(file, updated_row_data=updated_data[file])</span>\n             if signal == &#39;done&#39;:\n                 self.multishot_required = False\n<span class=\"gd\">-                for file in updated_data:</span>\n<span class=\"gd\">-                    self.shots_model.update_row(file, updated_row_data=updated_data[file])</span>\n                 return\n             elif signal == &#39;error&#39;:\n                 self.pause_analysis()\n</pre></div>", "type": "rendered"}, "created_on": "2017-06-21T18:12:20.483149+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-21T18:22:53.453389+00:00", "type": "pullrequest_comment", "id": 39306150}