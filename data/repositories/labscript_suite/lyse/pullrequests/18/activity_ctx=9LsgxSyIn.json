{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41472307.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41472307"}}, "parent": {"id": 41471397, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41471397.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41471397"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Yes.\n\nWell stripping itself was easy... but then bitbucket decided that the branch that this pull request references didn't exist anymore (at least it said that in the pull request). But I checked and it still existed... \nIt took me a few minutes to have the idea to press edit in the pull request and save it without changing anything. And that fixed it somehow.\n\nIf that wouldn't have worked I would have needed to create a new pull request. So lessons learned I guess...", "markup": "markdown", "html": "<p>Yes.</p>\n<p>Well stripping itself was easy... but then bitbucket decided that the branch that this pull request references didn't exist anymore (at least it said that in the pull request). But I checked and it still existed... \nIt took me a few minutes to have the idea to press edit in the pull request and save it without changing anything. And that fixed it somehow.</p>\n<p>If that wouldn't have worked I would have needed to create a new pull request. So lessons learned I guess...</p>", "type": "rendered"}, "created_on": "2017-07-25T18:11:31.744264+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T18:11:52.335672+00:00", "type": "pullrequest_comment", "id": 41472307}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41471397.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41471397"}}, "parent": {"id": 41469648, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41469648.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41469648"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Oh, did you actually remove the commits from your online repository? I usually just back them out in this situation because I assumed stripping them would be too hard. Was it tricky?", "markup": "markdown", "html": "<p>Oh, did you actually remove the commits from your online repository? I usually just back them out in this situation because I assumed stripping them would be too hard. Was it tricky?</p>", "type": "rendered"}, "created_on": "2017-07-25T17:57:40.435963+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T17:57:40.438651+00:00", "type": "pullrequest_comment", "id": 41471397}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41469648.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41469648"}}, "parent": {"id": 41455270, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41455270.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41455270"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Ok I'll readd the firstpaint stuff\n\nOk I think it should be back in now. After some fighting with bitbucket quirks.", "markup": "markdown", "html": "<p>Ok I'll readd the firstpaint stuff</p>\n<p>Ok I think it should be back in now. After some fighting with bitbucket quirks.</p>", "type": "rendered"}, "created_on": "2017-07-25T17:33:14.307095+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T17:53:58.275267+00:00", "type": "pullrequest_comment", "id": 41469648}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7e4724adf22d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/7e4724adf22d"}, "html": {"href": "#!/PhyNerd/lyse/commits/7e4724adf22d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-25T17:51:50.670488+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7e4724adf22d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/7e4724adf22d"}, "html": {"href": "#!/PhyNerd/lyse/commits/7e4724adf22d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-25T17:51:50.601722+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41455270.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41455270"}}, "parent": {"id": 41413955, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41413955.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41413955"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "With the PaintEvent thing removed, things work file for me on linux - I checked by adding a `time.sleep(5)` to the start of `load_configuration()`, and the lyse window still popped up with the \"loading config file\" message displayed before the delay. So that only leaves Windows where it might possibly be necessary.\n\nEdit: Aha, no, actually that's just because I have a fast computer. When I reduce the timeout of the `QTimer.singleShot` call that queued up the config file loading to 0 instead of 50ms, I get a blank, unpainted window whilst the config file is loaded. And forcing painting immediately (rather than waiting for the existing paint event to be processed) by calling  `repaint()` on the window doesn't work either because the window manager has not actually created a window to paint yet (it seems to just do nothing). So I propose the firstPaint thing be added back in.", "markup": "markdown", "html": "<p>With the PaintEvent thing removed, things work file for me on linux - I checked by adding a <code>time.sleep(5)</code> to the start of <code>load_configuration()</code>, and the lyse window still popped up with the \"loading config file\" message displayed before the delay. So that only leaves Windows where it might possibly be necessary.</p>\n<p>Edit: Aha, no, actually that's just because I have a fast computer. When I reduce the timeout of the <code>QTimer.singleShot</code> call that queued up the config file loading to 0 instead of 50ms, I get a blank, unpainted window whilst the config file is loaded. And forcing painting immediately (rather than waiting for the existing paint event to be processed) by calling  <code>repaint()</code> on the window doesn't work either because the window manager has not actually created a window to paint yet (it seems to just do nothing). So I propose the firstPaint thing be added back in.</p>", "type": "rendered"}, "created_on": "2017-07-25T14:56:50.428243+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T15:19:51.602514+00:00", "type": "pullrequest_comment", "id": 41455270}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41454471.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41454471"}}, "parent": {"id": 41394684, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41394684.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41394684"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "1. I'm pretty sure I did the \"wait until first paint\" thing for a reason - I think paint events are low priority and deferred until after all other events are processed, or something like that. If things are still good in lyse then it's probably because lyse isn't doing much when you load routines, whereas runmanager does a lot when it loads stuff and so you notice the delay. Also whether paints happen first or not might be platform dependent. I would have been developing on Windows when I wrote that bit of runmanager.\n\n2. I think yeah, the two features are almost orthogonal. It seems like there are two use-cases for saving and loading config. The first is just restarting lyse and wanting everything back the way it was - this would entail loading the shots. The second is loading the analysis routines but wanting to run them on whatever new shots are going to come in. Perhaps shots/dataframe should be saved when the config is saved, but not laoded when it's loaded, and there could be save/load shots buttons above the FileBox to load and save shots - with one of the options of \"loading\" being \"load the shots that were saved when the config file was saved\" or whatever. Then perhaps when lyse restarts and auto-loads the last config file it should auto load those shots (but not later when you \"load config\" manually by menu item later).\n\nI think the loading can be made fast by saving the dataframe as PhyNerd says he's doing, and by saving a list of file modified times. You can then only update the rows whose files have changed (most of the time none of them).\n\nI agree this sufficiently different to be a different pull request, especially since this one is looking complete and ready to be merged perhaps after a smidgen more testing.", "markup": "markdown", "html": "<ol>\n<li>\n<p>I'm pretty sure I did the \"wait until first paint\" thing for a reason - I think paint events are low priority and deferred until after all other events are processed, or something like that. If things are still good in lyse then it's probably because lyse isn't doing much when you load routines, whereas runmanager does a lot when it loads stuff and so you notice the delay. Also whether paints happen first or not might be platform dependent. I would have been developing on Windows when I wrote that bit of runmanager.</p>\n</li>\n<li>\n<p>I think yeah, the two features are almost orthogonal. It seems like there are two use-cases for saving and loading config. The first is just restarting lyse and wanting everything back the way it was - this would entail loading the shots. The second is loading the analysis routines but wanting to run them on whatever new shots are going to come in. Perhaps shots/dataframe should be saved when the config is saved, but not laoded when it's loaded, and there could be save/load shots buttons above the FileBox to load and save shots - with one of the options of \"loading\" being \"load the shots that were saved when the config file was saved\" or whatever. Then perhaps when lyse restarts and auto-loads the last config file it should auto load those shots (but not later when you \"load config\" manually by menu item later).</p>\n</li>\n</ol>\n<p>I think the loading can be made fast by saving the dataframe as PhyNerd says he's doing, and by saving a list of file modified times. You can then only update the rows whose files have changed (most of the time none of them).</p>\n<p>I agree this sufficiently different to be a different pull request, especially since this one is looking complete and ready to be merged perhaps after a smidgen more testing.</p>", "type": "rendered"}, "created_on": "2017-07-25T14:50:26.279626+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T14:51:36.441285+00:00", "type": "pullrequest_comment", "id": 41454471}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41413955.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41413955"}}, "parent": {"id": 41394684, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41394684.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41394684"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "1. I'll do some testing and remove it if things still work. \n\nUpdate: removed the event and everything that belonged to it\n\n2. I think this is a topic that we should discuss seperate from this pullrequest. Currently all of this code does not restore the set of hdf5 files loaded. I do however have a separate feature that is running quite nicely in our lab that exports the current dataframe (split into sequences). That exported dataframe can then be restored at the push of a button. But the drawback is, that this dataframe might not represent the current state of the hdf file.", "markup": "markdown", "html": "<ol>\n<li>I'll do some testing and remove it if things still work. </li>\n</ol>\n<p>Update: removed the event and everything that belonged to it</p>\n<ol>\n<li>I think this is a topic that we should discuss seperate from this pullrequest. Currently all of this code does not restore the set of hdf5 files loaded. I do however have a separate feature that is running quite nicely in our lab that exports the current dataframe (split into sequences). That exported dataframe can then be restored at the push of a button. But the drawback is, that this dataframe might not represent the current state of the hdf file.</li>\n</ol>", "type": "rendered"}, "created_on": "2017-07-25T08:18:06.953296+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T08:37:33.858508+00:00", "type": "pullrequest_comment", "id": 41413955}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "11c9384990dd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/11c9384990dd"}, "html": {"href": "#!/PhyNerd/lyse/commits/11c9384990dd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-25T08:36:38.056708+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "42240b0b8287", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/42240b0b8287"}, "html": {"href": "#!/PhyNerd/lyse/commits/42240b0b8287"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-25T08:31:09.191761+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41394684.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41394684"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Comments on this:\n\n*  So I realise that the `firstPaint` signal is copied form runmanager, but I don't see why we need it really. Surely if we called `self.ui.show()` prior to creating the singleshot timer, this would mean that the GUI is always shown since the Qt event loop will process the event to render the GUI prior to processing the event for the timer? Maybe I've missed something.\n* It is sometimes nice to be able to save/restore the set of HDF5 files loaded in. However, since this process takes a long time, I would think it would need to be an option during the save process **and** also an option during the restore process so users could avoid it. Thoughts?\n", "markup": "markdown", "html": "<p>Comments on this:</p>\n<ul>\n<li>So I realise that the <code>firstPaint</code> signal is copied form runmanager, but I don't see why we need it really. Surely if we called <code>self.ui.show()</code> prior to creating the singleshot timer, this would mean that the GUI is always shown since the Qt event loop will process the event to render the GUI prior to processing the event for the timer? Maybe I've missed something.</li>\n<li>It is sometimes nice to be able to save/restore the set of HDF5 files loaded in. However, since this process takes a long time, I would think it would need to be an option during the save process <strong>and</strong> also an option during the restore process so users could avoid it. Thoughts?</li>\n</ul>", "type": "rendered"}, "created_on": "2017-07-25T00:27:05.166595+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-07-25T00:27:05.169743+00:00", "type": "pullrequest_comment", "id": 41394684}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41383849.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41383849"}}, "parent": {"id": 41381806, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41381806.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41381806"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Well, the analysis routine subprocess will ignore the normal request to quit, which it won't process until the analysis is done. But then lyse gets more aggressive - if the process hasn't exited after 2 seconds it will send SIGTERM on unix and whatever `.terminate()` does on Windows. This is still fairly clean, it will not corrupt HDF5 files for example (actually, I'm not sure about whether that is true on Windows). But if the analysis routine is away from the Python interpreter for more than a further 2 seconds executing C code or something, and doesn't respond to the SIGTERM, then it gets a SIGKILL (on unix - on Windows the `.terminate()` is the only thing done). This might not be ideal, killing might be too aggressive since it has the capacity to corrupt HDF5 files I believe. So perhaps we should change this at some point to minimise the chance of data corruption. We could enforce that removing routines can only be done when they're not active, or maybe pop up a box warning of data corruption if you 'force quit' an analysis routine.\n\nHere at JQI we've been talking about how pretty much nothing can guarantee with high enough certainty that it won't corrupt your data (your computer might crash whilst you're analysing data - nothing lyse can do about that), and that the only way around it is backing up shot files as they are produced. So we're talking about making a BLACS plugin that does that. It's costly on hard drive space but is the only way to be sure.", "markup": "markdown", "html": "<p>Well, the analysis routine subprocess will ignore the normal request to quit, which it won't process until the analysis is done. But then lyse gets more aggressive - if the process hasn't exited after 2 seconds it will send SIGTERM on unix and whatever <code>.terminate()</code> does on Windows. This is still fairly clean, it will not corrupt HDF5 files for example (actually, I'm not sure about whether that is true on Windows). But if the analysis routine is away from the Python interpreter for more than a further 2 seconds executing C code or something, and doesn't respond to the SIGTERM, then it gets a SIGKILL (on unix - on Windows the <code>.terminate()</code> is the only thing done). This might not be ideal, killing might be too aggressive since it has the capacity to corrupt HDF5 files I believe. So perhaps we should change this at some point to minimise the chance of data corruption. We could enforce that removing routines can only be done when they're not active, or maybe pop up a box warning of data corruption if you 'force quit' an analysis routine.</p>\n<p>Here at JQI we've been talking about how pretty much nothing can guarantee with high enough certainty that it won't corrupt your data (your computer might crash whilst you're analysing data - nothing lyse can do about that), and that the only way around it is backing up shot files as they are produced. So we're talking about making a BLACS plugin that does that. It's costly on hard drive space but is the only way to be sure.</p>", "type": "rendered"}, "created_on": "2017-07-24T20:20:09.205563+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-24T20:36:44.421956+00:00", "type": "pullrequest_comment", "id": 41383849}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7e4724adf22d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/7e4724adf22d"}, "html": {"href": "#!/PhyNerd/lyse/commits/7e4724adf22d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-24T20:31:16.507785+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41384080.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41384080"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "I realised just after posting it that `configparser` is a backport to Python 2 of the Python 3 configparser library, and may not be present on all installations, whereas `ConfigParser` is. So I changed my diff above to use `LabConfig.NoOptionError` instead, which is guaranteed to be the same exception LabConfig will raise (regardless of which config parser library it is using). Sorry about that!", "markup": "markdown", "html": "<p>I realised just after posting it that <code>configparser</code> is a backport to Python 2 of the Python 3 configparser library, and may not be present on all installations, whereas <code>ConfigParser</code> is. So I changed my diff above to use <code>LabConfig.NoOptionError</code> instead, which is guaranteed to be the same exception LabConfig will raise (regardless of which config parser library it is using). Sorry about that!</p>", "type": "rendered"}, "created_on": "2017-07-24T20:24:00.787170+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-24T20:24:00.790631+00:00", "type": "pullrequest_comment", "id": 41384080}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ff9a60020a95", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/ff9a60020a95"}, "html": {"href": "#!/PhyNerd/lyse/commits/ff9a60020a95"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-24T20:13:23.070300+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41381806.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41381806"}}, "parent": {"id": 41381608, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41381608.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41381608"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Ok one question: what happens if a routine get unloaded during execution? Can hdf5 files break because of this? If for example I load a config file during execution of a script which is unlikely but might happen.\n\nUpdate: ok looked at the subprocess code and saw that this should not break files as quit only gets performed after analysis has ended ", "markup": "markdown", "html": "<p>Ok one question: what happens if a routine get unloaded during execution? Can hdf5 files break because of this? If for example I load a config file during execution of a script which is unlikely but might happen.</p>\n<p>Update: ok looked at the subprocess code and saw that this should not break files as quit only gets performed after analysis has ended </p>", "type": "rendered"}, "created_on": "2017-07-24T19:45:34.174475+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-24T20:11:46.564423+00:00", "type": "pullrequest_comment", "id": 41381806}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41381608.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41381608"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "I've tested a bit and there doesn't seem to be any obvious breakage. Two suggestions:\n\n1. Every time a config option is loaded, the code should allow for the possibility that the option doesn't exist (like runmanager does). This allows us to add more options in the future and have people's existing config files keep working after the update.\n\n2. When you load a configuration using the menu option, it adds saved routines, but it does not *remove* routines that are present in the GUI but not in the config file being loaded.\n\nThe below patch addresses these two issues:\n\n\n```\n#!diff\n\n--- a/__main__.py\tFri Jul 07 14:34:25 2017 +0200\n+++ b/__main__.py\tMon Jul 24 15:36:49 2017 -0400\n@@ -526,8 +526,16 @@\n         self.last_opened_routine_folder = os.path.dirname(routine_files[0])\n         self.add_routines([(routine_file, QtCore.Qt.Checked) for routine_file in routine_files])\n \n-    def add_routines(self, routine_files):\n-        # Queue the files to be opened:\n+    def add_routines(self, routine_files, clear_existing=False):\n+        \"\"\"Add routines to the routine box, where routine_files is a list of\n+        tuples containing the filepath and whether the routine is enabled or\n+        not when it is added. if clear_existing == True, then any existing\n+        analysis routines will be cleared before the new ones are added.\"\"\"\n+        if clear_existing:\n+            for routine in self.routines[:]:\n+                routine.remove()\n+                self.routines.remove(routine)\n+\n         for filepath, checked in routine_files:\n             if filepath in [routine.filepath for routine in self.routines]:\n                 app.output_box.output('Warning: Ignoring duplicate analysis routine %s\\n'%filepath, red=True)\n@@ -1938,12 +1946,27 @@\n         self.ui.actionSave_configuration.setText('Save configuration %s'%filename)\n         lyse_config = LabConfig(filename)\n \n-        self.singleshot_routinebox.add_routines(ast.literal_eval(lyse_config.get('lyse_state', 'SingleShot')))\n-        self.singleshot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastSingleShotFolder'))\n-        self.multishot_routinebox.add_routines(ast.literal_eval(lyse_config.get('lyse_state', 'MultiShot')))\n-        self.multishot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastMultiShotFolder'))\n-        self.filebox.last_opened_shots_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastFileBoxFolder'))\n-\n+        try:\n+            self.singleshot_routinebox.add_routines(ast.literal_eval(lyse_config.get('lyse_state', 'SingleShot')), clear_existing=True)\n+        except LabConfig.NoOptionError:\n+            pass\n+        try:\n+            self.singleshot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastSingleShotFolder'))\n+        except LabConfig.NoOptionError:\n+            pass\n+        try:\n+            self.multishot_routinebox.add_routines(ast.literal_eval(lyse_config.get('lyse_state', 'MultiShot')), clear_existing=True)\n+        except LabConfig.NoOptionError:\n+            pass\n+        try:\n+            self.multishot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastMultiShotFolder'))\n+        except LabConfig.NoOptionError:\n+            pass\n+        try:\n+            self.filebox.last_opened_shots_folder = ast.literal_eval(lyse_config.get('lyse_state', 'LastFileBoxFolder'))\n+        except LabConfig.NoOptionError:\n+            pass\n \n         # Set as self.last_save_data:\n         save_data = self.get_save_data()\n```\n\nThe clearing of existing routines does mean that if you're loading a config file with some of the *same* routines as are already loaded, those routines will be removed and re-added, which restarts their subprocess unnecessarily. I don't think this is a big enough deal to worry about, though.", "markup": "markdown", "html": "<p>I've tested a bit and there doesn't seem to be any obvious breakage. Two suggestions:</p>\n<ol>\n<li>\n<p>Every time a config option is loaded, the code should allow for the possibility that the option doesn't exist (like runmanager does). This allows us to add more options in the future and have people's existing config files keep working after the update.</p>\n</li>\n<li>\n<p>When you load a configuration using the menu option, it adds saved routines, but it does not <em>remove</em> routines that are present in the GUI but not in the config file being loaded.</p>\n</li>\n</ol>\n<p>The below patch addresses these two issues:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- a/__main__.py   Fri Jul 07 14:34:25 2017 +0200</span>\n<span class=\"gi\">+++ b/__main__.py   Mon Jul 24 15:36:49 2017 -0400</span>\n<span class=\"gu\">@@ -526,8 +526,16 @@</span>\n         self.last_opened_routine_folder = os.path.dirname(routine_files[0])\n         self.add_routines([(routine_file, QtCore.Qt.Checked) for routine_file in routine_files])\n\n<span class=\"gd\">-    def add_routines(self, routine_files):</span>\n<span class=\"gd\">-        # Queue the files to be opened:</span>\n<span class=\"gi\">+    def add_routines(self, routine_files, clear_existing=False):</span>\n<span class=\"gi\">+        &quot;&quot;&quot;Add routines to the routine box, where routine_files is a list of</span>\n<span class=\"gi\">+        tuples containing the filepath and whether the routine is enabled or</span>\n<span class=\"gi\">+        not when it is added. if clear_existing == True, then any existing</span>\n<span class=\"gi\">+        analysis routines will be cleared before the new ones are added.&quot;&quot;&quot;</span>\n<span class=\"gi\">+        if clear_existing:</span>\n<span class=\"gi\">+            for routine in self.routines[:]:</span>\n<span class=\"gi\">+                routine.remove()</span>\n<span class=\"gi\">+                self.routines.remove(routine)</span>\n<span class=\"gi\">+</span>\n         for filepath, checked in routine_files:\n             if filepath in [routine.filepath for routine in self.routines]:\n                 app.output_box.output(&#39;Warning: Ignoring duplicate analysis routine %s\\n&#39;%filepath, red=True)\n<span class=\"gu\">@@ -1938,12 +1946,27 @@</span>\n         self.ui.actionSave_configuration.setText(&#39;Save configuration %s&#39;%filename)\n         lyse_config = LabConfig(filename)\n\n<span class=\"gd\">-        self.singleshot_routinebox.add_routines(ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;SingleShot&#39;)))</span>\n<span class=\"gd\">-        self.singleshot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastSingleShotFolder&#39;))</span>\n<span class=\"gd\">-        self.multishot_routinebox.add_routines(ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;MultiShot&#39;)))</span>\n<span class=\"gd\">-        self.multishot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastMultiShotFolder&#39;))</span>\n<span class=\"gd\">-        self.filebox.last_opened_shots_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastFileBoxFolder&#39;))</span>\n<span class=\"gd\">-</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            self.singleshot_routinebox.add_routines(ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;SingleShot&#39;)), clear_existing=True)</span>\n<span class=\"gi\">+        except LabConfig.NoOptionError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            self.singleshot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastSingleShotFolder&#39;))</span>\n<span class=\"gi\">+        except LabConfig.NoOptionError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            self.multishot_routinebox.add_routines(ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;MultiShot&#39;)), clear_existing=True)</span>\n<span class=\"gi\">+        except LabConfig.NoOptionError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            self.multishot_routinebox.last_opened_routine_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastMultiShotFolder&#39;))</span>\n<span class=\"gi\">+        except LabConfig.NoOptionError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            self.filebox.last_opened_shots_folder = ast.literal_eval(lyse_config.get(&#39;lyse_state&#39;, &#39;LastFileBoxFolder&#39;))</span>\n<span class=\"gi\">+        except LabConfig.NoOptionError:</span>\n<span class=\"gi\">+            pass</span>\n\n         # Set as self.last_save_data:\n         save_data = self.get_save_data()\n</pre></div>\n\n\n<p>The clearing of existing routines does mean that if you're loading a config file with some of the <em>same</em> routines as are already loaded, those routines will be removed and re-added, which restarts their subprocess unnecessarily. I don't think this is a big enough deal to worry about, though.</p>", "type": "rendered"}, "created_on": "2017-07-24T19:42:18.828812+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-24T19:46:06.343247+00:00", "type": "pullrequest_comment", "id": 41381608}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41007415.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41007415"}}, "parent": {"id": 41005910, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41005910.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41005910"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "It's been running since last week in our lab and works great.\nBut I haven't yet tested what happens when routines get deleted for example. \nSo there might be some breakage there.\n\nUpdate: no breakage it causes a error in the analysis process just like when there is a exception in the analysis routine itself", "markup": "markdown", "html": "<p>It's been running since last week in our lab and works great.\nBut I haven't yet tested what happens when routines get deleted for example. \nSo there might be some breakage there.</p>\n<p>Update: no breakage it causes a error in the analysis process just like when there is a exception in the analysis routine itself</p>", "type": "rendered"}, "created_on": "2017-07-18T20:45:32.211771+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-19T19:32:00.480459+00:00", "type": "pullrequest_comment", "id": 41007415}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41005910.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41005910"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Looks great! Thanks for this. I'll test it a bit before approving to make sure there's no obvious breakage.", "markup": "markdown", "html": "<p>Looks great! Thanks for this. I'll test it a bit before approving to make sure there's no obvious breakage.</p>", "type": "rendered"}, "created_on": "2017-07-18T20:26:24.675702+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-18T20:26:24.679422+00:00", "type": "pullrequest_comment", "id": 41005910}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "cb33aaf008d5", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/cb33aaf008d5.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/cb33aaf008d5"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2cf07dee9d20", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/2cf07dee9d20"}, "html": {"href": "#!/PhyNerd/lyse/commits/2cf07dee9d20"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-18T20:23:44.810158+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "4f78edf03091", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/4f78edf03091.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/4f78edf03091"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "2cf07dee9d20", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/2cf07dee9d20"}, "html": {"href": "#!/PhyNerd/lyse/commits/2cf07dee9d20"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-07T12:34:32.810689+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "4f78edf03091", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/4f78edf03091.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/4f78edf03091"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f5f22024d48e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/f5f22024d48e"}, "html": {"href": "#!/PhyNerd/lyse/commits/f5f22024d48e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-07T12:29:58.257237+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request adresses issue #24 and adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.\r\n\r\nIn the future one could also think about adding the ability to save the dataframe to disk with one of pandas export functions (and restore it at a later point) however this is a bit harder and not part of this pull request.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "4f78edf03091", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/4f78edf03091.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/4f78edf03091"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4edfd85c1531", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/4edfd85c1531"}, "html": {"href": "#!/PhyNerd/lyse/commits/4edfd85c1531"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-05T19:43:44.453272+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request  adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "4f78edf03091", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/4f78edf03091.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/4f78edf03091"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4edfd85c1531", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/4edfd85c1531"}, "html": {"href": "#!/PhyNerd/lyse/commits/4edfd85c1531"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-05T19:39:14.856004+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}, {"update": {"description": "This pull request  adds the ability to save the current routines to a configuration file, revert back to previously saved configurations and load configurations.\r\nTo achieve the restore of the checked state of routines a few modifications to AnalysisRoutine and RoutineBox were needed.\r\nThe rest of the code is mainly copied from runmanager's source code.", "title": "Added ability to restore UI state", "destination": {"commit": {"hash": "4f78edf03091", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/4f78edf03091.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/4f78edf03091"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4edfd85c1531", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/4edfd85c1531"}, "html": {"href": "#!/PhyNerd/lyse/commits/4edfd85c1531"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "Config"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-07-05T19:39:14.797448+00:00"}, "pull_request": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}}]}