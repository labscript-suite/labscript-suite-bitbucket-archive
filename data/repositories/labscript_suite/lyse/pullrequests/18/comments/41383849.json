{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41383849.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41383849"}}, "parent": {"id": 41381806, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41381806.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41381806"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "Well, the analysis routine subprocess will ignore the normal request to quit, which it won't process until the analysis is done. But then lyse gets more aggressive - if the process hasn't exited after 2 seconds it will send SIGTERM on unix and whatever `.terminate()` does on Windows. This is still fairly clean, it will not corrupt HDF5 files for example (actually, I'm not sure about whether that is true on Windows). But if the analysis routine is away from the Python interpreter for more than a further 2 seconds executing C code or something, and doesn't respond to the SIGTERM, then it gets a SIGKILL (on unix - on Windows the `.terminate()` is the only thing done). This might not be ideal, killing might be too aggressive since it has the capacity to corrupt HDF5 files I believe. So perhaps we should change this at some point to minimise the chance of data corruption. We could enforce that removing routines can only be done when they're not active, or maybe pop up a box warning of data corruption if you 'force quit' an analysis routine.\n\nHere at JQI we've been talking about how pretty much nothing can guarantee with high enough certainty that it won't corrupt your data (your computer might crash whilst you're analysing data - nothing lyse can do about that), and that the only way around it is backing up shot files as they are produced. So we're talking about making a BLACS plugin that does that. It's costly on hard drive space but is the only way to be sure.", "markup": "markdown", "html": "<p>Well, the analysis routine subprocess will ignore the normal request to quit, which it won't process until the analysis is done. But then lyse gets more aggressive - if the process hasn't exited after 2 seconds it will send SIGTERM on unix and whatever <code>.terminate()</code> does on Windows. This is still fairly clean, it will not corrupt HDF5 files for example (actually, I'm not sure about whether that is true on Windows). But if the analysis routine is away from the Python interpreter for more than a further 2 seconds executing C code or something, and doesn't respond to the SIGTERM, then it gets a SIGKILL (on unix - on Windows the <code>.terminate()</code> is the only thing done). This might not be ideal, killing might be too aggressive since it has the capacity to corrupt HDF5 files I believe. So perhaps we should change this at some point to minimise the chance of data corruption. We could enforce that removing routines can only be done when they're not active, or maybe pop up a box warning of data corruption if you 'force quit' an analysis routine.</p>\n<p>Here at JQI we've been talking about how pretty much nothing can guarantee with high enough certainty that it won't corrupt your data (your computer might crash whilst you're analysing data - nothing lyse can do about that), and that the only way around it is backing up shot files as they are produced. So we're talking about making a BLACS plugin that does that. It's costly on hard drive space but is the only way to be sure.</p>", "type": "rendered"}, "created_on": "2017-07-24T20:20:09.205563+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-24T20:36:44.421956+00:00", "type": "pullrequest_comment", "id": 41383849}