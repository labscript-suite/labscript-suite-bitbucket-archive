{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41454471.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41454471"}}, "parent": {"id": 41394684, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18/comments/41394684.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18/_/diff#comment-41394684"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 18, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/18.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/18"}}, "title": "Added ability to restore UI state"}, "content": {"raw": "1. I'm pretty sure I did the \"wait until first paint\" thing for a reason - I think paint events are low priority and deferred until after all other events are processed, or something like that. If things are still good in lyse then it's probably because lyse isn't doing much when you load routines, whereas runmanager does a lot when it loads stuff and so you notice the delay. Also whether paints happen first or not might be platform dependent. I would have been developing on Windows when I wrote that bit of runmanager.\n\n2. I think yeah, the two features are almost orthogonal. It seems like there are two use-cases for saving and loading config. The first is just restarting lyse and wanting everything back the way it was - this would entail loading the shots. The second is loading the analysis routines but wanting to run them on whatever new shots are going to come in. Perhaps shots/dataframe should be saved when the config is saved, but not laoded when it's loaded, and there could be save/load shots buttons above the FileBox to load and save shots - with one of the options of \"loading\" being \"load the shots that were saved when the config file was saved\" or whatever. Then perhaps when lyse restarts and auto-loads the last config file it should auto load those shots (but not later when you \"load config\" manually by menu item later).\n\nI think the loading can be made fast by saving the dataframe as PhyNerd says he's doing, and by saving a list of file modified times. You can then only update the rows whose files have changed (most of the time none of them).\n\nI agree this sufficiently different to be a different pull request, especially since this one is looking complete and ready to be merged perhaps after a smidgen more testing.", "markup": "markdown", "html": "<ol>\n<li>\n<p>I'm pretty sure I did the \"wait until first paint\" thing for a reason - I think paint events are low priority and deferred until after all other events are processed, or something like that. If things are still good in lyse then it's probably because lyse isn't doing much when you load routines, whereas runmanager does a lot when it loads stuff and so you notice the delay. Also whether paints happen first or not might be platform dependent. I would have been developing on Windows when I wrote that bit of runmanager.</p>\n</li>\n<li>\n<p>I think yeah, the two features are almost orthogonal. It seems like there are two use-cases for saving and loading config. The first is just restarting lyse and wanting everything back the way it was - this would entail loading the shots. The second is loading the analysis routines but wanting to run them on whatever new shots are going to come in. Perhaps shots/dataframe should be saved when the config is saved, but not laoded when it's loaded, and there could be save/load shots buttons above the FileBox to load and save shots - with one of the options of \"loading\" being \"load the shots that were saved when the config file was saved\" or whatever. Then perhaps when lyse restarts and auto-loads the last config file it should auto load those shots (but not later when you \"load config\" manually by menu item later).</p>\n</li>\n</ol>\n<p>I think the loading can be made fast by saving the dataframe as PhyNerd says he's doing, and by saving a list of file modified times. You can then only update the rows whose files have changed (most of the time none of them).</p>\n<p>I agree this sufficiently different to be a different pull request, especially since this one is looking complete and ready to be merged perhaps after a smidgen more testing.</p>", "type": "rendered"}, "created_on": "2017-07-25T14:50:26.279626+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T14:51:36.441285+00:00", "type": "pullrequest_comment", "id": 41454471}