{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41302074.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41302074"}}, "parent": {"id": 41300413, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41300413.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41300413"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "OK so the problem with the `str(name)` lines is that `name` is a unicode string and can't be encoded ascii (which `str()` implicitly does). This is tricky so solve by just modifying this function, because encoding the unicode string as utf8 is not what you want - then you can't access it in code with its actual name. Instead, we would need to change lyse so that all the column names were unicode strings throughout. This is a larger problem I think and should be addressed in the port to Python 3. If done in a backward compatible way, then non-ascii filenames would be supported in both Python 2 and 3.\n\nSo, once importing `unicode_literals` from `__future__` (in all lyse source files) and aliasing `str=unicode` if running in Python 2 (like I do at the top of `zprocess/__init__.py` for example), the str() line will leave the filename as a unicode string in both Python 2 and Python 3, and all the other string literals will be unicode ones as well. At that point we will have converted to using unicode strings for everything.\n\nThe reason this works before restarting lyse and re-loading a shot is that your method of updating the dataframe without reading the file is not doing the conversion to bytestrings of the column names. This might seem good, but actually means the dataframe is mixing bytestrings and unicode strings in its column names. This seems like poor practise, so I would like to convert all of them to use unicode strings.\n\nI might just reject this pull request and instead make one about converting all of lyse to unicode strings with `__future__` imports, but that would require a bit of testing and as mentioned, should come after some testing of the PyQt5 port. I understand you've got lyse ostensibly working on Python 3 already, but unless you have `unicode_literals` imported, then very different things are happening depending on whether lyse is running in Python 2 or Python 3, potentially producing different HDF5 files even, and certainly different dataframes, so it's preferable to get Python 2 working with `unicode_literals` before the next steps of Python 3 compatibility.", "markup": "markdown", "html": "<p>OK so the problem with the <code>str(name)</code> lines is that <code>name</code> is a unicode string and can't be encoded ascii (which <code>str()</code> implicitly does). This is tricky so solve by just modifying this function, because encoding the unicode string as utf8 is not what you want - then you can't access it in code with its actual name. Instead, we would need to change lyse so that all the column names were unicode strings throughout. This is a larger problem I think and should be addressed in the port to Python 3. If done in a backward compatible way, then non-ascii filenames would be supported in both Python 2 and 3.</p>\n<p>So, once importing <code>unicode_literals</code> from <code>__future__</code> (in all lyse source files) and aliasing <code>str=unicode</code> if running in Python 2 (like I do at the top of <code>zprocess/__init__.py</code> for example), the str() line will leave the filename as a unicode string in both Python 2 and Python 3, and all the other string literals will be unicode ones as well. At that point we will have converted to using unicode strings for everything.</p>\n<p>The reason this works before restarting lyse and re-loading a shot is that your method of updating the dataframe without reading the file is not doing the conversion to bytestrings of the column names. This might seem good, but actually means the dataframe is mixing bytestrings and unicode strings in its column names. This seems like poor practise, so I would like to convert all of them to use unicode strings.</p>\n<p>I might just reject this pull request and instead make one about converting all of lyse to unicode strings with <code>__future__</code> imports, but that would require a bit of testing and as mentioned, should come after some testing of the PyQt5 port. I understand you've got lyse ostensibly working on Python 3 already, but unless you have <code>unicode_literals</code> imported, then very different things are happening depending on whether lyse is running in Python 2 or Python 3, potentially producing different HDF5 files even, and certainly different dataframes, so it's preferable to get Python 2 working with <code>unicode_literals</code> before the next steps of Python 3 compatibility.</p>", "type": "rendered"}, "created_on": "2017-07-23T17:38:27.387616+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T17:39:18.703884+00:00", "type": "pullrequest_comment", "id": 41302074}