{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41299535.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41299535"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "Tested it and non ascii characters work just fine now.", "markup": "markdown", "html": "<p>Tested it and non ascii characters work just fine now.</p>", "type": "rendered"}, "created_on": "2017-07-23T08:54:12.821429+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-23T11:53:29.043782+00:00", "type": "pullrequest_comment", "id": 41299535}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41300413.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41300413"}}, "parent": {"id": 41299535, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41299535.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41299535"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "Ok more testing revealed new problems. When reloading a shot that has results from such a non ascii file you get this error:\n\n\n```\n#!python\n\nTraceback (most recent call last):\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/threading.py\", line 754, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/zprocess/__init__.py\", line 67, in f\n    six.reraise(type, value, traceback)\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1671, in incoming_buffer_loop\n    dataframe = get_dataframe_from_shot(filepath)\n  File \"/Users/janwerkmann/labscript_suite/lyse/dataframe_utilities.py\", line 118, in get_dataframe_from_shot\n    flat_dict = flatten_dict(nested_dict)\n  File \"/Users/janwerkmann/labscript_suite/lyse/dataframe_utilities.py\", line 80, in flatten_dict\n    flat = flatten_dict(dictionary[name], keys=keys + (str(name),))\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xe4' in position 5: ordinal not in range(128)\n\n```\n\nSo we should better fix this first otherwise people can't open their files anymore.\nIf you want I can provide you with a h5 file that has the problem.\n\n\nWhen editing dataframe_utilities.py you could also add two lines to asdatetime that make the function python 3 compatible:\n\n```\n#!python\n\ndef asdatetime(timestr):\n    tz = tzlocal.get_localzone().zone\n    if isinstance(timestr, bytes):\n        timestr = timestr.decode('utf-8')\n    return pandas.Timestamp(timestr, tz=tz)\n```\n\nMost of dataframe_utilities doesn't seem to like python3 I'm getting a lot of errors there concerning bytes and unicode. But thats not related to this pull request.", "markup": "markdown", "html": "<p>Ok more testing revealed new problems. When reloading a shot that has results from such a non ascii file you get this error:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/threading.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">754</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__target</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/zprocess/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">f</span>\n    <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">reraise</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">traceback</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1671</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">incoming_buffer_loop</span>\n    <span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">get_dataframe_from_shot</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/dataframe_utilities.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">118</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">get_dataframe_from_shot</span>\n    <span class=\"n\">flat_dict</span> <span class=\"o\">=</span> <span class=\"n\">flatten_dict</span><span class=\"p\">(</span><span class=\"n\">nested_dict</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/dataframe_utilities.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">flatten_dict</span>\n    <span class=\"n\">flat</span> <span class=\"o\">=</span> <span class=\"n\">flatten_dict</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">],</span> <span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"n\">keys</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">),))</span>\n<span class=\"ne\">UnicodeEncodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t encode character u&#39;</span>\\<span class=\"n\">xe4</span><span class=\"s1\">&#39; in position 5: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>So we should better fix this first otherwise people can't open their files anymore.\nIf you want I can provide you with a h5 file that has the problem.</p>\n<p>When editing dataframe_utilities.py you could also add two lines to asdatetime that make the function python 3 compatible:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">asdatetime</span><span class=\"p\">(</span><span class=\"n\">timestr</span><span class=\"p\">):</span>\n    <span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"n\">tzlocal</span><span class=\"o\">.</span><span class=\"n\">get_localzone</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">zone</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">timestr</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n        <span class=\"n\">timestr</span> <span class=\"o\">=</span> <span class=\"n\">timestr</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"n\">timestr</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">tz</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Most of dataframe_utilities doesn't seem to like python3 I'm getting a lot of errors there concerning bytes and unicode. But thats not related to this pull request.</p>", "type": "rendered"}, "created_on": "2017-07-23T12:19:05.914477+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-23T13:22:32.184695+00:00", "type": "pullrequest_comment", "id": 41300413}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41302074.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41302074"}}, "parent": {"id": 41300413, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41300413.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41300413"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "OK so the problem with the `str(name)` lines is that `name` is a unicode string and can't be encoded ascii (which `str()` implicitly does). This is tricky so solve by just modifying this function, because encoding the unicode string as utf8 is not what you want - then you can't access it in code with its actual name. Instead, we would need to change lyse so that all the column names were unicode strings throughout. This is a larger problem I think and should be addressed in the port to Python 3. If done in a backward compatible way, then non-ascii filenames would be supported in both Python 2 and 3.\n\nSo, once importing `unicode_literals` from `__future__` (in all lyse source files) and aliasing `str=unicode` if running in Python 2 (like I do at the top of `zprocess/__init__.py` for example), the str() line will leave the filename as a unicode string in both Python 2 and Python 3, and all the other string literals will be unicode ones as well. At that point we will have converted to using unicode strings for everything.\n\nThe reason this works before restarting lyse and re-loading a shot is that your method of updating the dataframe without reading the file is not doing the conversion to bytestrings of the column names. This might seem good, but actually means the dataframe is mixing bytestrings and unicode strings in its column names. This seems like poor practise, so I would like to convert all of them to use unicode strings.\n\nI might just reject this pull request and instead make one about converting all of lyse to unicode strings with `__future__` imports, but that would require a bit of testing and as mentioned, should come after some testing of the PyQt5 port. I understand you've got lyse ostensibly working on Python 3 already, but unless you have `unicode_literals` imported, then very different things are happening depending on whether lyse is running in Python 2 or Python 3, potentially producing different HDF5 files even, and certainly different dataframes, so it's preferable to get Python 2 working with `unicode_literals` before the next steps of Python 3 compatibility.", "markup": "markdown", "html": "<p>OK so the problem with the <code>str(name)</code> lines is that <code>name</code> is a unicode string and can't be encoded ascii (which <code>str()</code> implicitly does). This is tricky so solve by just modifying this function, because encoding the unicode string as utf8 is not what you want - then you can't access it in code with its actual name. Instead, we would need to change lyse so that all the column names were unicode strings throughout. This is a larger problem I think and should be addressed in the port to Python 3. If done in a backward compatible way, then non-ascii filenames would be supported in both Python 2 and 3.</p>\n<p>So, once importing <code>unicode_literals</code> from <code>__future__</code> (in all lyse source files) and aliasing <code>str=unicode</code> if running in Python 2 (like I do at the top of <code>zprocess/__init__.py</code> for example), the str() line will leave the filename as a unicode string in both Python 2 and Python 3, and all the other string literals will be unicode ones as well. At that point we will have converted to using unicode strings for everything.</p>\n<p>The reason this works before restarting lyse and re-loading a shot is that your method of updating the dataframe without reading the file is not doing the conversion to bytestrings of the column names. This might seem good, but actually means the dataframe is mixing bytestrings and unicode strings in its column names. This seems like poor practise, so I would like to convert all of them to use unicode strings.</p>\n<p>I might just reject this pull request and instead make one about converting all of lyse to unicode strings with <code>__future__</code> imports, but that would require a bit of testing and as mentioned, should come after some testing of the PyQt5 port. I understand you've got lyse ostensibly working on Python 3 already, but unless you have <code>unicode_literals</code> imported, then very different things are happening depending on whether lyse is running in Python 2 or Python 3, potentially producing different HDF5 files even, and certainly different dataframes, so it's preferable to get Python 2 working with <code>unicode_literals</code> before the next steps of Python 3 compatibility.</p>", "type": "rendered"}, "created_on": "2017-07-23T17:38:27.387616+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T17:39:18.703884+00:00", "type": "pullrequest_comment", "id": 41302074}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41302126.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41302126"}}, "parent": {"id": 41302074, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41302074.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41302074"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "Well lyse would not say that I'm 'running' lyse on python3 I'm more or less stumbling over bugs allover. Most of them string related but also execfile doesn't work under python3 (but can be replaced by exec) and list.sort needs to be replaced, generators don't support .next() but rather .\\_\\_next\\_\\_(), the list is getting longer an longer .\n\nI agree that we should move this fix to the python3 port as this would happen then anyway.\n\nI think I'll create a branch for the qt and python 3 stuff later today or tomorrow so that it's public. Currently I'm doing all of this on my test version of labscript_suite. This is a mix of lots of features such as dataframe update no read stuff and some custom features for our lab that would not make it into the main branch as they are very hacky and not nice.", "markup": "markdown", "html": "<p>Well lyse would not say that I'm 'running' lyse on python3 I'm more or less stumbling over bugs allover. Most of them string related but also execfile doesn't work under python3 (but can be replaced by exec) and list.sort needs to be replaced, generators don't support .next() but rather .__next__(), the list is getting longer an longer .</p>\n<p>I agree that we should move this fix to the python3 port as this would happen then anyway.</p>\n<p>I think I'll create a branch for the qt and python 3 stuff later today or tomorrow so that it's public. Currently I'm doing all of this on my test version of labscript_suite. This is a mix of lots of features such as dataframe update no read stuff and some custom features for our lab that would not make it into the main branch as they are very hacky and not nice.</p>", "type": "rendered"}, "created_on": "2017-07-23T17:49:48.965654+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-23T17:51:22.263503+00:00", "type": "pullrequest_comment", "id": 41302126}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21/comments/41302677.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21/_/diff#comment-41302677"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 21, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/21.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/21"}}, "title": "Close all unclosed branches"}, "content": {"raw": "Ok, backed out the unicode filenames change and this pull request is now just about closing inactive branches.", "markup": "markdown", "html": "<p>Ok, backed out the unicode filenames change and this pull request is now just about closing inactive branches.</p>", "type": "rendered"}, "created_on": "2017-07-23T19:32:13.253900+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T19:32:13.256318+00:00", "type": "pullrequest_comment", "id": 41302677}], "page": 1, "size": 5}