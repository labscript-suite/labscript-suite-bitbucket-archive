{"pagelen": 50, "values": [{"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "a0014cba8d91", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/a0014cba8d91.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/a0014cba8d91"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e3f4935010c3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/e3f4935010c3"}, "html": {"href": "#!/cbillington/lyse/commits/e3f4935010c3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T00:18:01.340537+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "a0014cba8d91", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/a0014cba8d91.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/a0014cba8d91"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e3f4935010c3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/e3f4935010c3"}, "html": {"href": "#!/cbillington/lyse/commits/e3f4935010c3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T00:18:00.354005+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/47231521.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-47231521"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "FYI we deployed this pull request in our lab today.", "markup": "markdown", "html": "<p>FYI we deployed this pull request in our lab today.</p>", "type": "rendered"}, "created_on": "2017-10-16T13:35:46.073854+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-10-16T13:35:46.106978+00:00", "type": "pullrequest_comment", "id": 47231521}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/47231436.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-47231436"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "We should comment this debug line before merging. ", "markup": "markdown", "html": "<p>We should comment this debug line before merging. </p>", "type": "rendered"}, "created_on": "2017-10-16T13:33:59.432482+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "inline": {}, "updated_on": "2017-10-16T13:33:59.483445+00:00", "type": "pullrequest_comment", "id": 47231436}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "608f3b68bfbc", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/608f3b68bfbc.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/608f3b68bfbc"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e3f4935010c3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/e3f4935010c3"}, "html": {"href": "#!/cbillington/lyse/commits/e3f4935010c3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-10-11T19:14:27.570220+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/46957301.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-46957301"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "This line needs to be removed", "markup": "markdown", "html": "<p>This line needs to be removed</p>", "type": "rendered"}, "created_on": "2017-10-11T18:54:38.246355+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "inline": {}, "updated_on": "2017-10-11T18:54:38.289552+00:00", "type": "pullrequest_comment", "id": 46957301}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/42952060.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-42952060"}}, "parent": {"id": 42886231, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/42886231.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-42886231"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Resolved.", "markup": "markdown", "html": "<p>Resolved.</p>", "type": "rendered"}, "created_on": "2017-08-16T18:48:18.641956+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T18:48:18.644694+00:00", "type": "pullrequest_comment", "id": 42952060}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "37bf5c9a8493", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/37bf5c9a8493.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/37bf5c9a8493"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "59ac9475fa22", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/59ac9475fa22"}, "html": {"href": "#!/cbillington/lyse/commits/59ac9475fa22"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-08-16T18:47:26.774048+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/42886231.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-42886231"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "This pull request has merge conflicts due to the qtutils 2 merge.", "markup": "markdown", "html": "<p>This pull request has merge conflicts due to the qtutils 2 merge.</p>", "type": "rendered"}, "created_on": "2017-08-16T06:34:02.226199+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T06:34:02.280779+00:00", "type": "pullrequest_comment", "id": 42886231}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "2e16928a6e62", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2e16928a6e62.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2e16928a6e62"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d714586742d8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/d714586742d8"}, "html": {"href": "#!/cbillington/lyse/commits/d714586742d8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-08-01T21:40:08.164767+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "2e16928a6e62", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2e16928a6e62.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2e16928a6e62"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d714586742d8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/d714586742d8"}, "html": {"href": "#!/cbillington/lyse/commits/d714586742d8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-08-01T17:16:48.088781+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "2e16928a6e62", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2e16928a6e62.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2e16928a6e62"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "78f22668bf76", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/78f22668bf76"}, "html": {"href": "#!/cbillington/lyse/commits/78f22668bf76"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-08-01T16:12:26.111621+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e7258ce1f7d0", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/e7258ce1f7d0"}, "html": {"href": "#!/cbillington/lyse/commits/e7258ce1f7d0"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-28T23:58:09.538455+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8a177903296d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/8a177903296d"}, "html": {"href": "#!/cbillington/lyse/commits/8a177903296d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-28T23:36:29.677990+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4a385f1cf53e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4a385f1cf53e"}, "html": {"href": "#!/cbillington/lyse/commits/4a385f1cf53e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-28T21:26:52.590377+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41742127.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41742127"}}, "parent": {"id": 41667010, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41667010.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41667010"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Done. With that and the pandas monkey-patch in place this pull request has no remaining known problems.", "markup": "markdown", "html": "<p>Done. With that and the pandas monkey-patch in place this pull request has no remaining known problems.</p>", "type": "rendered"}, "created_on": "2017-07-28T16:32:46.886686+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-28T16:32:46.889422+00:00", "type": "pullrequest_comment", "id": 41742127}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41742101.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41742101"}}, "parent": {"id": 41663306, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41663306.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41663306"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "The pandas pull request is moving along well, it looks like it's likely to be included in the next release. However, since it's just one function, I'll have lyse monkey-patch it to fix the bug for lower versions of pandas, so people aren't forced to upgrade.", "markup": "markdown", "html": "<p>The pandas pull request is moving along well, it looks like it's likely to be included in the next release. However, since it's just one function, I'll have lyse monkey-patch it to fix the bug for lower versions of pandas, so people aren't forced to upgrade.</p>", "type": "rendered"}, "created_on": "2017-07-28T16:32:20.353312+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-28T16:32:20.356619+00:00", "type": "pullrequest_comment", "id": 41742101}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "dace6626f867", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/dace6626f867"}, "html": {"href": "#!/cbillington/lyse/commits/dace6626f867"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-28T16:32:01.015434+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7c596674b7f3", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/7c596674b7f3"}, "html": {"href": "#!/cbillington/lyse/commits/7c596674b7f3"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-28T15:51:21.467993+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41667010.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41667010"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "One more thing that you could to for python 3 compatibility in '''__main__.py''' add a if Python2 then import queue instead of Queue.\n\nAnd in '''__init__.py'''' remove the imports for urllib2 and urlib they are unused anyway.", "markup": "markdown", "html": "<p>One more thing that you could to for python 3 compatibility in '''<strong>main</strong>.py''' add a if Python2 then import queue instead of Queue.</p>\n<p>And in '''<strong>init</strong>.py'''' remove the imports for urllib2 and urlib they are unused anyway.</p>", "type": "rendered"}, "created_on": "2017-07-27T19:08:45.764443+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-27T19:12:33.754639+00:00", "type": "pullrequest_comment", "id": 41667010}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41663306.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41663306"}}, "parent": {"id": 41660301, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41660301.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41660301"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "No problem! Yeah, it's like the only change I've ever made to pandas, though it makes sense that we are the ones to find bugs in it since I think we're probably the only people using multilevel columns like this and I was certainly not thinking about forward compatibility with Python 3 when I made the change.\n\nPandas pull request [here](https://github.com/pandas-dev/pandas/pull/17099).", "markup": "markdown", "html": "<p>No problem! Yeah, it's like the only change I've ever made to pandas, though it makes sense that we are the ones to find bugs in it since I think we're probably the only people using multilevel columns like this and I was certainly not thinking about forward compatibility with Python 3 when I made the change.</p>\n<p>Pandas pull request <a data-is-external-link=\"true\" href=\"https://github.com/pandas-dev/pandas/pull/17099\" rel=\"nofollow\">here</a>.</p>", "type": "rendered"}, "created_on": "2017-07-27T18:18:21.434721+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-27T18:18:59.006222+00:00", "type": "pullrequest_comment", "id": 41663306}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41660301.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41660301"}}, "parent": {"id": 41655678, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41655678.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41655678"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": " lol, ok so we know who to blame! xD\n\nBut that it's definitely a nice feature to just have to use one index. \n\nNow we should hope that this is fixed in pandas soon, so that this pull request can be merged. I'll be away from bitbucket for a few days and will not be able to test stuff. But I think this should be the last thing that produces bugs. ", "markup": "markdown", "html": "<p>lol, ok so we know who to blame! xD</p>\n<p>But that it's definitely a nice feature to just have to use one index. </p>\n<p>Now we should hope that this is fixed in pandas soon, so that this pull request can be merged. I'll be away from bitbucket for a few days and will not be able to test stuff. But I think this should be the last thing that produces bugs. </p>", "type": "rendered"}, "created_on": "2017-07-27T17:41:02.557269+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-27T17:41:02.625142+00:00", "type": "pullrequest_comment", "id": 41660301}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41655678.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41655678"}}, "parent": {"id": 41649565, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41649565.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41649565"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I've fixed the bug in pandas:\n\n\n```\n#!diff\n\ndiff --git a/pandas/core/frame.py b/pandas/core/frame.py\nindex e546e96..586d431 100644\n--- a/pandas/core/frame.py\n+++ b/pandas/core/frame.py\n@@ -2112,8 +2112,9 @@ it is assumed to be aliases for the column names')\n                 result = result.__finalize__(self)\n             if len(result.columns) == 1:\n                 top = result.columns[0]\n-                if ((type(top) == str and top == '') or\n-                        (type(top) == tuple and top[0] == '')):\n+                if isinstance(top, tuple):\n+                    top = top[0]\n+                if top == '':\n                     result = result['']\n                     if isinstance(result, Series):\n                         result = self._constructor_sliced(result,\n```\nYou can see that the problem was that the code only looked for empty strings of type `str`, which in Python 2 excludes unicode strings. Instead it should accept anything that passes an equality check with `''`. And indeed this is my fault - I wrote these lines originally to allow for the abbreviated syntax `df['test']` for `df['test', '']`.\n \nI'll make sure the pandas test suite passes and then make a pull request with them. Looks like they're on a monthly-ish release cycle so if we're lucky the fix might be in pandas 0.20.4 in early August.", "markup": "markdown", "html": "<p>I've fixed the bug in pandas:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff --git a/pandas/core/frame.py b/pandas/core/frame.py</span>\n<span class=\"gh\">index e546e96..586d431 100644</span>\n<span class=\"gd\">--- a/pandas/core/frame.py</span>\n<span class=\"gi\">+++ b/pandas/core/frame.py</span>\n<span class=\"gu\">@@ -2112,8 +2112,9 @@ it is assumed to be aliases for the column names&#39;)</span>\n                 result = result.__finalize__(self)\n             if len(result.columns) == 1:\n                 top = result.columns[0]\n<span class=\"gd\">-                if ((type(top) == str and top == &#39;&#39;) or</span>\n<span class=\"gd\">-                        (type(top) == tuple and top[0] == &#39;&#39;)):</span>\n<span class=\"gi\">+                if isinstance(top, tuple):</span>\n<span class=\"gi\">+                    top = top[0]</span>\n<span class=\"gi\">+                if top == &#39;&#39;:</span>\n                     result = result[&#39;&#39;]\n                     if isinstance(result, Series):\n                         result = self._constructor_sliced(result,\n</pre></div>\n\n\n<p>You can see that the problem was that the code only looked for empty strings of type <code>str</code>, which in Python 2 excludes unicode strings. Instead it should accept anything that passes an equality check with <code>''</code>. And indeed this is my fault - I wrote these lines originally to allow for the abbreviated syntax <code>df['test']</code> for <code>df['test', '']</code>.</p>\n<p>I'll make sure the pandas test suite passes and then make a pull request with them. Looks like they're on a monthly-ish release cycle so if we're lucky the fix might be in pandas 0.20.4 in early August.</p>", "type": "rendered"}, "created_on": "2017-07-27T16:35:49.664533+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-27T16:38:25.257512+00:00", "type": "pullrequest_comment", "id": 41655678}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41650761.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41650761"}}, "parent": {"id": 41649565, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41649565.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41649565"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Pandas moves pretty quickly. If I get a pull request in with them it's entirely possible a fix would be in the conda repositories within a few weeks, and we could simply have this pull request include a requirement for a newer version of pandas. Or we could continue to allow old pandas whilst having my fix monkey-patched on. I would prefer that than having random bytestrings here and there conditional on Python 2.\n\nI'll see what the fix for pandas looks like and we can take it from there.", "markup": "markdown", "html": "<p>Pandas moves pretty quickly. If I get a pull request in with them it's entirely possible a fix would be in the conda repositories within a few weeks, and we could simply have this pull request include a requirement for a newer version of pandas. Or we could continue to allow old pandas whilst having my fix monkey-patched on. I would prefer that than having random bytestrings here and there conditional on Python 2.</p>\n<p>I'll see what the fix for pandas looks like and we can take it from there.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:45:49.533988+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-27T15:46:08.666821+00:00", "type": "pullrequest_comment", "id": 41650761}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41649092.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41649092"}}, "parent": {"id": 41647463, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41647463.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41647463"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Yeah this is totally a bug in pandas. Here's a minimal example without anything to do with lyse:\n\n```\n#!python\nimport pandas\ndf = pandas.DataFrame({(u'test', u''): [1.0, 2.0, 3.0]})\nprint(df['test'])\n```\nPython2 (pandas 0.20.1):\n\n\n```\n#!python\n\n      \n0  1.0\n1  2.0\n2  3.0\n```\n\nPython3 (pandas 0.20.3):\n\n```\n#!python\n\n0    1.0\n1    2.0\n2    3.0\nName: test, dtype: float64\n```\n\nI'll see if I can get it fixed in pandas.\n\nEdit: The problem is that the indexing is returning a DataFrame instead of a Series - when you index a single column it's supposed to return a Series. In Python3 it is returning a Series. Providing the full key name (with an empty string, unicode or not) makes it return a Series in Python 2 - but this ought to be the behaviour as well when the empty string is not provided.", "markup": "markdown", "html": "<p>Yeah this is totally a bug in pandas. Here's a minimal example without anything to do with lyse:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">pandas</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({(</span><span class=\"sa\">u</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">):</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">]})</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>Python2 (pandas 0.20.1):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"mi\">0</span>  <span class=\"mf\">1.0</span>\n<span class=\"mi\">1</span>  <span class=\"mf\">2.0</span>\n<span class=\"mi\">2</span>  <span class=\"mf\">3.0</span>\n</pre></div>\n\n\n<p>Python3 (pandas 0.20.3):</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"mi\">0</span>    <span class=\"mf\">1.0</span>\n<span class=\"mi\">1</span>    <span class=\"mf\">2.0</span>\n<span class=\"mi\">2</span>    <span class=\"mf\">3.0</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre></div>\n\n\n<p>I'll see if I can get it fixed in pandas.</p>\n<p>Edit: The problem is that the indexing is returning a DataFrame instead of a Series - when you index a single column it's supposed to return a Series. In Python3 it is returning a Series. Providing the full key name (with an empty string, unicode or not) makes it return a Series in Python 2 - but this ought to be the behaviour as well when the empty string is not provided.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:31:12.745335+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-27T15:38:12.203197+00:00", "type": "pullrequest_comment", "id": 41649092}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41649565.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41649565"}}, "parent": {"id": 41649092, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41649092.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41649092"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Good thing we spotted it. So whats the plan now?\n\nFix it in pandas and wait till it's fixed there or work around the bug until it's fixed? (don't know what time it would take to fix pandas and get that approved)\n\nI think that the temporary fix with a check for python2 would be my choice. I'm also aware that I would need to fix up update dataframe in the same way then.", "markup": "markdown", "html": "<p>Good thing we spotted it. So whats the plan now?</p>\n<p>Fix it in pandas and wait till it's fixed there or work around the bug until it's fixed? (don't know what time it would take to fix pandas and get that approved)</p>\n<p>I think that the temporary fix with a check for python2 would be my choice. I'm also aware that I would need to fix up update dataframe in the same way then.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:35:28.336501+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-27T15:35:28.403809+00:00", "type": "pullrequest_comment", "id": 41649565}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41647463.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41647463"}}, "parent": {"id": 41574144, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41574144.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41574144"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "If we changed the empty strings back to bytestrings there are a few more places in lyse that it would need to be done.\n\nBut yes, I don't like that solution, and I would speculate that this could be a bug in pandas. It looks like pandas is able to give you your column as requested, but for some reason doesn't give the dataframe returned the right column labels (or any column labels? Is it even a dataframe being returned?).\n\nI'll try to reproduce the problem. If it is a problem with pandas it might even be [my own fault](https://github.com/pandas-dev/pandas2/commit/428896d59a1748278efea0acb44fb40f9508170f) :p.", "markup": "markdown", "html": "<p>If we changed the empty strings back to bytestrings there are a few more places in lyse that it would need to be done.</p>\n<p>But yes, I don't like that solution, and I would speculate that this could be a bug in pandas. It looks like pandas is able to give you your column as requested, but for some reason doesn't give the dataframe returned the right column labels (or any column labels? Is it even a dataframe being returned?).</p>\n<p>I'll try to reproduce the problem. If it is a problem with pandas it might even be <a data-is-external-link=\"true\" href=\"https://github.com/pandas-dev/pandas2/commit/428896d59a1748278efea0acb44fb40f9508170f\" rel=\"nofollow\">my own fault</a> :p.</p>", "type": "rendered"}, "created_on": "2017-07-27T15:18:04.494640+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-27T15:19:36.191980+00:00", "type": "pullrequest_comment", "id": 41647463}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41574144.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41574144"}}, "parent": {"id": 41573334, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41573334.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41573334"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Not sure what it was but justadding in all the changes of the dataframe repo to a clone of your branch by hand did the trick and everything is working fine. I might have just missed adding or removing a line when adding one of your commits earlier. Sorry for the confusion. (just to be sure I'll diff all lyse files on my computer with those in the lab tomorrow)\n\nUpdate: Ok so I'm in the lab now using a clone of your unicode branch(no additional changes) and I'm encountering the bug there. So it does seem to be linked to the unicode stuff. Here is what I'm doing:\n\n```\n#!python\n\nfrom lyse import *\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndf = data()\nprint(df['scan_freq'])\ndf = df.groupby('scan_freq').mean().reset_index()\n```\n\n\"scan_freq\" is just a float global. Without the unicod stuff there is no error and the output of the print looks like this:\n\n\n```\n#!python\n\nsequence                   run time                 \n2017-06-06 14:44:40+02:00  2017-06-06 14:45:09+02:00    2.7\n                           2017-06-06 14:45:10+02:00    2.7\n                           2017-06-06 14:45:11+02:00    2.7\n                           2017-06-06 14:45:12+02:00    2.7\n                           2017-06-06 14:45:13+02:00    2.7\n                           2017-06-06 14:45:14+02:00    2.8\n                           2017-06-06 14:45:15+02:00    2.8\n                           2017-06-06 14:45:16+02:00    2.8\n                           2017-06-06 14:45:18+02:00    2.8\n                           2017-06-06 14:45:19+02:00    2.8\nName: scan_freq, dtype: float64\n```\n\nWith unicode it looks like this and there is the error and the print looks like this:\n\n\n```\n#!python\n\nsequence                  run time                      \n2017-06-06 14:44:40+02:00 2017-06-06 14:45:09+02:00  2.7\n                          2017-06-06 14:45:10+02:00  2.7\n                          2017-06-06 14:45:11+02:00  2.7\n                          2017-06-06 14:45:12+02:00  2.7\n                          2017-06-06 14:45:13+02:00  2.7\n                          2017-06-06 14:45:14+02:00  2.8\n                          2017-06-06 14:45:15+02:00  2.8\n                          2017-06-06 14:45:16+02:00  2.8\n                          2017-06-06 14:45:18+02:00  2.8\n                          2017-06-06 14:45:19+02:00  2.8\n\n```\nIt's missing the line with Name and dtype for some reason.\n\nIf i change the index that I group by from 'scan_freq' to the tuple ('scan_freq', '') everything is fine. I'll investigate this error a bit more and report back if I find what is causing this. (Not sure why I was not seeing the error under mac yesterday after updating to the same clone of your branch)\n\nUpdate 2: Ok so I found another hacky fix that you will probably not be happy with in '''flat_dict_to_hierarchical_dataframe''' line 97-98 change it to this:\n```\n#!python\n\n        while len(newkey) < max_tuple_length:\n            newkey += (b'',)\n```\n\nI'm think pandas must treat empty byte strings in it's index differently from unicode strings.", "markup": "markdown", "html": "<p>Not sure what it was but justadding in all the changes of the dataframe repo to a clone of your branch by hand did the trick and everything is working fine. I might have just missed adding or removing a line when adding one of your commits earlier. Sorry for the confusion. (just to be sure I'll diff all lyse files on my computer with those in the lab tomorrow)</p>\n<p>Update: Ok so I'm in the lab now using a clone of your unicode branch(no additional changes) and I'm encountering the bug there. So it does seem to be linked to the unicode stuff. Here is what I'm doing:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">lyse</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"kn\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;scan_freq&#39;</span><span class=\"p\">])</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">&#39;scan_freq&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>\"scan_freq\" is just a float global. Without the unicod stuff there is no error and the output of the print looks like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">sequence</span>                   <span class=\"n\">run</span> <span class=\"n\">time</span>                 \n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">09</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.7</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.7</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.7</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.7</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.7</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.8</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.8</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.8</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.8</span>\n                           <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">19</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>    <span class=\"mf\">2.8</span>\n<span class=\"n\">Name</span><span class=\"p\">:</span> <span class=\"n\">scan_freq</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">:</span> <span class=\"n\">float64</span>\n</pre></div>\n\n\n<p>With unicode it looks like this and there is the error and the print looks like this:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">sequence</span>                  <span class=\"n\">run</span> <span class=\"n\">time</span>                      \n<span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span> <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">09</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.7</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.7</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.7</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.7</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.7</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">14</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.8</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.8</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">16</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.8</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">18</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.8</span>\n                          <span class=\"mi\">2017</span><span class=\"o\">-</span><span class=\"mo\">06</span><span class=\"o\">-</span><span class=\"mo\">06</span> <span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"mi\">19</span><span class=\"o\">+</span><span class=\"mo\">02</span><span class=\"p\">:</span><span class=\"mo\">00</span>  <span class=\"mf\">2.8</span>\n</pre></div>\n\n\n<p>It's missing the line with Name and dtype for some reason.</p>\n<p>If i change the index that I group by from 'scan_freq' to the tuple ('scan_freq', '') everything is fine. I'll investigate this error a bit more and report back if I find what is causing this. (Not sure why I was not seeing the error under mac yesterday after updating to the same clone of your branch)</p>\n<p>Update 2: Ok so I found another hacky fix that you will probably not be happy with in '''flat_dict_to_hierarchical_dataframe''' line 97-98 change it to this:</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"k\">while</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">newkey</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">max_tuple_length</span><span class=\"p\">:</span>\n            <span class=\"n\">newkey</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,)</span>\n</pre></div>\n\n\n<p>I'm think pandas must treat empty byte strings in it's index differently from unicode strings.</p>", "type": "rendered"}, "created_on": "2017-07-26T19:21:03.703512+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-27T12:28:14.733434+00:00", "type": "pullrequest_comment", "id": 41574144}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41575170.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41575170"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Ok so the exec() issue was caused by a [bug in CPython](https://bugs.python.org/issue21591), fixed in 2.7.9. `exec(code, globals)` is valid syntax in Python 2.7, so I've reverted to using that instead of `six.exec_()`, and just modified other code in the function to avoid hitting the bug (it was the existence of a list comprehension in the same scope that caused Python to incorrectly think you had written the exec statement in an invalid way).", "markup": "markdown", "html": "<p>Ok so the exec() issue was caused by a <a data-is-external-link=\"true\" href=\"https://bugs.python.org/issue21591\" rel=\"nofollow\">bug in CPython</a>, fixed in 2.7.9. <code>exec(code, globals)</code> is valid syntax in Python 2.7, so I've reverted to using that instead of <code>six.exec_()</code>, and just modified other code in the function to avoid hitting the bug (it was the existence of a list comprehension in the same scope that caused Python to incorrectly think you had written the exec statement in an invalid way).</p>", "type": "rendered"}, "created_on": "2017-07-26T19:37:45.419091+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T19:37:45.422606+00:00", "type": "pullrequest_comment", "id": 41575170}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"approval": {"date": "2017-07-26T19:23:28.639456+00:00", "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "d67ac94cf9de", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/d67ac94cf9de"}, "html": {"href": "#!/cbillington/lyse/commits/d67ac94cf9de"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-26T19:16:04.413121+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41573334.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41573334"}}, "parent": {"id": 41567025, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41567025.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41567025"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I left some debugging printlines in about the tracebacks, my bad. Not sure about the other problem though, I'll have a think about it.", "markup": "markdown", "html": "<p>I left some debugging printlines in about the tracebacks, my bad. Not sure about the other problem though, I'll have a think about it.</p>", "type": "rendered"}, "created_on": "2017-07-26T19:08:47.097008+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T19:08:47.101090+00:00", "type": "pullrequest_comment", "id": 41573334}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41567025.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41567025"}}, "parent": {"id": 41562965, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41562965.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41562965"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I tested a bit and group_by (on pandas dataframe) was causing errors in my scripts that might as well just have been a old script so i'll do some more testing at home everything else worked fine.\n\nUpdate: ok so I suspected that the error might have been caused by the dataframe update that I also had in the same lyse but it's not. So the dataframe seems to be effected by this change in someway. Also the tracebacks look strange:\n\n![test.png](data/bitbucket.org/repo/BMBAeq/images/2177457640-test.png)\n\nUpdate 2: It seems to be the mix of update dataframe and the unicode that gives me the error so I'll do investigating on the update dataframe side of things (where this probably goes wrong)", "markup": "markdown", "html": "<p>I tested a bit and group_by (on pandas dataframe) was causing errors in my scripts that might as well just have been a old script so i'll do some more testing at home everything else worked fine.</p>\n<p>Update: ok so I suspected that the error might have been caused by the dataframe update that I also had in the same lyse but it's not. So the dataframe seems to be effected by this change in someway. Also the tracebacks look strange:</p>\n<p><img alt=\"test.png\" src=\"data/bitbucket.org/repo/BMBAeq/images/2177457640-test.png\" /></p>\n<p>Update 2: It seems to be the mix of update dataframe and the unicode that gives me the error so I'll do investigating on the update dataframe side of things (where this probably goes wrong)</p>", "type": "rendered"}, "created_on": "2017-07-26T17:39:13.896012+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-26T18:56:31.918262+00:00", "type": "pullrequest_comment", "id": 41567025}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41562965.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41562965"}}, "parent": {"id": 41561433, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41561433.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41561433"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I've pushed the fix to use six.exec_() and to fix the working directory problem. A little testing would be appreciated!\n\nEdit: no Windows-specific testing though.", "markup": "markdown", "html": "<p>I've pushed the fix to use six.exec_() and to fix the working directory problem. A little testing would be appreciated!</p>\n<p>Edit: no Windows-specific testing though.</p>", "type": "rendered"}, "created_on": "2017-07-26T16:48:07.084839+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T16:52:52.066287+00:00", "type": "pullrequest_comment", "id": 41562965}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41563017.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41563017"}}, "parent": {"id": 41558169, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41558169.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41558169"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Ok, sounds good, I'll leave it.", "markup": "markdown", "html": "<p>Ok, sounds good, I'll leave it.</p>", "type": "rendered"}, "created_on": "2017-07-26T16:48:42.092159+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T16:48:42.095673+00:00", "type": "pullrequest_comment", "id": 41563017}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "dd828bf3a326", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/dd828bf3a326"}, "html": {"href": "#!/cbillington/lyse/commits/dd828bf3a326"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-26T16:41:41.046887+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41561433.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41561433"}}, "parent": {"id": 41560984, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41560984.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41560984"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Mh I can still do some testing in the next hour as I'm still in the lab if you need feedback on it working on windows.\nI'm using the latest anaconda (no idea what version would have to check)\n\nI didn't plot anything so thats why I didn't spot that. Was just testing for the unicode stuff.", "markup": "markdown", "html": "<p>Mh I can still do some testing in the next hour as I'm still in the lab if you need feedback on it working on windows.\nI'm using the latest anaconda (no idea what version would have to check)</p>\n<p>I didn't plot anything so thats why I didn't spot that. Was just testing for the unicode stuff.</p>", "type": "rendered"}, "created_on": "2017-07-26T16:29:36.042590+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-26T16:29:37.106054+00:00", "type": "pullrequest_comment", "id": 41561433}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41560984.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41560984"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Huh, so it looks like I used the wrong form of `exec()` - at least, on my work computer (python 2.7.6 - a bit old) this throws errors, it's not executing in the sandbox. Don't know why this worked for you @PhyNerd or for me on my other computer, maybe later versions of Python 2.7 changed the behaviour of the exec statement to make it work. Anyway I'm changing this to use `six._exec()`.\n\nAlso, there's a problem with the working directory business - changing the working directory makes the plotting stuff unable to find its .ui files, which it expects to be in the current working directory. So I should make it set the working directory to the users' code only whilst their code is running.", "markup": "markdown", "html": "<p>Huh, so it looks like I used the wrong form of <code>exec()</code> - at least, on my work computer (python 2.7.6 - a bit old) this throws errors, it's not executing in the sandbox. Don't know why this worked for you @PhyNerd or for me on my other computer, maybe later versions of Python 2.7 changed the behaviour of the exec statement to make it work. Anyway I'm changing this to use <code>six._exec()</code>.</p>\n<p>Also, there's a problem with the working directory business - changing the working directory makes the plotting stuff unable to find its .ui files, which it expects to be in the current working directory. So I should make it set the working directory to the users' code only whilst their code is running.</p>", "type": "rendered"}, "created_on": "2017-07-26T16:24:53.717757+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T16:24:53.729216+00:00", "type": "pullrequest_comment", "id": 41560984}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41558169.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41558169"}}, "parent": {"id": 41557505, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41557505.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41557505"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Our lab at least (and we seam to be the first ones to encounter the bug) would be totally fine with the \ufffd character as this is something you kind of get used to when having special characters in your language. \n\nSo I'd opt for just leaving it as is (with the decoding fix) and not investing time into this problem.", "markup": "markdown", "html": "<p>Our lab at least (and we seam to be the first ones to encounter the bug) would be totally fine with the \ufffd character as this is something you kind of get used to when having special characters in your language. </p>\n<p>So I'd opt for just leaving it as is (with the decoding fix) and not investing time into this problem.</p>", "type": "rendered"}, "created_on": "2017-07-26T15:58:32.384685+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-26T15:58:32.452038+00:00", "type": "pullrequest_comment", "id": 41558169}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41557505.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41557505"}}, "parent": {"id": 41505698, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41505698.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41505698"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I like to think that I know enough about unicode and text encoding to fix these problems \"properly\" rather than the whack-a-mole approach, but sometimes is seems like the latter is the only option on Python 2. But that's because Python 2 has serious deficiencies in this area, not our fault! It's possible to do encoding and decoding logically in Python 3. Especially since Python 3.6 now that it has `sys.getfilesystemencoding()` returning `'utf-8'` on Windows (I think that even though windows uses something else internally Python does the translation for you and presents a utf8 interface), and now that it has the 'surrogate escape' error handler (and os.fsencode/os.fsdecode methods using it) that allows invalid utf8 to sucessfully make a decode/encode round trip unchanged. It's all pretty great. Windows is strange, but even on unix the OS *says* that the files are utf8 encoded but it doesn't enforce this - you can come across files that are not valid utf8 and ultimately have to treat the filepaths as bytes. I've had a few projects hit on these issues but I think I understand things now. It's just that doing things correctly on Python 2 is next to impossible because of deficiencies in Pytohn 2 itself.\n\nAha. This makes sense. I set `__file__` to be filesystem encoded instead of leaving it as unicode - which was the right thing to do - but obviously it needs to be decoded again for h5py to make sense of it.\n\nI'll include your fix!\n\nSince similar changes need to be made throughout the labscript suite in order to port to Python 3 whist retaining backward compatibility, I might make a function in labscript_utils or zprocess to do the traceback-making, in which case it would be economical to do it \"properly\" on Python 2 - though it's definitely the case that we're going beyond the call of duty here. The mangled non-ascii character in the filepath in the traceback you posted is what I expected - I told Python to try to decode the traceback with utf8 and to replace any invalid utf8 with the unicode replacement character \"\ufffd\". So that's all good.", "markup": "markdown", "html": "<p>I like to think that I know enough about unicode and text encoding to fix these problems \"properly\" rather than the whack-a-mole approach, but sometimes is seems like the latter is the only option on Python 2. But that's because Python 2 has serious deficiencies in this area, not our fault! It's possible to do encoding and decoding logically in Python 3. Especially since Python 3.6 now that it has <code>sys.getfilesystemencoding()</code> returning <code>'utf-8'</code> on Windows (I think that even though windows uses something else internally Python does the translation for you and presents a utf8 interface), and now that it has the 'surrogate escape' error handler (and os.fsencode/os.fsdecode methods using it) that allows invalid utf8 to sucessfully make a decode/encode round trip unchanged. It's all pretty great. Windows is strange, but even on unix the OS <em>says</em> that the files are utf8 encoded but it doesn't enforce this - you can come across files that are not valid utf8 and ultimately have to treat the filepaths as bytes. I've had a few projects hit on these issues but I think I understand things now. It's just that doing things correctly on Python 2 is next to impossible because of deficiencies in Pytohn 2 itself.</p>\n<p>Aha. This makes sense. I set <code>__file__</code> to be filesystem encoded instead of leaving it as unicode - which was the right thing to do - but obviously it needs to be decoded again for h5py to make sense of it.</p>\n<p>I'll include your fix!</p>\n<p>Since similar changes need to be made throughout the labscript suite in order to port to Python 3 whist retaining backward compatibility, I might make a function in labscript_utils or zprocess to do the traceback-making, in which case it would be economical to do it \"properly\" on Python 2 - though it's definitely the case that we're going beyond the call of duty here. The mangled non-ascii character in the filepath in the traceback you posted is what I expected - I told Python to try to decode the traceback with utf8 and to replace any invalid utf8 with the unicode replacement character \"\ufffd\". So that's all good.</p>", "type": "rendered"}, "created_on": "2017-07-26T15:52:12.399068+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T15:52:12.402614+00:00", "type": "pullrequest_comment", "id": 41557505}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41505698.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41505698"}}, "parent": {"id": 41493138, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41493138.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41493138"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Ok my takeaway is: encodings are weird!\n\nPython3 support is not that far away I agree. But how knows what 'soon' actually means.\n\nI think that is something we can live with as it doesn't technically break anything. All the information that you need can still be gathered from the tracelog even with filenames being messed up. As promised I'll do some testing on windows once I'm in the lab (and then add a update to this comment).\n\nUpdate:\nOk as expected the traceback filename is screwed up, but there seems to be more problems under windows and macos with the new changes \n\nWindows:\n\n```\n#!python\n\n[07/26/17 10:56:06] MotIntensity\u00e4.py 20170606T144440-215000_mot_spec_00_rep0000004.h5 \nTraceback (most recent call last):\n  File \"MotIntensity\ufffd.py\", line 10, in <module>\n    run = Run(path)\n  File \"E:\\labscript_suite\\lyse\\__init__.py\", line 109, in __init__\n    self.group = os.path.basename(__file__).split('.py')[0]\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 12: ordinal not in range(128)\n```\n\nmacOS:\n\n```\n#!python\n\nTraceback (most recent call last):\n  File \"\u00e4toms.py\", line 13, in <module>\n    run = Run(path)\n  File \"/Users/janwerkmann/labscript_suite/lyse/__init__.py\", line 109, in __init__\n    self.group = os.path.basename(__file__).split('.py')[0]\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xcc in position 1: ordinal not in range(128)\n```\n\nUpdate 2: decoding __file__ resolves the issue for both sequence an run just do this in the __init__:\n\n\n```\n#!python\n\nself.group = os.path.basename(__file__.decode(sys.getfilesystemencoding())).split('.py')[0] if six.PY2 else os.path.basename(__file__).split('.py')[0]\n```", "markup": "markdown", "html": "<p>Ok my takeaway is: encodings are weird!</p>\n<p>Python3 support is not that far away I agree. But how knows what 'soon' actually means.</p>\n<p>I think that is something we can live with as it doesn't technically break anything. All the information that you need can still be gathered from the tracelog even with filenames being messed up. As promised I'll do some testing on windows once I'm in the lab (and then add a update to this comment).</p>\n<p>Update:\nOk as expected the traceback filename is screwed up, but there seems to be more problems under windows and macos with the new changes </p>\n<p>Windows:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">[</span><span class=\"mo\">07</span><span class=\"o\">/</span><span class=\"mi\">26</span><span class=\"o\">/</span><span class=\"mi\">17</span> <span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">56</span><span class=\"p\">:</span><span class=\"mo\">06</span><span class=\"p\">]</span> <span class=\"n\">MotIntensity</span><span class=\"err\">\u00e4</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"mi\">20170606</span><span class=\"n\">T144440</span><span class=\"o\">-</span><span class=\"mi\">215000</span><span class=\"n\">_mot_spec_00_rep0000004</span><span class=\"o\">.</span><span class=\"n\">h5</span> \n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;MotIntensity\ufffd.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;E:\\labscript_suite\\lyse\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t decode byte 0xe4 in position 12: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>macOS:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;\u00e4toms.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t decode byte 0xcc in position 1: ordinal not in range(128)</span>\n</pre></div>\n\n\n<p>Update 2: decoding <strong>file</strong> resolves the issue for both sequence an run just do this in the <strong>init</strong>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getfilesystemencoding</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">PY2</span> <span class=\"k\">else</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-26T07:13:51.059313+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-26T09:18:41.036952+00:00", "type": "pullrequest_comment", "id": 41505698}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "e804c907b3d8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/e804c907b3d8"}, "html": {"href": "#!/cbillington/lyse/commits/e804c907b3d8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-26T01:20:43.519242+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41493138.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41493138"}}, "parent": {"id": 41488600, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41488600.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41488600"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "No rush!\n\nI'm not sure what things are going to be like on Windows, but based on what I've read, I think that the handling of non-ascii filenames on Windows is likely to be a problem.\n\nThe problem is that the tracebacks are going to contain both text from your source files, and the filenames. These can be in totally different encodings (on linux and macos too), so the only way to make sense of it would be to re-implement a function or two from the `traceback` module to put all the strings into the same encoding before concatenating them into a full textual traceback. This wouldn't be so hard, but we repeat this pattern all throughout the labscript suite, so it would not just be here that it needs fixing.\n\nAnd the python devs have fixed this and the fix is called Python 3 :p. So I think since Python 3 support is coming soon we just say no to fixing this in Python 2.\n\nI've pushed a commit that will just print possibly garbled filenames in tracebacks for non ascii filepaths on Windows but should otherwise work.\n\n", "markup": "markdown", "html": "<p>No rush!</p>\n<p>I'm not sure what things are going to be like on Windows, but based on what I've read, I think that the handling of non-ascii filenames on Windows is likely to be a problem.</p>\n<p>The problem is that the tracebacks are going to contain both text from your source files, and the filenames. These can be in totally different encodings (on linux and macos too), so the only way to make sense of it would be to re-implement a function or two from the <code>traceback</code> module to put all the strings into the same encoding before concatenating them into a full textual traceback. This wouldn't be so hard, but we repeat this pattern all throughout the labscript suite, so it would not just be here that it needs fixing.</p>\n<p>And the python devs have fixed this and the fix is called Python 3 :p. So I think since Python 3 support is coming soon we just say no to fixing this in Python 2.</p>\n<p>I've pushed a commit that will just print possibly garbled filenames in tracebacks for non ascii filepaths on Windows but should otherwise work.</p>", "type": "rendered"}, "created_on": "2017-07-26T01:15:32.932862+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-26T01:15:32.935377+00:00", "type": "pullrequest_comment", "id": 41493138}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b6565b701303", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/b6565b701303"}, "html": {"href": "#!/cbillington/lyse/commits/b6565b701303"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-26T01:14:43.563900+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41488600.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41488600"}}, "parent": {"id": 41488329, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41488329.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41488329"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "I can also do some testing on windows but that would in 7 to 8 hours at the earliest and I guess just googling it or someone else testing it is faster.", "markup": "markdown", "html": "<p>I can also do some testing on windows but that would in 7 to 8 hours at the earliest and I guess just googling it or someone else testing it is faster.</p>", "type": "rendered"}, "created_on": "2017-07-25T22:55:04.183262+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T22:55:04.248059+00:00", "type": "pullrequest_comment", "id": 41488600}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* set current working directory to that of the script prior to executing it\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ba980481e50a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/ba980481e50a"}, "html": {"href": "#!/cbillington/lyse/commits/ba980481e50a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T22:50:02.163870+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41488329.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41488329"}}, "parent": {"id": 41486481, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41486481.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41486481"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "OK, I've added the working directory change, but it turns out that's not what was tripping up the linecache module - the linecache module was looking relative to entries in sys.path, and we had added the script's directory to sys.path but as a unicode string - it should be a bytestring. So now I'm adding to sys.path as a bytestring (on python 2 - it's a unicode string on Python 3).\n\nA remaining issue is if the filesystem encoding is *not* actually UTF8. I don't know if this is ever the case, so I'll have a quick read to see what the situation is on Windows. I suspect that even though Windows might not be UTF8, that from Python's perspective, for all intents and purposes it is.\n\nIf it's not UTF8 then we're in trouble because the filepath is going to be concatenated with the rest of the trackback in error messages as bytestrings, so if the filepath is say, UTF16, then that concatenation makes no sense and can't be decoded meaningfully.", "markup": "markdown", "html": "<p>OK, I've added the working directory change, but it turns out that's not what was tripping up the linecache module - the linecache module was looking relative to entries in sys.path, and we had added the script's directory to sys.path but as a unicode string - it should be a bytestring. So now I'm adding to sys.path as a bytestring (on python 2 - it's a unicode string on Python 3).</p>\n<p>A remaining issue is if the filesystem encoding is <em>not</em> actually UTF8. I don't know if this is ever the case, so I'll have a quick read to see what the situation is on Windows. I suspect that even though Windows might not be UTF8, that from Python's perspective, for all intents and purposes it is.</p>\n<p>If it's not UTF8 then we're in trouble because the filepath is going to be concatenated with the rest of the trackback in error messages as bytestrings, so if the filepath is say, UTF16, then that concatenation makes no sense and can't be decoded meaningfully.</p>", "type": "rendered"}, "created_on": "2017-07-25T22:48:53.897888+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T22:48:53.900001+00:00", "type": "pullrequest_comment", "id": 41488329}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "ba980481e50a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/ba980481e50a"}, "html": {"href": "#!/cbillington/lyse/commits/ba980481e50a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T22:36:29.970806+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41485938.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41485938"}}, "parent": {"id": 41485235, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41485235.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41485235"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Excellent. The disappointing thing with that is that we've had to give it a full filepath instead of just the basename, meaning the tracebacks have long filepaths in them.\n\nI think the earlier exception was actually caused by the file not being in the current working directory. I had thought that the analysis routines were run in their own directory, but it turns out they weren't.\n\nEven if lyse does set the current working directory to that of the user's script (which it probably should), the user is free to change it before the error is raised, and then the linecache can't find the file.\n\nAn additional problem is that in Python 3 the compile() function only accepts strings, not bytes, so the encoded string will be an invalid argument. \n\nI'll see if there is a \"right\" way to do this - there ought to be, since all we want to do is what the Python interpreter itself is doing!\n\nEdit: If this works for Python 2 then we can keep it as-is, and then probably for Python 3 we can just do conditional encode()/decode() lines after checking Python version.", "markup": "markdown", "html": "<p>Excellent. The disappointing thing with that is that we've had to give it a full filepath instead of just the basename, meaning the tracebacks have long filepaths in them.</p>\n<p>I think the earlier exception was actually caused by the file not being in the current working directory. I had thought that the analysis routines were run in their own directory, but it turns out they weren't.</p>\n<p>Even if lyse does set the current working directory to that of the user's script (which it probably should), the user is free to change it before the error is raised, and then the linecache can't find the file.</p>\n<p>An additional problem is that in Python 3 the compile() function only accepts strings, not bytes, so the encoded string will be an invalid argument. </p>\n<p>I'll see if there is a \"right\" way to do this - there ought to be, since all we want to do is what the Python interpreter itself is doing!</p>\n<p>Edit: If this works for Python 2 then we can keep it as-is, and then probably for Python 3 we can just do conditional encode()/decode() lines after checking Python version.</p>", "type": "rendered"}, "created_on": "2017-07-25T21:52:36.947304+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T22:05:36.803078+00:00", "type": "pullrequest_comment", "id": 41485938}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41486481.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41486481"}}, "parent": {"id": 41485938, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41485938.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41485938"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "The working directory thing was something I ran into quite often. For example when trying to save files with relative paths to the analysis routines and just accepted as a thing. But we should change that now that we are at it. Maybe as a own pull request as it's not related to python3 or unicode? But I'd also be fine with this being added here.\n\nWell we can always add a if Python2: ... else: ... when porting to python 3 if we should not find a better way.\n", "markup": "markdown", "html": "<p>The working directory thing was something I ran into quite often. For example when trying to save files with relative paths to the analysis routines and just accepted as a thing. But we should change that now that we are at it. Maybe as a own pull request as it's not related to python3 or unicode? But I'd also be fine with this being added here.</p>\n<p>Well we can always add a if Python2: ... else: ... when porting to python 3 if we should not find a better way.</p>", "type": "rendered"}, "created_on": "2017-07-25T22:04:17.684161+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T22:04:18.753461+00:00", "type": "pullrequest_comment", "id": 41486481}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}], "next": "data/repositories/labscript_suite/lyse/pullrequests/22/activity_ctx=KpC99hgtb.json"}