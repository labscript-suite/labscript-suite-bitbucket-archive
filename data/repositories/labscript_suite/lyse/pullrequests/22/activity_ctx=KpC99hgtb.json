{"pagelen": 50, "values": [{"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "25036d810433", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/25036d810433"}, "html": {"href": "#!/cbillington/lyse/commits/25036d810433"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T22:02:42.672393+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484776.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484776"}}, "parent": {"id": 41484660, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484660.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484660"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "yeahy that worked :D now I get the error from the script (that should have been shown so thats fine)\n\nAnd if there is no error everything works as expected :) \nI'll test a few more things", "markup": "markdown", "html": "<p>yeahy that worked :D now I get the error from the script (that should have been shown so thats fine)</p>\n<p>And if there is no error everything works as expected :) \nI'll test a few more things</p>", "type": "rendered"}, "created_on": "2017-07-25T21:27:48.089327+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T21:42:58.030355+00:00", "type": "pullrequest_comment", "id": 41484776}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41485235.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41485235"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Ok so after applying the diff everything is running smoothly. Files with non unicode filenames can run, save data and the hdf files can be loaded again without problems. \nAlso I tried the changes with the 'update dataframe' pull request changes and everything seems to be compatible.\n\nI might do some testing under python 3 in the hopes that lyse might be fully python 3 compatible with these changes. But that is another pull request entirely if not so I'll approve of this with the diffs as it does what it says and doesn't seem to break stuff. ", "markup": "markdown", "html": "<p>Ok so after applying the diff everything is running smoothly. Files with non unicode filenames can run, save data and the hdf files can be loaded again without problems. \nAlso I tried the changes with the 'update dataframe' pull request changes and everything seems to be compatible.</p>\n<p>I might do some testing under python 3 in the hopes that lyse might be fully python 3 compatible with these changes. But that is another pull request entirely if not so I'll approve of this with the diffs as it does what it says and doesn't seem to break stuff. </p>", "type": "rendered"}, "created_on": "2017-07-25T21:38:01.297755+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T21:38:01.358736+00:00", "type": "pullrequest_comment", "id": 41485235}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484660.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484660"}}, "parent": {"id": 41484333, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484333.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484333"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "How about with this change?\n\n\n```\n#!diff\n\ndiff -r 4c319d424f7f analysis_subprocess.py\n--- a/analysis_subprocess.py\tTue Jul 25 16:26:32 2017 -0400\n+++ b/analysis_subprocess.py\tTue Jul 25 17:25:16 2017 -0400\n@@ -286,22 +286,22 @@\n         # Use lyse.path instead:\n         lyse.path = path\n \n         # Do not let the modulewatcher unload any modules whilst we're working:\n         try:\n             with self.modulewatcher.lock:\n                 # Actually run the user's analysis!\n                 with open(self.filepath) as f:\n-                    code = compile(f.read(), os.path.basename(self.filepath), 'exec')\n+                    code = compile(f.read(), self.filepath.encode('utf8'), 'exec')\n                     exec(code, sandbox, sandbox)\n         except:\n             traceback_lines = traceback.format_exception(*sys.exc_info())\n             del traceback_lines[1]\n-            message = ''.join(traceback_lines)\n+            message = ''.join(line.decode('utf8') for line in traceback_lines)\n             sys.stderr.write(message)\n             return False\n         else:\n             return True\n         finally:\n             print('')\n             self.post_analysis_plot_actions()\n```\n", "markup": "markdown", "html": "<p>How about with this change?</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 4c319d424f7f analysis_subprocess.py</span>\n<span class=\"gd\">--- a/analysis_subprocess.py    Tue Jul 25 16:26:32 2017 -0400</span>\n<span class=\"gi\">+++ b/analysis_subprocess.py    Tue Jul 25 17:25:16 2017 -0400</span>\n<span class=\"gu\">@@ -286,22 +286,22 @@</span>\n         # Use lyse.path instead:\n         lyse.path = path\n\n         # Do not let the modulewatcher unload any modules whilst we&#39;re working:\n         try:\n             with self.modulewatcher.lock:\n                 # Actually run the user&#39;s analysis!\n                 with open(self.filepath) as f:\n<span class=\"gd\">-                    code = compile(f.read(), os.path.basename(self.filepath), &#39;exec&#39;)</span>\n<span class=\"gi\">+                    code = compile(f.read(), self.filepath.encode(&#39;utf8&#39;), &#39;exec&#39;)</span>\n                     exec(code, sandbox, sandbox)\n         except:\n             traceback_lines = traceback.format_exception(*sys.exc_info())\n             del traceback_lines[1]\n<span class=\"gd\">-            message = &#39;&#39;.join(traceback_lines)</span>\n<span class=\"gi\">+            message = &#39;&#39;.join(line.decode(&#39;utf8&#39;) for line in traceback_lines)</span>\n             sys.stderr.write(message)\n             return False\n         else:\n             return True\n         finally:\n             print(&#39;&#39;)\n             self.post_analysis_plot_actions()\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-25T21:25:58.053106+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T21:25:58.056034+00:00", "type": "pullrequest_comment", "id": 41484660}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484333.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484333"}}, "parent": {"id": 41484167, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484167.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484167"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "```\n#!python\n\n>>> sys.getdefaultencoding()\n'ascii'\n>>> sys.getfilesystemencoding()\n'utf-8'\n```\nMh I'm doing some testing of how this could be fixed  my self but nothing found by now.\n\n\nOk I tried this instead of the compile stuff:\n\n\n```\n#!python\n\nexec(open(self.filepath).read(), sandbox, sandbox)\n```\nand still had errors but think these could lead us to the real problem:\n\n\n```\n#!python\n\nTraceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"/Users/janwerkmann/labscript_suite/lyse/__init__.py\", line 109, in __init__\n    self.group = os.path.basename(__file__).split('.py')[0]\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xcc in position 1: ordinal not in range(128)\n```", "markup": "markdown", "html": "<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getdefaultencoding</span><span class=\"p\">()</span>\n<span class=\"s1\">&#39;ascii&#39;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getfilesystemencoding</span><span class=\"p\">()</span>\n<span class=\"s1\">&#39;utf-8&#39;</span>\n</pre></div>\n\n\n<p>Mh I'm doing some testing of how this could be fixed  my self but nothing found by now.</p>\n<p>Ok I tried this instead of the compile stuff:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">sandbox</span><span class=\"p\">,</span> <span class=\"n\">sandbox</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>and still had errors but think these could lead us to the real problem:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;&lt;string&gt;&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;.py&#39;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t decode byte 0xcc in position 1: ordinal not in range(128)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-25T21:19:50.405966+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T21:25:18.421147+00:00", "type": "pullrequest_comment", "id": 41484333}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41484167.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41484167"}}, "parent": {"id": 41483776, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483776.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483776"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Yes, I get that too, once I tested what happens when you raise an exception.\n\nThis is very frustrating. The purpose of the second argument to `compile()` is solely to associate the code with a filename so that if an exception is raised (or code otherwise inspected), the actual lines of code can be extracted, and the name of the file used in tracebacks.\n\nSo the first error we got was saying \"hey, that filename you got me, I can't encode that as ascii in order to actually read the file!\" and the second one is saying \"hey, I can read the file, but now I can't decode that as ascii in order to produce a unicode traceback!\"\n\n\nCould you tell me the values of `sys.getdefaultencoding()` and `sys.getfilesystemencoding()` on your system? For me (on my home computer where I get the same error as you) they are 'ascii' and 'utf8'.\n\nWhich is stupid, because it's a filepath that Python is supposed to be decoding in its traceback-making, so it should be decoding it with `sys.getfilesystemencoding()` (utf8), not  `sys.getdefaultencoding()` (ascii).", "markup": "markdown", "html": "<p>Yes, I get that too, once I tested what happens when you raise an exception.</p>\n<p>This is very frustrating. The purpose of the second argument to <code>compile()</code> is solely to associate the code with a filename so that if an exception is raised (or code otherwise inspected), the actual lines of code can be extracted, and the name of the file used in tracebacks.</p>\n<p>So the first error we got was saying \"hey, that filename you got me, I can't encode that as ascii in order to actually read the file!\" and the second one is saying \"hey, I can read the file, but now I can't decode that as ascii in order to produce a unicode traceback!\"</p>\n<p>Could you tell me the values of <code>sys.getdefaultencoding()</code> and <code>sys.getfilesystemencoding()</code> on your system? For me (on my home computer where I get the same error as you) they are 'ascii' and 'utf8'.</p>\n<p>Which is stupid, because it's a filepath that Python is supposed to be decoding in its traceback-making, so it should be decoding it with <code>sys.getfilesystemencoding()</code> (utf8), not  <code>sys.getdefaultencoding()</code> (ascii).</p>", "type": "rendered"}, "created_on": "2017-07-25T21:16:46.779240+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T21:16:52.712623+00:00", "type": "pullrequest_comment", "id": 41484167}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483776.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483776"}}, "parent": {"id": 41483579, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483579.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483579"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "well that give me a new traceback so I guess it worked...\n\n```\n#!python\n\nTraceback (most recent call last):\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/threading.py\", line 754, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"analysis_subprocess.py\", line 260, in mainloop\n    success = self.do_analysis(path)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 120, in f\n    return inmain(fn, *args, **kwargs)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 75, in inmain\n    return get_inmain_result(in_main_later(fn, False, *args, **kwargs))\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 98, in get_inmain_result\n    exec('raise type, value, traceback')\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 53, in event\n    result = event.fn(*event.args, **event.kwargs)\n  File \"analysis_subprocess.py\", line 298, in do_analysis\n    traceback_lines = traceback.format_exception(*sys.exc_info())\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/traceback.py\", line 141, in format_exception\n    list = list + format_tb(tb, limit)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/traceback.py\", line 76, in format_tb\n    return format_list(extract_tb(tb, limit))\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/traceback.py\", line 101, in extract_tb\n    line = linecache.getline(filename, lineno, f.f_globals)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/linecache.py\", line 14, in getline\n    lines = getlines(filename, module_globals)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/linecache.py\", line 41, in getlines\n    return updatecache(filename, module_globals)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/linecache.py\", line 119, in updatecache\n    fullname = os.path.join(dirname, basename)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/posixpath.py\", line 73, in join\n    path += '/' + b\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xcc in position 2: ordinal not in range(128)\n```", "markup": "markdown", "html": "<p>well that give me a new traceback so I guess it worked...</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/threading.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">754</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__target</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;analysis_subprocess.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">260</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">mainloop</span>\n    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">do_analysis</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">f</span>\n    <span class=\"k\">return</span> <span class=\"n\">inmain</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">inmain</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_inmain_result</span><span class=\"p\">(</span><span class=\"n\">in_main_later</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">get_inmain_result</span>\n    <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"s1\">&#39;raise type, value, traceback&#39;</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">event</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;analysis_subprocess.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">298</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">do_analysis</span>\n    <span class=\"n\">traceback_lines</span> <span class=\"o\">=</span> <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_exception</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">())</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/traceback.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">141</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">format_exception</span>\n    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span> <span class=\"o\">+</span> <span class=\"n\">format_tb</span><span class=\"p\">(</span><span class=\"n\">tb</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/traceback.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">format_tb</span>\n    <span class=\"k\">return</span> <span class=\"n\">format_list</span><span class=\"p\">(</span><span class=\"n\">extract_tb</span><span class=\"p\">(</span><span class=\"n\">tb</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/traceback.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">extract_tb</span>\n    <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">linecache</span><span class=\"o\">.</span><span class=\"n\">getline</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">f_globals</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/linecache.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">getline</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">getlines</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">module_globals</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/linecache.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">getlines</span>\n    <span class=\"k\">return</span> <span class=\"n\">updatecache</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">module_globals</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/linecache.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">119</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">updatecache</span>\n    <span class=\"n\">fullname</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">basename</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/posixpath.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">join</span>\n    <span class=\"n\">path</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;/&#39;</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t decode byte 0xcc in position 2: ordinal not in range(128)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-25T21:10:30.134018+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T21:10:30.373332+00:00", "type": "pullrequest_comment", "id": 41483776}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483579.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483579"}}, "parent": {"id": 41483099, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483099.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483099"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "This must have something to do with the \"system default encoding\". It works for me on my work computer but not on my home one...\n\nDoes it work for you in you change it to `code = compile(f.read(), os.path.basename(self.filepath.encode('utf8')), 'exec')`?", "markup": "markdown", "html": "<p>This must have something to do with the \"system default encoding\". It works for me on my work computer but not on my home one...</p>\n<p>Does it work for you in you change it to <code>code = compile(f.read(), os.path.basename(self.filepath.encode('utf8')), 'exec')</code>?</p>", "type": "rendered"}, "created_on": "2017-07-25T21:07:19.813313+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-25T21:07:29.517342+00:00", "type": "pullrequest_comment", "id": 41483579}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22/comments/41483099.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22/_/diff#comment-41483099"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}, "content": {"raw": "Very nice! This will definitly help with the python 3 port.\nSadly the execfile replacement introduces new bugs.\nNon unicode filenames give me the following traceback(after removing the try catch):\n\n```\n#!python\n\n  File \"analysis_subprocess.py\", line 294, in do_analysis\n    code = compile(f.read(), os.path.basename(self.filepath), 'exec')\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u0308' in position 1: ordinal not in range(128)\n```\n\n", "markup": "markdown", "html": "<p>Very nice! This will definitly help with the python 3 port.\nSadly the execfile replacement introduces new bugs.\nNon unicode filenames give me the following traceback(after removing the try catch):</p>\n<div class=\"codehilite language-python\"><pre><span></span>  <span class=\"n\">File</span> <span class=\"s2\">&quot;analysis_subprocess.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">294</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">do_analysis</span>\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filepath</span><span class=\"p\">),</span> <span class=\"s1\">&#39;exec&#39;</span><span class=\"p\">)</span>\n<span class=\"ne\">UnicodeEncodeError</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ascii&#39;</span> <span class=\"n\">codec</span> <span class=\"n\">can</span><span class=\"s1\">&#39;t encode character u&#39;</span>\\<span class=\"n\">u0308</span><span class=\"s1\">&#39; in position 1: ordinal not in range(128)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-25T20:59:19.445546+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-25T20:59:19.505714+00:00", "type": "pullrequest_comment", "id": 41483099}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other `__future__` imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c319d424f7f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4c319d424f7f"}, "html": {"href": "#!/cbillington/lyse/commits/4c319d424f7f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T20:27:39.502887+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other __future__ imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c319d424f7f", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4c319d424f7f"}, "html": {"href": "#!/cbillington/lyse/commits/4c319d424f7f"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T20:26:45.674446+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other __future__ imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4b48100d63dd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4b48100d63dd"}, "html": {"href": "#!/cbillington/lyse/commits/4b48100d63dd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T20:23:49.573189+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}, {"update": {"description": "* Unicode dataframe column labels\r\n\r\n* all `__future__` imports enabled in all files\r\n\r\n* execfile() replaced with compile & exec, as forward compatible with Python 3\r\n(as well as allowing for non-ascii filenames, addressing issue #28).\r\n\r\n* Require zprocess 2.2.2 which fixes a bug that prevented sending non-ascii\r\ncharacters to the output box.\r\n\r\n* `str` aliased to `unicode` in Python 2.\r\n\r\n* These changes are not tested in Python 3, but getting all strings unicode in\r\nPython 2 as well as all other __future__ imports enabled is a good first step\r\nfor Python 3 compatibility. Further Python 3 compatibility should wait until PyQt5 porting (if any is required) is done.\r\n\r\n* In Python 2, unicode strings and bytestrings pass equality checks, meaning that\r\nindexing dataframes with bytestrings will still get the right columns even\r\nthough the column labels are now unicode strings:\r\n\r\n```\r\n>>> df[u'test_\u00fcmlaut', 'x']\r\nsequence                   run time\r\n2017-06-21 13:17:38-04:00  2017-07-25 16:15:53-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\n                           2017-07-25 16:15:54-04:00    70.0\r\nName: (test_\u00fcmlaut, x), dtype: float64\r\n```\r\n\r\nThis pull request should be compatible with @PhyNerd's pending \"update dataframe\" pull request (although his pull request converts dictionary keys to strings, this one aliases `str` to `unicode`, and so once applied will mean the other pull request will result in unicode dataframe keys as well)", "title": "Unicode strings and other Python 3 forward-compatible changes.", "destination": {"commit": {"hash": "b2c123e4263f", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b2c123e4263f.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b2c123e4263f"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4b48100d63dd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4b48100d63dd"}, "html": {"href": "#!/cbillington/lyse/commits/4b48100d63dd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-07-25T20:23:49.509568+00:00"}, "pull_request": {"type": "pullrequest", "id": 22, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/22.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/22"}}, "title": "Unicode strings and other Python 3 forward-compatible changes."}}]}