{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/24/comments/57244434.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/24/_/diff#comment-57244434"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 24, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/24.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/24"}}, "title": "Performance"}, "content": {"raw": "There seem to be some problems (or suboptimal/unnecessary things) with this  at the moment, which I believe I've fixed.\n\n1. `self.rows_dict` doesn't appear to be updated when shots are deleted, leaving it with invalid data. Fix is to update it when shots are deleted. Some additional functionality added in the meantime already does some tracking of row numbers, so I've just integrated it with that.\n\n2. `add_files()` providing a `df_row_index` argument doesn't add much if we are switching to dictionary lookups rather than searching the dataframe for getting the index. Dictionary lookups are crazy fast. I've removed `df_row_index` and just had a dictionary lookup within `update_row()`. This removes any further fear of race conditions.\n\n3. The set comparison business to detect duplicates is faster than manually searching, but if there are a large number of files in lyse requires copying the whole list of files to do the set operations. Checking for membership a few times in an existing set or dict is faster than making a whole new set, and so we should check for membership in  the dictionary of row numbers that we already have.\n\n4.  `do_multishot_analysis()` doesn't run in the main thread, so using `df_row_index` is vulnerable to race conditions. Removed this since I removed `df_row_index` anyway. \n\nWhat this comes down to is that most of the benefits of this pull request are by caching the row indices instead of looking them up. I've made a new pull request for the remaining changes (and fixes) that this entails, as well as a more efficient batch-processing of loading files and make the renumber_rows() function not loop over all rows when only some have changed.\n\nSo I'll close this one, and would appreciate any testing of pull request #40, which I have put through some testing already but more is better.", "markup": "markdown", "html": "<p>There seem to be some problems (or suboptimal/unnecessary things) with this  at the moment, which I believe I've fixed.</p>\n<ol>\n<li>\n<p><code>self.rows_dict</code> doesn't appear to be updated when shots are deleted, leaving it with invalid data. Fix is to update it when shots are deleted. Some additional functionality added in the meantime already does some tracking of row numbers, so I've just integrated it with that.</p>\n</li>\n<li>\n<p><code>add_files()</code> providing a <code>df_row_index</code> argument doesn't add much if we are switching to dictionary lookups rather than searching the dataframe for getting the index. Dictionary lookups are crazy fast. I've removed <code>df_row_index</code> and just had a dictionary lookup within <code>update_row()</code>. This removes any further fear of race conditions.</p>\n</li>\n<li>\n<p>The set comparison business to detect duplicates is faster than manually searching, but if there are a large number of files in lyse requires copying the whole list of files to do the set operations. Checking for membership a few times in an existing set or dict is faster than making a whole new set, and so we should check for membership in  the dictionary of row numbers that we already have.</p>\n</li>\n<li>\n<p><code>do_multishot_analysis()</code> doesn't run in the main thread, so using <code>df_row_index</code> is vulnerable to race conditions. Removed this since I removed <code>df_row_index</code> anyway. </p>\n</li>\n</ol>\n<p>What this comes down to is that most of the benefits of this pull request are by caching the row indices instead of looking them up. I've made a new pull request for the remaining changes (and fixes) that this entails, as well as a more efficient batch-processing of loading files and make the renumber_rows() function not loop over all rows when only some have changed.</p>\n<p>So I'll close this one, and would appreciate any testing of <a href=\"#!/labscript_suite/lyse/pull-requests/40/performance-optimisation\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #40</a>, which I have put through some testing already but more is better.</p>", "type": "rendered"}, "created_on": "2018-02-26T06:18:47.070192+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-02-26T06:21:32.698877+00:00", "type": "pullrequest_comment", "id": 57244434}