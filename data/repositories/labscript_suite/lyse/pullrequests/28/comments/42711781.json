{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/28/comments/42711781.json"}, "code": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/diff/cbillington/lyse:83a52943ce02..ace3427c5f6a?path=__main__.py"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/28/_/diff#comment-42711781"}}, "parent": {"id": 42711666, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/28/comments/42711666.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/28/_/diff#comment-42711666"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 28, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/28.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/28"}}, "title": "Fixed issue #31: analysis status not updating if no saved results"}, "content": {"raw": "No - then the loop would return if the signal was 'progress', because it's an if, not an elif.\n\nYou could actually replace `if signal == 'done':` with simply `else:` - but I prefer to explicitly name the signals so that the code is not assuming that if it's not the first two signals it must be the third one - that will break subtly if a new signal is introduced in the future.\n\nIn fact what this loop is missing is that if it hasn't returned by the end of the loop, it should say `if signal == progress: continue` and then after that raise ValueError telling the programmer \"hey you introduced a new signal and didn't tell this loop what to do with it\". At the moment if you introduced a new signal the loop would just continue and then get stuck waiting for the next signal that would never come. Still a better way to break than treating it like a 'done' signal though!", "markup": "markdown", "html": "<p>No - then the loop would return if the signal was 'progress', because it's an if, not an elif.</p>\n<p>You could actually replace <code>if signal == 'done':</code> with simply <code>else:</code> - but I prefer to explicitly name the signals so that the code is not assuming that if it's not the first two signals it must be the third one - that will break subtly if a new signal is introduced in the future.</p>\n<p>In fact what this loop is missing is that if it hasn't returned by the end of the loop, it should say <code>if signal == progress: continue</code> and then after that raise ValueError telling the programmer \"hey you introduced a new signal and didn't tell this loop what to do with it\". At the moment if you introduced a new signal the loop would just continue and then get stuck waiting for the next signal that would never come. Still a better way to break than treating it like a 'done' signal though!</p>", "type": "rendered"}, "created_on": "2017-08-13T19:05:34.108556+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "inline": {"to": null, "from": null, "outdated": true, "path": "__main__.py"}, "updated_on": "2017-08-13T19:05:34.110799+00:00", "type": "pullrequest_comment", "id": 42711781}