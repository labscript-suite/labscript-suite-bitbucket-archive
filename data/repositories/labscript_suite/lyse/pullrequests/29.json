{"rendered": {"reason": {"raw": "Will likely implement differently eventually, is a niche use case in the meantime.", "markup": "markdown", "html": "<p>Will likely implement differently eventually, is a niche use case in the meantime.</p>", "type": "rendered"}, "description": {"raw": "This pull request aims to make multishot routines(for lots of runs) faster, by storing image data and run objects on first load in a cross routine storage. \r\n\r\nThe storage uses nested dicts making access to all data of one kind(e.g. images) one request to the storage server rather then n_images * n_shots.\r\n\r\nTo reduce memory usage all data saved under a key equal to the filepath of a shot is removed when that shot is removed.\r\n\r\nCaching of runs and images can be disabled.\r\n\r\nThe reasoning for this pull request is:\r\n\r\nIn our lab we have a multishot routine that calculates trap positions for a grid of single atom traps, thresholds to determine atom count (1 or 0)  for those traps and finally saves the atom count to the individual shots. This routine needs all images from all shots to do so. As our typical shot amount of shots in a sequence is 2000 or greater this takes about 17 seconds with these changes here it's down to sub 1 second. \r\nWe are using this change in the lab for a week now and no negative effects have been noticed.\r\n\r\nThis should solve #26.", "markup": "markdown", "html": "<p>This pull request aims to make multishot routines(for lots of runs) faster, by storing image data and run objects on first load in a cross routine storage. </p>\n<p>The storage uses nested dicts making access to all data of one kind(e.g. images) one request to the storage server rather then n_images * n_shots.</p>\n<p>To reduce memory usage all data saved under a key equal to the filepath of a shot is removed when that shot is removed.</p>\n<p>Caching of runs and images can be disabled.</p>\n<p>The reasoning for this pull request is:</p>\n<p>In our lab we have a multishot routine that calculates trap positions for a grid of single atom traps, thresholds to determine atom count (1 or 0)  for those traps and finally saves the atom count to the individual shots. This routine needs all images from all shots to do so. As our typical shot amount of shots in a sequence is 2000 or greater this takes about 17 seconds with these changes here it's down to sub 1 second. \nWe are using this change in the lab for a week now and no negative effects have been noticed.</p>\n<p>This should solve <a href=\"#!/labscript_suite/lyse/issues/26/loading-images-takes-too-long\" rel=\"nofollow\" title=\"Loading images takes too long\" class=\"ap-connect-link\">#26</a>.</p>", "type": "rendered"}, "title": {"raw": "Cross routine caching", "markup": "markdown", "html": "<p>Cross routine caching</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request aims to make multishot routines(for lots of runs) faster, by storing image data and run objects on first load in a cross routine storage. \r\n\r\nThe storage uses nested dicts making access to all data of one kind(e.g. images) one request to the storage server rather then n_images * n_shots.\r\n\r\nTo reduce memory usage all data saved under a key equal to the filepath of a shot is removed when that shot is removed.\r\n\r\nCaching of runs and images can be disabled.\r\n\r\nThe reasoning for this pull request is:\r\n\r\nIn our lab we have a multishot routine that calculates trap positions for a grid of single atom traps, thresholds to determine atom count (1 or 0)  for those traps and finally saves the atom count to the individual shots. This routine needs all images from all shots to do so. As our typical shot amount of shots in a sequence is 2000 or greater this takes about 17 seconds with these changes here it's down to sub 1 second. \r\nWe are using this change in the lab for a week now and no negative effects have been noticed.\r\n\r\nThis should solve #26.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/29/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/diffstat/PhyNerd/lyse:c25e8186f38b%0D5a58628c8ec1?from_pullrequest_id=29"}, "commits": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/commits.json"}, "self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "comments": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/29/merge"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}, "activity": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/diff/PhyNerd/lyse:c25e8186f38b%0D5a58628c8ec1?from_pullrequest_id=29"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/29/approve"}, "statuses": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/statuses_page=1.json"}}, "title": "Cross routine caching", "close_source_branch": false, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}], "id": 29, "destination": {"commit": {"hash": "5a58628c8ec1", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/5a58628c8ec1.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/5a58628c8ec1"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "created_on": "2017-08-14T18:43:07.140944+00:00", "summary": {"raw": "This pull request aims to make multishot routines(for lots of runs) faster, by storing image data and run objects on first load in a cross routine storage. \r\n\r\nThe storage uses nested dicts making access to all data of one kind(e.g. images) one request to the storage server rather then n_images * n_shots.\r\n\r\nTo reduce memory usage all data saved under a key equal to the filepath of a shot is removed when that shot is removed.\r\n\r\nCaching of runs and images can be disabled.\r\n\r\nThe reasoning for this pull request is:\r\n\r\nIn our lab we have a multishot routine that calculates trap positions for a grid of single atom traps, thresholds to determine atom count (1 or 0)  for those traps and finally saves the atom count to the individual shots. This routine needs all images from all shots to do so. As our typical shot amount of shots in a sequence is 2000 or greater this takes about 17 seconds with these changes here it's down to sub 1 second. \r\nWe are using this change in the lab for a week now and no negative effects have been noticed.\r\n\r\nThis should solve #26.", "markup": "markdown", "html": "<p>This pull request aims to make multishot routines(for lots of runs) faster, by storing image data and run objects on first load in a cross routine storage. </p>\n<p>The storage uses nested dicts making access to all data of one kind(e.g. images) one request to the storage server rather then n_images * n_shots.</p>\n<p>To reduce memory usage all data saved under a key equal to the filepath of a shot is removed when that shot is removed.</p>\n<p>Caching of runs and images can be disabled.</p>\n<p>The reasoning for this pull request is:</p>\n<p>In our lab we have a multishot routine that calculates trap positions for a grid of single atom traps, thresholds to determine atom count (1 or 0)  for those traps and finally saves the atom count to the individual shots. This routine needs all images from all shots to do so. As our typical shot amount of shots in a sequence is 2000 or greater this takes about 17 seconds with these changes here it's down to sub 1 second. \nWe are using this change in the lab for a week now and no negative effects have been noticed.</p>\n<p>This should solve <a href=\"#!/labscript_suite/lyse/issues/26/loading-images-takes-too-long\" rel=\"nofollow\" title=\"Loading images takes too long\" class=\"ap-connect-link\">#26</a>.</p>", "type": "rendered"}, "source": {"commit": {"hash": "c25e8186f38b", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse/commit/c25e8186f38b"}, "html": {"href": "#!/PhyNerd/lyse/commits/c25e8186f38b"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/lyse"}, "html": {"href": "#!/PhyNerd/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "PhyNerd/lyse", "uuid": "{d53abe9e-de63-48eb-9cc5-379fd9cdfed9}"}, "branch": {"name": "cross-routine-storage"}}, "comment_count": 45, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, {"role": "REVIEWER", "participated_on": "2020-01-16T10:35:05.768970+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-16T10:25:28.515259+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}, {"role": "REVIEWER", "participated_on": "2017-08-17T01:41:14.595231+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-12T08:39:03.168151+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}], "reason": "Will likely implement differently eventually, is a niche use case in the meantime.", "updated_on": "2020-01-28T21:11:47.488165+00:00", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}