{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42848969.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42848969"}}, "parent": {"id": 42806634, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806634.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806634"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I think this is ok. This way the storage dictionary is only ever modified by calls coming from the server's hander method, right? That should ensure they are serialised.\n\nThe other alternative would be to wrap access to the dictionary in a threading.Lock(), but I prefer your approach of saying \"the web server is responsible for this data\". It's better for one component with one thread of execution to be in control of data, and responding to requests about that data rather than sharing it directly with locks (this is the essence of the actor model).\n\nIn the delete rows method, there's a comment  `# Delete one at a time from Qt model:`, which is now misleading because any data from the storage dictionary for that shot is also being deleted. You should change the comment to something like `# Delete one at a time from Qt model, and delete any cached data for each shot from the web server's cache`", "markup": "markdown", "html": "<p>I think this is ok. This way the storage dictionary is only ever modified by calls coming from the server's hander method, right? That should ensure they are serialised.</p>\n<p>The other alternative would be to wrap access to the dictionary in a threading.Lock(), but I prefer your approach of saying \"the web server is responsible for this data\". It's better for one component with one thread of execution to be in control of data, and responding to requests about that data rather than sharing it directly with locks (this is the essence of the actor model).</p>\n<p>In the delete rows method, there's a comment  <code># Delete one at a time from Qt model:</code>, which is now misleading because any data from the storage dictionary for that shot is also being deleted. You should change the comment to something like <code># Delete one at a time from Qt model, and delete any cached data for each shot from the web server's cache</code></p>", "type": "rendered"}, "created_on": "2017-08-15T16:22:10.347950+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-15T16:22:10.350703+00:00", "type": "pullrequest_comment", "id": 42848969}