{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42961962.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42961962"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "OK so here's some code that demonstrates that local h5 files use the operating system's cache properly on my system. I'll post the code, then the results, then comments about which bits would need to change to see what the difference is on a different platform.\n\nHere's the code:\n\n\n```\n#!python\nimport numpy as np\nimport h5py\nimport time\nimport zprocess\n\n\nspinning_rust = '/media/cjb7/data_2/tmp/'\n\n\ndef drop_caches():\n    import os\n    os.system(\"sudo sh -c 'echo 1 >/proc/sys/vm/drop_caches'\")\n    os.system(\"sudo sh -c 'echo 2 >/proc/sys/vm/drop_caches'\")\n    os.system(\"sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'\")\n\n\nclass H5pyLoad(zprocess.Process):\n    def run(self):\n        start_time = time.time()\n        with h5py.File(spinning_rust + 'a.h5') as f:\n            b = f['a'][:]\n        print('h5py load warm multiproc:', time.time() - start_time)\n\n\nclass NpyLoad(zprocess.Process):\n    def run(self):\n        start_time = time.time()\n        with open(spinning_rust + 'a.npy', 'rb') as f:\n            b = np.load(f)\n        print('np.load warm multiproc:', time.time() - start_time)\n\n\nclass InterProcReceiver(zprocess.Process):\n    def run(self):\n        a = self.from_parent.get()\n        self.to_parent.put('ok')\n\n\nif __name__ == '__main__':\n\n    a = np.random.randn(10000,10000) # 800 MB!\n\n\n    start_time = time.time()\n    b = a.copy()\n    print('simple copy:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'wb') as f:\n        np.save(f, a)\n    print('np.save:', time.time() - start_time)\n\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'rb') as f:\n        b = np.load(f)\n    print('np.load warm:', time.time() - start_time)\n\n    proc = NpyLoad()\n    proc.start()\n    proc.child.wait()\n\n    drop_caches()\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'rb') as f:\n        b = np.load(f)\n    print('np load cold:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5', 'w') as f:\n        f['a'] = a\n    print('h5py save:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5') as f:\n        b = f['a'][:]\n    print('h5py load warm:', time.time() - start_time)\n\n    proc = H5pyLoad()\n    proc.start()\n    proc.child.wait()\n\n    drop_caches()\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5') as f:\n        b = f['a'][:]\n    print('h5py load cold:', time.time() - start_time)\n\n    proc = InterProcReceiver()\n    to_child, from_child = proc.start()\n    start_time = time.time()\n    to_child.put(a)\n    assert from_child.get() == 'ok'\n    print('interproc pickled send:', time.time() - start_time)\n\n```\nWhich for me prints:\n\n\n```\n#!python\n\nsimple copy: 0.1686723232269287\nnp.save: 6.228755950927734\nnp.load warm: 0.25853824615478516\nnp.load warm multiproc: 0.22100281715393066\nnp load cold: 6.54589319229126\nh5py save: 6.361424207687378\nh5py load warm: 0.26479077339172363\nh5py load warm multiproc: 0.22367358207702637\nh5py load cold: 6.570956230163574\ninterproc pickled send: 9.283708333969116\n```\n\nDemonstrating that the OS caches are being used for HDF5 files, and that reading from disk when the cache is warm (even 800MB) is only slightly slower than a simple copy of the numpy array (which is a lower bound on copying it from another process). \"interproc pickled send\" was supposed to be comparable to what you're doing in this pull request, but pickles clearly have poor scaling. In any case that could be made faster by not pickling it - it should end up comparable to just copying it within one process.\n\nAnyway to replicate these results on another platform obviously you'll need to change the paths, and also the `drop_caches()` function is linux specific. If you don't know what to replace that with on another platform (I certainly don't), then just leave out the \"cold\" checks and we can still see what the caches look like when \"warm\".", "markup": "markdown", "html": "<p>OK so here's some code that demonstrates that local h5 files use the operating system's cache properly on my system. I'll post the code, then the results, then comments about which bits would need to change to see what the difference is on a different platform.</p>\n<p>Here's the code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zprocess</span>\n\n\n<span class=\"n\">spinning_rust</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/media/cjb7/data_2/tmp/&#39;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">drop_caches</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 1 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 2 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 3 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">H5pyLoad</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NpyLoad</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InterProcReceiver</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">from_parent</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_parent</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"c1\"># 800 MB!</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;simple copy:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.save:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">NpyLoad</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"n\">drop_caches</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np load cold:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py save:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">H5pyLoad</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"n\">drop_caches</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load cold:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">InterProcReceiver</span><span class=\"p\">()</span>\n    <span class=\"n\">to_child</span><span class=\"p\">,</span> <span class=\"n\">from_child</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">to_child</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">from_child</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ok&#39;</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;interproc pickled send:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Which for me prints:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">simple</span> <span class=\"n\">copy</span><span class=\"p\">:</span> <span class=\"mf\">0.1686723232269287</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"mf\">6.228755950927734</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span> <span class=\"n\">warm</span><span class=\"p\">:</span> <span class=\"mf\">0.25853824615478516</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span> <span class=\"n\">warm</span> <span class=\"n\">multiproc</span><span class=\"p\">:</span> <span class=\"mf\">0.22100281715393066</span>\n<span class=\"n\">np</span> <span class=\"n\">load</span> <span class=\"n\">cold</span><span class=\"p\">:</span> <span class=\"mf\">6.54589319229126</span>\n<span class=\"n\">h5py</span> <span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"mf\">6.361424207687378</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">warm</span><span class=\"p\">:</span> <span class=\"mf\">0.26479077339172363</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">warm</span> <span class=\"n\">multiproc</span><span class=\"p\">:</span> <span class=\"mf\">0.22367358207702637</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">cold</span><span class=\"p\">:</span> <span class=\"mf\">6.570956230163574</span>\n<span class=\"n\">interproc</span> <span class=\"n\">pickled</span> <span class=\"n\">send</span><span class=\"p\">:</span> <span class=\"mf\">9.283708333969116</span>\n</pre></div>\n\n\n<p>Demonstrating that the OS caches are being used for HDF5 files, and that reading from disk when the cache is warm (even 800MB) is only slightly slower than a simple copy of the numpy array (which is a lower bound on copying it from another process). \"interproc pickled send\" was supposed to be comparable to what you're doing in this pull request, but pickles clearly have poor scaling. In any case that could be made faster by not pickling it - it should end up comparable to just copying it within one process.</p>\n<p>Anyway to replicate these results on another platform obviously you'll need to change the paths, and also the <code>drop_caches()</code> function is linux specific. If you don't know what to replace that with on another platform (I certainly don't), then just leave out the \"cold\" checks and we can still see what the caches look like when \"warm\".</p>", "type": "rendered"}, "created_on": "2017-08-16T21:21:36.145293+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:21:36.148222+00:00", "type": "pullrequest_comment", "id": 42961962}