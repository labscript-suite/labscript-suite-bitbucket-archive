{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42780404.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42780404"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "The config for the caching feature and for storage timeouts is currently only editable in ```__init__.py``` I'm aware that this is not ideal. Are there better suggestions on where to store these?", "markup": "markdown", "html": "<p>The config for the caching feature and for storage timeouts is currently only editable in <code>__init__.py</code> I'm aware that this is not ideal. Are there better suggestions on where to store these?</p>", "type": "rendered"}, "created_on": "2017-08-14T18:44:56.575807+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-14T18:44:56.640967+00:00", "type": "pullrequest_comment", "id": 42780404}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42796251.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42796251"}}, "parent": {"id": 42780404, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42780404.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42780404"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Well we should probably have a preferences window (using the `labscript_utils.settings` classes) and there is almost an argument that this code could be contained in an optional plugin rather than integrating with lyse directly. However, since neither of those exist yet in lyse, it's probably not worth worrying about for now!", "markup": "markdown", "html": "<p>Well we should probably have a preferences window (using the <code>labscript_utils.settings</code> classes) and there is almost an argument that this code could be contained in an optional plugin rather than integrating with lyse directly. However, since neither of those exist yet in lyse, it's probably not worth worrying about for now!</p>", "type": "rendered"}, "created_on": "2017-08-14T23:32:04.117650+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-14T23:32:04.120906+00:00", "type": "pullrequest_comment", "id": 42796251}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42796296.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42796296"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I suspect there is a race condition in the `WebServer` now as I think `handler` and `remove_data_by_filepath` are being called from different threads?", "markup": "markdown", "html": "<p>I suspect there is a race condition in the <code>WebServer</code> now as I think <code>handler</code> and <code>remove_data_by_filepath</code> are being called from different threads?</p>", "type": "rendered"}, "created_on": "2017-08-14T23:33:11.676088+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-14T23:33:11.678361+00:00", "type": "pullrequest_comment", "id": 42796296}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806634.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806634"}}, "parent": {"id": 42796296, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42796296.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42796296"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "You are right I'll fix that later but to be honst don't think it's a problem als usually you remove shots when routines aren't running anyway.\n\nUpdate:\nSo I fixed it in the only way that made sense to me without monkey patching zprocess's main loop.", "markup": "markdown", "html": "<p>You are right I'll fix that later but to be honst don't think it's a problem als usually you remove shots when routines aren't running anyway.</p>\n<p>Update:\nSo I fixed it in the only way that made sense to me without monkey patching zprocess's main loop.</p>", "type": "rendered"}, "created_on": "2017-08-15T06:04:59.155108+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-15T16:09:59.445851+00:00", "type": "pullrequest_comment", "id": 42806634}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42848969.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42848969"}}, "parent": {"id": 42806634, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806634.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806634"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I think this is ok. This way the storage dictionary is only ever modified by calls coming from the server's hander method, right? That should ensure they are serialised.\n\nThe other alternative would be to wrap access to the dictionary in a threading.Lock(), but I prefer your approach of saying \"the web server is responsible for this data\". It's better for one component with one thread of execution to be in control of data, and responding to requests about that data rather than sharing it directly with locks (this is the essence of the actor model).\n\nIn the delete rows method, there's a comment  `# Delete one at a time from Qt model:`, which is now misleading because any data from the storage dictionary for that shot is also being deleted. You should change the comment to something like `# Delete one at a time from Qt model, and delete any cached data for each shot from the web server's cache`", "markup": "markdown", "html": "<p>I think this is ok. This way the storage dictionary is only ever modified by calls coming from the server's hander method, right? That should ensure they are serialised.</p>\n<p>The other alternative would be to wrap access to the dictionary in a threading.Lock(), but I prefer your approach of saying \"the web server is responsible for this data\". It's better for one component with one thread of execution to be in control of data, and responding to requests about that data rather than sharing it directly with locks (this is the essence of the actor model).</p>\n<p>In the delete rows method, there's a comment  <code># Delete one at a time from Qt model:</code>, which is now misleading because any data from the storage dictionary for that shot is also being deleted. You should change the comment to something like <code># Delete one at a time from Qt model, and delete any cached data for each shot from the web server's cache</code></p>", "type": "rendered"}, "created_on": "2017-08-15T16:22:10.347950+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-15T16:22:10.350703+00:00", "type": "pullrequest_comment", "id": 42848969}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42850323.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42850323"}}, "parent": {"id": 42848969, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42848969.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42848969"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I had a few other solutions in mind but those would have deleted data only upon the next request to the server and that didn't seem right. Locks I didn't even consider as that would have been overkill in my opinion.\n\nI updated the comment but split it into 2 lines because the line seemed to long. Didn't have a good idea on how I could shorten the second line so I just left it the way you proposed. ", "markup": "markdown", "html": "<p>I had a few other solutions in mind but those would have deleted data only upon the next request to the server and that didn't seem right. Locks I didn't even consider as that would have been overkill in my opinion.</p>\n<p>I updated the comment but split it into 2 lines because the line seemed to long. Didn't have a good idea on how I could shorten the second line so I just left it the way you proposed. </p>", "type": "rendered"}, "created_on": "2017-08-15T16:36:27.814698+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-15T16:36:27.863903+00:00", "type": "pullrequest_comment", "id": 42850323}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42796749.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42796749"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "With regards to the cross_routine stuff, is there a reason you aren't just saving this in the HDF5 file/dataframe and then accessing it from another routine?\n\nI'm somewhat reluctant about adding another place to store data that isn't the HDF5 file since it diminishes our \"everything is stored in the shot file\" mantra that underpins our entire philosophy. Happy to be convinced otherwise, but I think it's worth discussing further.", "markup": "markdown", "html": "<p>With regards to the cross_routine stuff, is there a reason you aren't just saving this in the HDF5 file/dataframe and then accessing it from another routine?</p>\n<p>I'm somewhat reluctant about adding another place to store data that isn't the HDF5 file since it diminishes our \"everything is stored in the shot file\" mantra that underpins our entire philosophy. Happy to be convinced otherwise, but I think it's worth discussing further.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:36:44.606266+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-14T23:36:44.608490+00:00", "type": "pullrequest_comment", "id": 42796749}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797023.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797023"}}, "parent": {"id": 42796749, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42796749.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42796749"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I'm more happy with caches where the disk is authoritative and the cache is just a performance optimisation, I understand performance optimisations are necessary.\n\nBut I'm a little dismayed that files are so slow. Pickling data and sending it over a socket is not exactly lightweight, and operating systems are supposed to cache disk writes and reads so that if one process writes and another immediately reads, then the data should still be in RAM and the read should be quick. Maybe using shared drives means this isn't occurring, but it's pretty disappointing.", "markup": "markdown", "html": "<p>I'm more happy with caches where the disk is authoritative and the cache is just a performance optimisation, I understand performance optimisations are necessary.</p>\n<p>But I'm a little dismayed that files are so slow. Pickling data and sending it over a socket is not exactly lightweight, and operating systems are supposed to cache disk writes and reads so that if one process writes and another immediately reads, then the data should still be in RAM and the read should be quick. Maybe using shared drives means this isn't occurring, but it's pretty disappointing.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:42:21.622052+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-14T23:42:21.625108+00:00", "type": "pullrequest_comment", "id": 42797023}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797097.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797097"}}, "parent": {"id": 42797023, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797023.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797023"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Perhaps a general purpose HDF5 file cacher might be in order (not suggesting now) - so that all reads and writes go through it and it can cache recent writes and return them faster. It's just annoying that doing things like that is reinventing what operating systems are supposed to do.", "markup": "markdown", "html": "<p>Perhaps a general purpose HDF5 file cacher might be in order (not suggesting now) - so that all reads and writes go through it and it can cache recent writes and return them faster. It's just annoying that doing things like that is reinventing what operating systems are supposed to do.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:44:16.366918+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-14T23:44:54.854782+00:00", "type": "pullrequest_comment", "id": 42797097}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806996.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806996"}}, "parent": {"id": 42797097, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797097.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797097"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Even if we cache hdf5 files they'd have the problem of having to be accessed in a loop. And the access function probably being more complex than the storage. The storage the way I implemented it allows things to happen in one request. As it just goes up one step in the hierarchy and returns the dict of all images. \n\nThe 'each shot gets it's own file' model is whats biting us here I think.\n\nIn our group there is a ongoing discussion to replace the hdf5 files with some sort of database for better search ability, faster access to data and less file clutter. But that seems really hard to do right and might raise other problems. I'm not in favor of this kind of change and the performance pull requests are my way of getting out of these discussions by at least making things fast enough.", "markup": "markdown", "html": "<p>Even if we cache hdf5 files they'd have the problem of having to be accessed in a loop. And the access function probably being more complex than the storage. The storage the way I implemented it allows things to happen in one request. As it just goes up one step in the hierarchy and returns the dict of all images. </p>\n<p>The 'each shot gets it's own file' model is whats biting us here I think.</p>\n<p>In our group there is a ongoing discussion to replace the hdf5 files with some sort of database for better search ability, faster access to data and less file clutter. But that seems really hard to do right and might raise other problems. I'm not in favor of this kind of change and the performance pull requests are my way of getting out of these discussions by at least making things fast enough.</p>", "type": "rendered"}, "created_on": "2017-08-15T06:16:59.351467+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-15T16:52:07.481682+00:00", "type": "pullrequest_comment", "id": 42806996}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797185.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797185"}}, "parent": {"id": 42797023, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797023.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797023"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Sure, I'm happy with caches. My comments were about the new `save_value`, `get_saved_value` functions that don't seem related to the other caching changes. I thought the dataframe was effectively a cache of cross-routine values that was backed by the HDF5 file, so am not seeing the point of those new functions.", "markup": "markdown", "html": "<p>Sure, I'm happy with caches. My comments were about the new <code>save_value</code>, <code>get_saved_value</code> functions that don't seem related to the other caching changes. I thought the dataframe was effectively a cache of cross-routine values that was backed by the HDF5 file, so am not seeing the point of those new functions.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:46:52.620168+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-14T23:46:52.622267+00:00", "type": "pullrequest_comment", "id": 42797185}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797328.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797328"}}, "parent": {"id": 42797185, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797185.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797185"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Yes, I understand, and I agree, so I was implying something like \"those functions should change to be disk-backed\". But you're right, that's what the dataframe is, which I hadn't realised.", "markup": "markdown", "html": "<p>Yes, I understand, and I agree, so I was implying something like \"those functions should change to be disk-backed\". But you're right, that's what the dataframe is, which I hadn't realised.</p>", "type": "rendered"}, "created_on": "2017-08-14T23:50:37.214431+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-14T23:50:37.216754+00:00", "type": "pullrequest_comment", "id": 42797328}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797698.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797698"}}, "parent": {"id": 42797328, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797328.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797328"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ah, cool!\n\nPossibly the issue is that you can't request a single row (or subset of rows) of the dataframe over ZMQ? Which makes it slower than it should be? I think this was on our todo list at somepoint but we probably never got around to it! Although, the implementation below is more general because it isn't just cross-routine, but also cross-shot. Not sure if that is a necessary feature or not for @PhyNerd. ", "markup": "markdown", "html": "<p>Ah, cool!</p>\n<p>Possibly the issue is that you can't request a single row (or subset of rows) of the dataframe over ZMQ? Which makes it slower than it should be? I think this was on our todo list at somepoint but we probably never got around to it! Although, the implementation below is more general because it isn't just cross-routine, but also cross-shot. Not sure if that is a necessary feature or not for @PhyNerd. </p>", "type": "rendered"}, "created_on": "2017-08-15T00:00:57.416667+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-15T00:00:57.424470+00:00", "type": "pullrequest_comment", "id": 42797698}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806828.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806828"}}, "parent": {"id": 42797698, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42797698.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42797698"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Well we are currently not using this additional feature, but it could replace our analysis globals workaround that is currently using the runmanager api. For this to be a replacement though it would need to be stored on closing of lyse and reloaded in opening. Which is is a seperate pull request after merging of saving ui state to config. (by the way can we merge that?)\n\nAlso some things don't seem to belong in the shot such as thresholds and current trap position that are derived from the whole sequence. These thresholds/trap position once calculated can be used in single shot routines for shots coming in for a quick pre threshold update result.", "markup": "markdown", "html": "<p>Well we are currently not using this additional feature, but it could replace our analysis globals workaround that is currently using the runmanager api. For this to be a replacement though it would need to be stored on closing of lyse and reloaded in opening. Which is is a seperate pull request after merging of saving ui state to config. (by the way can we merge that?)</p>\n<p>Also some things don't seem to belong in the shot such as thresholds and current trap position that are derived from the whole sequence. These thresholds/trap position once calculated can be used in single shot routines for shots coming in for a quick pre threshold update result.</p>", "type": "rendered"}, "created_on": "2017-08-15T06:11:53.861319+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-15T06:28:08.820869+00:00", "type": "pullrequest_comment", "id": 42806828}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42971114.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42971114"}}, "parent": {"id": 42806828, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42806828.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42806828"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "If you aren't using the cross-routine storage right now, then I'd suggest removing it from this pull request for the moment so it doesn't confuse the issue. I think we need a bigger/broader discussion with all the stakeholders as to what the best, generalised way of storing higher-order (multi-shot) analysis results is (and possibly the best way to facilitate higher order analysis of a series of higher order analyses - aka multi-multi-shot analysis). We also need to discuss globals in lyse (should these be completely global, or be associated with an analysis script or associated with a series of shots, or all three... and the best place to store these and the best way of displaying/editing these...etc.). In short, while I think these features are all really important, I think there are lots of implementation details to work out before we can solve the problem of globals/cross-routine/higher-order analysis results/etc. and wouldn't want this to hold up the rest of the pull request.\n\nSo on that note, I'm reasonably happy to approve the image caching part of this pull request soon (after testing), unless Chris comes up with a better solution", "markup": "markdown", "html": "<p>If you aren't using the cross-routine storage right now, then I'd suggest removing it from this pull request for the moment so it doesn't confuse the issue. I think we need a bigger/broader discussion with all the stakeholders as to what the best, generalised way of storing higher-order (multi-shot) analysis results is (and possibly the best way to facilitate higher order analysis of a series of higher order analyses - aka multi-multi-shot analysis). We also need to discuss globals in lyse (should these be completely global, or be associated with an analysis script or associated with a series of shots, or all three... and the best place to store these and the best way of displaying/editing these...etc.). In short, while I think these features are all really important, I think there are lots of implementation details to work out before we can solve the problem of globals/cross-routine/higher-order analysis results/etc. and wouldn't want this to hold up the rest of the pull request.</p>\n<p>So on that note, I'm reasonably happy to approve the image caching part of this pull request soon (after testing), unless Chris comes up with a better solution</p>", "type": "rendered"}, "created_on": "2017-08-17T01:41:14.592893+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-17T01:41:14.595231+00:00", "type": "pullrequest_comment", "id": 42971114}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42980517.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42980517"}}, "parent": {"id": 42971114, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42971114.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42971114"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ok sounds good I'll remove the functions and update the description.", "markup": "markdown", "html": "<p>Ok sounds good I'll remove the functions and update the description.</p>", "type": "rendered"}, "created_on": "2017-08-17T06:37:38.246118+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-17T06:37:38.302362+00:00", "type": "pullrequest_comment", "id": 42980517}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959197.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959197"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "This issue is a bit more general and I wonder if we can work out a more general fix. \n\nThe problem is that whilst operating systems are clever about caching file access such that it is usually pointless to \"cache\" something that you wrote to a file (my original objection to any feature like this being neccesary), it turns out that this does not apply to network drives.\n\nEvery access to a network drive is a new read, even if the data on the drive has not changed, even if the file's modified time has not changed. Operating systems do not cache the data locally.\n\nSo I wonder if we can do something a bit more general, such as having an option for lyse to make a local copy of every HDF5 file that comes in, copying it back to the network drive only once analysis has completed, or something like that.\n\nA workaround I suspect would work as well is to have the shared drive be hosted on the computer running lyse.\n\nAn even more general solution might involve a general purpose monkeypatch to h5py that would keep a cache of local files up to some limit (set by the computer's RAM probably, since the OS won't cache more than that) and upon file open in read-only mode, would go out to the network drive and check the file modified time, returning the on-disk cached version if it is up to date, and updating the cache before returning it if not. There are downsides to this - you are copying data locally that you don't need a lot of the time, but I'll put some thought into it and maybe we can work something out that will solve this problem without having to abandon the files being authoritative.\n\nIt might even be possible to intercept h5py's opening of files at a low enough level that we could cache only locally written data and not have to copy over data from the network that isn't being read. I'm talking \"you want to read byte 785 of the file? I have byte 785 right here...\" rather than talking in terms of datasets or anything else to do with HDF5. After all, this is how operating system caches work, and they seem to work fine for HDF5 files when they are stored locally on disk. This would be my preferred solution so far.", "markup": "markdown", "html": "<p>This issue is a bit more general and I wonder if we can work out a more general fix. </p>\n<p>The problem is that whilst operating systems are clever about caching file access such that it is usually pointless to \"cache\" something that you wrote to a file (my original objection to any feature like this being neccesary), it turns out that this does not apply to network drives.</p>\n<p>Every access to a network drive is a new read, even if the data on the drive has not changed, even if the file's modified time has not changed. Operating systems do not cache the data locally.</p>\n<p>So I wonder if we can do something a bit more general, such as having an option for lyse to make a local copy of every HDF5 file that comes in, copying it back to the network drive only once analysis has completed, or something like that.</p>\n<p>A workaround I suspect would work as well is to have the shared drive be hosted on the computer running lyse.</p>\n<p>An even more general solution might involve a general purpose monkeypatch to h5py that would keep a cache of local files up to some limit (set by the computer's RAM probably, since the OS won't cache more than that) and upon file open in read-only mode, would go out to the network drive and check the file modified time, returning the on-disk cached version if it is up to date, and updating the cache before returning it if not. There are downsides to this - you are copying data locally that you don't need a lot of the time, but I'll put some thought into it and maybe we can work something out that will solve this problem without having to abandon the files being authoritative.</p>\n<p>It might even be possible to intercept h5py's opening of files at a low enough level that we could cache only locally written data and not have to copy over data from the network that isn't being read. I'm talking \"you want to read byte 785 of the file? I have byte 785 right here...\" rather than talking in terms of datasets or anything else to do with HDF5. After all, this is how operating system caches work, and they seem to work fine for HDF5 files when they are stored locally on disk. This would be my preferred solution so far.</p>", "type": "rendered"}, "created_on": "2017-08-16T20:34:48.013765+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T20:38:01.146151+00:00", "type": "pullrequest_comment", "id": 42959197}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959550.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959550"}}, "parent": {"id": 42959197, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959197.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959197"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "All my testing is done locally without a network drive so your network drive theory doesn't apply.\n\nAs for caching files sure I'd be on board with that in general but don't really think that this will bring the speed increase we want. Also 2000 hdf5 files take up more RAM than 4000 images that were stored in said files.\n\nUpdate:\nAlso the files are still authoritative as images should not change after measurement as that could corrupt data. I see no problem there.", "markup": "markdown", "html": "<p>All my testing is done locally without a network drive so your network drive theory doesn't apply.</p>\n<p>As for caching files sure I'd be on board with that in general but don't really think that this will bring the speed increase we want. Also 2000 hdf5 files take up more RAM than 4000 images that were stored in said files.</p>\n<p>Update:\nAlso the files are still authoritative as images should not change after measurement as that could corrupt data. I see no problem there.</p>", "type": "rendered"}, "created_on": "2017-08-16T20:39:51.726065+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T20:42:13.020020+00:00", "type": "pullrequest_comment", "id": 42959550}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959803.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959803"}}, "parent": {"id": 42959550, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959550.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959550"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Really? Well, that is a surprise. I'll do a little more profiling of the code I'm using to test this hypothesis, as so far I haven't tested what happens when you read the file from a different process after it is saved. Perhaps I'll send you the code once it demonstrates how I think things work, and you can tell me if it has a different result on your system.\n\nReading from an operating system cache is reading directly from RAM or even CPU cache, and should be faster than any alternative if we can ensure redundant data is not copied unnecessarily.\n\nAh you're right about the total size of the files being off - whilst the OS will only cache the segments being read or written, limiting the total size of all files will limit how much it will cache by too much, you're right.", "markup": "markdown", "html": "<p>Really? Well, that is a surprise. I'll do a little more profiling of the code I'm using to test this hypothesis, as so far I haven't tested what happens when you read the file from a different process after it is saved. Perhaps I'll send you the code once it demonstrates how I think things work, and you can tell me if it has a different result on your system.</p>\n<p>Reading from an operating system cache is reading directly from RAM or even CPU cache, and should be faster than any alternative if we can ensure redundant data is not copied unnecessarily.</p>\n<p>Ah you're right about the total size of the files being off - whilst the OS will only cache the segments being read or written, limiting the total size of all files will limit how much it will cache by too much, you're right.</p>", "type": "rendered"}, "created_on": "2017-08-16T20:43:52.152351+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T20:48:07.204635+00:00", "type": "pullrequest_comment", "id": 42959803}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42960879.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42960879"}}, "parent": {"id": 42959803, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42959803.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42959803"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I could provide you with a set of 2000 hdf files and analysis scripts that I run to test stuff if that helps you test our problems better.\n\nI'm also happy to test any code that helps performance. I find joy in reviewing and testing code as you might have noticed on the pull requests where you added me as a reviewer. And I need to do my own testing on all pull requests that I implement for our lab anyway so the earlier the better.\n\nI gave the design of this storage a lot of thought and it's the most lightweight solution that I could find with drastic increase in speed. I'd be surprised if you find something that is this fast and simple.\n\nAlso did you read my updated comment above?", "markup": "markdown", "html": "<p>I could provide you with a set of 2000 hdf files and analysis scripts that I run to test stuff if that helps you test our problems better.</p>\n<p>I'm also happy to test any code that helps performance. I find joy in reviewing and testing code as you might have noticed on the pull requests where you added me as a reviewer. And I need to do my own testing on all pull requests that I implement for our lab anyway so the earlier the better.</p>\n<p>I gave the design of this storage a lot of thought and it's the most lightweight solution that I could find with drastic increase in speed. I'd be surprised if you find something that is this fast and simple.</p>\n<p>Also did you read my updated comment above?</p>", "type": "rendered"}, "created_on": "2017-08-16T21:01:31.924005+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:01:31.978341+00:00", "type": "pullrequest_comment", "id": 42960879}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42961192.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42961192"}}, "parent": {"id": 42960879, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42960879.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42960879"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "No, but I've read it now! Sure, measurement data will not be modified, but we would like the same to be true of analysis results, although it is true that analysis results are less important than the original data.\n\nSince your code in this pull request is merely caching data, the file is still authoritative, so that's fine - I'm just wondering if we can solve the caching problem in a more general way, like prodding the OS to do its job. I'll post some code below demonstrating how things work (on my computer here on linux) in ideal conditions. We can see if there is a platform difference. I'll let you know about getting those files! That might be useful.", "markup": "markdown", "html": "<p>No, but I've read it now! Sure, measurement data will not be modified, but we would like the same to be true of analysis results, although it is true that analysis results are less important than the original data.</p>\n<p>Since your code in this pull request is merely caching data, the file is still authoritative, so that's fine - I'm just wondering if we can solve the caching problem in a more general way, like prodding the OS to do its job. I'll post some code below demonstrating how things work (on my computer here on linux) in ideal conditions. We can see if there is a platform difference. I'll let you know about getting those files! That might be useful.</p>", "type": "rendered"}, "created_on": "2017-08-16T21:07:25.156215+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:07:25.158449+00:00", "type": "pullrequest_comment", "id": 42961192}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42960873.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42960873"}}, "deleted": true, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "", "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-08-16T21:01:23.692414+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:01:26.892968+00:00", "type": "pullrequest_comment", "id": 42960873}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42961962.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42961962"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "OK so here's some code that demonstrates that local h5 files use the operating system's cache properly on my system. I'll post the code, then the results, then comments about which bits would need to change to see what the difference is on a different platform.\n\nHere's the code:\n\n\n```\n#!python\nimport numpy as np\nimport h5py\nimport time\nimport zprocess\n\n\nspinning_rust = '/media/cjb7/data_2/tmp/'\n\n\ndef drop_caches():\n    import os\n    os.system(\"sudo sh -c 'echo 1 >/proc/sys/vm/drop_caches'\")\n    os.system(\"sudo sh -c 'echo 2 >/proc/sys/vm/drop_caches'\")\n    os.system(\"sudo sh -c 'echo 3 >/proc/sys/vm/drop_caches'\")\n\n\nclass H5pyLoad(zprocess.Process):\n    def run(self):\n        start_time = time.time()\n        with h5py.File(spinning_rust + 'a.h5') as f:\n            b = f['a'][:]\n        print('h5py load warm multiproc:', time.time() - start_time)\n\n\nclass NpyLoad(zprocess.Process):\n    def run(self):\n        start_time = time.time()\n        with open(spinning_rust + 'a.npy', 'rb') as f:\n            b = np.load(f)\n        print('np.load warm multiproc:', time.time() - start_time)\n\n\nclass InterProcReceiver(zprocess.Process):\n    def run(self):\n        a = self.from_parent.get()\n        self.to_parent.put('ok')\n\n\nif __name__ == '__main__':\n\n    a = np.random.randn(10000,10000) # 800 MB!\n\n\n    start_time = time.time()\n    b = a.copy()\n    print('simple copy:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'wb') as f:\n        np.save(f, a)\n    print('np.save:', time.time() - start_time)\n\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'rb') as f:\n        b = np.load(f)\n    print('np.load warm:', time.time() - start_time)\n\n    proc = NpyLoad()\n    proc.start()\n    proc.child.wait()\n\n    drop_caches()\n    start_time = time.time()\n    with open(spinning_rust + 'a.npy', 'rb') as f:\n        b = np.load(f)\n    print('np load cold:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5', 'w') as f:\n        f['a'] = a\n    print('h5py save:', time.time() - start_time)\n\n\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5') as f:\n        b = f['a'][:]\n    print('h5py load warm:', time.time() - start_time)\n\n    proc = H5pyLoad()\n    proc.start()\n    proc.child.wait()\n\n    drop_caches()\n    start_time = time.time()\n    with h5py.File(spinning_rust + 'a.h5') as f:\n        b = f['a'][:]\n    print('h5py load cold:', time.time() - start_time)\n\n    proc = InterProcReceiver()\n    to_child, from_child = proc.start()\n    start_time = time.time()\n    to_child.put(a)\n    assert from_child.get() == 'ok'\n    print('interproc pickled send:', time.time() - start_time)\n\n```\nWhich for me prints:\n\n\n```\n#!python\n\nsimple copy: 0.1686723232269287\nnp.save: 6.228755950927734\nnp.load warm: 0.25853824615478516\nnp.load warm multiproc: 0.22100281715393066\nnp load cold: 6.54589319229126\nh5py save: 6.361424207687378\nh5py load warm: 0.26479077339172363\nh5py load warm multiproc: 0.22367358207702637\nh5py load cold: 6.570956230163574\ninterproc pickled send: 9.283708333969116\n```\n\nDemonstrating that the OS caches are being used for HDF5 files, and that reading from disk when the cache is warm (even 800MB) is only slightly slower than a simple copy of the numpy array (which is a lower bound on copying it from another process). \"interproc pickled send\" was supposed to be comparable to what you're doing in this pull request, but pickles clearly have poor scaling. In any case that could be made faster by not pickling it - it should end up comparable to just copying it within one process.\n\nAnyway to replicate these results on another platform obviously you'll need to change the paths, and also the `drop_caches()` function is linux specific. If you don't know what to replace that with on another platform (I certainly don't), then just leave out the \"cold\" checks and we can still see what the caches look like when \"warm\".", "markup": "markdown", "html": "<p>OK so here's some code that demonstrates that local h5 files use the operating system's cache properly on my system. I'll post the code, then the results, then comments about which bits would need to change to see what the difference is on a different platform.</p>\n<p>Here's the code:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">h5py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zprocess</span>\n\n\n<span class=\"n\">spinning_rust</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/media/cjb7/data_2/tmp/&#39;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">drop_caches</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 1 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 2 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">(</span><span class=\"s2\">&quot;sudo sh -c &#39;echo 3 &gt;/proc/sys/vm/drop_caches&#39;&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">H5pyLoad</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NpyLoad</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InterProcReceiver</span><span class=\"p\">(</span><span class=\"n\">zprocess</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">from_parent</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_parent</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"c1\"># 800 MB!</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;simple copy:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.save:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">NpyLoad</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"n\">drop_caches</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.npy&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;np load cold:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py save:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">H5pyLoad</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"n\">drop_caches</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">h5py</span><span class=\"o\">.</span><span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">spinning_rust</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;a.h5&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">[</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">][:]</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;h5py load cold:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">InterProcReceiver</span><span class=\"p\">()</span>\n    <span class=\"n\">to_child</span><span class=\"p\">,</span> <span class=\"n\">from_child</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">to_child</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">from_child</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;ok&#39;</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;interproc pickled send:&#39;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Which for me prints:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">simple</span> <span class=\"n\">copy</span><span class=\"p\">:</span> <span class=\"mf\">0.1686723232269287</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"mf\">6.228755950927734</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span> <span class=\"n\">warm</span><span class=\"p\">:</span> <span class=\"mf\">0.25853824615478516</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span> <span class=\"n\">warm</span> <span class=\"n\">multiproc</span><span class=\"p\">:</span> <span class=\"mf\">0.22100281715393066</span>\n<span class=\"n\">np</span> <span class=\"n\">load</span> <span class=\"n\">cold</span><span class=\"p\">:</span> <span class=\"mf\">6.54589319229126</span>\n<span class=\"n\">h5py</span> <span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"mf\">6.361424207687378</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">warm</span><span class=\"p\">:</span> <span class=\"mf\">0.26479077339172363</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">warm</span> <span class=\"n\">multiproc</span><span class=\"p\">:</span> <span class=\"mf\">0.22367358207702637</span>\n<span class=\"n\">h5py</span> <span class=\"n\">load</span> <span class=\"n\">cold</span><span class=\"p\">:</span> <span class=\"mf\">6.570956230163574</span>\n<span class=\"n\">interproc</span> <span class=\"n\">pickled</span> <span class=\"n\">send</span><span class=\"p\">:</span> <span class=\"mf\">9.283708333969116</span>\n</pre></div>\n\n\n<p>Demonstrating that the OS caches are being used for HDF5 files, and that reading from disk when the cache is warm (even 800MB) is only slightly slower than a simple copy of the numpy array (which is a lower bound on copying it from another process). \"interproc pickled send\" was supposed to be comparable to what you're doing in this pull request, but pickles clearly have poor scaling. In any case that could be made faster by not pickling it - it should end up comparable to just copying it within one process.</p>\n<p>Anyway to replicate these results on another platform obviously you'll need to change the paths, and also the <code>drop_caches()</code> function is linux specific. If you don't know what to replace that with on another platform (I certainly don't), then just leave out the \"cold\" checks and we can still see what the caches look like when \"warm\".</p>", "type": "rendered"}, "created_on": "2017-08-16T21:21:36.145293+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:21:36.148222+00:00", "type": "pullrequest_comment", "id": 42961962}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962319.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962319"}}, "parent": {"id": 42961962, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42961962.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42961962"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I have a h5 file to test but no npy file how do I create one of those?\n", "markup": "markdown", "html": "<p>I have a h5 file to test but no npy file how do I create one of those?</p>", "type": "rendered"}, "created_on": "2017-08-16T21:27:37.003527+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:27:37.053071+00:00", "type": "pullrequest_comment", "id": 42962319}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962396.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962396"}}, "parent": {"id": 42962319, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962319.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962319"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "The code creates it! The path you need to edit is just the folder that it will be created in. The one I've called `spinning_rust`", "markup": "markdown", "html": "<p>The code creates it! The path you need to edit is just the folder that it will be created in. The one I've called <code>spinning_rust</code></p>", "type": "rendered"}, "created_on": "2017-08-16T21:29:03.286063+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:29:03.288995+00:00", "type": "pullrequest_comment", "id": 42962396}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962530.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962530"}}, "parent": {"id": 42962396, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962396.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962396"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Here are my strange results:\n```\n#!python\n\n('simple copy:', 0.40894198417663574)\n('np.save:', 1.2408900260925293)\n('np.load warm:', 0.48074889183044434)\n('np.load warm multiproc:', 0.4304850101470947)\nsudo: no tty present and no askpass program specified\nsudo: no tty present and no askpass program specified\nsudo: no tty present and no askpass program specified\n('np load cold:', 0.46638989448547363)\n('h5py save:', 1.2424941062927246)\n('h5py load warm:', 0.631385087966919)\n('h5py load warm multiproc:', 0.42748594284057617)\nsudo: no tty present and no askpass program specified\nsudo: no tty present and no askpass program specified\nsudo: no tty present and no askpass program specified\n('h5py load cold:', 0.47283101081848145)\n('interproc pickled send:', 3.904258966445923)\n```\n\nUpdate: I'll re run with sudo python instead of python\nUpdate2: Here is the one with sudo active\n\n```\n#!python\n\n('simple copy:', 0.3986499309539795)\n('np.save:', 1.1926851272583008)\n('np.load warm:', 0.43192410469055176)\n('np.load warm multiproc:', 0.3931550979614258)\nsh: /proc/sys/vm/drop_caches: No such file or directory\nsh: /proc/sys/vm/drop_caches: No such file or directory\nsh: /proc/sys/vm/drop_caches: No such file or directory\n('np load cold:', 0.4230010509490967)\n('h5py save:', 1.1699440479278564)\n('h5py load warm:', 0.4495201110839844)\n('h5py load warm multiproc:', 0.402968168258667)\nsh: /proc/sys/vm/drop_caches: No such file or directory\nsh: /proc/sys/vm/drop_caches: No such file or directory\nsh: /proc/sys/vm/drop_caches: No such file or directory\n('h5py load cold:', 0.43749094009399414)\n('interproc pickled send:', 3.5145931243896484)\n```", "markup": "markdown", "html": "<p>Here are my strange results:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">(</span><span class=\"s1\">&#39;simple copy:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.40894198417663574</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.save:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.2408900260925293</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.48074889183044434</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.4304850101470947</span><span class=\"p\">)</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np load cold:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.46638989448547363</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py save:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.2424941062927246</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.631385087966919</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.42748594284057617</span><span class=\"p\">)</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"n\">sudo</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">tty</span> <span class=\"n\">present</span> <span class=\"ow\">and</span> <span class=\"n\">no</span> <span class=\"n\">askpass</span> <span class=\"n\">program</span> <span class=\"n\">specified</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load cold:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.47283101081848145</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;interproc pickled send:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">3.904258966445923</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>Update: I'll re run with sudo python instead of python\nUpdate2: Here is the one with sudo active</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"p\">(</span><span class=\"s1\">&#39;simple copy:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.3986499309539795</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.save:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.1926851272583008</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.43192410469055176</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np.load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.3931550979614258</span><span class=\"p\">)</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;np load cold:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.4230010509490967</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py save:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">1.1699440479278564</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.4495201110839844</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load warm multiproc:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.402968168258667</span><span class=\"p\">)</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"n\">sh</span><span class=\"p\">:</span> <span class=\"o\">/</span><span class=\"n\">proc</span><span class=\"o\">/</span><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">vm</span><span class=\"o\">/</span><span class=\"n\">drop_caches</span><span class=\"p\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"nb\">file</span> <span class=\"ow\">or</span> <span class=\"n\">directory</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;h5py load cold:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">0.43749094009399414</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">&#39;interproc pickled send:&#39;</span><span class=\"p\">,</span> <span class=\"mf\">3.5145931243896484</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-16T21:31:37.050480+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:33:54.560248+00:00", "type": "pullrequest_comment", "id": 42962530}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962815.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962815"}}, "parent": {"id": 42962530, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962530.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962530"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "You have an SSD I assume?\n\nDropping caches is not working, but that's fine. The saving is still indicative of how long things take when the cache is cold.  The results are enough to show that the OS caches are working for you.\n\nThis makes me think that it's something else about opening h5 files from within lyse that is slow. Perhaps zlock? Is your zlock server localhost?\n\nIf you want to get those files and analysis routines to me, I'd be interested in profiling what's slow, because it's starting to look like reading from disk should be able to be just as quick as getting the data from another process, and if the reason why it's not is fixable, then fixing it so that the OS cache can be used effectively might be preferable to introducing an additional cache.", "markup": "markdown", "html": "<p>You have an SSD I assume?</p>\n<p>Dropping caches is not working, but that's fine. The saving is still indicative of how long things take when the cache is cold.  The results are enough to show that the OS caches are working for you.</p>\n<p>This makes me think that it's something else about opening h5 files from within lyse that is slow. Perhaps zlock? Is your zlock server localhost?</p>\n<p>If you want to get those files and analysis routines to me, I'd be interested in profiling what's slow, because it's starting to look like reading from disk should be able to be just as quick as getting the data from another process, and if the reason why it's not is fixable, then fixing it so that the OS cache can be used effectively might be preferable to introducing an additional cache.</p>", "type": "rendered"}, "created_on": "2017-08-16T21:36:20.848149+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:36:20.850859+00:00", "type": "pullrequest_comment", "id": 42962815}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963134.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963134"}}, "parent": {"id": 42962815, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962815.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962815"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Yes just like all our lab machines. Though theirs is cheaper and slower than my personal machine.\n\nOk was just about to fix that.\n\nFor testing yes in the lab no.\n\nI'm thinking it's the amount of operations performed to achieve the result. As I pointed out above thats one operation with the storage and 2000 operations without. Also files don't stay cached forever.\n\nSure I'll upload them.", "markup": "markdown", "html": "<p>Yes just like all our lab machines. Though theirs is cheaper and slower than my personal machine.</p>\n<p>Ok was just about to fix that.</p>\n<p>For testing yes in the lab no.</p>\n<p>I'm thinking it's the amount of operations performed to achieve the result. As I pointed out above thats one operation with the storage and 2000 operations without. Also files don't stay cached forever.</p>\n<p>Sure I'll upload them.</p>", "type": "rendered"}, "created_on": "2017-08-16T21:41:40.418590+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:41:40.482946+00:00", "type": "pullrequest_comment", "id": 42963134}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963644.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963644"}}, "parent": {"id": 42963134, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963134.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963134"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Files stay cached as long as you have free RAM or until something else is being cached, the former being the same limit placed on lyse - its storage will start moving to disk (if you have a swap partition/file) once it exceeds free memory. And in general the OS is better at predicting what needs to cached than we are - if it drops the cache for a file being used in analysis, it's probably because your analysis was using some other file instead, which if not cached would cause an even bigger slowdown.\n\nCould you elaborate about numbers of operations? To get an image when you are using the storage, it's a socket message, a pickling of an array, a socket reply, and then an unpickling. With reading from disk, it's a message to and from zlock, then a read from a file, then another message to and from zlock. It seems pretty comparable to me. And for 2000 files it's 2000 of one of these.", "markup": "markdown", "html": "<p>Files stay cached as long as you have free RAM or until something else is being cached, the former being the same limit placed on lyse - its storage will start moving to disk (if you have a swap partition/file) once it exceeds free memory. And in general the OS is better at predicting what needs to cached than we are - if it drops the cache for a file being used in analysis, it's probably because your analysis was using some other file instead, which if not cached would cause an even bigger slowdown.</p>\n<p>Could you elaborate about numbers of operations? To get an image when you are using the storage, it's a socket message, a pickling of an array, a socket reply, and then an unpickling. With reading from disk, it's a message to and from zlock, then a read from a file, then another message to and from zlock. It seems pretty comparable to me. And for 2000 files it's 2000 of one of these.</p>", "type": "rendered"}, "created_on": "2017-08-16T21:51:38.970828+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:52:04.464212+00:00", "type": "pullrequest_comment", "id": 42963644}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963939.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963939"}}, "parent": {"id": 42963644, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963644.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963644"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Well if i load 2000 images with storage it's one message, the pickling of 1(!) dict of 2000 dicts containing the arrays, unpickeling at the other end thats it.\n\nWith caching of hdf5 files its iterating over those 2000 files, finding the images in those files and then returning them. Thats loads more operations. Also hdf5 holds the GIL as you pointed out somewhere so things might be slowed by that as well.\n\nUpdate: Free memory is also a non issue at the moment we just upgraded the analysis machine to 20GB that should be more than enough to handle our analysis and lyse", "markup": "markdown", "html": "<p>Well if i load 2000 images with storage it's one message, the pickling of 1(!) dict of 2000 dicts containing the arrays, unpickeling at the other end thats it.</p>\n<p>With caching of hdf5 files its iterating over those 2000 files, finding the images in those files and then returning them. Thats loads more operations. Also hdf5 holds the GIL as you pointed out somewhere so things might be slowed by that as well.</p>\n<p>Update: Free memory is also a non issue at the moment we just upgraded the analysis machine to 20GB that should be more than enough to handle our analysis and lyse</p>", "type": "rendered"}, "created_on": "2017-08-16T21:57:48.202421+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:59:49.921069+00:00", "type": "pullrequest_comment", "id": 42963939}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964527.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964527"}}, "parent": {"id": 42963939, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963939.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963939"}}, "depth": 8}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "The GIL wouldn't be relevant I don't think (and pickling and unpickling holds it too)\n\nPickling isn't particularly lightweight, and I suspect the overhead of it would be comparable to opening a lot of files (which is not that slow)\n\nI suspect zlock will be the bulk of it, rather than the file operations. 2000 send and receives on a socket running Python code at the other end? Yeah, probably not great.\n\nI'll investigate.", "markup": "markdown", "html": "<p>The GIL wouldn't be relevant I don't think (and pickling and unpickling holds it too)</p>\n<p>Pickling isn't particularly lightweight, and I suspect the overhead of it would be comparable to opening a lot of files (which is not that slow)</p>\n<p>I suspect zlock will be the bulk of it, rather than the file operations. 2000 send and receives on a socket running Python code at the other end? Yeah, probably not great.</p>\n<p>I'll investigate.</p>", "type": "rendered"}, "created_on": "2017-08-16T22:11:46.883927+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T22:12:23.017637+00:00", "type": "pullrequest_comment", "id": 42964527}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964602.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964602"}}, "parent": {"id": 42964527, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964527.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964527"}}, "depth": 9}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "It's not 2000 send/receives it's just 1 that gets me all images in my implementation.", "markup": "markdown", "html": "<p>It's not 2000 send/receives it's just 1 that gets me all images in my implementation.</p>", "type": "rendered"}, "created_on": "2017-08-16T22:13:39.058009+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T22:13:39.096202+00:00", "type": "pullrequest_comment", "id": 42964602}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964864.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964864"}}, "parent": {"id": 42964602, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964602.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964602"}}, "depth": 10}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ah yes but without your patch, opening and closing 2000 files involves 4000 sends abd receives to zlock, which is a Python program. That's probably what's consuming most of the time and not the actual file operations. But, speculating is pointless when profiling is the only way to be sure.", "markup": "markdown", "html": "<p>Ah yes but without your patch, opening and closing 2000 files involves 4000 sends abd receives to zlock, which is a Python program. That's probably what's consuming most of the time and not the actual file operations. But, speculating is pointless when profiling is the only way to be sure.</p>", "type": "rendered"}, "created_on": "2017-08-16T22:20:16.240391+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T22:20:16.243044+00:00", "type": "pullrequest_comment", "id": 42964864}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42965182.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42965182"}}, "parent": {"id": 42964864, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42964864.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42964864"}}, "depth": 11}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ohhhhhh ok yeah that might be.\n\nZlock is not something we can really get rid of. But the hdf5 caching (and maybe buffering changes) might help a lot there. If this is actually causing the problem.", "markup": "markdown", "html": "<p>Ohhhhhh ok yeah that might be.</p>\n<p>Zlock is not something we can really get rid of. But the hdf5 caching (and maybe buffering changes) might help a lot there. If this is actually causing the problem.</p>", "type": "rendered"}, "created_on": "2017-08-16T22:27:40.549668+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T22:27:40.605568+00:00", "type": "pullrequest_comment", "id": 42965182}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42965392.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42965392"}}, "parent": {"id": 42965182, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42965182.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42965182"}}, "depth": 12}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Zlock could grow a \"please give me a lock on this whole list of files, or this whole folder\" mode, or something else to reduce the number of calls to it without sacrificing functionality.", "markup": "markdown", "html": "<p>Zlock could grow a \"please give me a lock on this whole list of files, or this whole folder\" mode, or something else to reduce the number of calls to it without sacrificing functionality.</p>", "type": "rendered"}, "created_on": "2017-08-16T22:33:24.030188+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T22:33:24.032498+00:00", "type": "pullrequest_comment", "id": 42965392}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963293.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963293"}}, "parent": {"id": 42962815, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42962815.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42962815"}}, "depth": 5}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Could you provide me with a email adress of yours so I can send you the link with a shot explanation on what is what.", "markup": "markdown", "html": "<p>Could you provide me with a email adress of yours so I can send you the link with a shot explanation on what is what.</p>", "type": "rendered"}, "created_on": "2017-08-16T21:44:47.869561+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:44:47.915793+00:00", "type": "pullrequest_comment", "id": 42963293}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963331.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963331"}}, "parent": {"id": 42963293, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963293.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963293"}}, "depth": 6}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Sure! I'm chrisjbillington@gmail.com", "markup": "markdown", "html": "<p>Sure! I'm chrisjbillington@gmail.com</p>", "type": "rendered"}, "created_on": "2017-08-16T21:45:29.011375+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-16T21:45:29.013719+00:00", "type": "pullrequest_comment", "id": 42963331}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963742.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963742"}}, "parent": {"id": 42963331, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/42963331.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-42963331"}}, "depth": 7}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I emailed you the link and explanation", "markup": "markdown", "html": "<p>I emailed you the link and explanation</p>", "type": "rendered"}, "created_on": "2017-08-16T21:53:52.536464+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-16T21:53:52.588441+00:00", "type": "pullrequest_comment", "id": 42963742}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/43054975.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-43054975"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ok, so you were totally right on this one: your performance issues are because of the large number of file operations (when zlock is on localhost - when it's not I suspect it would dominate). The reason data transfer doesn't dominate is because your images are really tiny! 51 \u00d7 51 pixels!\n\nAny smaller and we would say \"just put it in the dataframe\", any larger and reducing the number of filesystem operations would not be much benefit since actual data transfer time would dominate.\n\nIn fact I tried putting the data in the dataframe - in your singleshot analysis I added a `save_result('im1', image1)` etc, and then in the multishot routine got the images with:\n\n```\n#!python\n\ndf = lyse.data()\nimage1 = dict(zip(df['filepath'], df['singleshot_routine_name', 'im1']))\n```\nwhich was super fast (and which led to discovering bugs about arrays as saved results as fixed in pull request #31).\n\nSo whether the cache is the dataframe or not, it looks like a cache is definitely the way to go. And since if you did this to many different images per shot, it would make the dataframe larger than neccesary and slow down multishot routines that were not interested in the images but would nonetheless need to pay the data transfer (39 MB in your example for 2 tiny images times 2000 shots) and pickling cost of them being in the dataframe, I think a separate cache is also the way to go.\n\nSo I'll have some nitpicks about the exact implementation of this pull request shortly - and also possible performance improvements for people whose images are not so small who want to use a cache, because for them pickling the images is a real waste - there are more efficient ways to serialise numpy arrays, and for you this is only working well because they're so tiny.\n\nBut I'm broadly in agreement with the approach here.", "markup": "markdown", "html": "<p>Ok, so you were totally right on this one: your performance issues are because of the large number of file operations (when zlock is on localhost - when it's not I suspect it would dominate). The reason data transfer doesn't dominate is because your images are really tiny! 51 \u00d7 51 pixels!</p>\n<p>Any smaller and we would say \"just put it in the dataframe\", any larger and reducing the number of filesystem operations would not be much benefit since actual data transfer time would dominate.</p>\n<p>In fact I tried putting the data in the dataframe - in your singleshot analysis I added a <code>save_result('im1', image1)</code> etc, and then in the multishot routine got the images with:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">lyse</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"n\">image1</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;filepath&#39;</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">&#39;singleshot_routine_name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;im1&#39;</span><span class=\"p\">]))</span>\n</pre></div>\n\n\n<p>which was super fast (and which led to discovering bugs about arrays as saved results as fixed in <a href=\"#!/labscript_suite/lyse/pull-requests/31/fix-a-bug-in-updating-the-dataframe\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #31</a>).</p>\n<p>So whether the cache is the dataframe or not, it looks like a cache is definitely the way to go. And since if you did this to many different images per shot, it would make the dataframe larger than neccesary and slow down multishot routines that were not interested in the images but would nonetheless need to pay the data transfer (39 MB in your example for 2 tiny images times 2000 shots) and pickling cost of them being in the dataframe, I think a separate cache is also the way to go.</p>\n<p>So I'll have some nitpicks about the exact implementation of this pull request shortly - and also possible performance improvements for people whose images are not so small who want to use a cache, because for them pickling the images is a real waste - there are more efficient ways to serialise numpy arrays, and for you this is only working well because they're so tiny.</p>\n<p>But I'm broadly in agreement with the approach here.</p>", "type": "rendered"}, "created_on": "2017-08-17T21:07:42.335893+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-17T21:09:18.063402+00:00", "type": "pullrequest_comment", "id": 43054975}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/43055249.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-43055249"}}, "parent": {"id": 43054975, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/43054975.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-43054975"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Great! thanks for testing!\n\nOur images are quite small at largest they would be 251x251 px. I also tried adding them to the dataframe but that made other things slow.\n\nLooking forward to those nitpicks :) ", "markup": "markdown", "html": "<p>Great! thanks for testing!</p>\n<p>Our images are quite small at largest they would be 251x251 px. I also tried adding them to the dataframe but that made other things slow.</p>\n<p>Looking forward to those nitpicks :) </p>", "type": "rendered"}, "created_on": "2017-08-17T21:13:03.311934+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-17T21:13:03.353350+00:00", "type": "pullrequest_comment", "id": 43055249}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/58646062.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-58646062"}}, "parent": {"id": 43055249, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/43055249.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-43055249"}}, "depth": 2}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "@cbillington do you still know what those nitpicks were? It would be great to get this pull request rolling again. ", "markup": "markdown", "html": "<p>@cbillington do you still know what those nitpicks were? It would be great to get this pull request rolling again. </p>", "type": "rendered"}, "created_on": "2018-03-13T09:59:25.928656+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-03-13T09:59:25.993171+00:00", "type": "pullrequest_comment", "id": 58646062}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/58652546.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-58652546"}}, "parent": {"id": 58646062, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/58646062.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-58646062"}}, "depth": 3}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "Ah, sorry about the delay! I will look at it shortly. Sorry, we will get through all these pull requests.", "markup": "markdown", "html": "<p>Ah, sorry about the delay! I will look at it shortly. Sorry, we will get through all these pull requests.</p>", "type": "rendered"}, "created_on": "2018-03-13T10:46:10.484038+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-13T10:46:10.488626+00:00", "type": "pullrequest_comment", "id": 58652546}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/69732437.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-69732437"}}, "parent": {"id": 58652546, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/58652546.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-58652546"}}, "depth": 4}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I\u2019d really like to get this pull request rolling again. As we have shifted to taking about 20 images instead of 2 per shot the caching solution is also starting to feel a bit slow \\(I really don't want to know what the timing is with unmodified lyse\\).\n\nIt seemed that you\\(@cbillington \\) had some ideas on how to further improve the speed of the caching feature. Could you give me a rundown of the ideas you had? I\u2019d also like to get this into the mainline code soon as it is a feature our lab very much depends on.", "markup": "markdown", "html": "<p>I\u2019d really like to get this pull request rolling again. As we have shifted to taking about 20 images instead of 2 per shot the caching solution is also starting to feel a bit slow (I really don't want to know what the timing is with unmodified lyse).</p>\n<p>It seemed that you(@cbillington ) had some ideas on how to further improve the speed of the caching feature. Could you give me a rundown of the ideas you had? I\u2019d also like to get this into the mainline code soon as it is a feature our lab very much depends on.</p>", "type": "rendered"}, "created_on": "2018-07-12T07:51:57.894141+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-07-12T08:39:03.168151+00:00", "type": "pullrequest_comment", "id": 69732437}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/44736792.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-44736792"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I moved the caching stuff to a separate file along with its config variables and split the storage server to be its own server to not slow down analysis submission.", "markup": "markdown", "html": "<p>I moved the caching stuff to a separate file along with its config variables and split the storage server to be its own server to not slow down analysis submission.</p>", "type": "rendered"}, "created_on": "2017-09-12T08:08:35.850465+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-09-12T08:08:35.889381+00:00", "type": "pullrequest_comment", "id": 44736792}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/131902486.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-131902486"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "@{557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3} I\u2019m tempted to decline this one in favour of creating a more general purpose cache that can handle an arbitrary data path in the HDF5 file and applies to all methods of `Run` and possibly something that rolls the cache over so it can\u2019t grow forever.\n\nEither way, I think this concept could be fleshed out significantly more and I don\u2019t think we should merge something to the lyse API that is not in the form we want.", "markup": "markdown", "html": "<p><span class=\"ap-mention\" data-atlassian-id=\"557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3\">@Chris Billington</span> I\u2019m tempted to decline this one in favour of creating a more general purpose cache that can handle an arbitrary data path in the HDF5 file and applies to all methods of <code>Run</code> and possibly something that rolls the cache over so it can\u2019t grow forever.</p>\n<p>Either way, I think this concept could be fleshed out significantly more and I don\u2019t think we should merge something to the lyse API that is not in the form we want.</p>", "type": "rendered"}, "created_on": "2020-01-16T10:25:28.500830+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2020-01-16T10:25:28.515259+00:00", "type": "pullrequest_comment", "id": 131902486}, {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/131904497.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-131904497"}}, "parent": {"id": 131902486, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29/comments/131902486.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29/_/diff#comment-131902486"}}, "depth": 1}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 29, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/29.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/29"}}, "title": "Cross routine caching"}, "content": {"raw": "I agree - it\u2019s a pretty niche use case in its current form. As far as I can tell, the problem it addresses is only an issue because opening HDF5 files is particularly slow. Bigger datasets and the OS cache would get it, and opening the file would be a small amount of time compared to processing. Smaller datasets and you could just put them in the dataframe \\(I spoke to someone else who just put all their images in the dataframe and wondered why the computer kept getting really slow\\). I\u2019m not sure whether I would agree with a system-wide cache of small objects from HDF5 files either \\(argh, getting painfully close to \u201cjust use a database!\u201d\\), but that would be preferable to this I think.  \n  \nIan had a suggestion about this topic, but I forget what it was. I\u2019ll ask him if he remembers and add it to the discussion. But agree with declining this despite it solving the specific problem it was written to address.\n\n\u200c", "markup": "markdown", "html": "<p>I agree - it\u2019s a pretty niche use case in its current form. As far as I can tell, the problem it addresses is only an issue because opening HDF5 files is particularly slow. Bigger datasets and the OS cache would get it, and opening the file would be a small amount of time compared to processing. Smaller datasets and you could just put them in the dataframe (I spoke to someone else who just put all their images in the dataframe and wondered why the computer kept getting really slow). I\u2019m not sure whether I would agree with a system-wide cache of small objects from HDF5 files either (argh, getting painfully close to \u201cjust use a database!\u201d), but that would be preferable to this I think.  </p>\n<p>Ian had a suggestion about this topic, but I forget what it was. I\u2019ll ask him if he remembers and add it to the discussion. But agree with declining this despite it solving the specific problem it was written to address.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2020-01-16T10:35:05.755552+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2020-01-16T10:35:05.768970+00:00", "type": "pullrequest_comment", "id": 131904497}], "page": 1, "size": 46}