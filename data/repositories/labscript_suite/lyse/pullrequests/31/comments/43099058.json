{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/31/comments/43099058.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/31/_/diff#comment-43099058"}}, "parent": {"id": 43054023, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/31/comments/43054023.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/31/_/diff#comment-43054023"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 31, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/31.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/31"}}, "title": "Fix a bug in updating the dataframe"}, "content": {"raw": "FYI issue 760 on redmine is titled \"Allow save_result functions to write to any group of the h5 file\".\n\n@rpanderson writes\n>The methods of the `Run` class `save_result(self, name, value)` and `save_result_array(self, name, data)` create attributes or datasets in `/results/<analysis script name>` of the h5 file. It is sometimes desirable to save analysis results elsewhere, e.g. when computing optical depth and doing fitting using lyse. In such a case, having the option to specify a different group to save the results in (e.g. `/images/side/absorption`) would be useful. Keyword arguments to handle overwrite and whether to retain existing attributes when overwriting a dataset are part of this feature.\n\n@cbillington writes\n> See `Run.set_group(groupname)`. It was designed for interactive use when the group name could not be inferred from the filename (since there is no filename in an interactive session), but should function equally well regardless. Just set it to what you want prior to saving results.\n>Edit: actually, I find this unpythonic. Keyword arguments it is.\n\n@rpanderson writes:\n>Implemented in changeset: 239d63d281e5.\n\n>`save_result` and `save_result_array` now take optional arguments `group` and `overwrite`, and `save_result_array` permits retention of existing attributes when overwriting an existing dataset (via `keep_attrs`). I've also added a method `save_results_dict(self, results_dict, uncertainties=False)` which writes a dictionary of named results as attributes, with the option to pass a dictionary of `parameter = (value, u_value)` tuples which we sometimes use when fitting. If `uncertainties = True`, two attributes will get created for each fit parameter: `parameter_name` and `u_parameter_name`.\n\n>Example of overwriting existing optical depth and fit results (originally computed and saved in BIAS):\n\n\n```\n#!python\n\nrun = Run(path)\npixel_size = run.get_image_attributes('side')['effective_pixel_size']\natoms, flat, dark = run.get_images('side', 'absorption', 'atoms', 'flat', 'dark')\nOD = compute_OD(atoms, flat, dark, Isat=4300, Icutoff=500, sigma=sigma0, pixel_size=pixel_size)\nrun.save_result_array('OD', OD.filled(nan).astype(float32), group='images/side/absorption')\n\nparams_dict, X_section, Y_section = fit_gaussian_2d(OD, binsize=5)\nparams_dict\n{'Gaussian_Amp': (3.6871784788483764, 0.024929261746463743),\n 'Gaussian_Nint': (593404.1971139349, 7480.5380538767058),\n 'Gaussian_Offset': (-0.015763284504394199, 0.0061598456960820537),\n 'Gaussian_X0': (597.584434588112, 1.120946081035924),\n 'Gaussian_XW': (165.80579548039267, 1.246639540138432),\n 'Gaussian_Y0': (589.54336642500766, 1.0443723155278906),\n 'Gaussian_YW': (154.48164257178246, 1.1629540148641577)}\n\nrun.save_results_dict(params_dict, group='images/side/absorption/OD', uncertainties=True)\n```\n", "markup": "markdown", "html": "<p>FYI issue 760 on redmine is titled \"Allow save_result functions to write to any group of the h5 file\".</p>\n<p>@rpanderson writes</p>\n<blockquote>\n<p>The methods of the <code>Run</code> class <code>save_result(self, name, value)</code> and <code>save_result_array(self, name, data)</code> create attributes or datasets in <code>/results/&lt;analysis script name&gt;</code> of the h5 file. It is sometimes desirable to save analysis results elsewhere, e.g. when computing optical depth and doing fitting using lyse. In such a case, having the option to specify a different group to save the results in (e.g. <code>/images/side/absorption</code>) would be useful. Keyword arguments to handle overwrite and whether to retain existing attributes when overwriting a dataset are part of this feature.</p>\n</blockquote>\n<p>@cbillington writes</p>\n<blockquote>\n<p>See <code>Run.set_group(groupname)</code>. It was designed for interactive use when the group name could not be inferred from the filename (since there is no filename in an interactive session), but should function equally well regardless. Just set it to what you want prior to saving results.\nEdit: actually, I find this unpythonic. Keyword arguments it is.</p>\n</blockquote>\n<p>@rpanderson writes:</p>\n<blockquote>\n<p>Implemented in changeset: <a href=\"#!/labscript_suite/lyse/commits/239d63d281e5\" rel=\"nofollow\" class=\"ap-connect-link\">239d63d281e5</a>.</p>\n<p><code>save_result</code> and <code>save_result_array</code> now take optional arguments <code>group</code> and <code>overwrite</code>, and <code>save_result_array</code> permits retention of existing attributes when overwriting an existing dataset (via <code>keep_attrs</code>). I've also added a method <code>save_results_dict(self, results_dict, uncertainties=False)</code> which writes a dictionary of named results as attributes, with the option to pass a dictionary of <code>parameter = (value, u_value)</code> tuples which we sometimes use when fitting. If <code>uncertainties = True</code>, two attributes will get created for each fit parameter: <code>parameter_name</code> and <code>u_parameter_name</code>.</p>\n<p>Example of overwriting existing optical depth and fit results (originally computed and saved in BIAS):</p>\n</blockquote>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"n\">Run</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"n\">pixel_size</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">get_image_attributes</span><span class=\"p\">(</span><span class=\"s1\">&#39;side&#39;</span><span class=\"p\">)[</span><span class=\"s1\">&#39;effective_pixel_size&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">atoms</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"p\">,</span> <span class=\"n\">dark</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">get_images</span><span class=\"p\">(</span><span class=\"s1\">&#39;side&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;absorption&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;atoms&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;flat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dark&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">OD</span> <span class=\"o\">=</span> <span class=\"n\">compute_OD</span><span class=\"p\">(</span><span class=\"n\">atoms</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"p\">,</span> <span class=\"n\">dark</span><span class=\"p\">,</span> <span class=\"n\">Isat</span><span class=\"o\">=</span><span class=\"mi\">4300</span><span class=\"p\">,</span> <span class=\"n\">Icutoff</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"n\">sigma0</span><span class=\"p\">,</span> <span class=\"n\">pixel_size</span><span class=\"o\">=</span><span class=\"n\">pixel_size</span><span class=\"p\">)</span>\n<span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">save_result_array</span><span class=\"p\">(</span><span class=\"s1\">&#39;OD&#39;</span><span class=\"p\">,</span> <span class=\"n\">OD</span><span class=\"o\">.</span><span class=\"n\">filled</span><span class=\"p\">(</span><span class=\"n\">nan</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">float32</span><span class=\"p\">),</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"s1\">&#39;images/side/absorption&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">params_dict</span><span class=\"p\">,</span> <span class=\"n\">X_section</span><span class=\"p\">,</span> <span class=\"n\">Y_section</span> <span class=\"o\">=</span> <span class=\"n\">fit_gaussian_2d</span><span class=\"p\">(</span><span class=\"n\">OD</span><span class=\"p\">,</span> <span class=\"n\">binsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">params_dict</span>\n<span class=\"p\">{</span><span class=\"s1\">&#39;Gaussian_Amp&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">3.6871784788483764</span><span class=\"p\">,</span> <span class=\"mf\">0.024929261746463743</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_Nint&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">593404.1971139349</span><span class=\"p\">,</span> <span class=\"mf\">7480.5380538767058</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_Offset&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.015763284504394199</span><span class=\"p\">,</span> <span class=\"mf\">0.0061598456960820537</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_X0&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">597.584434588112</span><span class=\"p\">,</span> <span class=\"mf\">1.120946081035924</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_XW&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">165.80579548039267</span><span class=\"p\">,</span> <span class=\"mf\">1.246639540138432</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_Y0&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">589.54336642500766</span><span class=\"p\">,</span> <span class=\"mf\">1.0443723155278906</span><span class=\"p\">),</span>\n <span class=\"s1\">&#39;Gaussian_YW&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">154.48164257178246</span><span class=\"p\">,</span> <span class=\"mf\">1.1629540148641577</span><span class=\"p\">)}</span>\n\n<span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">save_results_dict</span><span class=\"p\">(</span><span class=\"n\">params_dict</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"s1\">&#39;images/side/absorption/OD&#39;</span><span class=\"p\">,</span> <span class=\"n\">uncertainties</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-18T12:06:14.399982+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2017-08-18T12:06:14.618089+00:00", "type": "pullrequest_comment", "id": 43099058}