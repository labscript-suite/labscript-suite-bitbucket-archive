{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/34/comments/44399042.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/34/_/diff#comment-44399042"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 34, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/34.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/34"}}, "title": "MultiInstance"}, "content": {"raw": "Looks good!\n\nIn the analysis subprocess, could you also first read in the master lab config file and then the additional one (like we do in the main lyse process). That way we won't get confused in the future if we use labconfig for something else (and don't realise the main one isn't being loaded).\n\nOh....hmm. I just realised that of course the labconfig **is** loaded, but is done so in `lyse.init`. Where the `_lyse_port` is used, but also cached as the default value for the `port` in the `data` function. This default value (at least in a quick test in a python 2.7 terminal...not on this actual code) doesn't get overridden by your new code, so I think that means the analysis script reads data from the wrong instance? We probably need to convert the reading of the port (in `lyse.__init__` to be lazy again, and then I think it would be better if you used `_labconfig.read(additional_config)` in the analysis\\_subprocess.py code.", "markup": "markdown", "html": "<p>Looks good!</p>\n<p>In the analysis subprocess, could you also first read in the master lab config file and then the additional one (like we do in the main lyse process). That way we won't get confused in the future if we use labconfig for something else (and don't realise the main one isn't being loaded).</p>\n<p>Oh....hmm. I just realised that of course the labconfig <strong>is</strong> loaded, but is done so in <code>lyse.init</code>. Where the <code>_lyse_port</code> is used, but also cached as the default value for the <code>port</code> in the <code>data</code> function. This default value (at least in a quick test in a python 2.7 terminal...not on this actual code) doesn't get overridden by your new code, so I think that means the analysis script reads data from the wrong instance? We probably need to convert the reading of the port (in <code>lyse.__init__</code> to be lazy again, and then I think it would be better if you used <code>_labconfig.read(additional_config)</code> in the analysis_subprocess.py code.</p>", "type": "rendered"}, "created_on": "2017-09-07T00:21:14.618444+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-09-07T00:21:14.620952+00:00", "type": "pullrequest_comment", "id": 44399042}