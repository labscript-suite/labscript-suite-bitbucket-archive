{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/35/comments/44572634.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/35/_/diff#comment-44572634"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 35, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/35.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/35"}}, "title": "Make fancy plots easier"}, "content": {"raw": "This was suggested by and is sanctioned by me. There is no point in lyse creating an additional  canvas for each figure when the figures already have canvases that can be used. The only reason we did this initially was to force the canvas to be that of a particular backend. But since lyse sets the matplotlib backend earlier, the canvas already created for the figure object is guaranteed to be the correct kind. So manually creating a canvas was always pointless.\n\nSo lyse can use the existing canvas with no problems. This makes lyse play nicer with analysis routines with plots that have user-made signal connections for things like manipulating the plot using sliders and such, because it doesn't pull the canvas out from under the user after they may have connected signals for their functionality. The result is closer to the behaviour one would expect when running matplotlib code outside of lyse and should result in fewer surprises for anyone who tries to do clever things with plotting.", "markup": "markdown", "html": "<p>This was suggested by and is sanctioned by me. There is no point in lyse creating an additional  canvas for each figure when the figures already have canvases that can be used. The only reason we did this initially was to force the canvas to be that of a particular backend. But since lyse sets the matplotlib backend earlier, the canvas already created for the figure object is guaranteed to be the correct kind. So manually creating a canvas was always pointless.</p>\n<p>So lyse can use the existing canvas with no problems. This makes lyse play nicer with analysis routines with plots that have user-made signal connections for things like manipulating the plot using sliders and such, because it doesn't pull the canvas out from under the user after they may have connected signals for their functionality. The result is closer to the behaviour one would expect when running matplotlib code outside of lyse and should result in fewer surprises for anyone who tries to do clever things with plotting.</p>", "type": "rendered"}, "created_on": "2017-09-08T18:05:00.502088+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-09-08T18:05:00.506634+00:00", "type": "pullrequest_comment", "id": 44572634}