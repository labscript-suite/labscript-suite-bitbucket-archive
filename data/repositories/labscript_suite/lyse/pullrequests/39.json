{"rendered": {"description": {"raw": "Support integer indexing of the lyse DataFrame, using a MultiIndex of: `['sequence_index', 'run number', 'run repeat']`\r\n\r\nThis can be enabled in labconfig using:\r\n\r\n    [lyse]\r\n    integer_indexing = true\r\n\r\nIf this section or option are absent from the labconfig file, fallback to the existing MultiIndex of: `['sequence', 'run time']`.\r\n\r\nThis feature supports much easier use of `pd.DataFrame.loc`, e.g.\r\n\r\n```python\r\ndf = lyse.data()\r\ndf.loc[56]       # sequence 56 MultiIndexed by ['run number', 'repeat number']\r\ndf.loc[56:60]    # sequences 56 through 60 inclusive\r\ndf.loc[56,4]     # run number 4 of sequence 56, indexed by 'repeat number'\r\ndf.loc[56,2:6,:] # runs 2 through 6 (inclusive) of sequence 56\r\n```\r\n\r\nEnabling this feature changes the vertical header item to read, e.g. '105. 0056 \\| 0001 \\| 0106'.\r\n\r\nThis is far more useful, as these integers can all be used to construct a `pd.DataFrame.loc` or `pd.DataFrame.iloc` call to the lyse DataFrame.\r\n\r\nThe main problem with this feature is that the MultiIndex might not be unique if new shots are sent to or loaded into lyse with an existing sequence\\_index, e.g. if the sequence\\_index gets reset in runmanager or shots are loaded from multiple days. This can be avoided in user-side analysis code by boolean filtering based on the 'run time' column.", "markup": "markdown", "html": "<p>Support integer indexing of the lyse DataFrame, using a MultiIndex of: <code>['sequence_index', 'run number', 'run repeat']</code></p>\n<p>This can be enabled in labconfig using:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[lyse]</span>\n<span class=\"na\">integer_indexing</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</pre></div>\n\n\n<p>If this section or option are absent from the labconfig file, fallback to the existing MultiIndex of: <code>['sequence', 'run time']</code>.</p>\n<p>This feature supports much easier use of <code>pd.DataFrame.loc</code>, e.g.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">lyse</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">]</span>       <span class=\"c1\"># sequence 56 MultiIndexed by [&#39;run number&#39;, &#39;repeat number&#39;]</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">]</span>    <span class=\"c1\"># sequences 56 through 60 inclusive</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>     <span class=\"c1\"># run number 4 of sequence 56, indexed by &#39;repeat number&#39;</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,:]</span> <span class=\"c1\"># runs 2 through 6 (inclusive) of sequence 56</span>\n</pre></div>\n\n\n<p>Enabling this feature changes the vertical header item to read, e.g. '105. 0056 \\| 0001 \\| 0106'.</p>\n<p>This is far more useful, as these integers can all be used to construct a <code>pd.DataFrame.loc</code> or <code>pd.DataFrame.iloc</code> call to the lyse DataFrame.</p>\n<p>The main problem with this feature is that the MultiIndex might not be unique if new shots are sent to or loaded into lyse with an existing sequence_index, e.g. if the sequence_index gets reset in runmanager or shots are loaded from multiple days. This can be avoided in user-side analysis code by boolean filtering based on the 'run time' column.</p>", "type": "rendered"}, "title": {"raw": "Integer indexing of the lyse DataFrame", "markup": "markdown", "html": "<p>Integer indexing of the lyse DataFrame</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Support integer indexing of the lyse DataFrame, using a MultiIndex of: `['sequence_index', 'run number', 'run repeat']`\r\n\r\nThis can be enabled in labconfig using:\r\n\r\n    [lyse]\r\n    integer_indexing = true\r\n\r\nIf this section or option are absent from the labconfig file, fallback to the existing MultiIndex of: `['sequence', 'run time']`.\r\n\r\nThis feature supports much easier use of `pd.DataFrame.loc`, e.g.\r\n\r\n```python\r\ndf = lyse.data()\r\ndf.loc[56]       # sequence 56 MultiIndexed by ['run number', 'repeat number']\r\ndf.loc[56:60]    # sequences 56 through 60 inclusive\r\ndf.loc[56,4]     # run number 4 of sequence 56, indexed by 'repeat number'\r\ndf.loc[56,2:6,:] # runs 2 through 6 (inclusive) of sequence 56\r\n```\r\n\r\nEnabling this feature changes the vertical header item to read, e.g. '105. 0056 \\| 0001 \\| 0106'.\r\n\r\nThis is far more useful, as these integers can all be used to construct a `pd.DataFrame.loc` or `pd.DataFrame.iloc` call to the lyse DataFrame.\r\n\r\nThe main problem with this feature is that the MultiIndex might not be unique if new shots are sent to or loaded into lyse with an existing sequence\\_index, e.g. if the sequence\\_index gets reset in runmanager or shots are loaded from multiple days. This can be avoided in user-side analysis code by boolean filtering based on the 'run time' column.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/39/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/diffstat/labscript_suite/lyse:a0014cba8d91%0De58d25d6b8ef?from_pullrequest_id=39"}, "commits": {"href": "data/repositories/labscript_suite/lyse/pullrequests/39/commits.json"}, "self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/39.json"}, "comments": {"href": "data/repositories/labscript_suite/lyse/pullrequests/39/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/39/merge"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/39"}, "activity": {"href": "data/repositories/labscript_suite/lyse/pullrequests/39/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/diff/labscript_suite/lyse:a0014cba8d91%0De58d25d6b8ef?from_pullrequest_id=39"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/lyse/pullrequests/39/approve"}, "statuses": {"href": "data/repositories/labscript_suite/lyse/pullrequests/39/statuses_page=1.json"}}, "title": "Integer indexing of the lyse DataFrame", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}], "id": 39, "destination": {"commit": {"hash": "e58d25d6b8ef", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/e58d25d6b8ef.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/e58d25d6b8ef"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "created_on": "2017-11-09T03:25:14.360971+00:00", "summary": {"raw": "Support integer indexing of the lyse DataFrame, using a MultiIndex of: `['sequence_index', 'run number', 'run repeat']`\r\n\r\nThis can be enabled in labconfig using:\r\n\r\n    [lyse]\r\n    integer_indexing = true\r\n\r\nIf this section or option are absent from the labconfig file, fallback to the existing MultiIndex of: `['sequence', 'run time']`.\r\n\r\nThis feature supports much easier use of `pd.DataFrame.loc`, e.g.\r\n\r\n```python\r\ndf = lyse.data()\r\ndf.loc[56]       # sequence 56 MultiIndexed by ['run number', 'repeat number']\r\ndf.loc[56:60]    # sequences 56 through 60 inclusive\r\ndf.loc[56,4]     # run number 4 of sequence 56, indexed by 'repeat number'\r\ndf.loc[56,2:6,:] # runs 2 through 6 (inclusive) of sequence 56\r\n```\r\n\r\nEnabling this feature changes the vertical header item to read, e.g. '105. 0056 \\| 0001 \\| 0106'.\r\n\r\nThis is far more useful, as these integers can all be used to construct a `pd.DataFrame.loc` or `pd.DataFrame.iloc` call to the lyse DataFrame.\r\n\r\nThe main problem with this feature is that the MultiIndex might not be unique if new shots are sent to or loaded into lyse with an existing sequence\\_index, e.g. if the sequence\\_index gets reset in runmanager or shots are loaded from multiple days. This can be avoided in user-side analysis code by boolean filtering based on the 'run time' column.", "markup": "markdown", "html": "<p>Support integer indexing of the lyse DataFrame, using a MultiIndex of: <code>['sequence_index', 'run number', 'run repeat']</code></p>\n<p>This can be enabled in labconfig using:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[lyse]</span>\n<span class=\"na\">integer_indexing</span> <span class=\"o\">=</span> <span class=\"s\">true</span>\n</pre></div>\n\n\n<p>If this section or option are absent from the labconfig file, fallback to the existing MultiIndex of: <code>['sequence', 'run time']</code>.</p>\n<p>This feature supports much easier use of <code>pd.DataFrame.loc</code>, e.g.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">lyse</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">()</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">]</span>       <span class=\"c1\"># sequence 56 MultiIndexed by [&#39;run number&#39;, &#39;repeat number&#39;]</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">:</span><span class=\"mi\">60</span><span class=\"p\">]</span>    <span class=\"c1\"># sequences 56 through 60 inclusive</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>     <span class=\"c1\"># run number 4 of sequence 56, indexed by &#39;repeat number&#39;</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"mi\">56</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,:]</span> <span class=\"c1\"># runs 2 through 6 (inclusive) of sequence 56</span>\n</pre></div>\n\n\n<p>Enabling this feature changes the vertical header item to read, e.g. '105. 0056 \\| 0001 \\| 0106'.</p>\n<p>This is far more useful, as these integers can all be used to construct a <code>pd.DataFrame.loc</code> or <code>pd.DataFrame.iloc</code> call to the lyse DataFrame.</p>\n<p>The main problem with this feature is that the MultiIndex might not be unique if new shots are sent to or loaded into lyse with an existing sequence_index, e.g. if the sequence_index gets reset in runmanager or shots are loaded from multiple days. This can be avoided in user-side analysis code by boolean filtering based on the 'run time' column.</p>", "type": "rendered"}, "source": {"commit": {"hash": "04751559ac2d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/lyse/commit/04751559ac2d"}, "html": {"href": "#!/monashspinor/lyse/commits/04751559ac2d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/lyse"}, "html": {"href": "#!/monashspinor/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc4f4324-6fe7-4c56-adaf-c4e726bd4914}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "monashspinor/lyse", "uuid": "{bc4f4324-6fe7-4c56-adaf-c4e726bd4914}"}, "branch": {"name": "integer_indexing"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-11-10T14:17:31.970020+00:00", "type": "participant", "approved": false, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2017-11-15T14:51:49.491091+00:00", "type": "participant", "approved": true, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}], "reason": "", "updated_on": "2017-11-21T01:32:55.896417+00:00", "author": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "merge_commit": {"hash": "a0014cba8d91", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/a0014cba8d91.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/a0014cba8d91"}}}, "closed_by": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}