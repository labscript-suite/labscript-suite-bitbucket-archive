{"pagelen": 50, "values": [{"update": {"description": "Performance optimisation based on pull request #24\r\n\r\n* lookup rows in dataframe by filepath using a dictionary cache rather\r\n  than searching the dataframe. This removes the need for the method\r\n  get_model_row_by_filepath(), so it has been removed and the dictionary used\r\n  directly.\r\n\r\n* Remove redundant getting of the row index again for the Qt model - it is\r\n  the same row as the dataframe\r\n\r\n* Avoid setting the text of a QStandardItem twice by only creating it once\r\n  the text it should have is known\r\n\r\n* Add an argument to renumber_rows() that allows it to only renumber recent\r\n  rows for the case that new rows have been added and don't have numbers yet\r\n  but the existing row numbers are still valid\r\n\r\n* Modify batch processing of shot files to use a dynamic batch size, with\r\n  larger batches the more shots lyse has loaded. This is a good tradeoff\r\n  between GUI responsiveness when there are a small number of shot files\r\n  and speed when loading a large number of shot files. The batch size is 1/3\r\n  of the number of shots. Larger batch sizes mean less redundant concatenation\r\n  of dataframes.\r\n\r\n* Modify the progress bar message to say when it's reading shot files\r\n  vs concatenating dataframes vs updating the filebox GUI.", "title": "Performance optimisation.", "destination": {"commit": {"hash": "2cc4c90d8ff2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2cc4c90d8ff2.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2cc4c90d8ff2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f0ba6d5bba19", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/f0ba6d5bba19"}, "html": {"href": "#!/cbillington/lyse/commits/f0ba6d5bba19"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T22:29:33.832471+00:00"}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"update": {"description": "Performance optimisation based on pull request #24\r\n\r\n* lookup rows in dataframe by filepath using a dictionary cache rather\r\n  than searching the dataframe. This removes the need for the method\r\n  get_model_row_by_filepath(), so it has been removed and the dictionary used\r\n  directly.\r\n\r\n* Remove redundant getting of the row index again for the Qt model - it is\r\n  the same row as the dataframe\r\n\r\n* Avoid setting the text of a QStandardItem twice by only creating it once\r\n  the text it should have is known\r\n\r\n* Add an argument to renumber_rows() that allows it to only renumber recent\r\n  rows for the case that new rows have been added and don't have numbers yet\r\n  but the existing row numbers are still valid\r\n\r\n* Modify batch processing of shot files to use a dynamic batch size, with\r\n  larger batches the more shots lyse has loaded. This is a good tradeoff\r\n  between GUI responsiveness when there are a small number of shot files\r\n  and speed when loading a large number of shot files. The batch size is 1/3\r\n  of the number of shots. Larger batch sizes mean less redundant concatenation\r\n  of dataframes.\r\n\r\n* Modify the progress bar message to say when it's reading shot files\r\n  vs concatenating dataframes vs updating the filebox GUI.", "title": "Performance optimisation.", "destination": {"commit": {"hash": "2cc4c90d8ff2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2cc4c90d8ff2.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2cc4c90d8ff2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f0ba6d5bba19", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/f0ba6d5bba19"}, "html": {"href": "#!/cbillington/lyse/commits/f0ba6d5bba19"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T22:29:33.290986+00:00"}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57350932.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57350932"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "content": {"raw": "Excellent, thanks again for the testing!", "markup": "markdown", "html": "<p>Excellent, thanks again for the testing!</p>", "type": "rendered"}, "created_on": "2018-02-26T22:29:25.196283+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-02-26T22:29:25.199656+00:00", "type": "pullrequest_comment", "id": 57350932}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"approval": {"date": "2018-02-26T12:53:59.109492+00:00", "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57284946.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57284946"}}, "parent": {"id": 57276947, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57276947.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57276947"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "content": {"raw": "The new commit fixed the issues I had. ", "markup": "markdown", "html": "<p>The new commit fixed the issues I had. </p>", "type": "rendered"}, "created_on": "2018-02-26T12:53:49.713883+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-02-26T12:53:49.753232+00:00", "type": "pullrequest_comment", "id": 57284946}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57264518.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57264518"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "content": {"raw": "If a shot is deleted it is currently not beging removed from the cache dictionary", "markup": "markdown", "html": "<p>If a shot is deleted it is currently not beging removed from the cache dictionary</p>", "type": "rendered"}, "created_on": "2018-02-26T10:02:07.635861+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-02-26T12:52:28.317314+00:00", "type": "pullrequest_comment", "id": 57264518}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57276947.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57276947"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "content": {"raw": "Thanks for testing!\n\nThe bug with integer indexing was because I didn't update the dataframe before calling `renumber_rows()` when adding shots, which violated the assumptions of the `renumber_rows()` function (I was updating the dataframe after calling it). That should be fixed now.\n\nI can't reproduce shots not being removed from the cache - but, since that occurs in `renumber_rows()`, it's possible that if you were catching errors there and telling it to return or something like that, that the renumbering would have not been done correctly on account of that.\n\nCould you let me know if the commit I pushed fixes both the issues for you?", "markup": "markdown", "html": "<p>Thanks for testing!</p>\n<p>The bug with integer indexing was because I didn't update the dataframe before calling <code>renumber_rows()</code> when adding shots, which violated the assumptions of the <code>renumber_rows()</code> function (I was updating the dataframe after calling it). That should be fixed now.</p>\n<p>I can't reproduce shots not being removed from the cache - but, since that occurs in <code>renumber_rows()</code>, it's possible that if you were catching errors there and telling it to return or something like that, that the renumbering would have not been done correctly on account of that.</p>\n<p>Could you let me know if the commit I pushed fixes both the issues for you?</p>", "type": "rendered"}, "created_on": "2018-02-26T11:43:51.918153+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-02-26T11:43:51.923597+00:00", "type": "pullrequest_comment", "id": 57276947}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"update": {"description": "Performance optimisation based on pull request #24\r\n\r\n* lookup rows in dataframe by filepath using a dictionary cache rather\r\n  than searching the dataframe. This removes the need for the method\r\n  get_model_row_by_filepath(), so it has been removed and the dictionary used\r\n  directly.\r\n\r\n* Remove redundant getting of the row index again for the Qt model - it is\r\n  the same row as the dataframe\r\n\r\n* Avoid setting the text of a QStandardItem twice by only creating it once\r\n  the text it should have is known\r\n\r\n* Add an argument to renumber_rows() that allows it to only renumber recent\r\n  rows for the case that new rows have been added and don't have numbers yet\r\n  but the existing row numbers are still valid\r\n\r\n* Modify batch processing of shot files to use a dynamic batch size, with\r\n  larger batches the more shots lyse has loaded. This is a good tradeoff\r\n  between GUI responsiveness when there are a small number of shot files\r\n  and speed when loading a large number of shot files. The batch size is 1/3\r\n  of the number of shots. Larger batch sizes mean less redundant concatenation\r\n  of dataframes.\r\n\r\n* Modify the progress bar message to say when it's reading shot files\r\n  vs concatenating dataframes vs updating the filebox GUI.", "title": "Performance optimisation.", "destination": {"commit": {"hash": "2cc4c90d8ff2", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/2cc4c90d8ff2.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/2cc4c90d8ff2"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "f0ba6d5bba19", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/f0ba6d5bba19"}, "html": {"href": "#!/cbillington/lyse/commits/f0ba6d5bba19"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T11:36:28.097204+00:00"}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40/comments/57263220.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40/_/diff#comment-57263220"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}, "content": {"raw": "I tested this in respect to loading lots of shots and it seems to be a bit faster than my original pull request. However there seems to be some sort of bug, when it comes to using the new integer indexing feature:\n\nI get a Exception when using integer indexing:\n\n```python\nTraceback (most recent call last):\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/threading.py\", line 754, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/zprocess/__init__.py\", line 67, in _reraise\n    exec('raise type, value, traceback', globals(), locals())\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1755, in incoming_buffer_loop\n    self.shots_model.add_files(filepaths, new_row_data)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 224, in f\n    return inmain(fn, *args, **kwargs)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 95, in inmain\n    return get_inmain_result(_in_main_later(fn, False, *args, **kwargs))\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 158, in get_inmain_result\n    exec('raise type, value, traceback')\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py\", line 53, in event\n    result = event.fn(*event.args, **event.kwargs)\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1545, in add_files\n    self.renumber_rows(add_from=self._model.rowCount()-len(to_add))\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1509, in renumber_rows\n    val = self.dataframe[col].values[row_number]\nIndexError: index 14 is out of bounds for axis 0 with size 2\n```\n\nIf I catch it only the first 8 rows have their integer indexing shown. All other rows turn to `----|----|----`\n\n\u200c\n\n![integer\\_indexing.png](https://bitbucket.org/repo/BMBAeq/images/984855804-integer\\_indexing.png 'integer\\_indexing.png')\n\n\u200c", "markup": "markdown", "html": "<p>I tested this in respect to loading lots of shots and it seems to be a bit faster than my original pull request. However there seems to be some sort of bug, when it comes to using the new integer indexing feature:</p>\n<p>I get a Exception when using integer indexing:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/threading.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">754</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__target</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/zprocess/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_reraise</span>\n    <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"s1\">&#39;raise type, value, traceback&#39;</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">())</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1755</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">incoming_buffer_loop</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shots_model</span><span class=\"o\">.</span><span class=\"n\">add_files</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">,</span> <span class=\"n\">new_row_data</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">f</span>\n    <span class=\"k\">return</span> <span class=\"n\">inmain</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">inmain</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_inmain_result</span><span class=\"p\">(</span><span class=\"n\">_in_main_later</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">158</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">get_inmain_result</span>\n    <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"s1\">&#39;raise type, value, traceback&#39;</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/site-packages/qtutils/invoke_in_main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">53</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">event</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1545</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">add_files</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renumber_rows</span><span class=\"p\">(</span><span class=\"n\">add_from</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_model</span><span class=\"o\">.</span><span class=\"n\">rowCount</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">to_add</span><span class=\"p\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1509</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">renumber_rows</span>\n    <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"n\">row_number</span><span class=\"p\">]</span>\n<span class=\"ne\">IndexError</span><span class=\"p\">:</span> <span class=\"n\">index</span> <span class=\"mi\">14</span> <span class=\"ow\">is</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">bounds</span> <span class=\"k\">for</span> <span class=\"n\">axis</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">size</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>If I catch it only the first 8 rows have their integer indexing shown. All other rows turn to <code>----|----|----</code></p>\n<p>\u200c</p>\n<p><img alt=\"integer_indexing.png\" src=\"data/bitbucket.org/repo/BMBAeq/images/984855804-integer95indexing.png\" title=\"integer_indexing.png\" /></p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2018-02-26T09:53:20.270439+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2018-02-26T09:56:32.962310+00:00", "type": "pullrequest_comment", "id": 57263220}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"update": {"description": "Performance optimisation based on pull request #24\r\n\r\n* lookup rows in dataframe by filepath using a dictionary cache rather\r\n  than searching the dataframe. This removes the need for the method\r\n  get_model_row_by_filepath(), so it has been removed and the dictionary used\r\n  directly.\r\n\r\n* Remove redundant getting of the row index again for the Qt model - it is\r\n  the same row as the dataframe\r\n\r\n* Avoid setting the text of a QStandardItem twice by only creating it once\r\n  the text it should have is known\r\n\r\n* Add an argument to renumber_rows() that allows it to only renumber recent\r\n  rows for the case that new rows have been added and don't have numbers yet\r\n  but the existing row numbers are still valid\r\n\r\n* Modify batch processing of shot files to use a dynamic batch size, with\r\n  larger batches the more shots lyse has loaded. This is a good tradeoff\r\n  between GUI responsiveness when there are a small number of shot files\r\n  and speed when loading a large number of shot files. The batch size is 1/3\r\n  of the number of shots. Larger batch sizes mean less redundant concatenation\r\n  of dataframes.\r\n\r\n* Modify the progress bar message to say when it's reading shot files\r\n  vs concatenating dataframes vs updating the filebox GUI.", "title": "Performance optimisation.", "destination": {"commit": {"hash": "b90281ed6296", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b90281ed6296.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b90281ed6296"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b032e5ab9c8d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/b032e5ab9c8d"}, "html": {"href": "#!/cbillington/lyse/commits/b032e5ab9c8d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T06:17:54.201388+00:00"}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}, {"update": {"description": "Performance optimisation based on pull request #24\r\n\r\n* lookup rows in dataframe by filepath using a dictionary cache rather\r\n  than searching the dataframe. This removes the need for the method\r\n  get_model_row_by_filepath(), so it has been removed and the dictionary used\r\n  directly.\r\n\r\n* Remove redundant getting of the row index again for the Qt model - it is\r\n  the same row as the dataframe\r\n\r\n* Avoid setting the text of a QStandardItem twice by only creating it once\r\n  the text it should have is known\r\n\r\n* Add an argument to renumber_rows() that allows it to only renumber recent\r\n  rows for the case that new rows have been added and don't have numbers yet\r\n  but the existing row numbers are still valid\r\n\r\n* Modify batch processing of shot files to use a dynamic batch size, with\r\n  larger batches the more shots lyse has loaded. This is a good tradeoff\r\n  between GUI responsiveness when there are a small number of shot files\r\n  and speed when loading a large number of shot files. The batch size is 1/3\r\n  of the number of shots. Larger batch sizes mean less redundant concatenation\r\n  of dataframes.\r\n\r\n* Modify the progress bar message to say when it's reading shot files\r\n  vs concatenating dataframes vs updating the filebox GUI.", "title": "Performance optimisation.", "destination": {"commit": {"hash": "b90281ed6296", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/b90281ed6296.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/b90281ed6296"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "b032e5ab9c8d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/b032e5ab9c8d"}, "html": {"href": "#!/cbillington/lyse/commits/b032e5ab9c8d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "feature"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-02-26T06:17:54.128962+00:00"}, "pull_request": {"type": "pullrequest", "id": 40, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/40.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/40"}}, "title": "Performance optimisation."}}]}