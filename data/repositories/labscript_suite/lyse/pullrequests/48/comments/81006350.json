{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/48/comments/81006350.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/48/_/diff#comment-81006350"}}, "parent": {"id": 81005763, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/48/comments/81005763.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/48/_/diff#comment-81005763"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 48, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/48.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/48"}}, "title": "Bugfix and remove deprecated code"}, "content": {"raw": "That one's different. That's the result of a workaround in `labscript_utils.h5_lock` that monkeypatches h5py, without which there'd be an exception instead of bytestrings being stored. This is also on its way to be included in h5py ([pull request](https://github.com/h5py/h5py/pull/1032)), and we can remove the workaround once a new h5py is out with the fix.\n\nThe globals are being saved as native strings, so if runmanager is in Python 2 they'll be bytestrings and if runmanager is Python 3 they'll be saved as unicode strings.\n\nRunmanager doesn't have the `unicode_literals` future import in the context in which it evaluates globals, otherwise it would save unicode strings on both versions. We turned off `unicode_literals` in this context intentionally to avoid the \"can't save tuples of strings\" bug, but now that we have a workaround we can probably turn `unicode_literals` back on. That way the globals written by Python 2 will be readable by Python 3. And compatibility the other way will be fine since the two string types are pretty interchangeable in Python 2. We can remove the workaround soon - the pull request was sitting there for months waiting for me to write the required documentation change, but I finally did that the other day and it looks like it will be in the next version to be released.\n\nSo I propose we re-add `unicode_literals` to the context in which runmanager evaluates its globals. This can be done just by deleting `dont_inherit=True` from [this line](#!/labscript_suite/runmanager/src/ade64c333f8bec6d1ebe38173f8ebd894e99e6de/__init__.py?at=default&fileviewer=file-view-default#__init__.py-413).\n\nEdit: actually, I described things a little wrong. Without the monkeypatch, Python 2 would still save arrays of bytestrings. With the monkeypatch, it will also save arrays of bytestrings, but *could* save arrays of unicode strings too (such as if `unicode_literals` are turned on in the globals evaluation context). Without the monkeypatch, if `unicode_literals` is on, you get a TypeError trying to save the attribute. ", "markup": "markdown", "html": "<p>That one's different. That's the result of a workaround in <code>labscript_utils.h5_lock</code> that monkeypatches h5py, without which there'd be an exception instead of bytestrings being stored. This is also on its way to be included in h5py (<a data-is-external-link=\"true\" href=\"https://github.com/h5py/h5py/pull/1032\" rel=\"nofollow\">pull request</a>), and we can remove the workaround once a new h5py is out with the fix.</p>\n<p>The globals are being saved as native strings, so if runmanager is in Python 2 they'll be bytestrings and if runmanager is Python 3 they'll be saved as unicode strings.</p>\n<p>Runmanager doesn't have the <code>unicode_literals</code> future import in the context in which it evaluates globals, otherwise it would save unicode strings on both versions. We turned off <code>unicode_literals</code> in this context intentionally to avoid the \"can't save tuples of strings\" bug, but now that we have a workaround we can probably turn <code>unicode_literals</code> back on. That way the globals written by Python 2 will be readable by Python 3. And compatibility the other way will be fine since the two string types are pretty interchangeable in Python 2. We can remove the workaround soon - the pull request was sitting there for months waiting for me to write the required documentation change, but I finally did that the other day and it looks like it will be in the next version to be released.</p>\n<p>So I propose we re-add <code>unicode_literals</code> to the context in which runmanager evaluates its globals. This can be done just by deleting <code>dont_inherit=True</code> from <a data-is-external-link=\"true\" href=\"#!/labscript_suite/runmanager/src/ade64c333f8bec6d1ebe38173f8ebd894e99e6de/__init__.py?at=default&amp;fileviewer=file-view-default#__init__.py-413\" rel=\"nofollow\">this line</a>.</p>\n<p>Edit: actually, I described things a little wrong. Without the monkeypatch, Python 2 would still save arrays of bytestrings. With the monkeypatch, it will also save arrays of bytestrings, but <em>could</em> save arrays of unicode strings too (such as if <code>unicode_literals</code> are turned on in the globals evaluation context). Without the monkeypatch, if <code>unicode_literals</code> is on, you get a TypeError trying to save the attribute. </p>", "type": "rendered"}, "created_on": "2018-11-01T01:14:44.048503+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-11-01T01:23:58.161896+00:00", "type": "pullrequest_comment", "id": 81006350}