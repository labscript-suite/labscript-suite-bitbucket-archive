{"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/6/comments/31956522.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/6/_/diff#comment-31956522"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 6, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/6.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/6"}}, "title": "Added an object lyse.routine_storage"}, "content": {"raw": "It might look like monkey patching, but my idea was to try and make it look like a module or a `threading.local()` object, which use ordinary attribute assignment and access. So I think that is simplest and not particularly hacky or unpythonic.\n\nSince the class is totally blank, its `__dict__` attribute contains any attributes the user has added, so they can be introspected without the need for intercepting them with get and set methods. In fact, pickling the whole instance merely saves `__dict__`, so I would recommend users do that if they want to save the things in this object. But at that point, they might as well be pickling their own data and saving it to disk without this object.\n\nI think we should resist adding any sort of disk persistence, because a) it's fairly trivial for the user to save something pickleable, so if that's their use case, the extra abstraction layer doesn't add anything (and in fact is limiting unless we expose 100% of the pickle interface, which defeats the purpose of abstraction), and b) it's hard to make general purpose persistence, so the user should make standalone programs talking to lyse scripts over zeromq if they want non-pickleable data to outlive a lyse subprocess. \n\nPerhaps \"persistent storage\" is a misnomer though, since in many contexts this implied to-disk. Suggest rename to \"routine_storage\".", "markup": "markdown", "html": "<p>It might look like monkey patching, but my idea was to try and make it look like a module or a <code>threading.local()</code> object, which use ordinary attribute assignment and access. So I think that is simplest and not particularly hacky or unpythonic.</p>\n<p>Since the class is totally blank, its <code>__dict__</code> attribute contains any attributes the user has added, so they can be introspected without the need for intercepting them with get and set methods. In fact, pickling the whole instance merely saves <code>__dict__</code>, so I would recommend users do that if they want to save the things in this object. But at that point, they might as well be pickling their own data and saving it to disk without this object.</p>\n<p>I think we should resist adding any sort of disk persistence, because a) it's fairly trivial for the user to save something pickleable, so if that's their use case, the extra abstraction layer doesn't add anything (and in fact is limiting unless we expose 100% of the pickle interface, which defeats the purpose of abstraction), and b) it's hard to make general purpose persistence, so the user should make standalone programs talking to lyse scripts over zeromq if they want non-pickleable data to outlive a lyse subprocess. </p>\n<p>Perhaps \"persistent storage\" is a misnomer though, since in many contexts this implied to-disk. Suggest rename to \"routine_storage\".</p>", "type": "rendered"}, "created_on": "2017-02-22T15:46:05.629062+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-02-22T15:48:05.456898+00:00", "type": "pullrequest_comment", "id": 31956522}