{"pagelen": 50, "values": [{"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)\r\n\r\nActually, further change: make `analysis_subprocess.py` not even the `__main__` module when run in the usual way from lyse. Create a module object for the user's\r\nanalysis routine and insert it into sys.modules as the `__main__` module\r\n(and rename the analysis_subprocess module from `__main__` to\r\n`_analysis_subprocess`). Run the user's code in that module's `__dict__`,\r\nresetting the dict to its initial state each run.\r\n\r\nThis should enable multiprocessing code to find the `__main__` module and have it refer to the user's analysis routine script instead of `analysis_subprocess.py`.", "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "080da0076ab4", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/080da0076ab4.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/080da0076ab4"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c9ba4dfd251", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4c9ba4dfd251"}, "html": {"href": "#!/cbillington/lyse/commits/4c9ba4dfd251"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-06T17:31:53.434106+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)\r\n\r\nActually, further change: make `analysis_subprocess.py` not even the `__main__` module when run in the usual way from lyse. Create a module object for the user's\r\nanalysis routine and insert it into sys.modules as the `__main__` module\r\n(and rename the analysis_subprocess module from `__main__` to\r\n`_analysis_subprocess`). Run the user's code in that module's `__dict__`,\r\nresetting the dict to its initial state each run.\r\n\r\nThis should enable multiprocessing code to find the `__main__` module and have it refer to the user's analysis routine script instead of `analysis_subprocess.py`.", "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "51732f11fd67", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/51732f11fd67.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/51732f11fd67"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c9ba4dfd251", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4c9ba4dfd251"}, "html": {"href": "#!/cbillington/lyse/commits/4c9ba4dfd251"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-06T17:31:52.581453+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/101025517.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-101025517"}}, "parent": {"id": 100920048, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100920048.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100920048"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "I was able to reproduce (perhaps the other Windows host was using an older zprocess? I only switched it from command line argument to environment variable a few commits ago), and have updated zprocess to not leak the environment variable to child processes, and verified it works. It also deletes it from the current environment, so it shouldn't show up in process explorer for any processes.\n\nFrom what I can gather reading online, one needs to have permission to read a process's memory in order to get its environment variables, so that seems pretty secure to me - it's limited to users that can interact with each other's processes, and the administrator. So whilst there is only now a brief time at startup where process explorer will show ZPROCESS_PARENTINFO for a zprocess subprocess, it will only show you it if you own the process or are the admin.  I can see that if I run process explorer as a normal user, and try to view environment variables of system processes, they are blank, but if I run process explorer as admin, I can see those process's environment variables.", "markup": "markdown", "html": "<p>I was able to reproduce (perhaps the other Windows host was using an older zprocess? I only switched it from command line argument to environment variable a few commits ago), and have updated zprocess to not leak the environment variable to child processes, and verified it works. It also deletes it from the current environment, so it shouldn't show up in process explorer for any processes.</p>\n<p>From what I can gather reading online, one needs to have permission to read a process's memory in order to get its environment variables, so that seems pretty secure to me - it's limited to users that can interact with each other's processes, and the administrator. So whilst there is only now a brief time at startup where process explorer will show ZPROCESS_PARENTINFO for a zprocess subprocess, it will only show you it if you own the process or are the admin.  I can see that if I run process explorer as a normal user, and try to view environment variables of system processes, they are blank, but if I run process explorer as admin, I can see those process's environment variables.</p>", "type": "rendered"}, "created_on": "2019-05-06T16:36:37.605389+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-06T16:36:37.620155+00:00", "type": "pullrequest_comment", "id": 101025517}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)\r\n\r\nActually, further change: make `analysis_subprocess.py` not even the `__main__` module when run in the usual way from lyse. Create a module object for the user's\r\nanalysis routine and insert it into sys.modules as the `__main__` module\r\n(and rename the analysis_subprocess module from `__main__` to\r\n`_analysis_subprocess`). Run the user's code in that module's `__dict__`,\r\nresetting the dict to its initial state each run.\r\n\r\nThis should enable multiprocessing code to find the `__main__` module and have it refer to the user's analysis routine script instead of `analysis_subprocess.py`.", "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "4c9ba4dfd251", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/4c9ba4dfd251"}, "html": {"href": "#!/cbillington/lyse/commits/4c9ba4dfd251"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-06T15:34:16.568285+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100907353.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100907353"}}, "parent": {"id": 100904961, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100904961.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100904961"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "Sorry, I\u2019ve struggled to get a minimal breaking example \u2018working\u2019. The unterminated subprocesses derive from subclasses of `multiprocessing.Process` in [M-LOOP/learners.py](https://github.com/michaelhush/M-LOOP/blob/master/mloop/learners.py). I have tried setting `daemon=True` upon instantiation of these objects, to no avail. [ProcessExplorer](https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer) reports the `ZPROCESS_PARENTINFO` for this process. I don\u2019t suppose that\u2019s of any use? I should also mention that the process terminates:\n\n1. when left to its own devices, i.e. an M-LOOP optimisation completes; or\n2. when the worker process for the analysis routine is restarted \\(right-click menu\\); or\n3. when the analysis routine is removed.\n\nIt seems as though if lyse can manage to terminate the subprocess in cases \\(2\\) and \\(3\\) above, it should also be able to do so at shutdown.", "markup": "markdown", "html": "<p>Sorry, I\u2019ve struggled to get a minimal breaking example \u2018working\u2019. The unterminated subprocesses derive from subclasses of <code>multiprocessing.Process</code> in <a data-is-external-link=\"true\" href=\"https://github.com/michaelhush/M-LOOP/blob/master/mloop/learners.py\" rel=\"nofollow\">M-LOOP/learners.py</a>. I have tried setting <code>daemon=True</code> upon instantiation of these objects, to no avail. <a data-is-external-link=\"true\" href=\"https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer\" rel=\"nofollow\">ProcessExplorer</a> reports the <code>ZPROCESS_PARENTINFO</code> for this process. I don\u2019t suppose that\u2019s of any use? I should also mention that the process terminates:</p>\n<ol>\n<li>when left to its own devices, i.e. an M-LOOP optimisation completes; or</li>\n<li>when the worker process for the analysis routine is restarted (right-click menu); or</li>\n<li>when the analysis routine is removed.</li>\n</ol>\n<p>It seems as though if lyse can manage to terminate the subprocess in cases (2) and (3) above, it should also be able to do so at shutdown.</p>", "type": "rendered"}, "created_on": "2019-05-04T07:49:54.282907+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-06T05:10:15.536986+00:00", "type": "pullrequest_comment", "id": 100907353}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"approval": {"date": "2019-05-06T05:09:26.576991+00:00", "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100920048.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100920048"}}, "parent": {"id": 100911078, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100911078.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100911078"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "> For now I'll just make lyse terminate subprocesses normally upon a clean exit. Will solve the majority of the problem.\n\nI\u2019ve had a go at this in pull request #62.\n\n> Does process explorer show you environment variables?\n\nYes. `ZPROCESS_PARENTINFO` is not always present, insofar as I haven\u2019t been able to reproduce this on another Windows host.\n\n> do you need admin access at least, to view environment variables?\n\nNot when I last saw it. I\u2019ll post the exact details when I can.", "markup": "markdown", "html": "<blockquote>\n<p>For now I'll just make lyse terminate subprocesses normally upon a clean exit. Will solve the majority of the problem.</p>\n</blockquote>\n<p>I\u2019ve had a go at this in <a href=\"#!/labscript_suite/lyse/pull-requests/62/terminate-subprocesses-at-shutdown\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #62</a>.</p>\n<blockquote>\n<p>Does process explorer show you environment variables?</p>\n</blockquote>\n<p>Yes. <code>ZPROCESS_PARENTINFO</code> is not always present, insofar as I haven\u2019t been able to reproduce this on another Windows host.</p>\n<blockquote>\n<p>do you need admin access at least, to view environment variables?</p>\n</blockquote>\n<p>Not when I last saw it. I\u2019ll post the exact details when I can.</p>", "type": "rendered"}, "created_on": "2019-05-05T12:37:02.978431+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-05T12:37:02.987393+00:00", "type": "pullrequest_comment", "id": 100920048}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100911078.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100911078"}}, "parent": {"id": 100907353, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100907353.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100907353"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "I'd thought it unnecessary to terminate the child processes when closing lyse, since they will terminate themselves when heartbeating stops, and in both cases it's terminate() being called, so I would have expected results to be the same. But there's no harm in terminating subprocesses explicitly at shutdown, I can make lyse do that. I don't expect it to work 100% of the time, particularly when things are misbehaving, but it would be good for it to work in the normal case of a clean shutdown of lyse at the very least.\n\nDoes process explorer show you environment variables? I should have zprocess clear the ZPROCESS_PARENTINFO environment variable after it uses it so that it is not inherited by subprocesses and hopefully not visible in process explorer (do you need admin access at least, to view environment variables?). In any case, no, the mere presence of the environment variable doesn't do anything for that subprocess since it does not call the zprocess function to connect to the parent process.\n\nThere is an environment variable though, I think called PYTHONSTARTUP, which Python looks at and can make it run custom start-up code for new interpreters. That could be used to customise subprocesses, such as setting up heartbeating or some such. Though it's pretty magical,not a serious suggestion that we use it!\n\nFor now I'll just make lyse terminate subprocesses normally upon a clean exit. Will solve the majority of the problem. ", "markup": "markdown", "html": "<p>I'd thought it unnecessary to terminate the child processes when closing lyse, since they will terminate themselves when heartbeating stops, and in both cases it's terminate() being called, so I would have expected results to be the same. But there's no harm in terminating subprocesses explicitly at shutdown, I can make lyse do that. I don't expect it to work 100% of the time, particularly when things are misbehaving, but it would be good for it to work in the normal case of a clean shutdown of lyse at the very least.</p>\n<p>Does process explorer show you environment variables? I should have zprocess clear the ZPROCESS_PARENTINFO environment variable after it uses it so that it is not inherited by subprocesses and hopefully not visible in process explorer (do you need admin access at least, to view environment variables?). In any case, no, the mere presence of the environment variable doesn't do anything for that subprocess since it does not call the zprocess function to connect to the parent process.</p>\n<p>There is an environment variable though, I think called PYTHONSTARTUP, which Python looks at and can make it run custom start-up code for new interpreters. That could be used to customise subprocesses, such as setting up heartbeating or some such. Though it's pretty magical,not a serious suggestion that we use it!</p>\n<p>For now I'll just make lyse terminate subprocesses normally upon a clean exit. Will solve the majority of the problem. </p>", "type": "rendered"}, "created_on": "2019-05-04T14:56:08.685047+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-04T14:56:08.693342+00:00", "type": "pullrequest_comment", "id": 100911078}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100904961.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100904961"}}, "parent": {"id": 100904811, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100904811.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100904811"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "Ah, well, that will be quite tricky to do anything about in any kind of reliable way. If you don't want the subprocess to keep living, you can set `daemon=True` for the process object, or you can [use a zprocess `Process`](#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse#comment-51945461) instead, which will do heartbeating. In my experience the `daemon=True` approach is not reliable enough, since it requires the parent process to exit fairly cleanly to actually work, it won't work if the parent say, segfaults. ", "markup": "markdown", "html": "<p>Ah, well, that will be quite tricky to do anything about in any kind of reliable way. If you don't want the subprocess to keep living, you can set <code>daemon=True</code> for the process object, or you can <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse#comment-51945461\" rel=\"nofollow\">use a zprocess <code>Process</code></a> instead, which will do heartbeating. In my experience the <code>daemon=True</code> approach is not reliable enough, since it requires the parent process to exit fairly cleanly to actually work, it won't work if the parent say, segfaults. </p>", "type": "rendered"}, "created_on": "2019-05-04T02:40:57.844025+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-04T02:40:57.853873+00:00", "type": "pullrequest_comment", "id": 100904961}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100904811.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100904811"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "Regarding \\(2\\), the unterminated subprocess I'm taking about is a `multiprocess.Process` created within the thread, which is a child of the routine\u2019s worker process. The worker process is always terminated.", "markup": "markdown", "html": "<p>Regarding (2), the unterminated subprocess I'm taking about is a <code>multiprocess.Process</code> created within the thread, which is a child of the routine\u2019s worker process. The worker process is always terminated.</p>", "type": "rendered"}, "created_on": "2019-05-04T02:14:02.390792+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-04T02:14:02.398855+00:00", "type": "pullrequest_comment", "id": 100904811}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100884378.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100884378"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "I\u2019m not able to reproduce the \u2018subprocess doesn\u2019t close when lyse closes' issue, assuming I interpreted it correctly. I tested with the following routine:\n\n```python\ndef farm():\n    import time\n    while True:\n        time.sleep(1)\n        print('farm running')\n\nfrom lyse import routine_storage\ntry:\n    thread = routine_storage.thread\nexcept AttributeError:\n    import threading\n    routine_storage.thread = threading.Thread(target=farm)\n    routine_storage.thread.start()\n```\n\nAnd I see in task manager that after closing lyse the analyis routine dies a few seconds later.\n\n\u200c\n\nActually I couldn't reproduce the pywin32 issue either, so I am guessing one or both of these issues depends on exactly what the thread is doing. If the pywin32 issue is not resolved by the aforementioned attempted fix, and in either case for the subprocess not closing, a minimum breaking example might help me reproduce the issue, then I\u2019ll look into it more.", "markup": "markdown", "html": "<p>I\u2019m not able to reproduce the \u2018subprocess doesn\u2019t close when lyse closes' issue, assuming I interpreted it correctly. I tested with the following routine:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">farm</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">time</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;farm running&#39;</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">lyse</span> <span class=\"kn\">import</span> <span class=\"n\">routine_storage</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">routine_storage</span><span class=\"o\">.</span><span class=\"n\">thread</span>\n<span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n    <span class=\"n\">routine_storage</span><span class=\"o\">.</span><span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">farm</span><span class=\"p\">)</span>\n    <span class=\"n\">routine_storage</span><span class=\"o\">.</span><span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>And I see in task manager that after closing lyse the analyis routine dies a few seconds later.</p>\n<p>\u200c</p>\n<p>Actually I couldn't reproduce the pywin32 issue either, so I am guessing one or both of these issues depends on exactly what the thread is doing. If the pywin32 issue is not resolved by the aforementioned attempted fix, and in either case for the subprocess not closing, a minimum breaking example might help me reproduce the issue, then I\u2019ll look into it more.</p>", "type": "rendered"}, "created_on": "2019-05-03T18:31:34.037054+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-03T18:31:34.043784+00:00", "type": "pullrequest_comment", "id": 100884378}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)\r\n\r\nActually, further change: make `analysis_subprocess.py` not even the `__main__` module when run in the usual way from lyse. Create a module object for the user's\r\nanalysis routine and insert it into sys.modules as the `__main__` module\r\n(and rename the analysis_subprocess module from `__main__` to\r\n`_analysis_subprocess`). Run the user's code in that module's `__dict__`,\r\nresetting the dict to its initial state each run.\r\n\r\nThis should enable multiprocessing code to find the `__main__` module and have it refer to the user's analysis routine script instead of `analysis_subprocess.py`.", "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "9625859c6e6c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/9625859c6e6c"}, "html": {"href": "#!/cbillington/lyse/commits/9625859c6e6c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-03T17:54:38.317575+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100861025.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100861025"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "For 1, could you check if [labscript utils PR 78](#!/labscript_suite/labscript_utils/pull-requests/78/import-pywin32-at-module-level-rather-than) resolves it?\n\nFor 2, I am surprised. You\u2019re saying the lyse subprocess lives on merely by having a long-lived thread? Whilst this would be normal Python behaviour, for the process to not quit until all threads have stopped \\(which you can override by setting `daemon=True`for the thread\\), the lyse subprocess should terminate itself if it stops getting heartbeats from lyse, making that Python behaviour irrelevant. I wonder why that isn\u2019t working! I\u2019ll try to reproduce.\n\n\u200c", "markup": "markdown", "html": "<p>For 1, could you check if <a data-is-external-link=\"true\" href=\"#!/labscript_suite/labscript_utils/pull-requests/78/import-pywin32-at-module-level-rather-than\" rel=\"nofollow\">labscript utils PR 78</a> resolves it?</p>\n<p>For 2, I am surprised. You\u2019re saying the lyse subprocess lives on merely by having a long-lived thread? Whilst this would be normal Python behaviour, for the process to not quit until all threads have stopped (which you can override by setting <code>daemon=True</code>for the thread), the lyse subprocess should terminate itself if it stops getting heartbeats from lyse, making that Python behaviour irrelevant. I wonder why that isn\u2019t working! I\u2019ll try to reproduce.</p>\n<p>\u200c</p>", "type": "rendered"}, "created_on": "2019-05-03T14:59:24.623383+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-03T16:23:37.773765+00:00", "type": "pullrequest_comment", "id": 100861025}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100827483.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100827483"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "This PR is also threading-friendly. As per my comments on issue #48, this resolves the identical/related issue observed with `threading.Thread`. There are two subsequent issues if the thread is long-lived, however:\n\n1\\. When the analysis script is modified, `labscript_utils.modulewatcher` detects the latter and reloads all modules \\(at the\\) next run. I then get the following exception:\n\n```\nFile \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py\", line 129, in import_pywin32_system_module\n  assert sys.modules[modname] is not old_mod\nAssertionError\n```\n\n2\\. The subprocess is terminated when the analysis routine is removed, but not when lyse is closed.", "markup": "markdown", "html": "<p>This PR is also threading-friendly. As per my comments on issue <a href=\"#!/labscript_suite/lyse/issues/48/unable-to-fork-a-process-from-a-lyse\" rel=\"nofollow\" title=\"Unable to fork a process from a lyse script with multiprocessing\" class=\"ap-connect-link\"><s>#48</s></a>, this resolves the identical/related issue observed with <code>threading.Thread</code>. There are two subsequent issues if the thread is long-lived, however:</p>\n<p>1. When the analysis script is modified, <code>labscript_utils.modulewatcher</code> detects the latter and reloads all modules (at the) next run. I then get the following exception:</p>\n<div class=\"codehilite\"><pre><span></span>File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\win32\\lib\\pywintypes.py&quot;, line 129, in import_pywin32_system_module\n  assert sys.modules[modname] is not old_mod\nAssertionError\n</pre></div>\n\n\n<p>2. The subprocess is terminated when the analysis routine is removed, but not when lyse is closed.</p>", "type": "rendered"}, "created_on": "2019-05-03T10:49:47.728485+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-03T10:49:47.735818+00:00", "type": "pullrequest_comment", "id": 100827483}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61/comments/100596191.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61/_/diff#comment-100596191"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}, "content": {"raw": "I also removed the `DeprecationDict`, since now we're using a module object instead of a dict to execute the code. Now, the module obviously still has a `__dict__` attritbute, which I could have replaced with a `DeprecationDict`, to keep the current deprecation warning for the change from `path`-> `lyse.path`\\(this would probably work just fine, though I\u2019m not 100% sure\\) . But, it has been four years since the change, so I\u2019m happy to remove the deprecation warning. Spielman labscript suite hasn\u2019t made the jump but there are more changes that will need to be made to analysis routines when changing to mainline here, that will need to be manual anyway, so this is our problem to deal with.\n\nBut if anyone feels strongly about this I will just put it back in, so let me know.", "markup": "markdown", "html": "<p>I also removed the <code>DeprecationDict</code>, since now we're using a module object instead of a dict to execute the code. Now, the module obviously still has a <code>__dict__</code> attritbute, which I could have replaced with a <code>DeprecationDict</code>, to keep the current deprecation warning for the change from <code>path</code>-&gt; <code>lyse.path</code>(this would probably work just fine, though I\u2019m not 100% sure) . But, it has been four years since the change, so I\u2019m happy to remove the deprecation warning. Spielman labscript suite hasn\u2019t made the jump but there are more changes that will need to be made to analysis routines when changing to mainline here, that will need to be manual anyway, so this is our problem to deal with.</p>\n<p>But if anyone feels strongly about this I will just put it back in, so let me know.</p>", "type": "rendered"}, "created_on": "2019-05-01T16:05:03.310338+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-01T16:05:03.328142+00:00", "type": "pullrequest_comment", "id": 100596191}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)\r\n\r\nActually, further change: make `analysis_subprocess.py` not even the `__main__` module when run in the usual way from lyse. Create a module object for the user's\r\nanalysis routine and insert it into sys.modules as the `__main__` module\r\n(and rename the analysis_subprocess module from `__main__` to\r\n`_analysis_subprocess`). Run the user's code in that module's `__dict__`,\r\nresetting the dict to its initial state each run.\r\n\r\nThis should enable multiprocessing code to find the `__main__` module and have it refer to the user's analysis routine script instead of `analysis_subprocess.py`.", "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "583cd0c0f6ad", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/583cd0c0f6ad"}, "html": {"href": "#!/cbillington/lyse/commits/583cd0c0f6ad"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T15:54:08.078111+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)", "title": "Partial fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "583cd0c0f6ad", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/583cd0c0f6ad"}, "html": {"href": "#!/cbillington/lyse/commits/583cd0c0f6ad"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T15:52:11.184229+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)", "title": "Partial fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "37b8c7e2552c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/37b8c7e2552c"}, "html": {"href": "#!/cbillington/lyse/commits/37b8c7e2552c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T15:15:02.239353+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}, {"update": {"description": "Move side-effecty code in analysis_subprocess.py into its `__main__` block.\r\nThis makes importing `analysis_subprocess` side-effect-free, making it not\r\ninterfere with the multiprocessing module when subprocesses execute it\r\n(since it is the `__main__` module of the parent process, which multiprocessing executes unconditionally in the child process)", "title": "Partial fix for #48: Make analysis_subprocess.py multiprocessing-friendly", "destination": {"commit": {"hash": "33f1c0ab51f6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/lyse/commit/33f1c0ab51f6.json"}, "html": {"href": "#!/labscript_suite/lyse/commits/33f1c0ab51f6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/lyse.json"}, "html": {"href": "#!/labscript_suite/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{55eebdfe-43d1-4ae8-9049-50c55b295397}ts=249921"}}, "type": "repository", "name": "lyse", "full_name": "labscript_suite/lyse", "uuid": "{55eebdfe-43d1-4ae8-9049-50c55b295397}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "37b8c7e2552c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse/commit/37b8c7e2552c"}, "html": {"href": "#!/cbillington/lyse/commits/37b8c7e2552c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/lyse"}, "html": {"href": "#!/cbillington/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{47c91022-279d-4058-88a8-959fe9ffb409}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "cbillington/lyse", "uuid": "{47c91022-279d-4058-88a8-959fe9ffb409}"}, "branch": {"name": "bugfix"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-05-01T15:15:02.086267+00:00"}, "pull_request": {"type": "pullrequest", "id": 61, "links": {"self": {"href": "data/repositories/labscript_suite/lyse/pullrequests/61.json"}, "html": {"href": "#!/labscript_suite/lyse/pull-requests/61"}}, "title": "Fix for #48: Make analysis_subprocess.py multiprocessing-friendly"}}]}