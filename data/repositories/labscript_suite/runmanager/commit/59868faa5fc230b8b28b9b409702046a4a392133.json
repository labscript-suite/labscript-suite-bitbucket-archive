{"rendered": {"message": {"raw": "Cell highlighting to tell you if a value has been evaluated correctly. Tooltips tell you what they evaluated to, or what the exception was if they failed.\nThis updating happens asynchronously and currently suffers a deadlock issue if you keep doing things with h5py whilst it's evaluating. I won't fix this with locking (network locking will slow it waaay down and process locking is a bit redundant when we're going to need network locking anyway), rather I'll read the values from the GUI instead of the file. This will decrease the amount of file access such that network locking can be used and not be prohibitively slow (file access is what's taking the majority of the time as it is).\nIn fact, I plan on making runmanager always read from the GUI, to seriously decrease file access during compilation time. I'll be introducting FileWatcher code to check for changes on disk so that they don't get out of step. Even if I don't (but I will) it's way better than the current situation where a change on disk affects the globals in your runs whilst not affecting the GUI at all!", "markup": "markdown", "html": "<p>Cell highlighting to tell you if a value has been evaluated correctly. Tooltips tell you what they evaluated to, or what the exception was if they failed.<br />\nThis updating happens asynchronously and currently suffers a deadlock issue if you keep doing things with h5py whilst it's evaluating. I won't fix this with locking (network locking will slow it waaay down and process locking is a bit redundant when we're going to need network locking anyway), rather I'll read the values from the GUI instead of the file. This will decrease the amount of file access such that network locking can be used and not be prohibitively slow (file access is what's taking the majority of the time as it is).<br />\nIn fact, I plan on making runmanager always read from the GUI, to seriously decrease file access during compilation time. I'll be introducting FileWatcher code to check for changes on disk so that they don't get out of step. Even if I don't (but I will) it's way better than the current situation where a change on disk affects the globals in your runs whilst not affecting the GUI at all!</p>", "type": "rendered"}}, "hash": "59868faa5fc230b8b28b9b409702046a4a392133", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/59868faa5fc230b8b28b9b409702046a4a392133.json"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/commit/59868faa5fc230b8b28b9b409702046a4a392133/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/patch/59868faa5fc230b8b28b9b409702046a4a392133"}, "html": {"href": "#!/labscript_suite/runmanager/commits/59868faa5fc230b8b28b9b409702046a4a392133"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diff/59868faa5fc230b8b28b9b409702046a4a392133"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/commit/59868faa5fc230b8b28b9b409702046a4a392133/approve"}, "statuses": {"href": "data/repositories/labscript_suite/runmanager/commit/59868faa5fc230b8b28b9b409702046a4a392133/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Cell highlighting to tell you if a value has been evaluated correctly. Tooltips tell you what they evaluated to, or what the exception was if they failed.\nThis updating happens asynchronously and currently suffers a deadlock issue if you keep doing things with h5py whilst it's evaluating. I won't fix this with locking (network locking will slow it waaay down and process locking is a bit redundant when we're going to need network locking anyway), rather I'll read the values from the GUI instead of the file. This will decrease the amount of file access such that network locking can be used and not be prohibitively slow (file access is what's taking the majority of the time as it is).\nIn fact, I plan on making runmanager always read from the GUI, to seriously decrease file access during compilation time. I'll be introducting FileWatcher code to check for changes on disk so that they don't get out of step. Even if I don't (but I will) it's way better than the current situation where a change on disk affects the globals in your runs whilst not affecting the GUI at all!", "markup": "markdown", "html": "<p>Cell highlighting to tell you if a value has been evaluated correctly. Tooltips tell you what they evaluated to, or what the exception was if they failed.<br />\nThis updating happens asynchronously and currently suffers a deadlock issue if you keep doing things with h5py whilst it's evaluating. I won't fix this with locking (network locking will slow it waaay down and process locking is a bit redundant when we're going to need network locking anyway), rather I'll read the values from the GUI instead of the file. This will decrease the amount of file access such that network locking can be used and not be prohibitively slow (file access is what's taking the majority of the time as it is).<br />\nIn fact, I plan on making runmanager always read from the GUI, to seriously decrease file access during compilation time. I'll be introducting FileWatcher code to check for changes on disk so that they don't get out of step. Even if I don't (but I will) it's way better than the current situation where a change on disk affects the globals in your runs whilst not affecting the GUI at all!</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "f053c012f9dcdd37b7169193dd899e4912d67fec", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/f053c012f9dcdd37b7169193dd899e4912d67fec.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/f053c012f9dcdd37b7169193dd899e4912d67fec"}}}], "date": "2012-09-26T15:09:08+00:00", "message": "Cell highlighting to tell you if a value has been evaluated correctly. Tooltips tell you what they evaluated to, or what the exception was if they failed.\nThis updating happens asynchronously and currently suffers a deadlock issue if you keep doing things with h5py whilst it's evaluating. I won't fix this with locking (network locking will slow it waaay down and process locking is a bit redundant when we're going to need network locking anyway), rather I'll read the values from the GUI instead of the file. This will decrease the amount of file access such that network locking can be used and not be prohibitively slow (file access is what's taking the majority of the time as it is).\nIn fact, I plan on making runmanager always read from the GUI, to seriously decrease file access during compilation time. I'll be introducting FileWatcher code to check for changes on disk so that they don't get out of step. Even if I don't (but I will) it's way better than the current situation where a change on disk affects the globals in your runs whilst not affecting the GUI at all!", "type": "commit", "git_hash": "f7a3a05a53118b8a4cf7483c3d1b3b2d745d6173", "tags": null, "branches": "default"}