{"rendered": {"message": {"raw": "Add the concept of a sequence_index to runmanager.\n\nThe sequence index is an incrementing integer starting from zero each day for\neach experiment script. It is stored on disk in\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\nzlock so that it may be incremented atomically.\n\nThe sequence index may be used in the output folder format, which defaults to:\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}, resulting in output\nfolders like:\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\n\nThe format string will be fed first to strftime, then a call to .format()\nwith sequence_index and sequence_timestamp kwargs, where sequence_timestamp is\nthe time in format '%Y%m%dT%H%M%S', which is the existing format used in\nsequence_ids.\n\nAllow the shot filename to also have its format configured, such as:\nfilename_prefix_format = '%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}',\nresulting in shot filenames like:\n2019-03-14_00006_myscript_1.h5\n\nThis is similarly passed through strftime and then .format with sequence_index,\nsequence_timestamp, and script_basename kwargs.\n\nThe pre-set output_folder_format if newly installed labconfigs will be:\n%%Y/%%m/%%d/{sequence_index:05d}\nwhich will also be the default if not present in the labconfig file.\n\nThe pre-set filename_prefix_format in newly installed labconfigs will be:\n%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}\nbut if not present in labconfig files, {sequence_timestamp}_{script_basename}\nwill be used to preserve the present behaviour of using the sequence id.\n\nFor compatibility with lyse, the sequence_id is still saved to the h5 file, but\nother attributes are saved too. These are:\n\n'script_basename': the basename of the script, i.e. myscript\n'sequence_date': a string of the date only, i.e. 2019-03-14\n'sequence_index': the sequence_index as an integer,\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\n\nThe idea is that script_basename, sequence_date and sequence_id become an\nalternative to sequence_id as a way of uniquely identifying a shot. lyse\nalready has a labconfig setting where it uses the sequence_index if present to\nindex the dataframe (added for the  sake of Spielman fork shots which already\nhave sequence_index), but it has the issue that shots cannot be fully uniquely\ndetermined by that alone since the date and script name are needed too. So\nthe date and script name are added to the attrs for this purpose, but sequence_id\nis retained.\n\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\nthe given labconfig settings and current time. It's all in one function because\nthe different pieces all use timestamps, and so to avoid races it either has to be\na single function call or the caller would need to carry around a datetime object.\nSince it is not too complicated I made it a single function call, though the callers\nare often ignoring one or more of its return values.\n\nRemoved generate_sequence_id, since the functions that accept a sequence_id\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\nThis and the modifying of other function call signatures is a backward incompatible\nchange in the sense of the API that runmanager exposes, but is backward-compatible\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\nthis is acceptable - code using the runmanager API directly may need to change.\nWe could do a major version bump to indicate this.", "markup": "markdown", "html": "<p>Add the concept of a sequence_index to runmanager.</p>\n<p>The sequence index is an incrementing integer starting from zero each day for<br />\neach experiment script. It is stored on disk in<br />\n&lt;experiment_shot_storage&gt;/&lt;script_name&gt;/.next_sequence_index and accessed using<br />\nzlock so that it may be incremented atomically.</p>\n<p>The sequence index may be used in the output folder format, which defaults to:<br />\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}, resulting in output<br />\nfolders like:<br />\n&lt;shared_drive&gt;/Experiments/&lt;experiment_name&gt;/&lt;script_name&gt;/2019/03/14/00006</p>\n<p>The format string will be fed first to strftime, then a call to .format()<br />\nwith sequence_index and sequence_timestamp kwargs, where sequence_timestamp is<br />\nthe time in format '%Y%m%dT%H%M%S', which is the existing format used in<br />\nsequence_ids.</p>\n<p>Allow the shot filename to also have its format configured, such as:<br />\nfilename_prefix_format = '%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}',<br />\nresulting in shot filenames like:<br />\n2019-03-14_00006_myscript_1.h5</p>\n<p>This is similarly passed through strftime and then .format with sequence_index,<br />\nsequence_timestamp, and script_basename kwargs.</p>\n<p>The pre-set output_folder_format if newly installed labconfigs will be:<br />\n%%Y/%%m/%%d/{sequence_index:05d}<br />\nwhich will also be the default if not present in the labconfig file.</p>\n<p>The pre-set filename_prefix_format in newly installed labconfigs will be:<br />\n%%Y-%%m-%%d_{sequence_index:05d}<em>{script_basename}<br />\nbut if not present in labconfig files, {sequence_timestamp}</em>{script_basename}<br />\nwill be used to preserve the present behaviour of using the sequence id.</p>\n<p>For compatibility with lyse, the sequence_id is still saved to the h5 file, but<br />\nother attributes are saved too. These are:</p>\n<p>'script_basename': the basename of the script, i.e. myscript<br />\n'sequence_date': a string of the date only, i.e. 2019-03-14<br />\n'sequence_index': the sequence_index as an integer,<br />\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript</p>\n<p>The idea is that script_basename, sequence_date and sequence_id become an<br />\nalternative to sequence_id as a way of uniquely identifying a shot. lyse<br />\nalready has a labconfig setting where it uses the sequence_index if present to<br />\nindex the dataframe (added for the  sake of Spielman fork shots which already<br />\nhave sequence_index), but it has the issue that shots cannot be fully uniquely<br />\ndetermined by that alone since the date and script name are needed too. So<br />\nthe date and script name are added to the attrs for this purpose, but sequence_id<br />\nis retained.</p>\n<p>Refactored runmanager functions to achieve this. There is now a fairly monolithic function<br />\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for<br />\nthe given labconfig settings and current time. It's all in one function because<br />\nthe different pieces all use timestamps, and so to avoid races it either has to be<br />\na single function call or the caller would need to carry around a datetime object.<br />\nSince it is not too complicated I made it a single function call, though the callers<br />\nare often ignoring one or more of its return values.</p>\n<p>Removed generate_sequence_id, since the functions that accept a sequence_id<br />\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).<br />\nThis and the modifying of other function call signatures is a backward incompatible<br />\nchange in the sense of the API that runmanager exposes, but is backward-compatible<br />\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think<br />\nthis is acceptable - code using the runmanager API directly may need to change.<br />\nWe could do a major version bump to indicate this.</p>", "type": "rendered"}}, "hash": "65e4b4fe4af27c000df687a86151bd937dd527b7", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/65e4b4fe4af27c000df687a86151bd937dd527b7.json"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/commit/65e4b4fe4af27c000df687a86151bd937dd527b7/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/patch/65e4b4fe4af27c000df687a86151bd937dd527b7"}, "html": {"href": "#!/labscript_suite/runmanager/commits/65e4b4fe4af27c000df687a86151bd937dd527b7"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diff/65e4b4fe4af27c000df687a86151bd937dd527b7"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/commit/65e4b4fe4af27c000df687a86151bd937dd527b7/approve"}, "statuses": {"href": "data/repositories/labscript_suite/runmanager/commit/65e4b4fe4af27c000df687a86151bd937dd527b7/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Add the concept of a sequence_index to runmanager.\n\nThe sequence index is an incrementing integer starting from zero each day for\neach experiment script. It is stored on disk in\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\nzlock so that it may be incremented atomically.\n\nThe sequence index may be used in the output folder format, which defaults to:\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}, resulting in output\nfolders like:\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\n\nThe format string will be fed first to strftime, then a call to .format()\nwith sequence_index and sequence_timestamp kwargs, where sequence_timestamp is\nthe time in format '%Y%m%dT%H%M%S', which is the existing format used in\nsequence_ids.\n\nAllow the shot filename to also have its format configured, such as:\nfilename_prefix_format = '%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}',\nresulting in shot filenames like:\n2019-03-14_00006_myscript_1.h5\n\nThis is similarly passed through strftime and then .format with sequence_index,\nsequence_timestamp, and script_basename kwargs.\n\nThe pre-set output_folder_format if newly installed labconfigs will be:\n%%Y/%%m/%%d/{sequence_index:05d}\nwhich will also be the default if not present in the labconfig file.\n\nThe pre-set filename_prefix_format in newly installed labconfigs will be:\n%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}\nbut if not present in labconfig files, {sequence_timestamp}_{script_basename}\nwill be used to preserve the present behaviour of using the sequence id.\n\nFor compatibility with lyse, the sequence_id is still saved to the h5 file, but\nother attributes are saved too. These are:\n\n'script_basename': the basename of the script, i.e. myscript\n'sequence_date': a string of the date only, i.e. 2019-03-14\n'sequence_index': the sequence_index as an integer,\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\n\nThe idea is that script_basename, sequence_date and sequence_id become an\nalternative to sequence_id as a way of uniquely identifying a shot. lyse\nalready has a labconfig setting where it uses the sequence_index if present to\nindex the dataframe (added for the  sake of Spielman fork shots which already\nhave sequence_index), but it has the issue that shots cannot be fully uniquely\ndetermined by that alone since the date and script name are needed too. So\nthe date and script name are added to the attrs for this purpose, but sequence_id\nis retained.\n\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\nthe given labconfig settings and current time. It's all in one function because\nthe different pieces all use timestamps, and so to avoid races it either has to be\na single function call or the caller would need to carry around a datetime object.\nSince it is not too complicated I made it a single function call, though the callers\nare often ignoring one or more of its return values.\n\nRemoved generate_sequence_id, since the functions that accept a sequence_id\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\nThis and the modifying of other function call signatures is a backward incompatible\nchange in the sense of the API that runmanager exposes, but is backward-compatible\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\nthis is acceptable - code using the runmanager API directly may need to change.\nWe could do a major version bump to indicate this.", "markup": "markdown", "html": "<p>Add the concept of a sequence_index to runmanager.</p>\n<p>The sequence index is an incrementing integer starting from zero each day for<br />\neach experiment script. It is stored on disk in<br />\n&lt;experiment_shot_storage&gt;/&lt;script_name&gt;/.next_sequence_index and accessed using<br />\nzlock so that it may be incremented atomically.</p>\n<p>The sequence index may be used in the output folder format, which defaults to:<br />\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}, resulting in output<br />\nfolders like:<br />\n&lt;shared_drive&gt;/Experiments/&lt;experiment_name&gt;/&lt;script_name&gt;/2019/03/14/00006</p>\n<p>The format string will be fed first to strftime, then a call to .format()<br />\nwith sequence_index and sequence_timestamp kwargs, where sequence_timestamp is<br />\nthe time in format '%Y%m%dT%H%M%S', which is the existing format used in<br />\nsequence_ids.</p>\n<p>Allow the shot filename to also have its format configured, such as:<br />\nfilename_prefix_format = '%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}',<br />\nresulting in shot filenames like:<br />\n2019-03-14_00006_myscript_1.h5</p>\n<p>This is similarly passed through strftime and then .format with sequence_index,<br />\nsequence_timestamp, and script_basename kwargs.</p>\n<p>The pre-set output_folder_format if newly installed labconfigs will be:<br />\n%%Y/%%m/%%d/{sequence_index:05d}<br />\nwhich will also be the default if not present in the labconfig file.</p>\n<p>The pre-set filename_prefix_format in newly installed labconfigs will be:<br />\n%%Y-%%m-%%d_{sequence_index:05d}<em>{script_basename}<br />\nbut if not present in labconfig files, {sequence_timestamp}</em>{script_basename}<br />\nwill be used to preserve the present behaviour of using the sequence id.</p>\n<p>For compatibility with lyse, the sequence_id is still saved to the h5 file, but<br />\nother attributes are saved too. These are:</p>\n<p>'script_basename': the basename of the script, i.e. myscript<br />\n'sequence_date': a string of the date only, i.e. 2019-03-14<br />\n'sequence_index': the sequence_index as an integer,<br />\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript</p>\n<p>The idea is that script_basename, sequence_date and sequence_id become an<br />\nalternative to sequence_id as a way of uniquely identifying a shot. lyse<br />\nalready has a labconfig setting where it uses the sequence_index if present to<br />\nindex the dataframe (added for the  sake of Spielman fork shots which already<br />\nhave sequence_index), but it has the issue that shots cannot be fully uniquely<br />\ndetermined by that alone since the date and script name are needed too. So<br />\nthe date and script name are added to the attrs for this purpose, but sequence_id<br />\nis retained.</p>\n<p>Refactored runmanager functions to achieve this. There is now a fairly monolithic function<br />\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for<br />\nthe given labconfig settings and current time. It's all in one function because<br />\nthe different pieces all use timestamps, and so to avoid races it either has to be<br />\na single function call or the caller would need to carry around a datetime object.<br />\nSince it is not too complicated I made it a single function call, though the callers<br />\nare often ignoring one or more of its return values.</p>\n<p>Removed generate_sequence_id, since the functions that accept a sequence_id<br />\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).<br />\nThis and the modifying of other function call signatures is a backward incompatible<br />\nchange in the sense of the API that runmanager exposes, but is backward-compatible<br />\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think<br />\nthis is acceptable - code using the runmanager API directly may need to change.<br />\nWe could do a major version bump to indicate this.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "8c5efc6565358f733315a4b4bb681e3010bba653", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc6565358f733315a4b4bb681e3010bba653.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc6565358f733315a4b4bb681e3010bba653"}}}], "date": "2019-03-14T22:53:33+00:00", "message": "Add the concept of a sequence_index to runmanager.\n\nThe sequence index is an incrementing integer starting from zero each day for\neach experiment script. It is stored on disk in\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\nzlock so that it may be incremented atomically.\n\nThe sequence index may be used in the output folder format, which defaults to:\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}, resulting in output\nfolders like:\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\n\nThe format string will be fed first to strftime, then a call to .format()\nwith sequence_index and sequence_timestamp kwargs, where sequence_timestamp is\nthe time in format '%Y%m%dT%H%M%S', which is the existing format used in\nsequence_ids.\n\nAllow the shot filename to also have its format configured, such as:\nfilename_prefix_format = '%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}',\nresulting in shot filenames like:\n2019-03-14_00006_myscript_1.h5\n\nThis is similarly passed through strftime and then .format with sequence_index,\nsequence_timestamp, and script_basename kwargs.\n\nThe pre-set output_folder_format if newly installed labconfigs will be:\n%%Y/%%m/%%d/{sequence_index:05d}\nwhich will also be the default if not present in the labconfig file.\n\nThe pre-set filename_prefix_format in newly installed labconfigs will be:\n%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}\nbut if not present in labconfig files, {sequence_timestamp}_{script_basename}\nwill be used to preserve the present behaviour of using the sequence id.\n\nFor compatibility with lyse, the sequence_id is still saved to the h5 file, but\nother attributes are saved too. These are:\n\n'script_basename': the basename of the script, i.e. myscript\n'sequence_date': a string of the date only, i.e. 2019-03-14\n'sequence_index': the sequence_index as an integer,\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\n\nThe idea is that script_basename, sequence_date and sequence_id become an\nalternative to sequence_id as a way of uniquely identifying a shot. lyse\nalready has a labconfig setting where it uses the sequence_index if present to\nindex the dataframe (added for the  sake of Spielman fork shots which already\nhave sequence_index), but it has the issue that shots cannot be fully uniquely\ndetermined by that alone since the date and script name are needed too. So\nthe date and script name are added to the attrs for this purpose, but sequence_id\nis retained.\n\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\nthe given labconfig settings and current time. It's all in one function because\nthe different pieces all use timestamps, and so to avoid races it either has to be\na single function call or the caller would need to carry around a datetime object.\nSince it is not too complicated I made it a single function call, though the callers\nare often ignoring one or more of its return values.\n\nRemoved generate_sequence_id, since the functions that accept a sequence_id\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\nThis and the modifying of other function call signatures is a backward incompatible\nchange in the sense of the API that runmanager exposes, but is backward-compatible\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\nthis is acceptable - code using the runmanager API directly may need to change.\nWe could do a major version bump to indicate this.", "type": "commit", "git_hash": "59b6b1657f0f63be958283960822c0ff8adc7816", "tags": null, "branches": "sequence_index"}