{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13/comments/12391529.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/13#comment-12391529"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals files without units or expansion entry in h5 file raise exceptions"}, "content": {"raw": "I think the general strategy of trying to fix individual things that might go wrong with an input file is a losing strategy. Files are never meant to get into those states and are only ever wrong because of bugs or tampering, neither of which is predictable. So rather than add checks for individual problems along with attempts to fix them, I'd rather have catch-all error handling that makes runmanager itself stay in a sensible state regardless of how screwed up an input file is, and not actually do anything about trying to fix the file unless it is a known occurrence not due to a bug (for example, after we port to Python 3, runmanager may encounter incompatible string types from old shot files, and it should convert them rather than crash).\n\nSo I think that's what I'll aim for instead - make calls into the runmanager API (which might fail) always be made in such a way that if they fail, the GUI is in a correct state still. I don't think we try to be too clever about catching the errors, except to do cleanup and re-raise, because there's no predicting what the errors will be. If the user's file is borked, they should see the full traceback plus an prepended message about how there's something wrong with the file, or that it could also possibly be a bug and they should report it.\n\nThat sound fair enough?", "markup": "markdown", "html": "<p>I think the general strategy of trying to fix individual things that might go wrong with an input file is a losing strategy. Files are never meant to get into those states and are only ever wrong because of bugs or tampering, neither of which is predictable. So rather than add checks for individual problems along with attempts to fix them, I'd rather have catch-all error handling that makes runmanager itself stay in a sensible state regardless of how screwed up an input file is, and not actually do anything about trying to fix the file unless it is a known occurrence not due to a bug (for example, after we port to Python 3, runmanager may encounter incompatible string types from old shot files, and it should convert them rather than crash).</p>\n<p>So I think that's what I'll aim for instead - make calls into the runmanager API (which might fail) always be made in such a way that if they fail, the GUI is in a correct state still. I don't think we try to be too clever about catching the errors, except to do cleanup and re-raise, because there's no predicting what the errors will be. If the user's file is borked, they should see the full traceback plus an prepended message about how there's something wrong with the file, or that it could also possibly be a bug and they should report it.</p>\n<p>That sound fair enough?</p>", "type": "rendered"}, "created_on": "2014-09-17T05:50:46.955223+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 12391529}