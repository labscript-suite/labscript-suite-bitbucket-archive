{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13/comments/12391529.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/13#comment-12391529"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals files without units or expansion entry in h5 file raise exceptions"}, "content": {"raw": "I think the general strategy of trying to fix individual things that might go wrong with an input file is a losing strategy. Files are never meant to get into those states and are only ever wrong because of bugs or tampering, neither of which is predictable. So rather than add checks for individual problems along with attempts to fix them, I'd rather have catch-all error handling that makes runmanager itself stay in a sensible state regardless of how screwed up an input file is, and not actually do anything about trying to fix the file unless it is a known occurrence not due to a bug (for example, after we port to Python 3, runmanager may encounter incompatible string types from old shot files, and it should convert them rather than crash).\n\nSo I think that's what I'll aim for instead - make calls into the runmanager API (which might fail) always be made in such a way that if they fail, the GUI is in a correct state still. I don't think we try to be too clever about catching the errors, except to do cleanup and re-raise, because there's no predicting what the errors will be. If the user's file is borked, they should see the full traceback plus an prepended message about how there's something wrong with the file, or that it could also possibly be a bug and they should report it.\n\nThat sound fair enough?", "markup": "markdown", "html": "<p>I think the general strategy of trying to fix individual things that might go wrong with an input file is a losing strategy. Files are never meant to get into those states and are only ever wrong because of bugs or tampering, neither of which is predictable. So rather than add checks for individual problems along with attempts to fix them, I'd rather have catch-all error handling that makes runmanager itself stay in a sensible state regardless of how screwed up an input file is, and not actually do anything about trying to fix the file unless it is a known occurrence not due to a bug (for example, after we port to Python 3, runmanager may encounter incompatible string types from old shot files, and it should convert them rather than crash).</p>\n<p>So I think that's what I'll aim for instead - make calls into the runmanager API (which might fail) always be made in such a way that if they fail, the GUI is in a correct state still. I don't think we try to be too clever about catching the errors, except to do cleanup and re-raise, because there's no predicting what the errors will be. If the user's file is borked, they should see the full traceback plus an prepended message about how there's something wrong with the file, or that it could also possibly be a bug and they should report it.</p>\n<p>That sound fair enough?</p>", "type": "rendered"}, "created_on": "2014-09-17T05:50:46.955223+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 12391529}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13/comments/12391604.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/13#comment-12391604"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals files without units or expansion entry in h5 file raise exceptions"}, "content": {"raw": "My concern mainly revolves around the fact that we do have some ancient hdf5 files with no expansions group in (because they predate the expansion column). Does runmanager raise similar exceptions if you were to open one of those or does the problem only apply to units? maybe it doesn't matter because those files are unlikely to ever be used (and I guess they wouldn't even have the expansion group so a slightly different problem)", "markup": "markdown", "html": "<p>My concern mainly revolves around the fact that we do have some ancient hdf5 files with no expansions group in (because they predate the expansion column). Does runmanager raise similar exceptions if you were to open one of those or does the problem only apply to units? maybe it doesn't matter because those files are unlikely to ever be used (and I guess they wouldn't even have the expansion group so a slightly different problem)</p>", "type": "rendered"}, "created_on": "2014-09-17T05:57:46.407437+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 12391604}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13/comments/12391653.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/13#comment-12391653"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals files without units or expansion entry in h5 file raise exceptions"}, "content": {"raw": "Oh, no runmanager indeed adds a blank expansion for each global if not present. It's been like that since we first introduced expansions, and that's the sort of backwards compatibility I think it is important to leave special checks in for. Although it would be ok to remove it after a major version bump or two.", "markup": "markdown", "html": "<p>Oh, no runmanager indeed adds a blank expansion for each global if not present. It's been like that since we first introduced expansions, and that's the sort of backwards compatibility I think it is important to leave special checks in for. Although it would be ok to remove it after a major version bump or two.</p>", "type": "rendered"}, "created_on": "2014-09-17T06:01:35.311773+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2014-09-17T06:02:01.579639+00:00", "type": "issue_comment", "id": 12391653}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13/comments/12391735.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/13#comment-12391735"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/13.json"}}, "type": "issue", "id": 13, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals files without units or expansion entry in h5 file raise exceptions"}, "content": {"raw": "in that case, just making the UI always consistent/usable is probably the best solution", "markup": "markdown", "html": "<p>in that case, just making the UI always consistent/usable is probably the best solution</p>", "type": "rendered"}, "created_on": "2014-09-17T06:09:20.856780+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 12391735}], "page": 1, "size": 4}