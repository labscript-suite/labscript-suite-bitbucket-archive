{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/31/comments/39153021.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/31#comment-39153021"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/31.json"}}, "type": "issue", "id": 31, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Axes tab - control over loop order of parameter space and shuffling of individual axes"}, "content": {"raw": "Presently I can see that the axes of expansion go through a dictionary at one point, keyed by name, and then the order of the outer product is the order that they come out of the dictionary when iterated over, which is arbitrary. In Python 3.6 (I tihnk?) the dict implementation changed such that insertion order is preserved (though it's an implementation detail not guaranteed by the spec of the language itself), but in python 2, it's going to be something like how the strings for the names of the globals hash. Only way to influence them without changing runmanager code would be to append random gibberish to the globals until you got the order you wanted :p.\n\nBetter way of doing it is to finish this feature - which I haven't forgotten about even though it's been  years! I agree with phil's comments, and this is one of the things on my list - it won't be super hard once I get to it.", "markup": "markdown", "html": "<p>Presently I can see that the axes of expansion go through a dictionary at one point, keyed by name, and then the order of the outer product is the order that they come out of the dictionary when iterated over, which is arbitrary. In Python 3.6 (I tihnk?) the dict implementation changed such that insertion order is preserved (though it's an implementation detail not guaranteed by the spec of the language itself), but in python 2, it's going to be something like how the strings for the names of the globals hash. Only way to influence them without changing runmanager code would be to append random gibberish to the globals until you got the order you wanted :p.</p>\n<p>Better way of doing it is to finish this feature - which I haven't forgotten about even though it's been  years! I agree with phil's comments, and this is one of the things on my list - it won't be super hard once I get to it.</p>", "type": "rendered"}, "created_on": "2017-08-17T15:12:05.173383+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 39153021}