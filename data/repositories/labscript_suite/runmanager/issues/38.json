{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/runmanager/issues/38/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/runmanager/issues/38.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/issues/38/watch"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/issues/38/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/38/saving-length-of-array-to-global-throws"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/issues/38/vote"}}, "reporter": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "title": "Saving Length of Array to global throws KeyError", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I have a global with a calculated numpy array. When I try to save the size of the array in another global (using darray.size or len(darray)) for further use I get the following traceback.\r\n\r\n```\r\n#!python\r\nTraceback (most recent call last):\r\n  File \"C:\\Anaconda2\\envs\\labscript\\lib\\threading.py\", line 754, in run\r\n    self.__target(*self.__args, **self.__kwargs)\r\n  File \"C:\\Anaconda2\\envs\\labscript\\lib\\site-packages\\zprocess\\__init__.py\", line 67, in f\r\n    six.reraise(type, value, traceback)\r\n  File \"__main__.py\", line 2273, in preparse_globals_loop\r\n    self.preparse_globals()\r\n  File \"__main__.py\", line 2250, in preparse_globals\r\n    active_groups, evaled_globals, global_hierarchy, expansions)\r\n  File \"__main__.py\", line 2975, in guess_expansion_modes\r\n    expansion_types[dependency]['new_guess'] = str(global_name)\r\nKeyError: u'numStates'\r\n\r\n```\r\nDoing some digging I've found that my length variable is being added as a dependency of the original array but it is not being populated in the expansions and expansion_types dictionaries, hence the key failure.\r\n\r\nI suppose I could just calculate the required length external to runmanager where needed but it would be nice to have it as a global. Am I missing something obvious or is there something more fundamental going on?", "markup": "markdown", "html": "<p>I have a global with a calculated numpy array. When I try to save the size of the array in another global (using darray.size or len(darray)) for further use I get the following traceback.</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\Anaconda2\\envs\\labscript\\lib</span><span class=\"se\">\\t</span><span class=\"s2\">hreading.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">754</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">run</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__target</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__kwargs</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;C:\\Anaconda2\\envs\\labscript\\lib\\site-packages\\zprocess\\__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">f</span>\n    <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">reraise</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">traceback</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2273</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">preparse_globals_loop</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">preparse_globals</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2250</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">preparse_globals</span>\n    <span class=\"n\">active_groups</span><span class=\"p\">,</span> <span class=\"n\">evaled_globals</span><span class=\"p\">,</span> <span class=\"n\">global_hierarchy</span><span class=\"p\">,</span> <span class=\"n\">expansions</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2975</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">guess_expansion_modes</span>\n    <span class=\"n\">expansion_types</span><span class=\"p\">[</span><span class=\"n\">dependency</span><span class=\"p\">][</span><span class=\"s1\">&#39;new_guess&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">global_name</span><span class=\"p\">)</span>\n<span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">&#39;numStates&#39;</span>\n</pre></div>\n\n\n<p>Doing some digging I've found that my length variable is being added as a dependency of the original array but it is not being populated in the expansions and expansion_types dictionaries, hence the key failure.</p>\n<p>I suppose I could just calculate the required length external to runmanager where needed but it would be nice to have it as a global. Am I missing something obvious or is there something more fundamental going on?</p>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-06-12T20:00:57.669571+00:00", "milestone": null, "updated_on": "2017-06-13T14:55:23.108287+00:00", "type": "issue", "id": 38}