{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/42/comments/37724693.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/42#comment-37724693"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/42.json"}}, "type": "issue", "id": 42, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Compilation errors immediately following changes to labscript_utils"}, "content": {"raw": "Huh. I'm not sure why this is happening. It's not a time based thing, ModuleWatcher doesn't reload modules, it only unloads them. They are re-loaded when your code runs again and imports them. And ModuleWatcher holds the Python interpreter's import lock whilst it's unloading modules, so your code will not see unloading half-complete.\n\nthe labscript module is whitelisted, batch_compiler.py uses it (we could move the import to be last-second to make it not need to be whitelisted though). So ModuleWatcher should not unload it. It looks like it isn't, however it looks like it is still unloading labscript.functions. I would have thought that should be whitelisted since it is imported by labscript, which is whitelisted. The whitelist is determined by what is imported already when ModuleWatcher is instantiated - it doesn't make much sense that labscript would be in the whitelist but not labscript.functions. So I'll add some debug printlines and see if I can work out why ModuleWatcher is mistakenly unloading labscript.functions.\n\nRelatedly, it would be cool if ModuleWatcher, upon noticing changes in whitelisted modules still caused a message to be printed: \"blah blah changed, but it can't be reloaded because this process relies on its state (or whatever). Changes won't be reflected until the analysis/compiler subprocess is restarted\".\n\nIt would also be cool if ModuleWatcher knew which modules depended on which (which it could do by adding an import hook and tracing imports - we have profiling code out there that does this already), so that it didn't have to unload *everything* upon one thing changing. For performance reasons it would be nice to not have to reload a massive library like matplotlib or pandas just because some unrelated code changed. That's a separate issue though, and might be unworkable in practice.", "markup": "markdown", "html": "<p>Huh. I'm not sure why this is happening. It's not a time based thing, ModuleWatcher doesn't reload modules, it only unloads them. They are re-loaded when your code runs again and imports them. And ModuleWatcher holds the Python interpreter's import lock whilst it's unloading modules, so your code will not see unloading half-complete.</p>\n<p>the labscript module is whitelisted, batch_compiler.py uses it (we could move the import to be last-second to make it not need to be whitelisted though). So ModuleWatcher should not unload it. It looks like it isn't, however it looks like it is still unloading labscript.functions. I would have thought that should be whitelisted since it is imported by labscript, which is whitelisted. The whitelist is determined by what is imported already when ModuleWatcher is instantiated - it doesn't make much sense that labscript would be in the whitelist but not labscript.functions. So I'll add some debug printlines and see if I can work out why ModuleWatcher is mistakenly unloading labscript.functions.</p>\n<p>Relatedly, it would be cool if ModuleWatcher, upon noticing changes in whitelisted modules still caused a message to be printed: \"blah blah changed, but it can't be reloaded because this process relies on its state (or whatever). Changes won't be reflected until the analysis/compiler subprocess is restarted\".</p>\n<p>It would also be cool if ModuleWatcher knew which modules depended on which (which it could do by adding an import hook and tracing imports - we have profiling code out there that does this already), so that it didn't have to unload <em>everything</em> upon one thing changing. For performance reasons it would be nice to not have to reload a massive library like matplotlib or pandas just because some unrelated code changed. That's a separate issue though, and might be unworkable in practice.</p>", "type": "rendered"}, "created_on": "2017-06-20T18:19:06.426397+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-06-20T18:24:57.997664+00:00", "type": "issue_comment", "id": 37724693}