{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43845786.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43845786"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "Runmanager currently computes the number of shots by expanding the globals, so it would have been attempting to create a list of 20^8 = 25 billion elements, so I can see how that would fill system memory. Python should give a MemoryError, but perhaps the computer has swap space that it would have thrashed before then which could have made the computer unusable.\n\nThe expansion of the shots in `preparse_globals()` is solely to compute the number, which could of course be computed by multiplying together the axes lengths rather than doing the outer product and taking the length of the list. We should fix this too per performance reasons, even though that doesn't solve this bug.", "markup": "markdown", "html": "<p>Runmanager currently computes the number of shots by expanding the globals, so it would have been attempting to create a list of 20^8 = 25 billion elements, so I can see how that would fill system memory. Python should give a MemoryError, but perhaps the computer has swap space that it would have thrashed before then which could have made the computer unusable.</p>\n<p>The expansion of the shots in <code>preparse_globals()</code> is solely to compute the number, which could of course be computed by multiplying together the axes lengths rather than doing the outer product and taking the length of the list. We should fix this too per performance reasons, even though that doesn't solve this bug.</p>", "type": "rendered"}, "created_on": "2018-03-12T02:33:09.401781+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 43845786}