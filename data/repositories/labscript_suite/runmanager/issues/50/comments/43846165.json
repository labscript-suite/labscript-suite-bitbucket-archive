{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43846165.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43846165"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "I suspect we can just make runmanager not change the expansion types when it is starting up, can't we?\n\nIt doesn't change them every other time you change a global, it's just overzealous the first time.\n\nguess_expansion_modes is trying to do this correctly:\n\n\n```\n#!python\n\n    for group_name in evaled_globals:\n            for global_name in evaled_globals[group_name]:\n                new_value = evaled_globals[group_name][global_name]\n                try:\n                    previous_value = self.previous_evaled_globals[group_name][global_name]\n                except KeyError:\n                    # This variable is used to guess the expansion type\n                    # \n                    # If we already have an expansion specified for this, but\n                    # don't have a previous value, then we should use the \n                    # new_value for the guess as we are likely loading from HDF5\n                    # file for the first time (and either way, don't want to \n                    # overwrite what the user has put in the expansion type)\n                    #\n                    # If we don't have an expansion...\n                    # then we set it to '0' which will result in an\n                    # expansion type guess of '' (emptys string) This will\n                    # either result in nothing being done to the expansion\n                    # type or the expansion type being found to be 'outer',\n                    # which will then make it go through the machinery below\n                    if global_name in expansions and expansions[global_name]:\n                        previous_value = new_value\n                    else:\n                        previous_value = 0\n```\n\nBut there must be a bug in here.", "markup": "markdown", "html": "<p>I suspect we can just make runmanager not change the expansion types when it is starting up, can't we?</p>\n<p>It doesn't change them every other time you change a global, it's just overzealous the first time.</p>\n<p>guess_expansion_modes is trying to do this correctly:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">for</span> <span class=\"n\">group_name</span> <span class=\"ow\">in</span> <span class=\"n\">evaled_globals</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">global_name</span> <span class=\"ow\">in</span> <span class=\"n\">evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">]:</span>\n                <span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"n\">evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">][</span><span class=\"n\">global_name</span><span class=\"p\">]</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">previous_evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">][</span><span class=\"n\">global_name</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># This variable is used to guess the expansion type</span>\n                    <span class=\"c1\"># </span>\n                    <span class=\"c1\"># If we already have an expansion specified for this, but</span>\n                    <span class=\"c1\"># don&#39;t have a previous value, then we should use the </span>\n                    <span class=\"c1\"># new_value for the guess as we are likely loading from HDF5</span>\n                    <span class=\"c1\"># file for the first time (and either way, don&#39;t want to </span>\n                    <span class=\"c1\"># overwrite what the user has put in the expansion type)</span>\n                    <span class=\"c1\">#</span>\n                    <span class=\"c1\"># If we don&#39;t have an expansion...</span>\n                    <span class=\"c1\"># then we set it to &#39;0&#39; which will result in an</span>\n                    <span class=\"c1\"># expansion type guess of &#39;&#39; (emptys string) This will</span>\n                    <span class=\"c1\"># either result in nothing being done to the expansion</span>\n                    <span class=\"c1\"># type or the expansion type being found to be &#39;outer&#39;,</span>\n                    <span class=\"c1\"># which will then make it go through the machinery below</span>\n                    <span class=\"k\">if</span> <span class=\"n\">global_name</span> <span class=\"ow\">in</span> <span class=\"n\">expansions</span> <span class=\"ow\">and</span> <span class=\"n\">expansions</span><span class=\"p\">[</span><span class=\"n\">global_name</span><span class=\"p\">]:</span>\n                        <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>But there must be a bug in here.</p>", "type": "rendered"}, "created_on": "2018-03-12T03:25:13.663939+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-12T03:25:41.291846+00:00", "type": "issue_comment", "id": 43846165}