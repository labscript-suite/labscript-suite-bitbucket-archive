{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43820409.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43820409"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "Ran into this bug today. I created 8 globals each storing a list of 20 values and set them from outer to nothing. Everything worked fine until I closed runmanager and reopened it to find my RAM going through the roof. This then resulted in a freeze of our lab machine which could only be resolved by the hard reset button.\n\nThis should really be fixed.", "markup": "markdown", "html": "<p>Ran into this bug today. I created 8 globals each storing a list of 20 values and set them from outer to nothing. Everything worked fine until I closed runmanager and reopened it to find my RAM going through the roof. This then resulted in a freeze of our lab machine which could only be resolved by the hard reset button.</p>\n<p>This should really be fixed.</p>", "type": "rendered"}, "created_on": "2018-03-09T17:35:47.763172+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 43820409}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43845043.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43845043"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "I'm a bit surprised by the PC crash. Do you have an example global file I can reproduce with?\n\nAs a possible workaround: I'm assuming you removed \"outer\" because you wanted a list of values in your labscript file? If so, wrapping the list in `tuple(...)` in runmanager may do the trick (or something similar that casts it to a tuple). [runmanager only treats `list` and `numpy.array` as iterables](#!/labscript_suite/runmanager/src/7f5031fbb4c9dd097b1006f95ca088d7991d54d2/__init__.py?at=default&fileviewer=file-view-default#__init__.py-274).", "markup": "markdown", "html": "<p>I'm a bit surprised by the PC crash. Do you have an example global file I can reproduce with?</p>\n<p>As a possible workaround: I'm assuming you removed \"outer\" because you wanted a list of values in your labscript file? If so, wrapping the list in <code>tuple(...)</code> in runmanager may do the trick (or something similar that casts it to a tuple). <a data-is-external-link=\"true\" href=\"#!/labscript_suite/runmanager/src/7f5031fbb4c9dd097b1006f95ca088d7991d54d2/__init__.py?at=default&amp;fileviewer=file-view-default#__init__.py-274\" rel=\"nofollow\">runmanager only treats <code>list</code> and <code>numpy.array</code> as iterables</a>.</p>", "type": "rendered"}, "created_on": "2018-03-12T00:47:22.892750+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 43845043}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43845786.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43845786"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "Runmanager currently computes the number of shots by expanding the globals, so it would have been attempting to create a list of 20^8 = 25 billion elements, so I can see how that would fill system memory. Python should give a MemoryError, but perhaps the computer has swap space that it would have thrashed before then which could have made the computer unusable.\n\nThe expansion of the shots in `preparse_globals()` is solely to compute the number, which could of course be computed by multiplying together the axes lengths rather than doing the outer product and taking the length of the list. We should fix this too per performance reasons, even though that doesn't solve this bug.", "markup": "markdown", "html": "<p>Runmanager currently computes the number of shots by expanding the globals, so it would have been attempting to create a list of 20^8 = 25 billion elements, so I can see how that would fill system memory. Python should give a MemoryError, but perhaps the computer has swap space that it would have thrashed before then which could have made the computer unusable.</p>\n<p>The expansion of the shots in <code>preparse_globals()</code> is solely to compute the number, which could of course be computed by multiplying together the axes lengths rather than doing the outer product and taking the length of the list. We should fix this too per performance reasons, even though that doesn't solve this bug.</p>", "type": "rendered"}, "created_on": "2018-03-12T02:33:09.401781+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 43845786}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43845934.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43845934"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "Oh, that explains it!\n\nWe could fix the first half of this by enforcing that lists/numpy arrays are always treated as either outer or zip (and so expansions can't be empty) and that otherwise you must specify as a tuple or other list like data type. Are there any down sides to that really given we can use tuples for things that shouldn't be expanded?\n\nThe second half of the issue could be swept under the carpet by asking people to not change zip to outer but to a independently named zip group if they want it to persist across restarts, so that the name is not reverted (aka, leaving it as-is).\n\nThese changes would save us from having to store additional information in the HDF5 file.\n\nActually: might we be able to revisit the concept of \"outer\" entirely and replace it with a zip group containing a single global (at least as far as the backend is concerned)? Not sure exactly...but I think we get a few possible options if we enforce that list and numpy arrays must be expanded always.", "markup": "markdown", "html": "<p>Oh, that explains it!</p>\n<p>We could fix the first half of this by enforcing that lists/numpy arrays are always treated as either outer or zip (and so expansions can't be empty) and that otherwise you must specify as a tuple or other list like data type. Are there any down sides to that really given we can use tuples for things that shouldn't be expanded?</p>\n<p>The second half of the issue could be swept under the carpet by asking people to not change zip to outer but to a independently named zip group if they want it to persist across restarts, so that the name is not reverted (aka, leaving it as-is).</p>\n<p>These changes would save us from having to store additional information in the HDF5 file.</p>\n<p>Actually: might we be able to revisit the concept of \"outer\" entirely and replace it with a zip group containing a single global (at least as far as the backend is concerned)? Not sure exactly...but I think we get a few possible options if we enforce that list and numpy arrays must be expanded always.</p>", "type": "rendered"}, "created_on": "2018-03-12T02:56:22.369932+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 43845934}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43846165.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43846165"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "I suspect we can just make runmanager not change the expansion types when it is starting up, can't we?\n\nIt doesn't change them every other time you change a global, it's just overzealous the first time.\n\nguess_expansion_modes is trying to do this correctly:\n\n\n```\n#!python\n\n    for group_name in evaled_globals:\n            for global_name in evaled_globals[group_name]:\n                new_value = evaled_globals[group_name][global_name]\n                try:\n                    previous_value = self.previous_evaled_globals[group_name][global_name]\n                except KeyError:\n                    # This variable is used to guess the expansion type\n                    # \n                    # If we already have an expansion specified for this, but\n                    # don't have a previous value, then we should use the \n                    # new_value for the guess as we are likely loading from HDF5\n                    # file for the first time (and either way, don't want to \n                    # overwrite what the user has put in the expansion type)\n                    #\n                    # If we don't have an expansion...\n                    # then we set it to '0' which will result in an\n                    # expansion type guess of '' (emptys string) This will\n                    # either result in nothing being done to the expansion\n                    # type or the expansion type being found to be 'outer',\n                    # which will then make it go through the machinery below\n                    if global_name in expansions and expansions[global_name]:\n                        previous_value = new_value\n                    else:\n                        previous_value = 0\n```\n\nBut there must be a bug in here.", "markup": "markdown", "html": "<p>I suspect we can just make runmanager not change the expansion types when it is starting up, can't we?</p>\n<p>It doesn't change them every other time you change a global, it's just overzealous the first time.</p>\n<p>guess_expansion_modes is trying to do this correctly:</p>\n<div class=\"codehilite language-python\"><pre><span></span>    <span class=\"k\">for</span> <span class=\"n\">group_name</span> <span class=\"ow\">in</span> <span class=\"n\">evaled_globals</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">global_name</span> <span class=\"ow\">in</span> <span class=\"n\">evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">]:</span>\n                <span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"n\">evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">][</span><span class=\"n\">global_name</span><span class=\"p\">]</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">previous_evaled_globals</span><span class=\"p\">[</span><span class=\"n\">group_name</span><span class=\"p\">][</span><span class=\"n\">global_name</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># This variable is used to guess the expansion type</span>\n                    <span class=\"c1\"># </span>\n                    <span class=\"c1\"># If we already have an expansion specified for this, but</span>\n                    <span class=\"c1\"># don&#39;t have a previous value, then we should use the </span>\n                    <span class=\"c1\"># new_value for the guess as we are likely loading from HDF5</span>\n                    <span class=\"c1\"># file for the first time (and either way, don&#39;t want to </span>\n                    <span class=\"c1\"># overwrite what the user has put in the expansion type)</span>\n                    <span class=\"c1\">#</span>\n                    <span class=\"c1\"># If we don&#39;t have an expansion...</span>\n                    <span class=\"c1\"># then we set it to &#39;0&#39; which will result in an</span>\n                    <span class=\"c1\"># expansion type guess of &#39;&#39; (emptys string) This will</span>\n                    <span class=\"c1\"># either result in nothing being done to the expansion</span>\n                    <span class=\"c1\"># type or the expansion type being found to be &#39;outer&#39;,</span>\n                    <span class=\"c1\"># which will then make it go through the machinery below</span>\n                    <span class=\"k\">if</span> <span class=\"n\">global_name</span> <span class=\"ow\">in</span> <span class=\"n\">expansions</span> <span class=\"ow\">and</span> <span class=\"n\">expansions</span><span class=\"p\">[</span><span class=\"n\">global_name</span><span class=\"p\">]:</span>\n                        <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">previous_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>But there must be a bug in here.</p>", "type": "rendered"}, "created_on": "2018-03-12T03:25:13.663939+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-03-12T03:25:41.291846+00:00", "type": "issue_comment", "id": 43846165}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50/comments/43889156.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/50#comment-43889156"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/50.json"}}, "type": "issue", "id": 50, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Bugs with restoring expansion type when runmanager is reopened"}, "content": {"raw": "Using tuples solved the problem for me. I don't know that they don't expand.\n\nI think it might be a good idea to get rid of non expanding lists and arrays. But we should document somewhere, that tuples will not expand and should be used in places where expansion is 'unwanted'.", "markup": "markdown", "html": "<p>Using tuples solved the problem for me. I don't know that they don't expand.</p>\n<p>I think it might be a good idea to get rid of non expanding lists and arrays. But we should document somewhere, that tuples will not expand and should be used in places where expansion is 'unwanted'.</p>", "type": "rendered"}, "created_on": "2018-03-13T17:03:34.233451+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 43889156}], "page": 1, "size": 6}