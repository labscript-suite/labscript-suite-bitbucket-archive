{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54/comments/43897795.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/54#comment-43897795"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54.json"}}, "type": "issue", "id": 54, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "runmanager doesn't cache the labscript file when compiling shots"}, "content": {"raw": "Given that labscript code may import different modules based on the values of globals being scanned over, I'm not sure there's a general purpose fix.\n\nModuleWatcher triggering an abort would catch most cases though. But should moduleWatcher really abort your sequence if you `conda update` some unrelated package? Probably not. Should it disitnguish between code in labscriptlib vs elsewhere?\n\nPerhaps we could only trigger an abort if you change code in labscriptlib that has been imported.\n\nThen again important code that could break your compilation if changed might not be in labscriptlib.\n\nAnother solution is to just declare it correct behaviour and have runmanager print a warning and nothing else (maybe a popup message so it doesn't get lost in the output - with a \"don't remind me again\" checkbox). I'm leaning toward that given the solution of caching modules is fiddly whereas not fixing it results in very predictable, if not ideal behaviour.", "markup": "markdown", "html": "<p>Given that labscript code may import different modules based on the values of globals being scanned over, I'm not sure there's a general purpose fix.</p>\n<p>ModuleWatcher triggering an abort would catch most cases though. But should moduleWatcher really abort your sequence if you <code>conda update</code> some unrelated package? Probably not. Should it disitnguish between code in labscriptlib vs elsewhere?</p>\n<p>Perhaps we could only trigger an abort if you change code in labscriptlib that has been imported.</p>\n<p>Then again important code that could break your compilation if changed might not be in labscriptlib.</p>\n<p>Another solution is to just declare it correct behaviour and have runmanager print a warning and nothing else (maybe a popup message so it doesn't get lost in the output - with a \"don't remind me again\" checkbox). I'm leaning toward that given the solution of caching modules is fiddly whereas not fixing it results in very predictable, if not ideal behaviour.</p>", "type": "rendered"}, "created_on": "2018-03-14T03:58:03.416807+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 43897795}