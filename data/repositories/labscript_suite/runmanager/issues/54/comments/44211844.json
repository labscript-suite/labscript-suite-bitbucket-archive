{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54/comments/44211844.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/54#comment-44211844"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54.json"}}, "type": "issue", "id": 54, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "runmanager doesn't cache the labscript file when compiling shots"}, "content": {"raw": "It can cache it in memory, it doesn't need to write anything to disk.\n\nI'm more concerned about other modules. Batch compiler can disable `ModuleWatcher` for the duration of a whole sequence to ensure nothing is reloaded, in addition to caching the labscript file. This will require the protocol between runmanager and batch_compiler to be able to communicate the end of a sequence so that batch_compiler knows when it can re-enable ModuleWatcher.\n\nBetter still might be to have ModuleWatcher have a warning mode where rather than being disabled, it still detects module changes but says a caller-given warning message like \"module changed: ignoring until end of sequence compilation\" or something like that. Upon end of sequence ModuleWatcher would be put back into normal mode and would unload all the modules, and batch_compiler would erase its cache of the labscript file.\n\nThis is not a totally general solution: labscript code may conditionally import modules depending on globals, or the time of day, or anything at all, and so these still may have been modified since clicking engage since ModuleWatcher would not know about them until they are first imported. But I am happy with that being a limitation, it's a pretty minor one.", "markup": "markdown", "html": "<p>It can cache it in memory, it doesn't need to write anything to disk.</p>\n<p>I'm more concerned about other modules. Batch compiler can disable <code>ModuleWatcher</code> for the duration of a whole sequence to ensure nothing is reloaded, in addition to caching the labscript file. This will require the protocol between runmanager and batch_compiler to be able to communicate the end of a sequence so that batch_compiler knows when it can re-enable ModuleWatcher.</p>\n<p>Better still might be to have ModuleWatcher have a warning mode where rather than being disabled, it still detects module changes but says a caller-given warning message like \"module changed: ignoring until end of sequence compilation\" or something like that. Upon end of sequence ModuleWatcher would be put back into normal mode and would unload all the modules, and batch_compiler would erase its cache of the labscript file.</p>\n<p>This is not a totally general solution: labscript code may conditionally import modules depending on globals, or the time of day, or anything at all, and so these still may have been modified since clicking engage since ModuleWatcher would not know about them until they are first imported. But I am happy with that being a limitation, it's a pretty minor one.</p>", "type": "rendered"}, "created_on": "2018-03-27T23:22:12.254213+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 44211844}