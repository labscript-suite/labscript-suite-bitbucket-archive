{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54/comments/43897795.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/54#comment-43897795"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54.json"}}, "type": "issue", "id": 54, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "runmanager doesn't cache the labscript file when compiling shots"}, "content": {"raw": "Given that labscript code may import different modules based on the values of globals being scanned over, I'm not sure there's a general purpose fix.\n\nModuleWatcher triggering an abort would catch most cases though. But should moduleWatcher really abort your sequence if you `conda update` some unrelated package? Probably not. Should it disitnguish between code in labscriptlib vs elsewhere?\n\nPerhaps we could only trigger an abort if you change code in labscriptlib that has been imported.\n\nThen again important code that could break your compilation if changed might not be in labscriptlib.\n\nAnother solution is to just declare it correct behaviour and have runmanager print a warning and nothing else (maybe a popup message so it doesn't get lost in the output - with a \"don't remind me again\" checkbox). I'm leaning toward that given the solution of caching modules is fiddly whereas not fixing it results in very predictable, if not ideal behaviour.", "markup": "markdown", "html": "<p>Given that labscript code may import different modules based on the values of globals being scanned over, I'm not sure there's a general purpose fix.</p>\n<p>ModuleWatcher triggering an abort would catch most cases though. But should moduleWatcher really abort your sequence if you <code>conda update</code> some unrelated package? Probably not. Should it disitnguish between code in labscriptlib vs elsewhere?</p>\n<p>Perhaps we could only trigger an abort if you change code in labscriptlib that has been imported.</p>\n<p>Then again important code that could break your compilation if changed might not be in labscriptlib.</p>\n<p>Another solution is to just declare it correct behaviour and have runmanager print a warning and nothing else (maybe a popup message so it doesn't get lost in the output - with a \"don't remind me again\" checkbox). I'm leaning toward that given the solution of caching modules is fiddly whereas not fixing it results in very predictable, if not ideal behaviour.</p>", "type": "rendered"}, "created_on": "2018-03-14T03:58:03.416807+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 43897795}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54/comments/44209716.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/54#comment-44209716"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54.json"}}, "type": "issue", "id": 54, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "runmanager doesn't cache the labscript file when compiling shots"}, "content": {"raw": "I think we should start by fixing the caching issue of the labscript file it's self. Maybe by just coping the file to a temporary folder with the sequence id as file name? Runmanager could then delete that temp folder on shutdown an recreate a new one on the next start.\nThat would cover most of the cases where things are modified during measurement (in our lab).\n\nIn a second step we could then start to think about the exact implementation for the modules. I personally would opt for the approach Chris proposed with a warning instead of aborting compilation.", "markup": "markdown", "html": "<p>I think we should start by fixing the caching issue of the labscript file it's self. Maybe by just coping the file to a temporary folder with the sequence id as file name? Runmanager could then delete that temp folder on shutdown an recreate a new one on the next start.\nThat would cover most of the cases where things are modified during measurement (in our lab).</p>\n<p>In a second step we could then start to think about the exact implementation for the modules. I personally would opt for the approach Chris proposed with a warning instead of aborting compilation.</p>", "type": "rendered"}, "created_on": "2018-03-27T21:01:22.836359+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 44209716}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54/comments/44211844.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/54#comment-44211844"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/54.json"}}, "type": "issue", "id": 54, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "runmanager doesn't cache the labscript file when compiling shots"}, "content": {"raw": "It can cache it in memory, it doesn't need to write anything to disk.\n\nI'm more concerned about other modules. Batch compiler can disable `ModuleWatcher` for the duration of a whole sequence to ensure nothing is reloaded, in addition to caching the labscript file. This will require the protocol between runmanager and batch_compiler to be able to communicate the end of a sequence so that batch_compiler knows when it can re-enable ModuleWatcher.\n\nBetter still might be to have ModuleWatcher have a warning mode where rather than being disabled, it still detects module changes but says a caller-given warning message like \"module changed: ignoring until end of sequence compilation\" or something like that. Upon end of sequence ModuleWatcher would be put back into normal mode and would unload all the modules, and batch_compiler would erase its cache of the labscript file.\n\nThis is not a totally general solution: labscript code may conditionally import modules depending on globals, or the time of day, or anything at all, and so these still may have been modified since clicking engage since ModuleWatcher would not know about them until they are first imported. But I am happy with that being a limitation, it's a pretty minor one.", "markup": "markdown", "html": "<p>It can cache it in memory, it doesn't need to write anything to disk.</p>\n<p>I'm more concerned about other modules. Batch compiler can disable <code>ModuleWatcher</code> for the duration of a whole sequence to ensure nothing is reloaded, in addition to caching the labscript file. This will require the protocol between runmanager and batch_compiler to be able to communicate the end of a sequence so that batch_compiler knows when it can re-enable ModuleWatcher.</p>\n<p>Better still might be to have ModuleWatcher have a warning mode where rather than being disabled, it still detects module changes but says a caller-given warning message like \"module changed: ignoring until end of sequence compilation\" or something like that. Upon end of sequence ModuleWatcher would be put back into normal mode and would unload all the modules, and batch_compiler would erase its cache of the labscript file.</p>\n<p>This is not a totally general solution: labscript code may conditionally import modules depending on globals, or the time of day, or anything at all, and so these still may have been modified since clicking engage since ModuleWatcher would not know about them until they are first imported. But I am happy with that being a limitation, it's a pretty minor one.</p>", "type": "rendered"}, "created_on": "2018-03-27T23:22:12.254213+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 44211844}], "page": 1, "size": 3}