{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/56/comments/45347813.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/56#comment-45347813"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/56.json"}}, "type": "issue", "id": 56, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Globals can no longer be tuples of strings"}, "content": {"raw": "I can't reproduce the problem with single strings being numpy arrays, they come out in labscript code as single strings for me.\n\nMixed data seems to be coerced to a single datatype on both versions of Python. This is pretty useless, I've never noticed it before. Can you confirm you have a version of Python that does not do this? If you're sure it's the case, maybe it's a different version of h5py?\n\n...I'm running out of reasons why we should use HDF5 datatypes at all instead of rolling our own serialisation as in properties.py. I want to work with kosher HDF, but this is just too much of a pain in the neck.\n\n`properties.set_device_properties()` even tries to use native types before falling back to JSON serialisation. It should probably also check that the result is actually equal to what it put in, because otherwise mixed datatypes in a tuple/list might be getting coerced to be the same datatype!", "markup": "markdown", "html": "<p>I can't reproduce the problem with single strings being numpy arrays, they come out in labscript code as single strings for me.</p>\n<p>Mixed data seems to be coerced to a single datatype on both versions of Python. This is pretty useless, I've never noticed it before. Can you confirm you have a version of Python that does not do this? If you're sure it's the case, maybe it's a different version of h5py?</p>\n<p>...I'm running out of reasons why we should use HDF5 datatypes at all instead of rolling our own serialisation as in properties.py. I want to work with kosher HDF, but this is just too much of a pain in the neck.</p>\n<p><code>properties.set_device_properties()</code> even tries to use native types before falling back to JSON serialisation. It should probably also check that the result is actually equal to what it put in, because otherwise mixed datatypes in a tuple/list might be getting coerced to be the same datatype!</p>", "type": "rendered"}, "created_on": "2018-05-10T06:48:25.140041+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 45347813}