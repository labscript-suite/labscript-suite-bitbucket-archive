{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51386370.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51386370"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "So I don't have time to look into this in more detail today, but this is my thoughts so far:\n\n* using `np.concatenate()` really should be avoided. It's not going to play nice with zip group detection at all...for example notice that `uWave_scan` is in a zip group with `AC_regime`, but they are going to be different lengths.\n\n* The use of `np.concatenate()` might be acceptable if it was used as `np.concatenate(np.array(arr1), np.array(arr2), ...)` where `arr1`, `arr2`, etc. are defined as tuples in runmanager (so they don't form an axis of the parameter space)\n\nIf the aim is to only have `uWave_scan` as the axis of the parameter space (and everything else is ignored), then wrapping all of the other globals in `tuple()` (and converting back to an array when using in a subsequent global) will probably make the problem go away. \n\nI'm not sure there is much else we could do to fix it in runmanager, because trying to make runmanager form a single axis out of 6 globals of different lengths is probably very, very hard to get right (especially since we need to do it in a way where it never attempts to expand them in an outer product first, even if the logic would ultimately find the correct configuration after several iterations).", "markup": "markdown", "html": "<p>So I don't have time to look into this in more detail today, but this is my thoughts so far:</p>\n<ul>\n<li>\n<p>using <code>np.concatenate()</code> really should be avoided. It's not going to play nice with zip group detection at all...for example notice that <code>uWave_scan</code> is in a zip group with <code>AC_regime</code>, but they are going to be different lengths.</p>\n</li>\n<li>\n<p>The use of <code>np.concatenate()</code> might be acceptable if it was used as <code>np.concatenate(np.array(arr1), np.array(arr2), ...)</code> where <code>arr1</code>, <code>arr2</code>, etc. are defined as tuples in runmanager (so they don't form an axis of the parameter space)</p>\n</li>\n</ul>\n<p>If the aim is to only have <code>uWave_scan</code> as the axis of the parameter space (and everything else is ignored), then wrapping all of the other globals in <code>tuple()</code> (and converting back to an array when using in a subsequent global) will probably make the problem go away. </p>\n<p>I'm not sure there is much else we could do to fix it in runmanager, because trying to make runmanager form a single axis out of 6 globals of different lengths is probably very, very hard to get right (especially since we need to do it in a way where it never attempts to expand them in an outer product first, even if the logic would ultimately find the correct configuration after several iterations).</p>", "type": "rendered"}, "created_on": "2019-03-28T23:40:53.841951+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 51386370}