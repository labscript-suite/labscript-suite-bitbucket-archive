{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51384736.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51384736"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Thanks for the bug report. This is a little concerning! Do you know what version you were on before the update? Perhaps we can 'bisect' the changes and figure out where the issue was introduced. If you're enthusiastic about this, you would want to search among commits in the default branch only - there are not that many (tortoisehg can show only the default branch if you press ctrl-s and select 'default' from the dropdown menu in the top right).\n\nIf you are happy sending me your globals file, I can also see if I can reproduce it.\n\nI also notice you have customised runmanager a little - is the issue present on \"stock\" runmanager?", "markup": "markdown", "html": "<p>Thanks for the bug report. This is a little concerning! Do you know what version you were on before the update? Perhaps we can 'bisect' the changes and figure out where the issue was introduced. If you're enthusiastic about this, you would want to search among commits in the default branch only - there are not that many (tortoisehg can show only the default branch if you press ctrl-s and select 'default' from the dropdown menu in the top right).</p>\n<p>If you are happy sending me your globals file, I can also see if I can reproduce it.</p>\n<p>I also notice you have customised runmanager a little - is the issue present on \"stock\" runmanager?</p>", "type": "rendered"}, "created_on": "2019-03-28T20:52:02.734075+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 51384736}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51385359.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51385359"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "I was at the merge for pull request #27 and I'll e-mail the globals file to you directly.\n\nThe modification is just adding a QTimer to press the engage button every X seconds if that check box is checked, so hopefully that isn't the issue. I can try \"stock\", along with some other testing, when I get back to the lab tomorrow.", "markup": "markdown", "html": "<p>I was at the merge for <a href=\"#!/labscript_suite/runmanager/pull-requests/27/splash-screen\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #27</a> and I'll e-mail the globals file to you directly.</p>\n<p>The modification is just adding a QTimer to press the engage button every X seconds if that check box is checked, so hopefully that isn't the issue. I can try \"stock\", along with some other testing, when I get back to the lab tomorrow.</p>", "type": "rendered"}, "created_on": "2019-03-28T21:39:18.036773+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 51385359}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51385521.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51385521"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Ah, it sounds doubtful a non-active Qt timer could have anything to do with it.\n\nWith the h5 file you sent me, I can reproduce the issue (though with other fairly complex ones I could not). I'll look into it!", "markup": "markdown", "html": "<p>Ah, it sounds doubtful a non-active Qt timer could have anything to do with it.</p>\n<p>With the h5 file you sent me, I can reproduce the issue (though with other fairly complex ones I could not). I'll look into it!</p>", "type": "rendered"}, "created_on": "2019-03-28T21:54:47.450196+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-28T21:54:56.778701+00:00", "type": "issue_comment", "id": 51385521}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51386107.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51386107"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "The issue is independent of Python 2 vs Python 3.\n\nI have to revert back to version 2.1.0, just before the merge of pull request #15 before it works again.\n\nHowever, if I then update back to the latest version, the issue no longer occurs. This is because version 2.1.0 *modifies the names of the zip groups*, presumably erroneously since pull request #15 is called \"Fixed several bugs where custom zip groups were overridden.\" So that means there's some hysteresis to the testing...I'm having to restore the h5 file in between each test. It also means 2.1.0 is probably not actually immune to the problem, it's just not hitting on the conditions that trigger it since it modified the zip groups. So this seems at odds with you seeing things working before updating from the commit at pull request #27, so something else must have changed as well.\n\nFor anyone else interested, here's a screenshot of the offending group:\n\n![Screenshot from 2019-03-28 18-30-57.png](data/bitbucket.org/repo/6g5bg5/images/3682164210-Screenshot_from_2019-03-28_18-30-57.png)\n\nActivating just this group causes the crash - takes about 20 seconds to fill my computer's 32GB of memory before the OS kills it.\n\nIt's pretty compex, I'm definitely not able to tell how many shots this results in by looking at it. You've got six axes, lots of references, one global is an array that is the concatenation of three of the others. No wonder we didn't see this elsewhere! My guess is that runmanager is interpreting one of these arrays as being extremely large such that it doesn't fit in memory.\n\nFurther debugging reveals that runmanager is choking on expanding the outer product over all axes - it interprets the above as describing 57,600,000 shots, so no wonder. \n\nThe axes are as follows:\n```\n      zip Res_regime n =  40\n                zip  n =  1\n       zip AC_regime n =  60\n      zip uWave_scan n =  120\n         zip resDets n =  10\n     zip High_regime n =  20\n```\n\n(the unnamed zip group with n=1 must be the globals not in any group, not sure).\n\nIf this isn't the result you were going for, can you tell what dimensions runmanager should have gotten?\n\nOr perhaps runmanager changed the expansion settings, and when set back to what they should be, it doesn't choke on them?\n\nIf you want to debug further (or just recover from the situation) you can modify runmanager's default saved config file (<experiment_shot_storage>/runmanager.ini) and deactivate the groups (or just rename the config file so runmanager starts up fresh). You can then open the globals file in a fresh runmanager, and modify the values before setting the group to be active. The preparser won't touch it if it's inactive.", "markup": "markdown", "html": "<p>The issue is independent of Python 2 vs Python 3.</p>\n<p>I have to revert back to version 2.1.0, just before the merge of <a href=\"#!/labscript_suite/runmanager/pull-requests/15/fixed-several-bugs-where-custom-zip-groups\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #15</a> before it works again.</p>\n<p>However, if I then update back to the latest version, the issue no longer occurs. This is because version 2.1.0 <em>modifies the names of the zip groups</em>, presumably erroneously since <a href=\"#!/labscript_suite/runmanager/pull-requests/15/fixed-several-bugs-where-custom-zip-groups\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #15</a> is called \"Fixed several bugs where custom zip groups were overridden.\" So that means there's some hysteresis to the testing...I'm having to restore the h5 file in between each test. It also means 2.1.0 is probably not actually immune to the problem, it's just not hitting on the conditions that trigger it since it modified the zip groups. So this seems at odds with you seeing things working before updating from the commit at <a href=\"#!/labscript_suite/runmanager/pull-requests/27/splash-screen\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #27</a>, so something else must have changed as well.</p>\n<p>For anyone else interested, here's a screenshot of the offending group:</p>\n<p><img alt=\"Screenshot from 2019-03-28 18-30-57.png\" src=\"data/bitbucket.org/repo/6g5bg5/images/3682164210-Screenshot_from_2019-03-28_18-30-57.png\" /></p>\n<p>Activating just this group causes the crash - takes about 20 seconds to fill my computer's 32GB of memory before the OS kills it.</p>\n<p>It's pretty compex, I'm definitely not able to tell how many shots this results in by looking at it. You've got six axes, lots of references, one global is an array that is the concatenation of three of the others. No wonder we didn't see this elsewhere! My guess is that runmanager is interpreting one of these arrays as being extremely large such that it doesn't fit in memory.</p>\n<p>Further debugging reveals that runmanager is choking on expanding the outer product over all axes - it interprets the above as describing 57,600,000 shots, so no wonder. </p>\n<p>The axes are as follows:</p>\n<div class=\"codehilite\"><pre><span></span>      zip Res_regime n =  40\n                zip  n =  1\n       zip AC_regime n =  60\n      zip uWave_scan n =  120\n         zip resDets n =  10\n     zip High_regime n =  20\n</pre></div>\n\n\n<p>(the unnamed zip group with n=1 must be the globals not in any group, not sure).</p>\n<p>If this isn't the result you were going for, can you tell what dimensions runmanager should have gotten?</p>\n<p>Or perhaps runmanager changed the expansion settings, and when set back to what they should be, it doesn't choke on them?</p>\n<p>If you want to debug further (or just recover from the situation) you can modify runmanager's default saved config file (&lt;experiment_shot_storage&gt;/runmanager.ini) and deactivate the groups (or just rename the config file so runmanager starts up fresh). You can then open the globals file in a fresh runmanager, and modify the values before setting the group to be active. The preparser won't touch it if it's inactive.</p>", "type": "rendered"}, "created_on": "2019-03-28T23:01:28.197485+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-28T23:02:45.217449+00:00", "type": "issue_comment", "id": 51386107}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51386370.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51386370"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "So I don't have time to look into this in more detail today, but this is my thoughts so far:\n\n* using `np.concatenate()` really should be avoided. It's not going to play nice with zip group detection at all...for example notice that `uWave_scan` is in a zip group with `AC_regime`, but they are going to be different lengths.\n\n* The use of `np.concatenate()` might be acceptable if it was used as `np.concatenate(np.array(arr1), np.array(arr2), ...)` where `arr1`, `arr2`, etc. are defined as tuples in runmanager (so they don't form an axis of the parameter space)\n\nIf the aim is to only have `uWave_scan` as the axis of the parameter space (and everything else is ignored), then wrapping all of the other globals in `tuple()` (and converting back to an array when using in a subsequent global) will probably make the problem go away. \n\nI'm not sure there is much else we could do to fix it in runmanager, because trying to make runmanager form a single axis out of 6 globals of different lengths is probably very, very hard to get right (especially since we need to do it in a way where it never attempts to expand them in an outer product first, even if the logic would ultimately find the correct configuration after several iterations).", "markup": "markdown", "html": "<p>So I don't have time to look into this in more detail today, but this is my thoughts so far:</p>\n<ul>\n<li>\n<p>using <code>np.concatenate()</code> really should be avoided. It's not going to play nice with zip group detection at all...for example notice that <code>uWave_scan</code> is in a zip group with <code>AC_regime</code>, but they are going to be different lengths.</p>\n</li>\n<li>\n<p>The use of <code>np.concatenate()</code> might be acceptable if it was used as <code>np.concatenate(np.array(arr1), np.array(arr2), ...)</code> where <code>arr1</code>, <code>arr2</code>, etc. are defined as tuples in runmanager (so they don't form an axis of the parameter space)</p>\n</li>\n</ul>\n<p>If the aim is to only have <code>uWave_scan</code> as the axis of the parameter space (and everything else is ignored), then wrapping all of the other globals in <code>tuple()</code> (and converting back to an array when using in a subsequent global) will probably make the problem go away. </p>\n<p>I'm not sure there is much else we could do to fix it in runmanager, because trying to make runmanager form a single axis out of 6 globals of different lengths is probably very, very hard to get right (especially since we need to do it in a way where it never attempts to expand them in an outer product first, even if the logic would ultimately find the correct configuration after several iterations).</p>", "type": "rendered"}, "created_on": "2019-03-28T23:40:53.841951+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 51386370}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51395295.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51395295"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Should have figured it was something to do with this. The aim is to use `uWave_scan` as the only axis of the parameter space. The other globals just help in constructing the somewhat complicated scan structure (in this case, a mixture of 5 separate log scales and a linear scale).\n\nI end up needing fairly complex scans on a regular basis and have found that building in chunks worked OK in the past. Normally runmanager just gets confused then I manually deactivate all the unwanted expansions. Must have pushed a little too far adding that final linear range and didn't realize it until I restated runmanager after the update and the expansions were rechecked. Oops. I am back up and running though.\n\nAnyway, a few follow-up items then we can probably let this issue go.\n\n* The first thing I tried to get up and running was to just go into the globals file and remove all the expansions. That was only mildly effective though since runmanager seems to ignore that field and re-guess the expansions from scratch when first opened. Is that really desirable behavior? Why save the expansions to the file if they are ignored when it's read anyway?\n* Wrapping things in tuples works, but I'm not a fan of it as a long term solution. While I find it a bit obfuscating, my bigger concern is that it eats up real estate in the value field, which is already pretty limited. In fact, the main reason I have been breaking up the scan calculations is because putting them into one monolithic line isn't manageable since the entry field isn't big enough to see everything. Is there a way to 'fix' this more elegantly? I agree with Phil that having runmanager somehow do the logic automatically isn't worth the time or effort. I can conjure a few potential ideas that may be simpler:\n    * Some sort of control that tells runmanager to ignore a group when guessing expansions. Likely another column in the group tab. Then all these intermediate calculations could be moved into an ignored group. I imagine zip group detection might get a bit tricky though.\n    * What about just making the value field line wrap? Then it would be easy to move all the calculations to a single field.\n    * Have the expansions on first start be read from the globals file by default. Add a \"Re-evaluate Expansions\" button somewhere the user can manually use that provides that hard-reset functionality.\n\nAnyway, those are just a few thoughts. As always, thanks for your prompt replies.", "markup": "markdown", "html": "<p>Should have figured it was something to do with this. The aim is to use <code>uWave_scan</code> as the only axis of the parameter space. The other globals just help in constructing the somewhat complicated scan structure (in this case, a mixture of 5 separate log scales and a linear scale).</p>\n<p>I end up needing fairly complex scans on a regular basis and have found that building in chunks worked OK in the past. Normally runmanager just gets confused then I manually deactivate all the unwanted expansions. Must have pushed a little too far adding that final linear range and didn't realize it until I restated runmanager after the update and the expansions were rechecked. Oops. I am back up and running though.</p>\n<p>Anyway, a few follow-up items then we can probably let this issue go.</p>\n<ul>\n<li>The first thing I tried to get up and running was to just go into the globals file and remove all the expansions. That was only mildly effective though since runmanager seems to ignore that field and re-guess the expansions from scratch when first opened. Is that really desirable behavior? Why save the expansions to the file if they are ignored when it's read anyway?</li>\n<li>Wrapping things in tuples works, but I'm not a fan of it as a long term solution. While I find it a bit obfuscating, my bigger concern is that it eats up real estate in the value field, which is already pretty limited. In fact, the main reason I have been breaking up the scan calculations is because putting them into one monolithic line isn't manageable since the entry field isn't big enough to see everything. Is there a way to 'fix' this more elegantly? I agree with Phil that having runmanager somehow do the logic automatically isn't worth the time or effort. I can conjure a few potential ideas that may be simpler:<ul>\n<li>Some sort of control that tells runmanager to ignore a group when guessing expansions. Likely another column in the group tab. Then all these intermediate calculations could be moved into an ignored group. I imagine zip group detection might get a bit tricky though.</li>\n<li>What about just making the value field line wrap? Then it would be easy to move all the calculations to a single field.</li>\n<li>Have the expansions on first start be read from the globals file by default. Add a \"Re-evaluate Expansions\" button somewhere the user can manually use that provides that hard-reset functionality.</li>\n</ul>\n</li>\n</ul>\n<p>Anyway, those are just a few thoughts. As always, thanks for your prompt replies.</p>", "type": "rendered"}, "created_on": "2019-03-29T13:04:59.037139+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 51395295}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51439016.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51439016"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Hi David,\n\nJust wondering about your second point: Is the issue that the line is too long to fit on your monitor? Or that, no matter how big you make runmanager, the field stays the same size. As far as I'm aware both the value display and editing field of global values can grow as much as you like (and the whole view is in a scroll window). Just wondering if this is what you see too, or if there is a subtle Qt bug that makes your value field display differently to mine.", "markup": "markdown", "html": "<p>Hi David,</p>\n<p>Just wondering about your second point: Is the issue that the line is too long to fit on your monitor? Or that, no matter how big you make runmanager, the field stays the same size. As far as I'm aware both the value display and editing field of global values can grow as much as you like (and the whole view is in a scroll window). Just wondering if this is what you see too, or if there is a subtle Qt bug that makes your value field display differently to mine.</p>", "type": "rendered"}, "created_on": "2019-04-02T06:45:20.952345+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 51439016}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51445618.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51445618"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Chris, \n\nOh, it is definitely just that the line is too long to fit on the monitor.\n\nI actually went ahead and took a stab at point 2 since it seemed like it might be easy enough for me to quickly try out. That turned out not to be the case but it is half-way there. It's done by over-loading the sizeHintRole of AlternatingColorModel.data() and adding an extra signal/slot for column resizing to trigger it.\n\n![Wrapping_linebreaks.png](data/bitbucket.org/repo/6g5bg5/images/4140405940-Wrapping_linebreaks.png)\n\nIt's only half done because the editor box does not have linewrapping making this a purely cosmetic change for the moment. \n\n![Wrapped_editting.png](data/bitbucket.org/repo/6g5bg5/images/4230229830-Wrapped_editting.png)\n\nI'm reasonably sure it's possible, but it goes beyond the time I'm willing to commit to something that probably won't leave our lab anyway.", "markup": "markdown", "html": "<p>Chris, </p>\n<p>Oh, it is definitely just that the line is too long to fit on the monitor.</p>\n<p>I actually went ahead and took a stab at point 2 since it seemed like it might be easy enough for me to quickly try out. That turned out not to be the case but it is half-way there. It's done by over-loading the sizeHintRole of AlternatingColorModel.data() and adding an extra signal/slot for column resizing to trigger it.</p>\n<p><img alt=\"Wrapping_linebreaks.png\" src=\"data/bitbucket.org/repo/6g5bg5/images/4140405940-Wrapping_linebreaks.png\" /></p>\n<p>It's only half done because the editor box does not have linewrapping making this a purely cosmetic change for the moment. </p>\n<p><img alt=\"Wrapped_editting.png\" src=\"data/bitbucket.org/repo/6g5bg5/images/4230229830-Wrapped_editting.png\" /></p>\n<p>I'm reasonably sure it's possible, but it goes beyond the time I'm willing to commit to something that probably won't leave our lab anyway.</p>", "type": "rendered"}, "created_on": "2019-04-02T12:37:41.976001+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 51445618}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51679234.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51679234"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "I had some extra time and figured this out the rest of the way. Turns out to be pretty simple once you find the right widget. Boils down to overloading the ItemDelegate.createEditor() method to use QPlainTextEdit instead of the default QLineEdit. It looks like this:\n\n![Wrapped_editor.png](data/bitbucket.org/repo/6g5bg5/images/4156944894-Wrapped_editor.png)\n\nI'm actually fairly happy with this solution and intend to go with it. Is there interest enough for me to submit a PR?", "markup": "markdown", "html": "<p>I had some extra time and figured this out the rest of the way. Turns out to be pretty simple once you find the right widget. Boils down to overloading the ItemDelegate.createEditor() method to use QPlainTextEdit instead of the default QLineEdit. It looks like this:</p>\n<p><img alt=\"Wrapped_editor.png\" src=\"data/bitbucket.org/repo/6g5bg5/images/4156944894-Wrapped_editor.png\" /></p>\n<p>I'm actually fairly happy with this solution and intend to go with it. Is there interest enough for me to submit a PR?</p>", "type": "rendered"}, "created_on": "2019-04-16T16:01:58.399449+00:00", "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, "updated_on": null, "type": "issue_comment", "id": 51679234}, {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66/comments/51679509.json"}, "html": {"href": "#!/labscript_suite/runmanager/issues/66#comment-51679509"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/issues/66.json"}}, "type": "issue", "id": 66, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "title": "Preparse thread memory leak/crash"}, "content": {"raw": "Hi David,\n\nLooks great!\n\nI see no downside to making line-wrapping the default, and since your code isn't doing anything magical (overriding the methods in the way you've done sounds like the 'proper' way to do this) I don't think there'd be any issue of choking on edge-cases. So I'm interested, if you make a pull request I'd be happy to review and would merge if there are no obvious problems!", "markup": "markdown", "html": "<p>Hi David,</p>\n<p>Looks great!</p>\n<p>I see no downside to making line-wrapping the default, and since your code isn't doing anything magical (overriding the methods in the way you've done sounds like the 'proper' way to do this) I don't think there'd be any issue of choking on edge-cases. So I'm interested, if you make a pull request I'd be happy to review and would merge if there are no obvious problems!</p>", "type": "rendered"}, "created_on": "2019-04-16T16:20:16.425802+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-16T16:20:35.521183+00:00", "type": "issue_comment", "id": 51679509}], "page": 1, "size": 10}