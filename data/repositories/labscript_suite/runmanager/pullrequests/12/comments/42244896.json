{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12/comments/42244896.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12/_/diff#comment-42244896"}}, "parent": {"id": 42244877, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12/comments/42244877.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12/_/diff#comment-42244877"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12"}}, "title": "Arrow Key switching"}, "content": {"raw": "No rush I was gonna call it a day soon anyway.\n\nUpdate: Ok some thinking later I have two comments. \nFirst why worry about python 2 and 3 division differences as they be in the past very soon anyway or could get fixed with a few imports of future. \nSecond if we want to worry I could treat int and float the same until editing ends, only doing the conversion to int if the variable was a int to start with. And if int has become a float then just let it stay float. This would done by saving \"self.was_int\" just like when initializing \"self.stepsize\". This is probably the cleanest and most intuitive way to do the conservation of types .\n\nUpdate 2: Just keeping a variable \"self.was_int\" won't work as then floats can't become int ever. Is importing float division into experiment script sandbox a option? (it will have to happen sometime anyway)", "markup": "markdown", "html": "<p>No rush I was gonna call it a day soon anyway.</p>\n<p>Update: Ok some thinking later I have two comments. \nFirst why worry about python 2 and 3 division differences as they be in the past very soon anyway or could get fixed with a few imports of future. \nSecond if we want to worry I could treat int and float the same until editing ends, only doing the conversion to int if the variable was a int to start with. And if int has become a float then just let it stay float. This would done by saving \"self.was_int\" just like when initializing \"self.stepsize\". This is probably the cleanest and most intuitive way to do the conservation of types .</p>\n<p>Update 2: Just keeping a variable \"self.was_int\" won't work as then floats can't become int ever. Is importing float division into experiment script sandbox a option? (it will have to happen sometime anyway)</p>", "type": "rendered"}, "created_on": "2017-08-05T20:35:54.737354+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-06T08:54:24.759821+00:00", "type": "pullrequest_comment", "id": 42244896}