{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12/comments/42252589.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12/_/diff#comment-42252589"}}, "parent": {"id": 42252485, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12/comments/42252485.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12/_/diff#comment-42252485"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/12.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/12"}}, "title": "Arrow Key switching"}, "content": {"raw": "Not just that, but numpy may make assumptions about what type of array to make based on whether you pass in a float or not, or you might be setting some device properties that are ultimately going to be written to a C API for some device, and the C API needs floats. We were even typing hex integers into labscript at one point because it was some serial number for a camera (I think we changed them to strings eventually).  Whereas this code presently would parse hex as an integer and write it back with its base 10 value.\n\n\nI'm pretty adamant about making sure that the user gets what they typed, but I'm also happy to help make it happen, since it's an interesting problem!\n\nFor example, if you want to know if a string is a Python base 10 int, or a float, here's all the things I think one needs to take into account:\n\n```\n#!python\n\nimport sys\nimport ast\nPY2 = sys.version_info[0] == 2\nif not PY2:\n    long = int\n\n\ndef is_decimal_int(s):\n    try:\n        value = ast.literal_eval(s)\n    except SyntaxError:\n        return False\n    \n    if type(ast.literal_eval(s)) in [int, long]:\n        if PY2:\n            # int literals starting with zero in PY2 are octal:\n            if s.startswith('0'):\n                return False\n        try:\n            int(s)\n        except ValueError:\n            # Not base 10\n            return False\n        return True\n\ndef is_float(s):\n    try:\n        value = ast.literal_eval(s)\n    except SyntaxError:\n        return False\n    return type(value) == float\n\n\nif __name__ == '__main__':\n    assert not is_decimal_int('123.0')\n    assert is_decimal_int('123')\n    assert not is_decimal_int('0o123')\n    assert not is_decimal_int('0xdeadbeef')\n    assert not is_decimal_int('0b10110110')\n    assert not is_decimal_int('0123') \n    if PY2:       \n        assert not is_decimal_int('123_000')\n    else:\n        assert is_decimal_int('123_000')\n\n    assert is_float('01.0')\n    assert is_float('1.0')\n    assert is_float('-1.1232165321')\n    assert not is_float('1')\n    if PY2:\n        assert not is_float('1_000_000.0')\n    else:\n        assert is_float('1_000_000.0')\n```", "markup": "markdown", "html": "<p>Not just that, but numpy may make assumptions about what type of array to make based on whether you pass in a float or not, or you might be setting some device properties that are ultimately going to be written to a C API for some device, and the C API needs floats. We were even typing hex integers into labscript at one point because it was some serial number for a camera (I think we changed them to strings eventually).  Whereas this code presently would parse hex as an integer and write it back with its base 10 value.</p>\n<p>I'm pretty adamant about making sure that the user gets what they typed, but I'm also happy to help make it happen, since it's an interesting problem!</p>\n<p>For example, if you want to know if a string is a Python base 10 int, or a float, here's all the things I think one needs to take into account:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ast</span>\n<span class=\"n\">PY2</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>\n    <span class=\"nb\">long</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_decimal_int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">literal_eval</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">SyntaxError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">literal_eval</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">long</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>\n            <span class=\"c1\"># int literals starting with zero in PY2 are octal:</span>\n            <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Not base 10</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_float</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ast</span><span class=\"o\">.</span><span class=\"n\">literal_eval</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">SyntaxError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">return</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">float</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;123.0&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;123&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;0o123&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;0xdeadbeef&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;0b10110110&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;0123&#39;</span><span class=\"p\">)</span> \n    <span class=\"k\">if</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>       \n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;123_000&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">is_decimal_int</span><span class=\"p\">(</span><span class=\"s1\">&#39;123_000&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;01.0&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;1.0&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;-1.1232165321&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">PY2</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;1_000_000.0&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">is_float</span><span class=\"p\">(</span><span class=\"s1\">&#39;1_000_000.0&#39;</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-06T23:44:51.079670+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-07T00:06:35.005917+00:00", "type": "pullrequest_comment", "id": 42252589}