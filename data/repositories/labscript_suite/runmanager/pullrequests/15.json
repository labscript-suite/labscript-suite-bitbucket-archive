{"rendered": {"description": {"raw": "fixes issue #49 (mostly)\r\n\r\nCurrently this does not fix the following cases:\r\n\r\n* Manually changing an \"outer\" expansion type to nothing (it will revert to \"outer\" when you reopen runmanager)\r\n* Manually changing a zip group to \"outer\" (it will revert to the zip group when you re-open)\r\n\r\nI believe these two cases are very difficult to solve. They may actually be impossible to solve without storing (in the HDF5 file) whether the expansion type was set manually (by the user) or automatically (by runmanager)  \r\n\r\n# **An additional change this introduces**\r\n\r\nWhile zip groups have always been automatically named based on the top level global dependency, the zip group chosen when a global had multiple dependencies was less clear. I believe it used to be based on the alphabetical order of the top level dependencies (the globals that do **not** depend on other globals), with the last one (when sorted alphabetically) chosen as the zip group name for a given global (although this would only update the zip group name of the globals that depended on this last one...if that makes sense).  \r\n  \r\nNow, the zip group name is chosen based on which zip group was created first. So if a global is part of a zip group, the name will **not** update, even if a dependency becomes a list later on. I think this makes more sense, as there is less consequential behaviour going on.\r\n\r\n\u200c\r\n\r\n# **Those who wish to test**\r\n\r\nPlease play around with zip groups and outer products. I would suggest having at least several independent sets (to avoid confusing I don't mean Python sets, I just mean a collection of globals that you will use together) of globals (two or three globals per set should be enough) that depend on globals only from within each set. Then introduce some globals that depend on globals from more than one of those sets. Also have globals that don't relate to any others. \r\n\r\nOnce you've set up some globals\r\n\r\n* Then start playing around with changing globals from single values to arrays. \r\n* See if the zip group naming makes sense\r\n* See if the changes from no expansion to outer product to zip group expansion makes sense.\r\n* See if the expansion state is maintained when you open and close runmanager\r\n* You may also want to play with global names, since some code still depends on alphabetical sorting and so there may be bugs I haven't uncovered there\r\n* See if you can break it in any way!\r\n\r\nThanks!\r\n\r\nP.S. Please leave me to merge so that the branch gets closed!", "markup": "markdown", "html": "<p>fixes issue <a href=\"#!/labscript_suite/runmanager/issues/49/zip-groups-are-overridden-when-reopening\" rel=\"nofollow\" title=\"Zip groups are overridden when reopening runmanager\" class=\"ap-connect-link\"><s>#49</s></a> (mostly)</p>\n<p>Currently this does not fix the following cases:</p>\n<ul>\n<li>Manually changing an \"outer\" expansion type to nothing (it will revert to \"outer\" when you reopen runmanager)</li>\n<li>Manually changing a zip group to \"outer\" (it will revert to the zip group when you re-open)</li>\n</ul>\n<p>I believe these two cases are very difficult to solve. They may actually be impossible to solve without storing (in the HDF5 file) whether the expansion type was set manually (by the user) or automatically (by runmanager)  </p>\n<h1 id=\"markdown-header-an-additional-change-this-introduces\"><strong>An additional change this introduces</strong></h1>\n<p>While zip groups have always been automatically named based on the top level global dependency, the zip group chosen when a global had multiple dependencies was less clear. I believe it used to be based on the alphabetical order of the top level dependencies (the globals that do <strong>not</strong> depend on other globals), with the last one (when sorted alphabetically) chosen as the zip group name for a given global (although this would only update the zip group name of the globals that depended on this last one...if that makes sense).  </p>\n<p>Now, the zip group name is chosen based on which zip group was created first. So if a global is part of a zip group, the name will <strong>not</strong> update, even if a dependency becomes a list later on. I think this makes more sense, as there is less consequential behaviour going on.</p>\n<p>\u200c</p>\n<h1 id=\"markdown-header-those-who-wish-to-test\"><strong>Those who wish to test</strong></h1>\n<p>Please play around with zip groups and outer products. I would suggest having at least several independent sets (to avoid confusing I don't mean Python sets, I just mean a collection of globals that you will use together) of globals (two or three globals per set should be enough) that depend on globals only from within each set. Then introduce some globals that depend on globals from more than one of those sets. Also have globals that don't relate to any others. </p>\n<p>Once you've set up some globals</p>\n<ul>\n<li>Then start playing around with changing globals from single values to arrays. </li>\n<li>See if the zip group naming makes sense</li>\n<li>See if the changes from no expansion to outer product to zip group expansion makes sense.</li>\n<li>See if the expansion state is maintained when you open and close runmanager</li>\n<li>You may also want to play with global names, since some code still depends on alphabetical sorting and so there may be bugs I haven't uncovered there</li>\n<li>See if you can break it in any way!</li>\n</ul>\n<p>Thanks!</p>\n<p>P.S. Please leave me to merge so that the branch gets closed!</p>", "type": "rendered"}, "title": {"raw": "Fixed several bugs where custom zip groups were overridden.", "markup": "markdown", "html": "<p>Fixed several bugs where custom zip groups were overridden.</p>", "type": "rendered"}}, "type": "pullrequest", "description": "fixes issue #49 (mostly)\r\n\r\nCurrently this does not fix the following cases:\r\n\r\n* Manually changing an \"outer\" expansion type to nothing (it will revert to \"outer\" when you reopen runmanager)\r\n* Manually changing a zip group to \"outer\" (it will revert to the zip group when you re-open)\r\n\r\nI believe these two cases are very difficult to solve. They may actually be impossible to solve without storing (in the HDF5 file) whether the expansion type was set manually (by the user) or automatically (by runmanager)  \r\n\r\n# **An additional change this introduces**\r\n\r\nWhile zip groups have always been automatically named based on the top level global dependency, the zip group chosen when a global had multiple dependencies was less clear. I believe it used to be based on the alphabetical order of the top level dependencies (the globals that do **not** depend on other globals), with the last one (when sorted alphabetically) chosen as the zip group name for a given global (although this would only update the zip group name of the globals that depended on this last one...if that makes sense).  \r\n  \r\nNow, the zip group name is chosen based on which zip group was created first. So if a global is part of a zip group, the name will **not** update, even if a dependency becomes a list later on. I think this makes more sense, as there is less consequential behaviour going on.\r\n\r\n\u200c\r\n\r\n# **Those who wish to test**\r\n\r\nPlease play around with zip groups and outer products. I would suggest having at least several independent sets (to avoid confusing I don't mean Python sets, I just mean a collection of globals that you will use together) of globals (two or three globals per set should be enough) that depend on globals only from within each set. Then introduce some globals that depend on globals from more than one of those sets. Also have globals that don't relate to any others. \r\n\r\nOnce you've set up some globals\r\n\r\n* Then start playing around with changing globals from single values to arrays. \r\n* See if the zip group naming makes sense\r\n* See if the changes from no expansion to outer product to zip group expansion makes sense.\r\n* See if the expansion state is maintained when you open and close runmanager\r\n* You may also want to play with global names, since some code still depends on alphabetical sorting and so there may be bugs I haven't uncovered there\r\n* See if you can break it in any way!\r\n\r\nThanks!\r\n\r\nP.S. Please leave me to merge so that the branch gets closed!", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/15/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diffstat/labscript_suite/runmanager:e3f7497da894%0D3025fbd5ff06?from_pullrequest_id=15"}, "commits": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/15/commits.json"}, "self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/15.json"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/15/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/15/merge"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/15"}, "activity": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/15/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diff/labscript_suite/runmanager:e3f7497da894%0D3025fbd5ff06?from_pullrequest_id=15"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/15/approve"}, "statuses": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/15/statuses_page=1.json"}}, "title": "Fixed several bugs where custom zip groups were overridden.", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}], "id": 15, "destination": {"commit": {"hash": "3025fbd5ff06", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/3025fbd5ff06.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/3025fbd5ff06"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "created_on": "2017-09-11T04:28:12.682918+00:00", "summary": {"raw": "fixes issue #49 (mostly)\r\n\r\nCurrently this does not fix the following cases:\r\n\r\n* Manually changing an \"outer\" expansion type to nothing (it will revert to \"outer\" when you reopen runmanager)\r\n* Manually changing a zip group to \"outer\" (it will revert to the zip group when you re-open)\r\n\r\nI believe these two cases are very difficult to solve. They may actually be impossible to solve without storing (in the HDF5 file) whether the expansion type was set manually (by the user) or automatically (by runmanager)  \r\n\r\n# **An additional change this introduces**\r\n\r\nWhile zip groups have always been automatically named based on the top level global dependency, the zip group chosen when a global had multiple dependencies was less clear. I believe it used to be based on the alphabetical order of the top level dependencies (the globals that do **not** depend on other globals), with the last one (when sorted alphabetically) chosen as the zip group name for a given global (although this would only update the zip group name of the globals that depended on this last one...if that makes sense).  \r\n  \r\nNow, the zip group name is chosen based on which zip group was created first. So if a global is part of a zip group, the name will **not** update, even if a dependency becomes a list later on. I think this makes more sense, as there is less consequential behaviour going on.\r\n\r\n\u200c\r\n\r\n# **Those who wish to test**\r\n\r\nPlease play around with zip groups and outer products. I would suggest having at least several independent sets (to avoid confusing I don't mean Python sets, I just mean a collection of globals that you will use together) of globals (two or three globals per set should be enough) that depend on globals only from within each set. Then introduce some globals that depend on globals from more than one of those sets. Also have globals that don't relate to any others. \r\n\r\nOnce you've set up some globals\r\n\r\n* Then start playing around with changing globals from single values to arrays. \r\n* See if the zip group naming makes sense\r\n* See if the changes from no expansion to outer product to zip group expansion makes sense.\r\n* See if the expansion state is maintained when you open and close runmanager\r\n* You may also want to play with global names, since some code still depends on alphabetical sorting and so there may be bugs I haven't uncovered there\r\n* See if you can break it in any way!\r\n\r\nThanks!\r\n\r\nP.S. Please leave me to merge so that the branch gets closed!", "markup": "markdown", "html": "<p>fixes issue <a href=\"#!/labscript_suite/runmanager/issues/49/zip-groups-are-overridden-when-reopening\" rel=\"nofollow\" title=\"Zip groups are overridden when reopening runmanager\" class=\"ap-connect-link\"><s>#49</s></a> (mostly)</p>\n<p>Currently this does not fix the following cases:</p>\n<ul>\n<li>Manually changing an \"outer\" expansion type to nothing (it will revert to \"outer\" when you reopen runmanager)</li>\n<li>Manually changing a zip group to \"outer\" (it will revert to the zip group when you re-open)</li>\n</ul>\n<p>I believe these two cases are very difficult to solve. They may actually be impossible to solve without storing (in the HDF5 file) whether the expansion type was set manually (by the user) or automatically (by runmanager)  </p>\n<h1 id=\"markdown-header-an-additional-change-this-introduces\"><strong>An additional change this introduces</strong></h1>\n<p>While zip groups have always been automatically named based on the top level global dependency, the zip group chosen when a global had multiple dependencies was less clear. I believe it used to be based on the alphabetical order of the top level dependencies (the globals that do <strong>not</strong> depend on other globals), with the last one (when sorted alphabetically) chosen as the zip group name for a given global (although this would only update the zip group name of the globals that depended on this last one...if that makes sense).  </p>\n<p>Now, the zip group name is chosen based on which zip group was created first. So if a global is part of a zip group, the name will <strong>not</strong> update, even if a dependency becomes a list later on. I think this makes more sense, as there is less consequential behaviour going on.</p>\n<p>\u200c</p>\n<h1 id=\"markdown-header-those-who-wish-to-test\"><strong>Those who wish to test</strong></h1>\n<p>Please play around with zip groups and outer products. I would suggest having at least several independent sets (to avoid confusing I don't mean Python sets, I just mean a collection of globals that you will use together) of globals (two or three globals per set should be enough) that depend on globals only from within each set. Then introduce some globals that depend on globals from more than one of those sets. Also have globals that don't relate to any others. </p>\n<p>Once you've set up some globals</p>\n<ul>\n<li>Then start playing around with changing globals from single values to arrays. </li>\n<li>See if the zip group naming makes sense</li>\n<li>See if the changes from no expansion to outer product to zip group expansion makes sense.</li>\n<li>See if the expansion state is maintained when you open and close runmanager</li>\n<li>You may also want to play with global names, since some code still depends on alphabetical sorting and so there may be bugs I haven't uncovered there</li>\n<li>See if you can break it in any way!</li>\n</ul>\n<p>Thanks!</p>\n<p>P.S. Please leave me to merge so that the branch gets closed!</p>", "type": "rendered"}, "source": {"commit": {"hash": "aa6dcd7dd7c1", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager/commit/aa6dcd7dd7c1"}, "html": {"href": "#!/pstarkey/runmanager/commits/aa6dcd7dd7c1"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager"}, "html": {"href": "#!/pstarkey/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "pstarkey/runmanager", "uuid": "{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}"}, "branch": {"name": "issue49"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-02T23:57:05.920953+00:00", "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"role": "PARTICIPANT", "participated_on": "2017-10-04T20:23:58.012005+00:00", "type": "participant", "approved": false, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}], "reason": "", "updated_on": "2017-11-07T23:19:51.888145+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "e3f7497da894", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/e3f7497da894.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/e3f7497da894"}}}, "closed_by": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}