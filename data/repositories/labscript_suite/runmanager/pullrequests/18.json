{"rendered": {"description": {"raw": "This pull request allows new batch compilers to be written, allowing other APIs other than labscript to be used. This allows runmanager to become a generic parameter \\(and parameter space\\) manager, which could be useful for many things including handling parameter space scans for computational simulations.\r\n\r\nThis requires labscript pull request 27, otherwise known as labscript v2.4.0\r\n\r\nThere are a bunch of changes \\(outlined in the commit messages below\\). Feel free to ask me questions!\r\n\r\nPlease let me do the merging once approved, so the branch gets closed properly!\r\n\r\n* Created new branch labscript-agnostic\r\n* Generalised batch\\_compiler so that it can be subclassed to compiler experiments using something other than labscript.\r\n\r\n    This also involved:\r\n\r\n\r\n\r\n    * creating a new batch compiler for labscript based on the generalised class\r\n    * Moving the globals loading code from labscript to runmanager batch compiler \\(so that we don't have to duplicate it inside labscript alternatives\\)\r\n    * Adding version checks for the batch compiler script \\(now needs labscript 2.4 due to the above point\\)\r\n    \r\n        There are some additional benefits to this, for instance the `__builtins__` dict is saved just before invoking the script, which means that any modules that modify `__builtins__` on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup \\(which I don't think was the case previously unless I don't properly understand when `finally` is executed!\\)\r\n\r\n    \r\n    \r\n* Cleaned up the new batch compiler scripts so that we can instantiate the processors without needing it to be launched as a zprocess subprocess.\r\n\r\n    This allows someone to use the BatchProcessor class in their own script to compile labscript \\(or other\\) scripts while automatically gaining access to the machinery for loading globals. Ultimately we could reintroduce a command line utility to take a labscript file and globals file and compile a shot \\(like we used to have\\).\r\n\r\n\r\n\r\n    As an example of the above, consider doing: from runmanage.batch\\_compiler\\_labscript import BatchProcessor batch\\_processor = BatchProcessor\\(\\) batch\\_processor.compile\\(labscript\\_file, globals\\_file\\)\r\n\r\n\r\n* modified the labscript batch compiler to use the new kwargs in labscript for disabling loading/cleanup of globals from HDF5 file as this is now handled by runmanager.\r\n* Modified runmanager to use a new \\(optional\\) labconfig parameter \\[runmanager\\\\batch\\_compiler\\_script\\] as the path to use when launching the batch compiler.\r\n\r\n    This allows custom batch\\_compilers to be used that invoke something other than labscript, making runmanager a generic parameter \\(and parameter space\\) manager that could be applied to a variety of situations \\(such as automating scanning a parameter space in a computational simulation\\).", "markup": "markdown", "html": "<p>This pull request allows new batch compilers to be written, allowing other APIs other than labscript to be used. This allows runmanager to become a generic parameter (and parameter space) manager, which could be useful for many things including handling parameter space scans for computational simulations.</p>\n<p>This requires labscript pull request 27, otherwise known as labscript v2.4.0</p>\n<p>There are a bunch of changes (outlined in the commit messages below). Feel free to ask me questions!</p>\n<p>Please let me do the merging once approved, so the branch gets closed properly!</p>\n<ul>\n<li>Created new branch labscript-agnostic</li>\n<li>\n<p>Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.</p>\n<p>This also involved:</p>\n<ul>\n<li>creating a new batch compiler for labscript based on the generalised class</li>\n<li>Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)</li>\n<li>\n<p>Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)</p>\n<p>There are some additional benefits to this, for instance the <code>__builtins__</code> dict is saved just before invoking the script, which means that any modules that modify <code>__builtins__</code> on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when <code>finally</code> is executed!)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cleaned up the new batch compiler scripts so that we can instantiate the processors without needing it to be launched as a zprocess subprocess.</p>\n<p>This allows someone to use the BatchProcessor class in their own script to compile labscript (or other) scripts while automatically gaining access to the machinery for loading globals. Ultimately we could reintroduce a command line utility to take a labscript file and globals file and compile a shot (like we used to have).</p>\n<p>As an example of the above, consider doing: from runmanage.batch_compiler_labscript import BatchProcessor batch_processor = BatchProcessor() batch_processor.compile(labscript_file, globals_file)</p>\n</li>\n<li>\n<p>modified the labscript batch compiler to use the new kwargs in labscript for disabling loading/cleanup of globals from HDF5 file as this is now handled by runmanager.</p>\n</li>\n<li>\n<p>Modified runmanager to use a new (optional) labconfig parameter [runmanager\\batch_compiler_script] as the path to use when launching the batch compiler.</p>\n<p>This allows custom batch_compilers to be used that invoke something other than labscript, making runmanager a generic parameter (and parameter space) manager that could be applied to a variety of situations (such as automating scanning a parameter space in a computational simulation).</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Allow APIs other than labscript to be invoked by runmanager", "markup": "markdown", "html": "<p>Allow APIs other than labscript to be invoked by runmanager</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This pull request allows new batch compilers to be written, allowing other APIs other than labscript to be used. This allows runmanager to become a generic parameter \\(and parameter space\\) manager, which could be useful for many things including handling parameter space scans for computational simulations.\r\n\r\nThis requires labscript pull request 27, otherwise known as labscript v2.4.0\r\n\r\nThere are a bunch of changes \\(outlined in the commit messages below\\). Feel free to ask me questions!\r\n\r\nPlease let me do the merging once approved, so the branch gets closed properly!\r\n\r\n* Created new branch labscript-agnostic\r\n* Generalised batch\\_compiler so that it can be subclassed to compiler experiments using something other than labscript.\r\n\r\n    This also involved:\r\n\r\n\r\n\r\n    * creating a new batch compiler for labscript based on the generalised class\r\n    * Moving the globals loading code from labscript to runmanager batch compiler \\(so that we don't have to duplicate it inside labscript alternatives\\)\r\n    * Adding version checks for the batch compiler script \\(now needs labscript 2.4 due to the above point\\)\r\n    \r\n        There are some additional benefits to this, for instance the `__builtins__` dict is saved just before invoking the script, which means that any modules that modify `__builtins__` on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup \\(which I don't think was the case previously unless I don't properly understand when `finally` is executed!\\)\r\n\r\n    \r\n    \r\n* Cleaned up the new batch compiler scripts so that we can instantiate the processors without needing it to be launched as a zprocess subprocess.\r\n\r\n    This allows someone to use the BatchProcessor class in their own script to compile labscript \\(or other\\) scripts while automatically gaining access to the machinery for loading globals. Ultimately we could reintroduce a command line utility to take a labscript file and globals file and compile a shot \\(like we used to have\\).\r\n\r\n\r\n\r\n    As an example of the above, consider doing: from runmanage.batch\\_compiler\\_labscript import BatchProcessor batch\\_processor = BatchProcessor\\(\\) batch\\_processor.compile\\(labscript\\_file, globals\\_file\\)\r\n\r\n\r\n* modified the labscript batch compiler to use the new kwargs in labscript for disabling loading/cleanup of globals from HDF5 file as this is now handled by runmanager.\r\n* Modified runmanager to use a new \\(optional\\) labconfig parameter \\[runmanager\\\\batch\\_compiler\\_script\\] as the path to use when launching the batch compiler.\r\n\r\n    This allows custom batch\\_compilers to be used that invoke something other than labscript, making runmanager a generic parameter \\(and parameter space\\) manager that could be applied to a variety of situations \\(such as automating scanning a parameter space in a computational simulation\\).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/18/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diffstat/pstarkey/runmanager:6e44dc101acd%0D895af9405e51?from_pullrequest_id=18"}, "commits": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/18/commits.json"}, "self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/18.json"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/18/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/18/merge"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/18"}, "activity": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/18/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diff/pstarkey/runmanager:6e44dc101acd%0D895af9405e51?from_pullrequest_id=18"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/18/approve"}, "statuses": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/18/statuses_page=1.json"}}, "title": "Allow APIs other than labscript to be invoked by runmanager", "close_source_branch": true, "reviewers": [{"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}], "id": 18, "destination": {"commit": {"hash": "895af9405e51", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/895af9405e51.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/895af9405e51"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "created_on": "2018-03-13T05:15:46.738344+00:00", "summary": {"raw": "This pull request allows new batch compilers to be written, allowing other APIs other than labscript to be used. This allows runmanager to become a generic parameter \\(and parameter space\\) manager, which could be useful for many things including handling parameter space scans for computational simulations.\r\n\r\nThis requires labscript pull request 27, otherwise known as labscript v2.4.0\r\n\r\nThere are a bunch of changes \\(outlined in the commit messages below\\). Feel free to ask me questions!\r\n\r\nPlease let me do the merging once approved, so the branch gets closed properly!\r\n\r\n* Created new branch labscript-agnostic\r\n* Generalised batch\\_compiler so that it can be subclassed to compiler experiments using something other than labscript.\r\n\r\n    This also involved:\r\n\r\n\r\n\r\n    * creating a new batch compiler for labscript based on the generalised class\r\n    * Moving the globals loading code from labscript to runmanager batch compiler \\(so that we don't have to duplicate it inside labscript alternatives\\)\r\n    * Adding version checks for the batch compiler script \\(now needs labscript 2.4 due to the above point\\)\r\n    \r\n        There are some additional benefits to this, for instance the `__builtins__` dict is saved just before invoking the script, which means that any modules that modify `__builtins__` on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup \\(which I don't think was the case previously unless I don't properly understand when `finally` is executed!\\)\r\n\r\n    \r\n    \r\n* Cleaned up the new batch compiler scripts so that we can instantiate the processors without needing it to be launched as a zprocess subprocess.\r\n\r\n    This allows someone to use the BatchProcessor class in their own script to compile labscript \\(or other\\) scripts while automatically gaining access to the machinery for loading globals. Ultimately we could reintroduce a command line utility to take a labscript file and globals file and compile a shot \\(like we used to have\\).\r\n\r\n\r\n\r\n    As an example of the above, consider doing: from runmanage.batch\\_compiler\\_labscript import BatchProcessor batch\\_processor = BatchProcessor\\(\\) batch\\_processor.compile\\(labscript\\_file, globals\\_file\\)\r\n\r\n\r\n* modified the labscript batch compiler to use the new kwargs in labscript for disabling loading/cleanup of globals from HDF5 file as this is now handled by runmanager.\r\n* Modified runmanager to use a new \\(optional\\) labconfig parameter \\[runmanager\\\\batch\\_compiler\\_script\\] as the path to use when launching the batch compiler.\r\n\r\n    This allows custom batch\\_compilers to be used that invoke something other than labscript, making runmanager a generic parameter \\(and parameter space\\) manager that could be applied to a variety of situations \\(such as automating scanning a parameter space in a computational simulation\\).", "markup": "markdown", "html": "<p>This pull request allows new batch compilers to be written, allowing other APIs other than labscript to be used. This allows runmanager to become a generic parameter (and parameter space) manager, which could be useful for many things including handling parameter space scans for computational simulations.</p>\n<p>This requires labscript pull request 27, otherwise known as labscript v2.4.0</p>\n<p>There are a bunch of changes (outlined in the commit messages below). Feel free to ask me questions!</p>\n<p>Please let me do the merging once approved, so the branch gets closed properly!</p>\n<ul>\n<li>Created new branch labscript-agnostic</li>\n<li>\n<p>Generalised batch_compiler so that it can be subclassed to compiler experiments using something other than labscript.</p>\n<p>This also involved:</p>\n<ul>\n<li>creating a new batch compiler for labscript based on the generalised class</li>\n<li>Moving the globals loading code from labscript to runmanager batch compiler (so that we don't have to duplicate it inside labscript alternatives)</li>\n<li>\n<p>Adding version checks for the batch compiler script (now needs labscript 2.4 due to the above point)</p>\n<p>There are some additional benefits to this, for instance the <code>__builtins__</code> dict is saved just before invoking the script, which means that any modules that modify <code>__builtins__</code> on reload will not have those modifications removed. We also now hold the module watcher and kill lock during cleanup (which I don't think was the case previously unless I don't properly understand when <code>finally</code> is executed!)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cleaned up the new batch compiler scripts so that we can instantiate the processors without needing it to be launched as a zprocess subprocess.</p>\n<p>This allows someone to use the BatchProcessor class in their own script to compile labscript (or other) scripts while automatically gaining access to the machinery for loading globals. Ultimately we could reintroduce a command line utility to take a labscript file and globals file and compile a shot (like we used to have).</p>\n<p>As an example of the above, consider doing: from runmanage.batch_compiler_labscript import BatchProcessor batch_processor = BatchProcessor() batch_processor.compile(labscript_file, globals_file)</p>\n</li>\n<li>\n<p>modified the labscript batch compiler to use the new kwargs in labscript for disabling loading/cleanup of globals from HDF5 file as this is now handled by runmanager.</p>\n</li>\n<li>\n<p>Modified runmanager to use a new (optional) labconfig parameter [runmanager\\batch_compiler_script] as the path to use when launching the batch compiler.</p>\n<p>This allows custom batch_compilers to be used that invoke something other than labscript, making runmanager a generic parameter (and parameter space) manager that could be applied to a variety of situations (such as automating scanning a parameter space in a computational simulation).</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "6e44dc101acd", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager/commit/6e44dc101acd"}, "html": {"href": "#!/pstarkey/runmanager/commits/6e44dc101acd"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager"}, "html": {"href": "#!/pstarkey/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "pstarkey/runmanager", "uuid": "{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}"}, "branch": {"name": "labscript-agnostic"}}, "comment_count": 8, "state": "OPEN", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}}, {"role": "REVIEWER", "participated_on": "2018-03-13T08:50:19.152519+00:00", "type": "participant", "approved": true, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2018-03-13T13:14:15.360459+00:00", "type": "participant", "approved": true, "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}}], "reason": "", "updated_on": "2020-01-28T21:45:19.894571+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": null, "closed_by": null}