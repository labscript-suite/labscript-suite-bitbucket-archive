{"pagelen": 50, "values": [{"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30/comments/99592493.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30/_/diff#comment-99592493"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}, "content": {"raw": "For posterity, this pull request permits [integer indexing of the lyse dataframe](#!/labscript_suite/lyse/pull-requests/39), by adding the following to labconfig:\n\n```\n[lyse]\ninteger_indexing = True\n```\n\n\\(Edited 2019-05-22: Changed boolean value above to `True`.\\)", "markup": "markdown", "html": "<p>For posterity, this pull request permits <a data-is-external-link=\"true\" href=\"#!/labscript_suite/lyse/pull-requests/39\" rel=\"nofollow\">integer indexing of the lyse dataframe</a>, by adding the following to labconfig:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[lyse]</span>\n<span class=\"na\">integer_indexing</span> <span class=\"o\">=</span> <span class=\"s\">True</span>\n</pre></div>\n\n\n<p>(Edited 2019-05-22: Changed boolean value above to <code>True</code>.)</p>", "type": "rendered"}, "created_on": "2019-04-23T06:30:19.974834+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-22T06:53:27.181099+00:00", "type": "pullrequest_comment", "id": 99592493}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"approval": {"date": "2019-04-28T09:33:58.257550+00:00", "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "56dc84f4c750", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/56dc84f4c750.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/56dc84f4c750"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "69854d456aa9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/69854d456aa9"}, "html": {"href": "#!/cbillington/runmanager/commits/69854d456aa9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-08T17:26:27.946722+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "56dc84f4c750", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/56dc84f4c750.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/56dc84f4c750"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "69854d456aa9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/69854d456aa9"}, "html": {"href": "#!/cbillington/runmanager/commits/69854d456aa9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-04-08T17:26:27.086666+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30/comments/97127624.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30/_/diff#comment-97127624"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}, "content": {"raw": "Will merge this on Monday April 8 if there are no comments.", "markup": "markdown", "html": "<p>Will merge this on Monday April 8 if there are no comments.</p>", "type": "rendered"}, "created_on": "2019-04-01T16:08:59.995847+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-01T16:09:00.006244+00:00", "type": "pullrequest_comment", "id": 97127624}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30/comments/96972927.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30/_/diff#comment-96972927"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}, "content": {"raw": "Thanks for testing!\n\nYes, it\u2019s all by design, and this is no different to what it was like before this change, except then folders could only be based on the date, now they can be based on the sequence index too.\n\nI\u2019ve added a 'warning' indicator icon with a tooltip to emphasise if you are using a non-default output folder:\n\n![](data/bitbucket.org/repo/6g5bg5/images/1205243120-runmanager_tooltip.png)\n\u200c", "markup": "markdown", "html": "<p>Thanks for testing!</p>\n<p>Yes, it\u2019s all by design, and this is no different to what it was like before this change, except then folders could only be based on the date, now they can be based on the sequence index too.</p>\n<p>I\u2019ve added a 'warning' indicator icon with a tooltip to emphasise if you are using a non-default output folder:</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/6g5bg5/images/1205243120-runmanager_tooltip.png\" />\n\u200c</p>", "type": "rendered"}, "created_on": "2019-03-29T19:54:01.562703+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-03-29T19:54:01.571232+00:00", "type": "pullrequest_comment", "id": 96972927}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "056026525408", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/056026525408.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/056026525408"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "69854d456aa9", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/69854d456aa9"}, "html": {"href": "#!/cbillington/runmanager/commits/69854d456aa9"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-29T19:52:57.071728+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "056026525408", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/056026525408.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/056026525408"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8bfaaf1b7627", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/8bfaaf1b7627"}, "html": {"href": "#!/cbillington/runmanager/commits/8bfaaf1b7627"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-28T21:48:09.482558+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"comment": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30/comments/96565343.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30/_/diff#comment-96565343"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}, "content": {"raw": "The behaviour of this feature is a little unpredictable/modal if one manually changes the shot output folder. Here\u2019s an example:\n\n* Relevant labconfig bits read:\n\n```\n[default]\nexperiment_shot_storage = %(shared_drive)s\\Experiments%(experiment_name)s\n\n[runmanager]\noutput_folder_format = %%Y/%%m/%%d/{sequence_index:05d}\nfilename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}\n```\n\n* Start with a default output folder \\(pressing the \u2018Reset to default output folder\u2019 next to the \u2018Shot output folder\u2019 in runmanager\\). In my case this is C:\\\\Experiments\\\\example\\_experiment\\\\test\\\\2019\\\\03\\\\27\\\\00001.\n\n    * `.next_sequence_index` gets created in C:\\\\Experiments\\\\example\\_experiment\\\\test.\n    * After each sequence compilation, the sequence index increments and the shot output folder changes accordingly. So far so good.\n    \n* Now click on the \u2018Select folder\u2026' button next to the shot output folder path \\(or just manually change the path\\). I chose C:\\\\Experiments\\\\example\\_experiment\\\\test:\n\n    * Folders of the form `{sequence_index:05d}` are not created for new sequences. \n    * The filename prefix is still honoured; the sequence index increments after each sequence compilation;\n    * There is no longer an indication of what the sequence index is in the runmanager GUI.\n    * The \u2018Reset to default output folder\u2019 becomes active \\(no longer greyed out\\).\n    \n*  Change the shot output folder to C:\\\\Experiments\\\\example\\_experiment\\\\test\\\\2019\\\\03\\\\27. Same behaviour as above.\n* Manually create a sub-folder of this path with the next sequence index, and select it in runmanager, i.e. C:\\\\Experiments\\\\example\\_experiment\\\\test\\\\2019\\\\03\\\\27\\\\00006.\n\n    * The \u2018Reset to default output folder\u2019 becomes greyed out once more.\n    * The output folder automatically changes along with the sequence index after each sequence compilation. \n    \n\nI suppose all of this behaviour is by design, and the indicator of the modality is the state of the \u2018Reset to default output folder\u2019 button. My only feedback is that this is not very prominent; perhaps a message about the shot output folder not conforming to the format specified by labconfig would be useful. I was concerned that this feature might have compromised the utility of manually choosing the shot output folder \\(if there ever was any\\), but I\u2019m not after having learnt how it works from the above soak testing.", "markup": "markdown", "html": "<p>The behaviour of this feature is a little unpredictable/modal if one manually changes the shot output folder. Here\u2019s an example:</p>\n<ul>\n<li>Relevant labconfig bits read:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[default]</span>\n<span class=\"na\">experiment_shot_storage</span> <span class=\"o\">=</span> <span class=\"s\">%(shared_drive)s\\Experiments%(experiment_name)s</span>\n\n<span class=\"k\">[runmanager]</span>\n<span class=\"na\">output_folder_format</span> <span class=\"o\">=</span> <span class=\"s\">%%Y/%%m/%%d/{sequence_index:05d}</span>\n<span class=\"na\">filename_prefix_format</span> <span class=\"o\">=</span> <span class=\"s\">%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}</span>\n</pre></div>\n\n\n<ul>\n<li>\n<p>Start with a default output folder (pressing the \u2018Reset to default output folder\u2019 next to the \u2018Shot output folder\u2019 in runmanager). In my case this is C:\\Experiments\\example_experiment\\test\\2019\\03\\27\\00001.</p>\n<ul>\n<li><code>.next_sequence_index</code> gets created in C:\\Experiments\\example_experiment\\test.</li>\n<li>After each sequence compilation, the sequence index increments and the shot output folder changes accordingly. So far so good.</li>\n</ul>\n</li>\n<li>\n<p>Now click on the \u2018Select folder\u2026' button next to the shot output folder path (or just manually change the path). I chose C:\\Experiments\\example_experiment\\test:</p>\n<ul>\n<li>Folders of the form <code>{sequence_index:05d}</code> are not created for new sequences. </li>\n<li>The filename prefix is still honoured; the sequence index increments after each sequence compilation;</li>\n<li>There is no longer an indication of what the sequence index is in the runmanager GUI.</li>\n<li>The \u2018Reset to default output folder\u2019 becomes active (no longer greyed out).</li>\n</ul>\n</li>\n<li>\n<p>Change the shot output folder to C:\\Experiments\\example_experiment\\test\\2019\\03\\27. Same behaviour as above.</p>\n</li>\n<li>\n<p>Manually create a sub-folder of this path with the next sequence index, and select it in runmanager, i.e. C:\\Experiments\\example_experiment\\test\\2019\\03\\27\\00006.</p>\n<ul>\n<li>The \u2018Reset to default output folder\u2019 becomes greyed out once more.</li>\n<li>The output folder automatically changes along with the sequence index after each sequence compilation. </li>\n</ul>\n</li>\n</ul>\n<p>I suppose all of this behaviour is by design, and the indicator of the modality is the state of the \u2018Reset to default output folder\u2019 button. My only feedback is that this is not very prominent; perhaps a message about the shot output folder not conforming to the format specified by labconfig would be useful. I was concerned that this feature might have compromised the utility of manually choosing the shot output folder (if there ever was any), but I\u2019m not after having learnt how it works from the above soak testing.</p>", "type": "rendered"}, "created_on": "2019-03-27T12:15:04.220491+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-03-27T12:15:04.233946+00:00", "type": "pullrequest_comment", "id": 96565343}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "8bfaaf1b7627", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/8bfaaf1b7627"}, "html": {"href": "#!/cbillington/runmanager/commits/8bfaaf1b7627"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-19T21:25:14.981502+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "5a1ada39cd13", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/5a1ada39cd13"}, "html": {"href": "#!/cbillington/runmanager/commits/5a1ada39cd13"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-15T18:40:19.541203+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n\r\n\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n\r\n\r\n'sequence_index': the sequence_index as an integer,\r\n\r\n\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "27aaad2c7c32", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/27aaad2c7c32"}, "html": {"href": "#!/cbillington/runmanager/commits/27aaad2c7c32"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-14T23:25:49.835156+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n'sequence_index': the sequence_index as an integer,\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "27aaad2c7c32", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/27aaad2c7c32"}, "html": {"href": "#!/cbillington/runmanager/commits/27aaad2c7c32"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-14T23:06:36.330657+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n'sequence_index': the sequence_index as an integer,\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "65e4b4fe4af2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/65e4b4fe4af2"}, "html": {"href": "#!/cbillington/runmanager/commits/65e4b4fe4af2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-14T23:04:28.816077+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}, {"update": {"description": "Add the concept of a sequence_index to runmanager.\r\n\r\nThe sequence index is an incrementing integer starting from zero each day for\r\neach experiment script. It is stored on disk in\r\n<experiment_shot_storage>/<script_name>/.next_sequence_index and accessed using\r\nzlock so that it may be incremented atomically.\r\n\r\nThe sequence index may be used in the output folder format, which defaults to:\r\n`output_folder_format = %%Y/%%m/%%d/{sequence_index:05d}`, resulting in output\r\nfolders like:\r\n<shared_drive>/Experiments/<experiment_name>/<script_name>/2019/03/14/00006\r\n\r\nThe format string will be fed first to `strftime()`, then a call to `.format()`\r\nwith `sequence_index` and `sequence_timestamp` kwargs, where `sequence_timestamp` is\r\nthe time in format `'%Y%m%dT%H%M%S'`, which is the existing format used in\r\n`sequence_id`s.\r\n\r\nAllow the shot filename to also have its format configured, such as:\r\n`filename_prefix_format = %%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`,\r\nresulting in shot filenames like:\r\n`2019-03-14_00006_myscript_1.h5`\r\n\r\nThis is similarly passed through `strftime` and then `.format` with `sequence_index`,\r\n`sequence_timestamp`, and `script_basename` kwargs.\r\n\r\n`script_basename` is not allowed in the `output_folder_format` format string though, since we've for the moment hard-coded that the script basename is at the top level of the subfolder hierarchy under `experiment_shot_storage`, and it is more difficult to change that without breaking existing setups - I also don't really want to change it, despite some downsides, at the moment I think the script name at the top level is almost always what you want.\r\n\r\nThe pre-set `output_folder_format` in newly installed labconfigs will be:\r\n`%%Y/%%m/%%d/{sequence_index:05d}`\r\nwhich will also be the default if the setting is not present in the labconfig file. Since this setting already exists, this change won't break existing setups, which have it set already.\r\n\r\nThe pre-set `filename_prefix_format` in newly installed labconfigs will be:\r\n`%%Y-%%m-%%d_{sequence_index:05d}_{script_basename}`\r\nbut if not present in labconfig files, `{sequence_timestamp}_{script_basename}`\r\nwill be used, to preserve the present behaviour of using the sequence id. This is necessary to not modify existing setups since the setting did not exist already.\r\n\r\nFor compatibility with lyse (which uses it to index the dataframe), the `sequence_id` is still saved to the h5 file, but other attributes are saved too. These are:\r\n\r\n'script_basename': the basename of the script, i.e. myscript\r\n'sequence_date': a string of the date only, i.e. 2019-03-14\r\n'sequence_index': the sequence_index as an integer,\r\n'sequence_id': the sequence_id, i.e. 20190314183955_myscript\r\n\r\nThe idea is that `script_basename`, `sequence_date` and `sequence_index` become an\r\nalternative to `sequence_id` as a way of uniquely identifying a sequence. lyse\r\nalready has a labconfig setting where it uses the `sequence_index` if present to\r\nindex the dataframe (added for the  sake of Spielman fork shots which already\r\nhave `sequence_index`), but it has the issue that sequences cannot be fully uniquely\r\ndetermined by that alone since the date and script name are needed too. So\r\nthe date and script name are added to the attrs for this purpose, but `sequence_id`\r\nis retained for now, perhaps indefinitely since it also provides a timestamp for when the sequence was compiled. It is still useful even if it is not used in filenames or by lyse.\r\n\r\nRefactored runmanager functions to achieve this. There is now a fairly monolithic function\r\nnew_sequence_details(), which returns the attrs, folder and filepath prefix for\r\nthe given labconfig settings and current time. It's all in one function because\r\nthe different pieces all use timestamps, and so to avoid races it either has to be\r\na single function call or the caller would need to carry around a datetime object.\r\nSince it is not too complicated I made it a single function call, though the callers\r\nare often ignoring one or more of its return values.\r\n\r\nRemoved generate_sequence_id, since the functions that accept a sequence_id\r\nnow accept the sequence_attrs dict instead (one entry of which is the sequence_id).\r\nThis and the modifying of other function call signatures is a backward incompatible\r\nchange in the sense of the API that runmanager exposes, but is backward-compatible\r\nwith how other labscript programs use the runmanager API, i.e. BLACS. So I think\r\nthis is acceptable - code using the runmanager API directly may need to change.\r\nWe could do a major version bump to indicate this.", "title": "Add the concept of a sequence_index to runmanager.", "destination": {"commit": {"hash": "8c5efc656535", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/8c5efc656535.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/8c5efc656535"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "65e4b4fe4af2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/65e4b4fe4af2"}, "html": {"href": "#!/cbillington/runmanager/commits/65e4b4fe4af2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "sequence_index"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2019-03-14T23:04:28.755787+00:00"}, "pull_request": {"type": "pullrequest", "id": 30, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/30.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/30"}}, "title": "Add the concept of a sequence_index to runmanager."}}]}