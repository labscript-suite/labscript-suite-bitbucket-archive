{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/34/comments/99201561.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/34/_/diff#comment-99201561"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 34, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/34.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/34"}}, "title": "Enable word wrap for globals value column"}, "content": {"raw": "This is looking pretty good, but \\(for me at least\\), breaks some keyboard navigation stuff.\n\nWhile editing, tab and enter insert tab and newline characters instead of quitting editing and navigating to the next cell.\n\nAlso, there is an unconditional scrollbar present when editing.\n\nFinally, there is a difference \\(for me at least\\) of about six pixels of width between when the row resizes and when the word wrapping kicks in to add a new line, leading to the wrong row size at some column sizes.\n\n\u200c\n\nThis diff fixes those issues, though I\u2019m not sure if the six pixels is a constant across platforms - I can\u2019t find a pixelmetric in the style to look up this value, so I am not sure if it is just hard-coded\n\n\u200c\n\n```diff\n@@ -525,13 +525,30 @@\n             # calculates height for value string, allowing for word wrapping\n             # this function does not know eliding, so if final line elides\n             # multiple rows it will return a number too high.\n-            outRect = self.fontmetrics.boundingRect(0,0,width,10000,QtCore.Qt.TextWordWrap,val)\n-            \n+            TEXT_MARGIN = 3 # The text is rendered in a box 3 pixels from the edge of the column\n+            outRect = self.fontmetrics.boundingRect(0,0,width - 2 * TEXT_MARGIN,10000,QtCore.Qt.TextWordWrap | QtCore.Qt.AlignLeft,val)\n             return QtCore.QSize(width,outRect.height()+self.EXTRA_ROW_HEIGHT)\n             \n         return QtGui.QStandardItemModel.data(self, index, role)\n \n \n+class GlobalValueEditor(QtWidgets.QPlainTextEdit):\n+    \"\"\"A QplainTextEdit with word wrapping enabled, and which loses focus upon pressing\n+    enter or tab\"\"\"\n+    def __init__(self, parent):\n+        QtWidgets.QPlainTextEdit.__init__(self, parent)\n+        self.setWordWrapMode(QtGui.QTextOption.WordWrap)\n+        self.setTabChangesFocus(True)\n+        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n+        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n+\n+    def keyPressEvent(self, event):\n+        if event.key() in [QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return]:\n+            event.accept()\n+            self.focusNextChild()\n+        return QtWidgets.QPlainTextEdit.keyPressEvent(self, event)\n+\n+\n class ItemDelegate(QtWidgets.QStyledItemDelegate):\n \n     \"\"\"An item delegate with a fixed height and faint grey vertical lines\n@@ -556,8 +573,7 @@\n     def createEditor(self, parent, option, index):\n         if index.column() == self.GLOBALS_COL_VALUE:\n             # use the more general QPlainTextEdit editor for the values column\n-            editor = QtWidgets.QPlainTextEdit(parent)\n-            editor.setWordWrapMode(QtGui.QTextOption.WordWrap)\n+            editor = GlobalValueEditor(parent)\n             return editor\n         else:\n             # keep standard editor for other columns\n```\n\nI am also a little dissatisfied about the box not resizing while you\u2019re editing, but this is perhaps not worth it.\n\nI may look into swapping the TreeView for a TableView. We are not using it as a treeview in any case, and TableView has a resizeRowToContents\\(\\) method, which might save all the manual work we\u2019re doing and make more sense. But this is pretty good for now.", "markup": "markdown", "html": "<p>This is looking pretty good, but (for me at least), breaks some keyboard navigation stuff.</p>\n<p>While editing, tab and enter insert tab and newline characters instead of quitting editing and navigating to the next cell.</p>\n<p>Also, there is an unconditional scrollbar present when editing.</p>\n<p>Finally, there is a difference (for me at least) of about six pixels of width between when the row resizes and when the word wrapping kicks in to add a new line, leading to the wrong row size at some column sizes.</p>\n<p>\u200c</p>\n<p>This diff fixes those issues, though I\u2019m not sure if the six pixels is a constant across platforms - I can\u2019t find a pixelmetric in the style to look up this value, so I am not sure if it is just hard-coded</p>\n<p>\u200c</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gu\">@@ -525,13 +525,30 @@</span>\n             # calculates height for value string, allowing for word wrapping\n             # this function does not know eliding, so if final line elides\n             # multiple rows it will return a number too high.\n<span class=\"gd\">-            outRect = self.fontmetrics.boundingRect(0,0,width,10000,QtCore.Qt.TextWordWrap,val)</span>\n<span class=\"gd\">-            </span>\n<span class=\"gi\">+            TEXT_MARGIN = 3 # The text is rendered in a box 3 pixels from the edge of the column</span>\n<span class=\"gi\">+            outRect = self.fontmetrics.boundingRect(0,0,width - 2 * TEXT_MARGIN,10000,QtCore.Qt.TextWordWrap | QtCore.Qt.AlignLeft,val)</span>\n             return QtCore.QSize(width,outRect.height()+self.EXTRA_ROW_HEIGHT)\n\n         return QtGui.QStandardItemModel.data(self, index, role)\n\n\n<span class=\"gi\">+class GlobalValueEditor(QtWidgets.QPlainTextEdit):</span>\n<span class=\"gi\">+    &quot;&quot;&quot;A QplainTextEdit with word wrapping enabled, and which loses focus upon pressing</span>\n<span class=\"gi\">+    enter or tab&quot;&quot;&quot;</span>\n<span class=\"gi\">+    def __init__(self, parent):</span>\n<span class=\"gi\">+        QtWidgets.QPlainTextEdit.__init__(self, parent)</span>\n<span class=\"gi\">+        self.setWordWrapMode(QtGui.QTextOption.WordWrap)</span>\n<span class=\"gi\">+        self.setTabChangesFocus(True)</span>\n<span class=\"gi\">+        self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)</span>\n<span class=\"gi\">+        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    def keyPressEvent(self, event):</span>\n<span class=\"gi\">+        if event.key() in [QtCore.Qt.Key_Enter, QtCore.Qt.Key_Return]:</span>\n<span class=\"gi\">+            event.accept()</span>\n<span class=\"gi\">+            self.focusNextChild()</span>\n<span class=\"gi\">+        return QtWidgets.QPlainTextEdit.keyPressEvent(self, event)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n class ItemDelegate(QtWidgets.QStyledItemDelegate):\n\n     &quot;&quot;&quot;An item delegate with a fixed height and faint grey vertical lines\n<span class=\"gu\">@@ -556,8 +573,7 @@</span>\n     def createEditor(self, parent, option, index):\n         if index.column() == self.GLOBALS_COL_VALUE:\n             # use the more general QPlainTextEdit editor for the values column\n<span class=\"gd\">-            editor = QtWidgets.QPlainTextEdit(parent)</span>\n<span class=\"gd\">-            editor.setWordWrapMode(QtGui.QTextOption.WordWrap)</span>\n<span class=\"gi\">+            editor = GlobalValueEditor(parent)</span>\n             return editor\n         else:\n             # keep standard editor for other columns\n</pre></div>\n\n\n<p>I am also a little dissatisfied about the box not resizing while you\u2019re editing, but this is perhaps not worth it.</p>\n<p>I may look into swapping the TreeView for a TableView. We are not using it as a treeview in any case, and TableView has a resizeRowToContents() method, which might save all the manual work we\u2019re doing and make more sense. But this is pretty good for now.</p>", "type": "rendered"}, "created_on": "2019-04-17T19:01:06.318334+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-04-17T19:01:06.331267+00:00", "type": "pullrequest_comment", "id": 99201561}