{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/37/comments/101394241.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/37/_/diff#comment-101394241"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/37.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/37"}}, "title": "Basic remote control of runmanager."}, "content": {"raw": "Cool! How about allowing comments in the unevaluated global to be preserved, i.e. add this to `handle_set_globals` \\(I tried but don\u2019t have write access to your runmanager fork\\).\n\n```python\n# Keep any comments from previous_value if there aren't any in new_value\r\nif keep_comments and '#' not in new_value:\r\n    new_value_ = previous_value.split('#')\r\n    new_value_[0] = new_value\r\n    new_value = ' # '.join([x.strip() for x in new_value_])\n```\n\nCan also be done with regex, e.g. `re.sub(r'^(.+?)(?#)', new_value, previous_value)` \\(without space santitisation\\) if you don't mind importing `re`.", "markup": "markdown", "html": "<p>Cool! How about allowing comments in the unevaluated global to be preserved, i.e. add this to <code>handle_set_globals</code> (I tried but don\u2019t have write access to your runmanager fork).</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\"># Keep any comments from previous_value if there aren&#39;t any in new_value</span>\n<span class=\"k\">if</span> <span class=\"n\">keep_comments</span> <span class=\"ow\">and</span> <span class=\"s1\">&#39;#&#39;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">new_value</span><span class=\"p\">:</span>\n    <span class=\"n\">new_value_</span> <span class=\"o\">=</span> <span class=\"n\">previous_value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;#&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">new_value_</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n    <span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; # &#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">new_value_</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>Can also be done with regex, e.g. <code>re.sub(r'^(.+?)(?#)', new_value, previous_value)</code> (without space santitisation) if you don't mind importing <code>re</code>.</p>", "type": "rendered"}, "created_on": "2019-05-09T02:33:32.491862+00:00", "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, "updated_on": "2019-05-09T02:33:32.503186+00:00", "type": "pullrequest_comment", "id": 101394241}