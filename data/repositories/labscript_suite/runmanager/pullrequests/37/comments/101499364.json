{"links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/37/comments/101499364.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/37/_/diff#comment-101499364"}}, "parent": {"id": 101497104, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/37/comments/101497104.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/37/_/diff#comment-101497104"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 37, "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/37.json"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/37"}}, "title": "Basic remote control of runmanager."}, "content": {"raw": "Thanks for catching that! I\u2019ll see what I can do to make the `set_globals()` call block for long enough that it is guaranteed subsequent calls to `get_globals()` or `engage()`have the new values taken into account.\n\nI did discover \\(and fix - commit just pushed\\) a bug though, in which multiple globals changes were being triggered. The code wasn\u2019t correctly suppressing the treatment of globals changing as interactive, and so the effect of `set_globals({'x': b})`on a global initially set to `a`was that the global would change from `a` to `b`, then back to `a`, then back to `b` again. Perhaps this was the cause of the issue - that calls to `engage()` were catching this buggy code whilst the global was temporarily back at `a`. In fact, that sounds likely. `set_globals()` is synchronous with respect to writing the new global values to disk, and `engage()`reads them from disk, so I suspect the issue you saw is now fixed. But I\u2019ll stress test to be sure.", "markup": "markdown", "html": "<p>Thanks for catching that! I\u2019ll see what I can do to make the <code>set_globals()</code> call block for long enough that it is guaranteed subsequent calls to <code>get_globals()</code> or <code>engage()</code>have the new values taken into account.</p>\n<p>I did discover (and fix - commit just pushed) a bug though, in which multiple globals changes were being triggered. The code wasn\u2019t correctly suppressing the treatment of globals changing as interactive, and so the effect of <code>set_globals({'x': b})</code>on a global initially set to <code>a</code>was that the global would change from <code>a</code> to <code>b</code>, then back to <code>a</code>, then back to <code>b</code> again. Perhaps this was the cause of the issue - that calls to <code>engage()</code> were catching this buggy code whilst the global was temporarily back at <code>a</code>. In fact, that sounds likely. <code>set_globals()</code> is synchronous with respect to writing the new global values to disk, and <code>engage()</code>reads them from disk, so I suspect the issue you saw is now fixed. But I\u2019ll stress test to be sure.</p>", "type": "rendered"}, "created_on": "2019-05-09T16:23:22.867427+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2019-05-09T16:26:11.176933+00:00", "type": "pullrequest_comment", "id": 101499364}