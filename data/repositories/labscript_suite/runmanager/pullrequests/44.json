{"rendered": {"reason": {"raw": "Will re-create git-side", "markup": "markdown", "html": "<p>Will re-create git-side</p>", "type": "rendered"}, "description": {"raw": "Allow modifying numerical/boolean globals with up and down arrow keys.\r\n\r\nThis is a reimplementation of and obviates PR #12.\r\n\r\nThis is as general as I think it can be - any numbers can be modified this way, so long as they parse as a valid Python numeric or boolean literal. The modification is done by `ast.literal_eval()`ing the expression or converting the string to a `Decimal()` object and so the number of digits is never modified and there is no such thing as floating point rounding error. It works with arbitrary bases, i.e. hex, binary, octal (if that sounds pedantic, that was by far the easiest part of this). It preserves any formatting such as optional underscores in numbers, plus signs and leading zeros in exponents, whether you've decided to write your hex numbers in lower case or upper case, additional unnecessary zeros after the decimal point, that sort of thing (*that* was the hard part) \r\n\r\nUpon modification of the value this way, the new values are committed to the Qt model *immediately*, such that in an upcoming feature (or in @{557058:411f7712-e1fa-438c-b578-0359da2d9f06}'s custom implementation) where you can have shots continuously being compiled and run using whatever runmanager's current values are, the changes will take effect in the next shot. But the modification is still part of the undo buffer, and the original value will be restored if you press escape. Also it doesn't queue up multiple commit events at once, so you can hold an arrow key down and not cause the app to freeze handling every change.\r\n\r\nThe only context in which the feature is disabled is if you are in a multi-line expression in runmanager, since the arrow keys would be expected to move the cursor in that context. I couldn't think of a good solution to this, so just disabled it if it's multi-line. Can trivially re-enable it if anyone can think of a sensible keybinding.\r\n\r\nIt looks like this:\r\n\r\n![Peek 2019-12-07 22-27.gif](data/bitbucket.org/repo/Az8jb5/images/2452532398-Peek_2019-12-07_22-27.gif)", "markup": "markdown", "html": "<p>Allow modifying numerical/boolean globals with up and down arrow keys.</p>\n<p>This is a reimplementation of and obviates <a href=\"#!/labscript_suite/runmanager/pull-requests/12/arrow-key-switching\" rel=\"nofollow\" class=\"ap-connect-link\">PR #12</a>.</p>\n<p>This is as general as I think it can be - any numbers can be modified this way, so long as they parse as a valid Python numeric or boolean literal. The modification is done by <code>ast.literal_eval()</code>ing the expression or converting the string to a <code>Decimal()</code> object and so the number of digits is never modified and there is no such thing as floating point rounding error. It works with arbitrary bases, i.e. hex, binary, octal (if that sounds pedantic, that was by far the easiest part of this). It preserves any formatting such as optional underscores in numbers, plus signs and leading zeros in exponents, whether you've decided to write your hex numbers in lower case or upper case, additional unnecessary zeros after the decimal point, that sort of thing (<em>that</em> was the hard part) </p>\n<p>Upon modification of the value this way, the new values are committed to the Qt model <em>immediately</em>, such that in an upcoming feature (or in <span class=\"ap-mention\" data-atlassian-id=\"557058:411f7712-e1fa-438c-b578-0359da2d9f06\">@David Meyer</span>'s custom implementation) where you can have shots continuously being compiled and run using whatever runmanager's current values are, the changes will take effect in the next shot. But the modification is still part of the undo buffer, and the original value will be restored if you press escape. Also it doesn't queue up multiple commit events at once, so you can hold an arrow key down and not cause the app to freeze handling every change.</p>\n<p>The only context in which the feature is disabled is if you are in a multi-line expression in runmanager, since the arrow keys would be expected to move the cursor in that context. I couldn't think of a good solution to this, so just disabled it if it's multi-line. Can trivially re-enable it if anyone can think of a sensible keybinding.</p>\n<p>It looks like this:</p>\n<p><img alt=\"Peek 2019-12-07 22-27.gif\" src=\"data/bitbucket.org/repo/Az8jb5/images/2452532398-Peek_2019-12-07_22-27.gif\" /></p>", "type": "rendered"}, "title": {"raw": "Icrementing/decrementing globals with arrow keys", "markup": "markdown", "html": "<p>Icrementing/decrementing globals with arrow keys</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Allow modifying numerical/boolean globals with up and down arrow keys.\r\n\r\nThis is a reimplementation of and obviates PR #12.\r\n\r\nThis is as general as I think it can be - any numbers can be modified this way, so long as they parse as a valid Python numeric or boolean literal. The modification is done by `ast.literal_eval()`ing the expression or converting the string to a `Decimal()` object and so the number of digits is never modified and there is no such thing as floating point rounding error. It works with arbitrary bases, i.e. hex, binary, octal (if that sounds pedantic, that was by far the easiest part of this). It preserves any formatting such as optional underscores in numbers, plus signs and leading zeros in exponents, whether you've decided to write your hex numbers in lower case or upper case, additional unnecessary zeros after the decimal point, that sort of thing (*that* was the hard part) \r\n\r\nUpon modification of the value this way, the new values are committed to the Qt model *immediately*, such that in an upcoming feature (or in @{557058:411f7712-e1fa-438c-b578-0359da2d9f06}'s custom implementation) where you can have shots continuously being compiled and run using whatever runmanager's current values are, the changes will take effect in the next shot. But the modification is still part of the undo buffer, and the original value will be restored if you press escape. Also it doesn't queue up multiple commit events at once, so you can hold an arrow key down and not cause the app to freeze handling every change.\r\n\r\nThe only context in which the feature is disabled is if you are in a multi-line expression in runmanager, since the arrow keys would be expected to move the cursor in that context. I couldn't think of a good solution to this, so just disabled it if it's multi-line. Can trivially re-enable it if anyone can think of a sensible keybinding.\r\n\r\nIt looks like this:\r\n\r\n![Peek 2019-12-07 22-27.gif](data/bitbucket.org/repo/Az8jb5/images/2452532398-Peek_2019-12-07_22-27.gif)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/44/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diffstat/cbillington/runmanager:813c40dda3c4%0Daee8db70cba6?from_pullrequest_id=44"}, "commits": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/44/commits.json"}, "self": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/44.json"}, "comments": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/44/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/44/merge"}, "html": {"href": "#!/labscript_suite/runmanager/pull-requests/44"}, "activity": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/44/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/diff/cbillington/runmanager:813c40dda3c4%0Daee8db70cba6?from_pullrequest_id=44"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runmanager/pullrequests/44/approve"}, "statuses": {"href": "data/repositories/labscript_suite/runmanager/pullrequests/44/statuses_page=1.json"}}, "title": "Icrementing/decrementing globals with arrow keys", "close_source_branch": false, "reviewers": [{"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}, {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}, {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}], "id": 44, "destination": {"commit": {"hash": "aee8db70cba6", "type": "commit", "links": {"self": {"href": "data/repositories/labscript_suite/runmanager/commit/aee8db70cba6.json"}, "html": {"href": "#!/labscript_suite/runmanager/commits/aee8db70cba6"}}}, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runmanager.json"}, "html": {"href": "#!/labscript_suite/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{9b4f21e6-54b0-41ea-8f01-db1919f2f790}ts=249918"}}, "type": "repository", "name": "runmanager", "full_name": "labscript_suite/runmanager", "uuid": "{9b4f21e6-54b0-41ea-8f01-db1919f2f790}"}, "branch": {"name": "default"}}, "created_on": "2019-12-08T03:33:40.355181+00:00", "summary": {"raw": "Allow modifying numerical/boolean globals with up and down arrow keys.\r\n\r\nThis is a reimplementation of and obviates PR #12.\r\n\r\nThis is as general as I think it can be - any numbers can be modified this way, so long as they parse as a valid Python numeric or boolean literal. The modification is done by `ast.literal_eval()`ing the expression or converting the string to a `Decimal()` object and so the number of digits is never modified and there is no such thing as floating point rounding error. It works with arbitrary bases, i.e. hex, binary, octal (if that sounds pedantic, that was by far the easiest part of this). It preserves any formatting such as optional underscores in numbers, plus signs and leading zeros in exponents, whether you've decided to write your hex numbers in lower case or upper case, additional unnecessary zeros after the decimal point, that sort of thing (*that* was the hard part) \r\n\r\nUpon modification of the value this way, the new values are committed to the Qt model *immediately*, such that in an upcoming feature (or in @{557058:411f7712-e1fa-438c-b578-0359da2d9f06}'s custom implementation) where you can have shots continuously being compiled and run using whatever runmanager's current values are, the changes will take effect in the next shot. But the modification is still part of the undo buffer, and the original value will be restored if you press escape. Also it doesn't queue up multiple commit events at once, so you can hold an arrow key down and not cause the app to freeze handling every change.\r\n\r\nThe only context in which the feature is disabled is if you are in a multi-line expression in runmanager, since the arrow keys would be expected to move the cursor in that context. I couldn't think of a good solution to this, so just disabled it if it's multi-line. Can trivially re-enable it if anyone can think of a sensible keybinding.\r\n\r\nIt looks like this:\r\n\r\n![Peek 2019-12-07 22-27.gif](data/bitbucket.org/repo/Az8jb5/images/2452532398-Peek_2019-12-07_22-27.gif)", "markup": "markdown", "html": "<p>Allow modifying numerical/boolean globals with up and down arrow keys.</p>\n<p>This is a reimplementation of and obviates <a href=\"#!/labscript_suite/runmanager/pull-requests/12/arrow-key-switching\" rel=\"nofollow\" class=\"ap-connect-link\">PR #12</a>.</p>\n<p>This is as general as I think it can be - any numbers can be modified this way, so long as they parse as a valid Python numeric or boolean literal. The modification is done by <code>ast.literal_eval()</code>ing the expression or converting the string to a <code>Decimal()</code> object and so the number of digits is never modified and there is no such thing as floating point rounding error. It works with arbitrary bases, i.e. hex, binary, octal (if that sounds pedantic, that was by far the easiest part of this). It preserves any formatting such as optional underscores in numbers, plus signs and leading zeros in exponents, whether you've decided to write your hex numbers in lower case or upper case, additional unnecessary zeros after the decimal point, that sort of thing (<em>that</em> was the hard part) </p>\n<p>Upon modification of the value this way, the new values are committed to the Qt model <em>immediately</em>, such that in an upcoming feature (or in <span class=\"ap-mention\" data-atlassian-id=\"557058:411f7712-e1fa-438c-b578-0359da2d9f06\">@David Meyer</span>'s custom implementation) where you can have shots continuously being compiled and run using whatever runmanager's current values are, the changes will take effect in the next shot. But the modification is still part of the undo buffer, and the original value will be restored if you press escape. Also it doesn't queue up multiple commit events at once, so you can hold an arrow key down and not cause the app to freeze handling every change.</p>\n<p>The only context in which the feature is disabled is if you are in a multi-line expression in runmanager, since the arrow keys would be expected to move the cursor in that context. I couldn't think of a good solution to this, so just disabled it if it's multi-line. Can trivially re-enable it if anyone can think of a sensible keybinding.</p>\n<p>It looks like this:</p>\n<p><img alt=\"Peek 2019-12-07 22-27.gif\" src=\"data/bitbucket.org/repo/Az8jb5/images/2452532398-Peek_2019-12-07_22-27.gif\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "813c40dda3c4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager/commit/813c40dda3c4"}, "html": {"href": "#!/cbillington/runmanager/commits/813c40dda3c4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/runmanager"}, "html": {"href": "#!/cbillington/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{f721817a-d5b9-4d43-8c50-99a9be0a8896}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "cbillington/runmanager", "uuid": "{f721817a-d5b9-4d43-8c50-99a9be0a8896}"}, "branch": {"name": "arrow-switching"}}, "comment_count": 2, "state": "DECLINED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Russell Anderson", "uuid": "{6c12ac6e-1980-466d-86fe-6c163bd116c2}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D"}, "html": {"href": "https://bitbucket.org/%7B6c12ac6e-1980-466d-86fe-6c163bd116c2%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e/e307ce36-5fb6-4418-8090-b9e533eab225/128"}}, "nickname": "rpanderson", "type": "user", "account_id": "557058:443e4cd1-86c9-4cd5-8034-22bab14d9d1e"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "David Meyer", "uuid": "{8df655d6-8661-4957-b4ba-669cef19bf2d}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D"}, "html": {"href": "https://bitbucket.org/%7B8df655d6-8661-4957-b4ba-669cef19bf2d%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2a4efe81a17e5aeccdbc4ef2ca2cc463d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsDM-0.png"}}, "nickname": "dihm", "type": "user", "account_id": "557058:411f7712-e1fa-438c-b578-0359da2d9f06"}}, {"role": "PARTICIPANT", "participated_on": "2020-01-28T21:41:35.401565+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": null, "type": "participant", "approved": false, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "Will re-create git-side", "updated_on": "2020-01-28T21:42:03.514365+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}