{"priority": "minor", "kind": "enhancement", "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "links": {"attachments": {"href": "data/repositories/labscript_suite/runviewer/issues/17/attachments_page=1.json"}, "self": {"href": "data/repositories/labscript_suite/runviewer/issues/17.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runviewer/issues/17/watch"}, "comments": {"href": "data/repositories/labscript_suite/runviewer/issues/17/comments_page=1.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/17/tooltip-should-show-line-number-from"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/labscript_suite/runviewer/issues/17/vote"}}, "reporter": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "title": "Tooltip should show line number from experiment logic file", "component": null, "votes": 0, "watches": 1, "content": {"raw": "I've just had an idea to create mapping between each point in a runviewer trace, and the line number of the experiment logic python file that generated that point. That way, you could easily identify which bit of your experiment logic Python code was responsible for generating a particular feature you are seeing.\r\n\r\nThis probably should be implemented as part of the next major labscript version (and not before).\r\n\r\nI probably don't suggest saving this information along side every hardware instruction, but rather store a separate table (or tables) in much the same way we do for markers and other metadata displayed in runviewer.\r\n\r\nSome ideas for how to access this information are [here](https://stackoverflow.com/questions/24438976/python-debugging-get-filename-and-line-number-from-which-a-function-is-called) and probably I would just suggest we put it in all of the labscript functions we expect to be called (that is, we want to know where the `channel.method()` was called, and not say where the wrapper function `make_BEC` was called and also not where `Output.add_instruction()` was called, which probably prohibits putting it inside the method of that name).", "markup": "markdown", "html": "<p>I've just had an idea to create mapping between each point in a runviewer trace, and the line number of the experiment logic python file that generated that point. That way, you could easily identify which bit of your experiment logic Python code was responsible for generating a particular feature you are seeing.</p>\n<p>This probably should be implemented as part of the next major labscript version (and not before).</p>\n<p>I probably don't suggest saving this information along side every hardware instruction, but rather store a separate table (or tables) in much the same way we do for markers and other metadata displayed in runviewer.</p>\n<p>Some ideas for how to access this information are <a data-is-external-link=\"true\" href=\"https://stackoverflow.com/questions/24438976/python-debugging-get-filename-and-line-number-from-which-a-function-is-called\" rel=\"nofollow\">here</a> and probably I would just suggest we put it in all of the labscript functions we expect to be called (that is, we want to know where the <code>channel.method()</code> was called, and not say where the wrapper function <code>make_BEC</code> was called and also not where <code>Output.add_instruction()</code> was called, which probably prohibits putting it inside the method of that name).</p>", "type": "rendered"}, "assignee": null, "state": "new", "version": null, "edited_on": null, "created_on": "2017-11-06T00:39:45.166383+00:00", "milestone": null, "updated_on": "2017-11-06T00:48:44.118800+00:00", "type": "issue", "id": 17}