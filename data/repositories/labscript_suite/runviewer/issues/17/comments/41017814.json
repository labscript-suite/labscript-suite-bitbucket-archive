{"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/17/comments/41017814.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/17#comment-41017814"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/17.json"}}, "type": "issue", "id": 17, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Tooltip should show line number from experiment logic file"}, "content": {"raw": "This is the `__init__` method of the `Instruction` class from when I was playing with [possible major changes to labscript](#!/cbillington/labscript_core/overview):\n\n\n```\n#!python\n\nclass Instruction(HasParent):\n    @enforce_phase(phase.ADD_INSTRUCTIONS)\n    def __init__(self, parent, t, _inst_depth=1, **kwargs):\n        \"\"\"Base instruction class. Has an initial time, and that's about it.\n        _inst_depth is the stack depth of functions that are wrappers around\n        instantiating Instructions. All such functions (including the __init__\n        method of subclasses of Instruction) should accept an _inst_depth=1\n        keyword argument, and should pass inst_depth=_inst_depth+1 to the\n        function they are wrapping (or the __init__ method of the Instruction\n        class they are subclassing), in order for the traceback-making code to\n        figure out where in the stack user code ends and labscript code\n        begins. This is so that we can raise tracebacks that end at the line\n        of user code that resulted in creating the instruction (internal\n        labscript tracebacks, unless labscript itself has crashed, are not\n        useful).\"\"\"\n        super().__init__(parent, **kwargs)\n        self.t = t\n        self.parent.add_instruction(self)\n        self.pseudoclock = parent.pseudoclock\n\n        # Timing details to be computed during processing:\n        self.relative_t = None\n        self.quantised_t = None\n\n        # For giving the user a traceback if an error regarding this\n        # instruction is found during later processing:\n        self.traceback = ''.join(traceback.format_stack()[:-_inst_depth])\n\n        # Count how many instructions there are and save which number we are:\n        self.instruction_number = self.parent.shot.total_instructions\n        self.parent.shot.total_instructions += 1\n```\n\nYou can see it saves the traceback as a string, intended for showing tracebacks during errors.  There's a bit of work to do this sensibly since Instruction will have subclasses, and you don't want it to store merely the line number or traceback of the subclass's `__init__` method - you need to keep a counter to know how many stack frames up the user's actual code is, so that's what the `_inst_depth` variable is about. \n\nCould easily save line numbers too, using the insect module as you mentioned (rather than trying to parse it out of the traceback), though strictly speaking a traceback is more general since the same line number could be called from multiple locations if you are re-using a function. Or could include a line number *and* the full traceback so that the user could see just one at a glance and then only read the whole traceback if they want to.\n\nDefinitely something to include in a way accessible to runmanager!", "markup": "markdown", "html": "<p>This is the <code>__init__</code> method of the <code>Instruction</code> class from when I was playing with <a data-is-external-link=\"true\" href=\"#!/cbillington/labscript_core/overview\" rel=\"nofollow\">possible major changes to labscript</a>:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Instruction</span><span class=\"p\">(</span><span class=\"n\">HasParent</span><span class=\"p\">):</span>\n    <span class=\"nd\">@enforce_phase</span><span class=\"p\">(</span><span class=\"n\">phase</span><span class=\"o\">.</span><span class=\"n\">ADD_INSTRUCTIONS</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">_inst_depth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Base instruction class. Has an initial time, and that&#39;s about it.</span>\n<span class=\"sd\">        _inst_depth is the stack depth of functions that are wrappers around</span>\n<span class=\"sd\">        instantiating Instructions. All such functions (including the __init__</span>\n<span class=\"sd\">        method of subclasses of Instruction) should accept an _inst_depth=1</span>\n<span class=\"sd\">        keyword argument, and should pass inst_depth=_inst_depth+1 to the</span>\n<span class=\"sd\">        function they are wrapping (or the __init__ method of the Instruction</span>\n<span class=\"sd\">        class they are subclassing), in order for the traceback-making code to</span>\n<span class=\"sd\">        figure out where in the stack user code ends and labscript code</span>\n<span class=\"sd\">        begins. This is so that we can raise tracebacks that end at the line</span>\n<span class=\"sd\">        of user code that resulted in creating the instruction (internal</span>\n<span class=\"sd\">        labscript tracebacks, unless labscript itself has crashed, are not</span>\n<span class=\"sd\">        useful).&quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">add_instruction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">pseudoclock</span>\n\n        <span class=\"c1\"># Timing details to be computed during processing:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">relative_t</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">quantised_t</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n        <span class=\"c1\"># For giving the user a traceback if an error regarding this</span>\n        <span class=\"c1\"># instruction is found during later processing:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">traceback</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_stack</span><span class=\"p\">()[:</span><span class=\"o\">-</span><span class=\"n\">_inst_depth</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Count how many instructions there are and save which number we are:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instruction_number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">shot</span><span class=\"o\">.</span><span class=\"n\">total_instructions</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">shot</span><span class=\"o\">.</span><span class=\"n\">total_instructions</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>You can see it saves the traceback as a string, intended for showing tracebacks during errors.  There's a bit of work to do this sensibly since Instruction will have subclasses, and you don't want it to store merely the line number or traceback of the subclass's <code>__init__</code> method - you need to keep a counter to know how many stack frames up the user's actual code is, so that's what the <code>_inst_depth</code> variable is about. </p>\n<p>Could easily save line numbers too, using the insect module as you mentioned (rather than trying to parse it out of the traceback), though strictly speaking a traceback is more general since the same line number could be called from multiple locations if you are re-using a function. Or could include a line number <em>and</em> the full traceback so that the user could see just one at a glance and then only read the whole traceback if they want to.</p>\n<p>Definitely something to include in a way accessible to runmanager!</p>", "type": "rendered"}, "created_on": "2017-11-06T00:48:44.106625+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-11-06T00:55:30.955437+00:00", "type": "issue_comment", "id": 41017814}