{"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37664908.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37664908"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "I do like the idea of markers (it's been something we've talked about since the early development stages I believe).\n\nI'm **not** all that happy about losing the ability to compare two shots to each other. The non-linear time would also make it difficult I think to see how long things were if you **didn't** have a marker delimiting that feature, which I also think is not great. However, I can see the benefit of being able to view it like you propose, but I don't think that should be the only way of viewing it. I'm not sure what the best approach is here, but I'd like to see the interface not lose functionality.\n\nWith regards to shutter open/close markers, yes this would be good to add in too! It does need to be done in some sort of modular way though - as in runviewer needs support for handling arbitrary subclasses of `DigitalOut` and `AnalogOut` and `DDS`. Currently I don't think we do this at all, we just ask the runviewer class for each device to return a trace. This mode of operation good, because we get a faithful representation of what the hardware is actually doing based on the hardware instructions in the HDF5 file (this is the primary aim of runviewer). I guess what we need is for runviewer to look at the class of each channel attached to a device and call some API to get additional information about the channel (like markers for shutters).\n\nI'll also note that I don't think you need to save additional information in the HDF5 file about the shutter times. The shutter delays are already stored in `hdf5_file['/calibrations/Shutter/']` which you can use to back calculate the locations of the markers from the existing runviewer trace. We probably need to store the `Shutter.open_state` parameter, but that should probably go in the connection table using the `set_passed_properties` decorator anyway (it is after all, a hardware configuration parameter which could be changed and thus should prevent previously compiled shots from running).\n\nWith regards to making the pull request, we haven't (yet) developed guidelines for making pull requests. However, we're moving towards doing work in a feature branch of our own repository, and then when that feature is done, making a pull request from that. It is thus good to try and separate out new work into separate branches if they are unrelated. Similarly, if one feature builds on another, you can branch from your branch once you make the pull request for the first feature. I mention this because I had a look at your repository and it looks like you've made a bunch of formatting changes (probably PEP8 styling?). This is great! (we should follow PEP8) but if you make a single pull request with the styling changes and the new marker features, it's going to be much harder for us to evaluate your code! It would be much easier if this was split into 2 pull requests so we can see which changed lines relate to which feature :)  You might consider splitting the shutter markers off into a third pull request, and maybe the rescaling of the time axis into a 4th pull request. This gives us the option of not including your rescaled time axis if we can't agree on a good interface design, while still giving everyone the ability to still add markers (which I think is a really great feature we should include).\n\nAnyway, got a bit off topic here. I'm happy to discuss more the possible UI designs to both maintain the current feature set (where you can compare traces) and a rescaled time (based on marker location) feature! I'm also happy to talk more about what our best practice for making pull requests should be (as I'm sure @cbillington is too).", "markup": "markdown", "html": "<p>I do like the idea of markers (it's been something we've talked about since the early development stages I believe).</p>\n<p>I'm <strong>not</strong> all that happy about losing the ability to compare two shots to each other. The non-linear time would also make it difficult I think to see how long things were if you <strong>didn't</strong> have a marker delimiting that feature, which I also think is not great. However, I can see the benefit of being able to view it like you propose, but I don't think that should be the only way of viewing it. I'm not sure what the best approach is here, but I'd like to see the interface not lose functionality.</p>\n<p>With regards to shutter open/close markers, yes this would be good to add in too! It does need to be done in some sort of modular way though - as in runviewer needs support for handling arbitrary subclasses of <code>DigitalOut</code> and <code>AnalogOut</code> and <code>DDS</code>. Currently I don't think we do this at all, we just ask the runviewer class for each device to return a trace. This mode of operation good, because we get a faithful representation of what the hardware is actually doing based on the hardware instructions in the HDF5 file (this is the primary aim of runviewer). I guess what we need is for runviewer to look at the class of each channel attached to a device and call some API to get additional information about the channel (like markers for shutters).</p>\n<p>I'll also note that I don't think you need to save additional information in the HDF5 file about the shutter times. The shutter delays are already stored in <code>hdf5_file['/calibrations/Shutter/']</code> which you can use to back calculate the locations of the markers from the existing runviewer trace. We probably need to store the <code>Shutter.open_state</code> parameter, but that should probably go in the connection table using the <code>set_passed_properties</code> decorator anyway (it is after all, a hardware configuration parameter which could be changed and thus should prevent previously compiled shots from running).</p>\n<p>With regards to making the pull request, we haven't (yet) developed guidelines for making pull requests. However, we're moving towards doing work in a feature branch of our own repository, and then when that feature is done, making a pull request from that. It is thus good to try and separate out new work into separate branches if they are unrelated. Similarly, if one feature builds on another, you can branch from your branch once you make the pull request for the first feature. I mention this because I had a look at your repository and it looks like you've made a bunch of formatting changes (probably PEP8 styling?). This is great! (we should follow PEP8) but if you make a single pull request with the styling changes and the new marker features, it's going to be much harder for us to evaluate your code! It would be much easier if this was split into 2 pull requests so we can see which changed lines relate to which feature :)  You might consider splitting the shutter markers off into a third pull request, and maybe the rescaling of the time axis into a 4th pull request. This gives us the option of not including your rescaled time axis if we can't agree on a good interface design, while still giving everyone the ability to still add markers (which I think is a really great feature we should include).</p>\n<p>Anyway, got a bit off topic here. I'm happy to discuss more the possible UI designs to both maintain the current feature set (where you can compare traces) and a rescaled time (based on marker location) feature! I'm also happy to talk more about what our best practice for making pull requests should be (as I'm sure @cbillington is too).</p>", "type": "rendered"}, "created_on": "2017-06-18T01:57:02.504343+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37664908}