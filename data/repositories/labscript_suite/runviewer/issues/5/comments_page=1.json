{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37663057.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37663057"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": null, "markup": "markdown", "html": "", "type": "rendered"}, "created_on": "2017-06-17T19:34:33.404143+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37663057}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37663139.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37663139"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "This is great, and a feature I've had in mind for some time! It's extremely useful. The screenshot looks really nice!\n\nI'd be eager to look at the code. I assume this involves changes to both labscript (adding a way to mark times) as well as runviewer? Every lab I've seen so far using labscript has some kind of function decorators or printlines or otherwise some way of splitting their experiment into stages saying at what point in time each starts and ends (also useful for debugging cryptic message from labscript telling you at what time you did something wrong with little other info).\n\nSo yes, that would be useful to include. Personally I would vote on giving up showing multiple shots in favour of this, if that's what it would take. We could modify runviewer to allow showing different shots in different tabs or something, even though it wouldn't make sense to show them side-by-side.", "markup": "markdown", "html": "<p>This is great, and a feature I've had in mind for some time! It's extremely useful. The screenshot looks really nice!</p>\n<p>I'd be eager to look at the code. I assume this involves changes to both labscript (adding a way to mark times) as well as runviewer? Every lab I've seen so far using labscript has some kind of function decorators or printlines or otherwise some way of splitting their experiment into stages saying at what point in time each starts and ends (also useful for debugging cryptic message from labscript telling you at what time you did something wrong with little other info).</p>\n<p>So yes, that would be useful to include. Personally I would vote on giving up showing multiple shots in favour of this, if that's what it would take. We could modify runviewer to allow showing different shots in different tabs or something, even though it wouldn't make sense to show them side-by-side.</p>", "type": "rendered"}, "created_on": "2017-06-17T19:46:18.138948+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": null, "type": "issue_comment", "id": 37663139}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37663766.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37663766"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "The code needs a bit of cleaning up and a few changes which I'll be doing in the next few days before writing a pull request. \nIt is still possible to select multiple files and the variable self.selected_shot is not being use and assigned in a good way.\nA feature I also forgot to mention is that the Shutter Outputs display also have markers that display the actual open and close time.\n\nBut to get a feel for the changes  you can take a look at [my code](#!/PhyNerd/runviewer-1/src/65efb80f91569856af421dbfb9d3360da1ca0f9e/__main__.py?at=default&fileviewer=file-view-default) but as I said this is still work in progress\n\nAs for the changes to labscript.py\n\n```\n#!python\n\ndef add_marker(t, label, color=(0,0,0)):\n    #color in rgb\n    markers[t] = {\"label\":label, \"color\":color}\n\ndef save_markers(hdf5_file):\n    markers_dataset = hdf5_file['runviewer'].create_dataset('markers', shape=(1,))\n    for i in markers:\n        markers_dataset.attrs[str(i)] = str(markers[i])\n\ndef save_shutter_times(hdf5_file):\n    shutter_times_dataset = hdf5_file['runviewer'].create_dataset('shutter_times', shape=(1,))\n    for i in shutter_times:\n        shutter_times_dataset.attrs[str(i)] = str(shutter_times[i])\n```\n\nAddition to labscript_init()\n```\n#!python\n\n#markers and shutter times#\n    markers = {}\n    _builtins_dict[\"markers\"] = markers\n    shutter_times = {}\n    _builtins_dict[\"shutter_times\"] = shutter_times\n```\n\nAddition to Shutter.open()\n```\n#!python\n\n        # save the actual open time (when the shutter should be opened)\n        if self.name in shutter_times:\n            shutter_times[self.name][t] = 1\n        else:\n            shutter_times[self.name] = {t:1}\n```\n\nAddition to Shutter.close()\n```\n#!python\n\n        # save the actual close time (when the shutter should be closed)\n        if self.name in shutter_times:\n            shutter_times[self.name][t] = 0\n        else:\n            shutter_times[self.name] = {t:0}\n```\n\nGenerate Code:\n```\n#!python\n\n        save_markers(hdf5_file)\n        save_shutter_times(hdf5_file)\n```", "markup": "markdown", "html": "<p>The code needs a bit of cleaning up and a few changes which I'll be doing in the next few days before writing a pull request. \nIt is still possible to select multiple files and the variable self.selected_shot is not being use and assigned in a good way.\nA feature I also forgot to mention is that the Shutter Outputs display also have markers that display the actual open and close time.</p>\n<p>But to get a feel for the changes  you can take a look at <a data-is-external-link=\"true\" href=\"#!/PhyNerd/runviewer-1/src/65efb80f91569856af421dbfb9d3360da1ca0f9e/__main__.py?at=default&amp;fileviewer=file-view-default\" rel=\"nofollow\">my code</a> but as I said this is still work in progress</p>\n<p>As for the changes to labscript.py</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">add_marker</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)):</span>\n    <span class=\"c1\">#color in rgb</span>\n    <span class=\"n\">markers</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;label&quot;</span><span class=\"p\">:</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"s2\">&quot;color&quot;</span><span class=\"p\">:</span><span class=\"n\">color</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_markers</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">):</span>\n    <span class=\"n\">markers_dataset</span> <span class=\"o\">=</span> <span class=\"n\">hdf5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;runviewer&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">create_dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;markers&#39;</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">markers</span><span class=\"p\">:</span>\n        <span class=\"n\">markers_dataset</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">markers</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">save_shutter_times</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">):</span>\n    <span class=\"n\">shutter_times_dataset</span> <span class=\"o\">=</span> <span class=\"n\">hdf5_file</span><span class=\"p\">[</span><span class=\"s1\">&#39;runviewer&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">create_dataset</span><span class=\"p\">(</span><span class=\"s1\">&#39;shutter_times&#39;</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">shutter_times</span><span class=\"p\">:</span>\n        <span class=\"n\">shutter_times_dataset</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">shutter_times</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n</pre></div>\n\n\n<p>Addition to labscript_init()</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"c1\">#markers and shutter times#</span>\n    <span class=\"n\">markers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">_builtins_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;markers&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">markers</span>\n    <span class=\"n\">shutter_times</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">_builtins_dict</span><span class=\"p\">[</span><span class=\"s2\">&quot;shutter_times&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">shutter_times</span>\n</pre></div>\n\n\n<p>Addition to Shutter.open()</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"c1\"># save the actual open time (when the shutter should be opened)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">shutter_times</span><span class=\"p\">:</span>\n            <span class=\"n\">shutter_times</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">shutter_times</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">t</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Addition to Shutter.close()</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"c1\"># save the actual close time (when the shutter should be closed)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">shutter_times</span><span class=\"p\">:</span>\n            <span class=\"n\">shutter_times</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">][</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">shutter_times</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">t</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}</span>\n</pre></div>\n\n\n<p>Generate Code:</p>\n<div class=\"codehilite language-python\"><pre><span></span>        <span class=\"n\">save_markers</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n        <span class=\"n\">save_shutter_times</span><span class=\"p\">(</span><span class=\"n\">hdf5_file</span><span class=\"p\">)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-06-17T21:22:43.938416+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37663766}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37664908.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37664908"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "I do like the idea of markers (it's been something we've talked about since the early development stages I believe).\n\nI'm **not** all that happy about losing the ability to compare two shots to each other. The non-linear time would also make it difficult I think to see how long things were if you **didn't** have a marker delimiting that feature, which I also think is not great. However, I can see the benefit of being able to view it like you propose, but I don't think that should be the only way of viewing it. I'm not sure what the best approach is here, but I'd like to see the interface not lose functionality.\n\nWith regards to shutter open/close markers, yes this would be good to add in too! It does need to be done in some sort of modular way though - as in runviewer needs support for handling arbitrary subclasses of `DigitalOut` and `AnalogOut` and `DDS`. Currently I don't think we do this at all, we just ask the runviewer class for each device to return a trace. This mode of operation good, because we get a faithful representation of what the hardware is actually doing based on the hardware instructions in the HDF5 file (this is the primary aim of runviewer). I guess what we need is for runviewer to look at the class of each channel attached to a device and call some API to get additional information about the channel (like markers for shutters).\n\nI'll also note that I don't think you need to save additional information in the HDF5 file about the shutter times. The shutter delays are already stored in `hdf5_file['/calibrations/Shutter/']` which you can use to back calculate the locations of the markers from the existing runviewer trace. We probably need to store the `Shutter.open_state` parameter, but that should probably go in the connection table using the `set_passed_properties` decorator anyway (it is after all, a hardware configuration parameter which could be changed and thus should prevent previously compiled shots from running).\n\nWith regards to making the pull request, we haven't (yet) developed guidelines for making pull requests. However, we're moving towards doing work in a feature branch of our own repository, and then when that feature is done, making a pull request from that. It is thus good to try and separate out new work into separate branches if they are unrelated. Similarly, if one feature builds on another, you can branch from your branch once you make the pull request for the first feature. I mention this because I had a look at your repository and it looks like you've made a bunch of formatting changes (probably PEP8 styling?). This is great! (we should follow PEP8) but if you make a single pull request with the styling changes and the new marker features, it's going to be much harder for us to evaluate your code! It would be much easier if this was split into 2 pull requests so we can see which changed lines relate to which feature :)  You might consider splitting the shutter markers off into a third pull request, and maybe the rescaling of the time axis into a 4th pull request. This gives us the option of not including your rescaled time axis if we can't agree on a good interface design, while still giving everyone the ability to still add markers (which I think is a really great feature we should include).\n\nAnyway, got a bit off topic here. I'm happy to discuss more the possible UI designs to both maintain the current feature set (where you can compare traces) and a rescaled time (based on marker location) feature! I'm also happy to talk more about what our best practice for making pull requests should be (as I'm sure @cbillington is too).", "markup": "markdown", "html": "<p>I do like the idea of markers (it's been something we've talked about since the early development stages I believe).</p>\n<p>I'm <strong>not</strong> all that happy about losing the ability to compare two shots to each other. The non-linear time would also make it difficult I think to see how long things were if you <strong>didn't</strong> have a marker delimiting that feature, which I also think is not great. However, I can see the benefit of being able to view it like you propose, but I don't think that should be the only way of viewing it. I'm not sure what the best approach is here, but I'd like to see the interface not lose functionality.</p>\n<p>With regards to shutter open/close markers, yes this would be good to add in too! It does need to be done in some sort of modular way though - as in runviewer needs support for handling arbitrary subclasses of <code>DigitalOut</code> and <code>AnalogOut</code> and <code>DDS</code>. Currently I don't think we do this at all, we just ask the runviewer class for each device to return a trace. This mode of operation good, because we get a faithful representation of what the hardware is actually doing based on the hardware instructions in the HDF5 file (this is the primary aim of runviewer). I guess what we need is for runviewer to look at the class of each channel attached to a device and call some API to get additional information about the channel (like markers for shutters).</p>\n<p>I'll also note that I don't think you need to save additional information in the HDF5 file about the shutter times. The shutter delays are already stored in <code>hdf5_file['/calibrations/Shutter/']</code> which you can use to back calculate the locations of the markers from the existing runviewer trace. We probably need to store the <code>Shutter.open_state</code> parameter, but that should probably go in the connection table using the <code>set_passed_properties</code> decorator anyway (it is after all, a hardware configuration parameter which could be changed and thus should prevent previously compiled shots from running).</p>\n<p>With regards to making the pull request, we haven't (yet) developed guidelines for making pull requests. However, we're moving towards doing work in a feature branch of our own repository, and then when that feature is done, making a pull request from that. It is thus good to try and separate out new work into separate branches if they are unrelated. Similarly, if one feature builds on another, you can branch from your branch once you make the pull request for the first feature. I mention this because I had a look at your repository and it looks like you've made a bunch of formatting changes (probably PEP8 styling?). This is great! (we should follow PEP8) but if you make a single pull request with the styling changes and the new marker features, it's going to be much harder for us to evaluate your code! It would be much easier if this was split into 2 pull requests so we can see which changed lines relate to which feature :)  You might consider splitting the shutter markers off into a third pull request, and maybe the rescaling of the time axis into a 4th pull request. This gives us the option of not including your rescaled time axis if we can't agree on a good interface design, while still giving everyone the ability to still add markers (which I think is a really great feature we should include).</p>\n<p>Anyway, got a bit off topic here. I'm happy to discuss more the possible UI designs to both maintain the current feature set (where you can compare traces) and a rescaled time (based on marker location) feature! I'm also happy to talk more about what our best practice for making pull requests should be (as I'm sure @cbillington is too).</p>", "type": "rendered"}, "created_on": "2017-06-18T01:57:02.504343+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37664908}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37665941.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37665941"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "@philipstarkey thanks for the very comprehensive answer.\n\nThe nonlinear timeaxis is the reason for posting the question here. If you have any ideas on how compare functionality can be maintained and the nonlinear time can be achieved I'd love to hear it. But to be honest I don't have any idea how this can be done in a good way.\n\nThe reasoning behind writing additional information for the shutter times into the h5 file is just that is was easy and didn't need checks for being a Shutter or not. Also the overhead is minimal. \n\nYes it's PEP8 and sorry for that. My editor converts everything to PEP8 upon saving. I didn't think of that. I'm new to bitbucket and haven't quiet figured things out. I'll create a PEP8 pull request right away. \n\nOk so my plan is:\n\n1. PEP8 pullrequest for runviewer\n\n2. Un related  pull request to make the current horizontal splitter a vertical one and the vertical one a horizontal to allow for a longer plot x range by default\n\n3. Pull request for the markers in labscript\n\n4. Pull request for the markers in runviewer (even tough it looks quite ugly without Nonlinear Time)\n\n5. Pull request for the shutters in runviewer (and in labscript if I decide to keep it the way it is)\n\n6. Nonlinear Time Pullrequest", "markup": "markdown", "html": "<p>@philipstarkey thanks for the very comprehensive answer.</p>\n<p>The nonlinear timeaxis is the reason for posting the question here. If you have any ideas on how compare functionality can be maintained and the nonlinear time can be achieved I'd love to hear it. But to be honest I don't have any idea how this can be done in a good way.</p>\n<p>The reasoning behind writing additional information for the shutter times into the h5 file is just that is was easy and didn't need checks for being a Shutter or not. Also the overhead is minimal. </p>\n<p>Yes it's PEP8 and sorry for that. My editor converts everything to PEP8 upon saving. I didn't think of that. I'm new to bitbucket and haven't quiet figured things out. I'll create a PEP8 pull request right away. </p>\n<p>Ok so my plan is:</p>\n<ol>\n<li>\n<p>PEP8 pullrequest for runviewer</p>\n</li>\n<li>\n<p>Un related  pull request to make the current horizontal splitter a vertical one and the vertical one a horizontal to allow for a longer plot x range by default</p>\n</li>\n<li>\n<p>Pull request for the markers in labscript</p>\n</li>\n<li>\n<p>Pull request for the markers in runviewer (even tough it looks quite ugly without Nonlinear Time)</p>\n</li>\n<li>\n<p>Pull request for the shutters in runviewer (and in labscript if I decide to keep it the way it is)</p>\n</li>\n<li>\n<p>Nonlinear Time Pullrequest</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2017-06-18T06:59:02.813709+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-06-18T07:21:47.914973+00:00", "type": "issue_comment", "id": 37665941}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37667204.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37667204"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "What about a drop down menu (say next to the reset axes buttons) that allows you to select which shot will be linearly spaced based on the markers. Possibly you'd need to hide the markers for the other shots (but there could be a check box next to each shot in the list of shots that says whether to display the markers for that shot, or something along those lines). This idea needs fleshing out some more, but could be a possibility?\n\nThat makes sense with regards to the shutter times. The very first, original version of runviewer, did things like this (although not that exact feature). However, when I rewrote it, I deliberately made the decision to back calculate what was happening from the hardware instructions. This increase the chance that a bug in the code that writes the hardware instructions will be found, since they directly effect what is shown in runviewer. As such, I think it would be preferable to maintain this format, rather than saving additional information that only faithfully represents what is happening if there are no bugs.\n\nThat said, I'm happy to have my mind changed about this. I kind of made the decision by myself at the time, so there has not really been a discussion on the merits of this approach with anyone!\n\nYour plan for pull requests looks good! Thanks for putting in the time to contribute back to the main repositories!", "markup": "markdown", "html": "<p>What about a drop down menu (say next to the reset axes buttons) that allows you to select which shot will be linearly spaced based on the markers. Possibly you'd need to hide the markers for the other shots (but there could be a check box next to each shot in the list of shots that says whether to display the markers for that shot, or something along those lines). This idea needs fleshing out some more, but could be a possibility?</p>\n<p>That makes sense with regards to the shutter times. The very first, original version of runviewer, did things like this (although not that exact feature). However, when I rewrote it, I deliberately made the decision to back calculate what was happening from the hardware instructions. This increase the chance that a bug in the code that writes the hardware instructions will be found, since they directly effect what is shown in runviewer. As such, I think it would be preferable to maintain this format, rather than saving additional information that only faithfully represents what is happening if there are no bugs.</p>\n<p>That said, I'm happy to have my mind changed about this. I kind of made the decision by myself at the time, so there has not really been a discussion on the merits of this approach with anyone!</p>\n<p>Your plan for pull requests looks good! Thanks for putting in the time to contribute back to the main repositories!</p>", "type": "rendered"}, "created_on": "2017-06-18T08:58:40.294103+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37667204}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37667320.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37667320"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "I'm having trouble wrapping my head around your proposal.\nA dropdown would allow for selecting what shot so scale to yes. \nWe could also remove the marker lines in the plots themselves and just keep the top marker plot with the labels. \nBut I think this would just cause confusion and not really help in any way. But since each channel has one plot and not each shots's channel things would look really strange when things are only a tiny bit shifted between shots. For example if there is a ramp that is half way in a marker. Or there is a delay added in one of the shots that is greater then one of the markers spacings things would be very awkwardly spaced.\nWhat happens if you tick 2 Shots from different scripts?\nI dont think that a non linear timescale and comparability can be achieved in a easy way. \n\nOne way that things could work out is that we display each shots channel in a separate plot and create a smart way of linking the differently scaled timeaxes(each with its own markers). But this is hard to get right and I don't feel like this is something I can do.\n\nAs I said I'll give rewriting shutter times a try. And if things work out I'm happy removing the current way.\n\nI'm happy to! It's in my groups own interest to come closer to the main branch to make updates easier. This also helps eliminate bugs :)", "markup": "markdown", "html": "<p>I'm having trouble wrapping my head around your proposal.\nA dropdown would allow for selecting what shot so scale to yes. \nWe could also remove the marker lines in the plots themselves and just keep the top marker plot with the labels. \nBut I think this would just cause confusion and not really help in any way. But since each channel has one plot and not each shots's channel things would look really strange when things are only a tiny bit shifted between shots. For example if there is a ramp that is half way in a marker. Or there is a delay added in one of the shots that is greater then one of the markers spacings things would be very awkwardly spaced.\nWhat happens if you tick 2 Shots from different scripts?\nI dont think that a non linear timescale and comparability can be achieved in a easy way. </p>\n<p>One way that things could work out is that we display each shots channel in a separate plot and create a smart way of linking the differently scaled timeaxes(each with its own markers). But this is hard to get right and I don't feel like this is something I can do.</p>\n<p>As I said I'll give rewriting shutter times a try. And if things work out I'm happy removing the current way.</p>\n<p>I'm happy to! It's in my groups own interest to come closer to the main branch to make updates easier. This also helps eliminate bugs :)</p>", "type": "rendered"}, "created_on": "2017-06-18T09:16:59.895566+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37667320}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37673662.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37673662"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Yeah, you're right, my idea doesn't work. I'll keep thinking about it. We may just have to resort to some sort of toggle that changes between shot comparison and the ability to swap to this new mode you're proposing.", "markup": "markdown", "html": "<p>Yeah, you're right, my idea doesn't work. I'll keep thinking about it. We may just have to resort to some sort of toggle that changes between shot comparison and the ability to swap to this new mode you're proposing.</p>", "type": "rendered"}, "created_on": "2017-06-19T00:26:56.460397+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37673662}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37780658.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37780658"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Ok so I created the first runviewer pull request.\n\nI would now like to tackle the Shutter feature before getting into discussions about the nonlinear time.\n@philipstarkey as you already mentioned I would need to somehow figure out what the openstate of a Shutter is. I would as you said add something like this to labscript.py:\n\n```\n#!python\n\nclass Shutter(DigitalOut):\n    description = 'shutter'\n\n    @set_passed_properties(\n        property_names = {\"connection_table_properties\": [\"open_state\"]}\n        )\n    def __init__(self,name,parent_device,connection,delay=(0,0),open_state=1,\n                 **kwargs):\n```\nBefore I propose this change in labscript: you mentioned something about this preventing previously compiled shots from running, how so?", "markup": "markdown", "html": "<p>Ok so I created the first runviewer pull request.</p>\n<p>I would now like to tackle the Shutter feature before getting into discussions about the nonlinear time.\n@philipstarkey as you already mentioned I would need to somehow figure out what the openstate of a Shutter is. I would as you said add something like this to labscript.py:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Shutter</span><span class=\"p\">(</span><span class=\"n\">DigitalOut</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;shutter&#39;</span>\n\n    <span class=\"nd\">@set_passed_properties</span><span class=\"p\">(</span>\n        <span class=\"n\">property_names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;connection_table_properties&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;open_state&quot;</span><span class=\"p\">]}</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">parent_device</span><span class=\"p\">,</span><span class=\"n\">connection</span><span class=\"p\">,</span><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">open_state</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                 <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n</pre></div>\n\n\n<p>Before I propose this change in labscript: you mentioned something about this preventing previously compiled shots from running, how so?</p>", "type": "rendered"}, "created_on": "2017-06-22T18:30:42.797845+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37780658}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37786531.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37786531"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "@PhyNerd So you need the `open_state` parameter to be saved in the HDF5 file in order to access it from runviewer.\n\nThere are 2 places to save it, `device_properties` or `connection_table_properties`. Anything in `connection_table_properties` will be used to make a comparison with the BLACS connection table when shots are submitted. Shots that don't match will be rejected from running. I think it should go in the connection table properties, because the connection table should represent the hardware, and a change of hardware state (such as inverting a shutter) needs to be represented in the connection table (the fact that we don't save it already is an oversight). You don't want to re-run an old shot if the Shutter has been inverted in the meantime!\n\nSo it's not a big deal, it just means you need to recompile your BLACS connection table and you can't re-run old shots. Just something to be aware of.\n\nIt might be worth opening a new issue specifically for the shutter label feature, so we can discuss the runviewer implementation details further before you start writing it. For instance, I think it would be good to define what the runviewer `Shutter` implementation will be allowed to do (can it change the digital trace, or just add additional information to the plot? What additional information should we allow and what data structure/format should we store it in? that sort of thing!)", "markup": "markdown", "html": "<p>@PhyNerd So you need the <code>open_state</code> parameter to be saved in the HDF5 file in order to access it from runviewer.</p>\n<p>There are 2 places to save it, <code>device_properties</code> or <code>connection_table_properties</code>. Anything in <code>connection_table_properties</code> will be used to make a comparison with the BLACS connection table when shots are submitted. Shots that don't match will be rejected from running. I think it should go in the connection table properties, because the connection table should represent the hardware, and a change of hardware state (such as inverting a shutter) needs to be represented in the connection table (the fact that we don't save it already is an oversight). You don't want to re-run an old shot if the Shutter has been inverted in the meantime!</p>\n<p>So it's not a big deal, it just means you need to recompile your BLACS connection table and you can't re-run old shots. Just something to be aware of.</p>\n<p>It might be worth opening a new issue specifically for the shutter label feature, so we can discuss the runviewer implementation details further before you start writing it. For instance, I think it would be good to define what the runviewer <code>Shutter</code> implementation will be allowed to do (can it change the digital trace, or just add additional information to the plot? What additional information should we allow and what data structure/format should we store it in? that sort of thing!)</p>", "type": "rendered"}, "created_on": "2017-06-23T02:00:09.436513+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37786531}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37868438.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37868438"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Ok how about we make nonlinear time a feature that is active when viewing one shot only and disable it when more shots are viewed? This could cause a bit of confusion as the time axis would change upon selecting a second file, but I can't really think of a better solution. Would this solution be suitable @philipstarkey?", "markup": "markdown", "html": "<p>Ok how about we make nonlinear time a feature that is active when viewing one shot only and disable it when more shots are viewed? This could cause a bit of confusion as the time axis would change upon selecting a second file, but I can't really think of a better solution. Would this solution be suitable @philipstarkey?</p>", "type": "rendered"}, "created_on": "2017-06-27T14:36:45.657003+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 37868438}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/37878218.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-37878218"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Yeah, that's probably the best that can be done.\n\nI think probably the interface should contain a button to swap between nonlinear and linear time axes (next to the rescale y-t axes buttons). This button should be disabled when more than one shot is selected and it's state ignored. If only one shot is selected, the state of the button determines the scaling of the time axes.", "markup": "markdown", "html": "<p>Yeah, that's probably the best that can be done.</p>\n<p>I think probably the interface should contain a button to swap between nonlinear and linear time axes (next to the rescale y-t axes buttons). This button should be disabled when more than one shot is selected and it's state ignored. If only one shot is selected, the state of the button determines the scaling of the time axes.</p>", "type": "rendered"}, "created_on": "2017-06-28T00:23:21.037147+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 37878218}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45148041.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45148041"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Hi Jan, I've just checked out your nonlinear time code (running the tip of the APQ branch, so a little out of date compared with the markers branch, but it seems to run ok).\nI assume that you're waiting for the markers pull request to go through before you make a request for the nonlinear code? I've had a couple of thoughts on possible further features that could be added, and figured that given the basic functionality hasn't been merged in yet this would be the best place to discuss them.\n\nIt would be very cool if instead of just plotting the markers spaced evenly along the time axis, you could instead click and drag the marker lines to any location between the neighboring markers along the x-axis (you could add some sort of extra widget across the top of the plots where the clicking and dragging happens if it's easier). In this case, you'd probably want to disable scrolling and zooming in the time axis, as instead one would drag markers around to get the desired view.\n\nI don't know how feasible this would be, but it could also be useful to be able to add in temporary markers (i.e. not actually saving them to the H5 file) by hand in runviewer. This way, if you wanted to zoom in on a particular region using the ideas above, you could click to add extra markers either side of it and drag them out.\n\nIn terms of the user interface, I imagine the above ideas working in a similar way to the gradient tool in Illustrator or Photoshop, where extra colour markers can be added along an axis, then moved along it to change the local rate at which the colours change (in our case, it would instead change the local rate at which time progresses along the axis). As to the actual implementation, it seems like it should be possible to have it re-scale in real time, as the bars are dragged, given we already have the plots re-sampling when zooming. It would require a new scaling function that took the relative distance of each marker along the axis as its input.\n\nLet me know what you think, and whether any of these ideas are even possible!", "markup": "markdown", "html": "<p>Hi Jan, I've just checked out your nonlinear time code (running the tip of the APQ branch, so a little out of date compared with the markers branch, but it seems to run ok).\nI assume that you're waiting for the markers pull request to go through before you make a request for the nonlinear code? I've had a couple of thoughts on possible further features that could be added, and figured that given the basic functionality hasn't been merged in yet this would be the best place to discuss them.</p>\n<p>It would be very cool if instead of just plotting the markers spaced evenly along the time axis, you could instead click and drag the marker lines to any location between the neighboring markers along the x-axis (you could add some sort of extra widget across the top of the plots where the clicking and dragging happens if it's easier). In this case, you'd probably want to disable scrolling and zooming in the time axis, as instead one would drag markers around to get the desired view.</p>\n<p>I don't know how feasible this would be, but it could also be useful to be able to add in temporary markers (i.e. not actually saving them to the H5 file) by hand in runviewer. This way, if you wanted to zoom in on a particular region using the ideas above, you could click to add extra markers either side of it and drag them out.</p>\n<p>In terms of the user interface, I imagine the above ideas working in a similar way to the gradient tool in Illustrator or Photoshop, where extra colour markers can be added along an axis, then moved along it to change the local rate at which the colours change (in our case, it would instead change the local rate at which time progresses along the axis). As to the actual implementation, it seems like it should be possible to have it re-scale in real time, as the bars are dragged, given we already have the plots re-sampling when zooming. It would require a new scaling function that took the relative distance of each marker along the axis as its input.</p>\n<p>Let me know what you think, and whether any of these ideas are even possible!</p>", "type": "rendered"}, "created_on": "2018-05-02T05:52:23.808806+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": null, "type": "issue_comment", "id": 45148041}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45148739.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45148739"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Yes I'm waiting on the marker feature to finally merge. I didn't think it would take almost a year when I created the marker pull request. The APQ branch is quite outdated our lab uses GitHub  and Git to manage our code. Therefore I usually don't update stuff here that is not related to pull requests.\n\nMh the dragging feature and the temporary markers definitely are within the realm of possibility. I think pyqtgraphs InfiniteLines support dragging any have a signal attached to it. In both cases we would need to rethink the current rescale implementation which was designed to be static. We could maybe even  include it in the resample to make it faster.\n\nBut for the start we should first stick to the currently proposed simple feature wich we can than extend over time.", "markup": "markdown", "html": "<p>Yes I'm waiting on the marker feature to finally merge. I didn't think it would take almost a year when I created the marker pull request. The APQ branch is quite outdated our lab uses GitHub  and Git to manage our code. Therefore I usually don't update stuff here that is not related to pull requests.</p>\n<p>Mh the dragging feature and the temporary markers definitely are within the realm of possibility. I think pyqtgraphs InfiniteLines support dragging any have a signal attached to it. In both cases we would need to rethink the current rescale implementation which was designed to be static. We could maybe even  include it in the resample to make it faster.</p>\n<p>But for the start we should first stick to the currently proposed simple feature wich we can than extend over time.</p>", "type": "rendered"}, "created_on": "2018-05-02T06:44:56.548058+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 45148739}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45148981.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45148981"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Yeah, sorry about the delays with merging things. Unfortunately with all of the main developers busy writing theses, it's been hard to find time to deal with the more complicated and/or major changes! We're all getting close to the end though, so I think things will pick up over the next few months!", "markup": "markdown", "html": "<p>Yeah, sorry about the delays with merging things. Unfortunately with all of the main developers busy writing theses, it's been hard to find time to deal with the more complicated and/or major changes! We're all getting close to the end though, so I think things will pick up over the next few months!</p>", "type": "rendered"}, "created_on": "2018-05-02T06:59:23.789343+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": null, "type": "issue_comment", "id": 45148981}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45356100.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45356100"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "@shjohnst I built very basic demo of the changes you proposed: \n[https://pastebin.com/C2FHLQaT](https://pastebin.com/C2FHLQaT)\n\nI'm not really convinced anymore that this is a useful feature. The dragging of markers feels really clunky as one needs to move the neighboring markers out of the way which is just annoying. Scrolling is much more efficient for this. Same goes for the additional markers they just feel clunky and I haven't found a easy way to remove them after they were added.", "markup": "markdown", "html": "<p>@shjohnst I built very basic demo of the changes you proposed: \n<a data-is-external-link=\"true\" href=\"https://pastebin.com/C2FHLQaT\" rel=\"nofollow\">https://pastebin.com/C2FHLQaT</a></p>\n<p>I'm not really convinced anymore that this is a useful feature. The dragging of markers feels really clunky as one needs to move the neighboring markers out of the way which is just annoying. Scrolling is much more efficient for this. Same goes for the additional markers they just feel clunky and I haven't found a easy way to remove them after they were added.</p>", "type": "rendered"}, "created_on": "2018-05-10T13:27:53.970177+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 45356100}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45366848.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45366848"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Thanks for looking into it! I think you're right that it may not be particularly useful unless we come up with an ideal interface for it. Let's leave it for now.", "markup": "markdown", "html": "<p>Thanks for looking into it! I think you're right that it may not be particularly useful unless we come up with an ideal interface for it. Let's leave it for now.</p>", "type": "rendered"}, "created_on": "2018-05-11T00:33:15.727593+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": null, "type": "issue_comment", "id": 45366848}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45367334.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45367334"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Feature was added in 46e746e", "markup": "markdown", "html": "<p>Feature was added in <a href=\"#!/labscript_suite/runviewer/commits/46e746e\" rel=\"nofollow\" class=\"ap-connect-link\">46e746e</a></p>", "type": "rendered"}, "created_on": "2018-05-11T01:59:22.021189+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": null, "type": "issue_comment", "id": 45367334}, {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5/comments/45367633.json"}, "html": {"href": "#!/labscript_suite/runviewer/issues/5#comment-45367633"}}, "issue": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer/issues/5.json"}}, "type": "issue", "id": 5, "repository": {"links": {"self": {"href": "data/repositories/labscript_suite/runviewer.json"}, "html": {"href": "#!/labscript_suite/runviewer"}, "avatar": {"href": "data/bytebucket.org/ravatar/{71215673-ad3e-425c-ae04-84cc6c2ca7da}ts=445022"}}, "type": "repository", "name": "runviewer", "full_name": "labscript_suite/runviewer", "uuid": "{71215673-ad3e-425c-ae04-84cc6c2ca7da}"}, "title": "Markers and nonlinear timescale"}, "content": {"raw": "Actually, I think I've come up with an intuitive way of doing rescaling, since this issue has been resolved, and it's really a new feature request, I'll open a new issue about it.", "markup": "markdown", "html": "<p>Actually, I think I've come up with an intuitive way of doing rescaling, since this issue has been resolved, and it's really a new feature request, I'll open a new issue about it.</p>", "type": "rendered"}, "created_on": "2018-05-11T02:34:17.348116+00:00", "user": {"display_name": "Shaun Johnstone", "uuid": "{652df738-313d-472c-b7b5-a3f8f98a3322}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D"}, "html": {"href": "https://bitbucket.org/%7B652df738-313d-472c-b7b5-a3f8f98a3322%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/38984f1761fc67ce892911496abee619d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSJ-3.png"}}, "nickname": "shjohnst", "type": "user", "account_id": "557058:1b9a15fb-8e4f-407e-b7b9-567c5e1fa1b4"}, "updated_on": null, "type": "issue_comment", "id": 45367633}], "page": 1, "size": 19}