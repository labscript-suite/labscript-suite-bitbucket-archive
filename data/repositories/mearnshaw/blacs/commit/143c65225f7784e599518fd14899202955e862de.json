{"rendered": {"message": {"raw": "renamed state to mode in some instances to make the distinction between states and modes clearer!\n\nAdded a delete_stale_states parameter to @define_state which will pull the most recent state out of the queue of adjacent identical statefunctions.\n\nEg, if the statefunctions in the queue are: [a,a,a,b,a,a,c,a,a,a,a]\nand a is defined wth delete_stale_states=True,\nthen we will execute the 3rd a, then b, then skip the next a, execute the a before the c, execute c, and then execute the last a.\nThis is designed so that multiple calls to program_device only runs the most recent one, which is especially important on slow devices like the RfBlaster which can take ~5s to program in manual mode. This replaces the hack previously used in the RfBlaster which ignored calls to program_device if we already had 2 in the queue (the number in the queue was kept track of manually within the tab)", "markup": "markdown", "html": "<p>renamed state to mode in some instances to make the distinction between states and modes clearer!</p>\n<p>Added a delete_stale_states parameter to @define_state which will pull the most recent state out of the queue of adjacent identical statefunctions.</p>\n<p>Eg, if the statefunctions in the queue are: [a,a,a,b,a,a,c,a,a,a,a]<br />\nand a is defined wth delete_stale_states=True,<br />\nthen we will execute the 3rd a, then b, then skip the next a, execute the a before the c, execute c, and then execute the last a.<br />\nThis is designed so that multiple calls to program_device only runs the most recent one, which is especially important on slow devices like the RfBlaster which can take ~5s to program in manual mode. This replaces the hack previously used in the RfBlaster which ignored calls to program_device if we already had 2 in the queue (the number in the queue was kept track of manually within the tab)</p>", "type": "rendered"}}, "hash": "143c65225f7784e599518fd14899202955e862de", "repository": {"links": {"self": {"href": "data/repositories/mearnshaw/blacs.json"}, "html": {"href": "#!/mearnshaw/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{a0819a13-c89c-456c-be10-56b2cfd4c2ee}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "mearnshaw/blacs", "uuid": "{a0819a13-c89c-456c-be10-56b2cfd4c2ee}"}, "links": {"self": {"href": "data/repositories/mearnshaw/blacs/commit/143c65225f7784e599518fd14899202955e862de.json"}, "comments": {"href": "data/repositories/mearnshaw/blacs/commit/143c65225f7784e599518fd14899202955e862de/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/blacs/patch/143c65225f7784e599518fd14899202955e862de"}, "html": {"href": "#!/mearnshaw/blacs/commits/143c65225f7784e599518fd14899202955e862de"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/blacs/diff/143c65225f7784e599518fd14899202955e862de"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/blacs/commit/143c65225f7784e599518fd14899202955e862de/approve"}, "statuses": {"href": "data/repositories/mearnshaw/blacs/commit/143c65225f7784e599518fd14899202955e862de/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "renamed state to mode in some instances to make the distinction between states and modes clearer!\n\nAdded a delete_stale_states parameter to @define_state which will pull the most recent state out of the queue of adjacent identical statefunctions.\n\nEg, if the statefunctions in the queue are: [a,a,a,b,a,a,c,a,a,a,a]\nand a is defined wth delete_stale_states=True,\nthen we will execute the 3rd a, then b, then skip the next a, execute the a before the c, execute c, and then execute the last a.\nThis is designed so that multiple calls to program_device only runs the most recent one, which is especially important on slow devices like the RfBlaster which can take ~5s to program in manual mode. This replaces the hack previously used in the RfBlaster which ignored calls to program_device if we already had 2 in the queue (the number in the queue was kept track of manually within the tab)", "markup": "markdown", "html": "<p>renamed state to mode in some instances to make the distinction between states and modes clearer!</p>\n<p>Added a delete_stale_states parameter to @define_state which will pull the most recent state out of the queue of adjacent identical statefunctions.</p>\n<p>Eg, if the statefunctions in the queue are: [a,a,a,b,a,a,c,a,a,a,a]<br />\nand a is defined wth delete_stale_states=True,<br />\nthen we will execute the 3rd a, then b, then skip the next a, execute the a before the c, execute c, and then execute the last a.<br />\nThis is designed so that multiple calls to program_device only runs the most recent one, which is especially important on slow devices like the RfBlaster which can take ~5s to program in manual mode. This replaces the hack previously used in the RfBlaster which ignored calls to program_device if we already had 2 in the queue (the number in the queue was kept track of manually within the tab)</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "a0b27a6510cd0ca0d61499a896d10cfcd4f32806", "type": "commit", "links": {"self": {"href": "data/repositories/mearnshaw/blacs/commit/a0b27a6510cd0ca0d61499a896d10cfcd4f32806.json"}, "html": {"href": "#!/mearnshaw/blacs/commits/a0b27a6510cd0ca0d61499a896d10cfcd4f32806"}}}], "date": "2013-02-17T06:55:07+00:00", "message": "renamed state to mode in some instances to make the distinction between states and modes clearer!\n\nAdded a delete_stale_states parameter to @define_state which will pull the most recent state out of the queue of adjacent identical statefunctions.\n\nEg, if the statefunctions in the queue are: [a,a,a,b,a,a,c,a,a,a,a]\nand a is defined wth delete_stale_states=True,\nthen we will execute the 3rd a, then b, then skip the next a, execute the a before the c, execute c, and then execute the last a.\nThis is designed so that multiple calls to program_device only runs the most recent one, which is especially important on slow devices like the RfBlaster which can take ~5s to program in manual mode. This replaces the hack previously used in the RfBlaster which ignored calls to program_device if we already had 2 in the queue (the number in the queue was kept track of manually within the tab)", "type": "commit", "git_hash": "2f0ef914d21ff7a5699ba3889707c9c419baab09", "tags": null, "branches": "default"}