{"rendered": {"message": {"raw": "Lots of refactoring of DDSs.\n\nDDSs had many references to specific classes for their parent devices, and their behaviour was\nslightly different depending on what parent device they had. This has been solved in a few ways.\n\nFor DDSs attached to a PhaseMatrixQuickSyn, there is now a subclass of DDS,\nlabscript_utils.PhaseMatrixQuickSyn.QuickSynDDS, which supports only frequency\ncontrol and only static gating.\n\nFor Novatechs, one should still use DDS and StaticDDS, but they call methods on\nthe parents asking questions about how to initialise, such as whether a certain\nunit conversion class should be used if the user hasn't specified one. If the parent\ndoes not implement this method get_default_unit_conversion_classes(), it is ignored,\nso this is backward compatible.\n\nFor PulseBlasters, DDS is also still the class to use, however the creation of a\nDigitalQuantity for its gating is now done in the PulseBlaster's add_device method.\n\nIn order to facilitate this, Device.__init__ now takes an argument call_parents_add_device,\nwhich, if set to false, means Device.__init__ will not call parent_device.add_device.\n\nThis allows subclasses more control over when parent_device.add_device is called\nin their own __init__ method, although it remains the case that they *must* call it\nat some point in their __init__ method if they tell Device.__init__ not to.\n\nThis commit corresponds to a simultaneous one in the labscript module which\nimplements part of this change.", "markup": "markdown", "html": "<p>Lots of refactoring of DDSs.</p>\n<p>DDSs had many references to specific classes for their parent devices, and their behaviour was<br />\nslightly different depending on what parent device they had. This has been solved in a few ways.</p>\n<p>For DDSs attached to a PhaseMatrixQuickSyn, there is now a subclass of DDS,<br />\nlabscript_utils.PhaseMatrixQuickSyn.QuickSynDDS, which supports only frequency<br />\ncontrol and only static gating.</p>\n<p>For Novatechs, one should still use DDS and StaticDDS, but they call methods on<br />\nthe parents asking questions about how to initialise, such as whether a certain<br />\nunit conversion class should be used if the user hasn't specified one. If the parent<br />\ndoes not implement this method get_default_unit_conversion_classes(), it is ignored,<br />\nso this is backward compatible.</p>\n<p>For PulseBlasters, DDS is also still the class to use, however the creation of a<br />\nDigitalQuantity for its gating is now done in the PulseBlaster's add_device method.</p>\n<p>In order to facilitate this, Device.<strong>init</strong> now takes an argument call_parents_add_device,<br />\nwhich, if set to false, means Device.<strong>init</strong> will not call parent_device.add_device.</p>\n<p>This allows subclasses more control over when parent_device.add_device is called<br />\nin their own <strong>init</strong> method, although it remains the case that they <em>must</em> call it<br />\nat some point in their <strong>init</strong> method if they tell Device.<strong>init</strong> not to.</p>\n<p>This commit corresponds to a simultaneous one in the labscript module which<br />\nimplements part of this change.</p>", "type": "rendered"}}, "hash": "bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0", "repository": {"links": {"self": {"href": "data/repositories/mearnshaw/labscript_devices.json"}, "html": {"href": "#!/mearnshaw/labscript_devices"}, "avatar": {"href": "data/bytebucket.org/ravatar/{b186b7b2-e435-4d48-aef7-352d633cd5f9}ts=default"}}, "type": "repository", "name": "labscript_devices", "full_name": "mearnshaw/labscript_devices", "uuid": "{b186b7b2-e435-4d48-aef7-352d633cd5f9}"}, "links": {"self": {"href": "data/repositories/mearnshaw/labscript_devices/commit/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0.json"}, "comments": {"href": "data/repositories/mearnshaw/labscript_devices/commit/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/labscript_devices/patch/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0"}, "html": {"href": "#!/mearnshaw/labscript_devices/commits/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/labscript_devices/diff/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/mearnshaw/labscript_devices/commit/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0/approve"}, "statuses": {"href": "data/repositories/mearnshaw/labscript_devices/commit/bc2dd8cc27001e0a34e3ddacac0c2c12c7979db0/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Lots of refactoring of DDSs.\n\nDDSs had many references to specific classes for their parent devices, and their behaviour was\nslightly different depending on what parent device they had. This has been solved in a few ways.\n\nFor DDSs attached to a PhaseMatrixQuickSyn, there is now a subclass of DDS,\nlabscript_utils.PhaseMatrixQuickSyn.QuickSynDDS, which supports only frequency\ncontrol and only static gating.\n\nFor Novatechs, one should still use DDS and StaticDDS, but they call methods on\nthe parents asking questions about how to initialise, such as whether a certain\nunit conversion class should be used if the user hasn't specified one. If the parent\ndoes not implement this method get_default_unit_conversion_classes(), it is ignored,\nso this is backward compatible.\n\nFor PulseBlasters, DDS is also still the class to use, however the creation of a\nDigitalQuantity for its gating is now done in the PulseBlaster's add_device method.\n\nIn order to facilitate this, Device.__init__ now takes an argument call_parents_add_device,\nwhich, if set to false, means Device.__init__ will not call parent_device.add_device.\n\nThis allows subclasses more control over when parent_device.add_device is called\nin their own __init__ method, although it remains the case that they *must* call it\nat some point in their __init__ method if they tell Device.__init__ not to.\n\nThis commit corresponds to a simultaneous one in the labscript module which\nimplements part of this change.", "markup": "markdown", "html": "<p>Lots of refactoring of DDSs.</p>\n<p>DDSs had many references to specific classes for their parent devices, and their behaviour was<br />\nslightly different depending on what parent device they had. This has been solved in a few ways.</p>\n<p>For DDSs attached to a PhaseMatrixQuickSyn, there is now a subclass of DDS,<br />\nlabscript_utils.PhaseMatrixQuickSyn.QuickSynDDS, which supports only frequency<br />\ncontrol and only static gating.</p>\n<p>For Novatechs, one should still use DDS and StaticDDS, but they call methods on<br />\nthe parents asking questions about how to initialise, such as whether a certain<br />\nunit conversion class should be used if the user hasn't specified one. If the parent<br />\ndoes not implement this method get_default_unit_conversion_classes(), it is ignored,<br />\nso this is backward compatible.</p>\n<p>For PulseBlasters, DDS is also still the class to use, however the creation of a<br />\nDigitalQuantity for its gating is now done in the PulseBlaster's add_device method.</p>\n<p>In order to facilitate this, Device.<strong>init</strong> now takes an argument call_parents_add_device,<br />\nwhich, if set to false, means Device.<strong>init</strong> will not call parent_device.add_device.</p>\n<p>This allows subclasses more control over when parent_device.add_device is called<br />\nin their own <strong>init</strong> method, although it remains the case that they <em>must</em> call it<br />\nat some point in their <strong>init</strong> method if they tell Device.<strong>init</strong> not to.</p>\n<p>This commit corresponds to a simultaneous one in the labscript module which<br />\nimplements part of this change.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "72e83ed603bfef707eb25ac6a74757da045a127e", "type": "commit", "links": {"self": {"href": "data/repositories/mearnshaw/labscript_devices/commit/72e83ed603bfef707eb25ac6a74757da045a127e.json"}, "html": {"href": "#!/mearnshaw/labscript_devices/commits/72e83ed603bfef707eb25ac6a74757da045a127e"}}}], "date": "2014-06-04T05:23:29+00:00", "message": "Lots of refactoring of DDSs.\n\nDDSs had many references to specific classes for their parent devices, and their behaviour was\nslightly different depending on what parent device they had. This has been solved in a few ways.\n\nFor DDSs attached to a PhaseMatrixQuickSyn, there is now a subclass of DDS,\nlabscript_utils.PhaseMatrixQuickSyn.QuickSynDDS, which supports only frequency\ncontrol and only static gating.\n\nFor Novatechs, one should still use DDS and StaticDDS, but they call methods on\nthe parents asking questions about how to initialise, such as whether a certain\nunit conversion class should be used if the user hasn't specified one. If the parent\ndoes not implement this method get_default_unit_conversion_classes(), it is ignored,\nso this is backward compatible.\n\nFor PulseBlasters, DDS is also still the class to use, however the creation of a\nDigitalQuantity for its gating is now done in the PulseBlaster's add_device method.\n\nIn order to facilitate this, Device.__init__ now takes an argument call_parents_add_device,\nwhich, if set to false, means Device.__init__ will not call parent_device.add_device.\n\nThis allows subclasses more control over when parent_device.add_device is called\nin their own __init__ method, although it remains the case that they *must* call it\nat some point in their __init__ method if they tell Device.__init__ not to.\n\nThis commit corresponds to a simultaneous one in the labscript module which\nimplements part of this change.", "type": "commit", "git_hash": "4cab638e4c1c73e999ab6075fee4fa9c504b66a2", "tags": null, "branches": "default"}