{"rendered": {"message": {"raw": "Changes to how labscript handles initialisation and cleanup.\nSince runmanager runs labscripts repeatedly, and labscript does initialisation at import time, we've previously been handling this by reloading labscript every run.\nThis has caused some nasty interaction with ModuleWatcher which I don't quite understand.\nSince this was pretty bad practise anyway, labscript now has explicit init and cleanup functions. Usage is still identical in that initialisation still happens at import time, however there is now the option to supress auto-initialisation by setting labscript_auto_init = False in your __main__ module. runmanager's batch_compiler does this and then calls labscript.labscript_init(h5_file, labscript_file) and labscript.labscript_cleanup() explicitly for every shot it compiles, rather than munging sys.argv and simulating a fresh import.\n\nThis seems like a much cleaner solution. A quick test will reveal if this fixes #600 (The ModuleWatcher crash)", "markup": "markdown", "html": "<p>Changes to how labscript handles initialisation and cleanup.<br />\nSince runmanager runs labscripts repeatedly, and labscript does initialisation at import time, we've previously been handling this by reloading labscript every run.<br />\nThis has caused some nasty interaction with ModuleWatcher which I don't quite understand.<br />\nSince this was pretty bad practise anyway, labscript now has explicit init and cleanup functions. Usage is still identical in that initialisation still happens at import time, however there is now the option to supress auto-initialisation by setting labscript_auto_init = False in your <strong>main</strong> module. runmanager's batch_compiler does this and then calls labscript.labscript_init(h5_file, labscript_file) and labscript.labscript_cleanup() explicitly for every shot it compiles, rather than munging sys.argv and simulating a fresh import.</p>\n<p>This seems like a much cleaner solution. A quick test will reveal if this fixes #600 (The ModuleWatcher crash)</p>", "type": "rendered"}}, "hash": "9534c7b1d3759483408a1eeffb670588811c7d9c", "repository": {"links": {"self": {"href": "data/repositories/monashkrb/runmanager.json"}, "html": {"href": "#!/monashkrb/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{5decc07f-72b7-4292-b42b-23a6bbca9a63}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "monashkrb/runmanager", "uuid": "{5decc07f-72b7-4292-b42b-23a6bbca9a63}"}, "links": {"self": {"href": "data/repositories/monashkrb/runmanager/commit/9534c7b1d3759483408a1eeffb670588811c7d9c.json"}, "comments": {"href": "data/repositories/monashkrb/runmanager/commit/9534c7b1d3759483408a1eeffb670588811c7d9c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/runmanager/patch/9534c7b1d3759483408a1eeffb670588811c7d9c"}, "html": {"href": "#!/monashkrb/runmanager/commits/9534c7b1d3759483408a1eeffb670588811c7d9c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/runmanager/diff/9534c7b1d3759483408a1eeffb670588811c7d9c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/monashkrb/runmanager/commit/9534c7b1d3759483408a1eeffb670588811c7d9c/approve"}, "statuses": {"href": "data/repositories/monashkrb/runmanager/commit/9534c7b1d3759483408a1eeffb670588811c7d9c/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Changes to how labscript handles initialisation and cleanup.\nSince runmanager runs labscripts repeatedly, and labscript does initialisation at import time, we've previously been handling this by reloading labscript every run.\nThis has caused some nasty interaction with ModuleWatcher which I don't quite understand.\nSince this was pretty bad practise anyway, labscript now has explicit init and cleanup functions. Usage is still identical in that initialisation still happens at import time, however there is now the option to supress auto-initialisation by setting labscript_auto_init = False in your __main__ module. runmanager's batch_compiler does this and then calls labscript.labscript_init(h5_file, labscript_file) and labscript.labscript_cleanup() explicitly for every shot it compiles, rather than munging sys.argv and simulating a fresh import.\n\nThis seems like a much cleaner solution. A quick test will reveal if this fixes #600 (The ModuleWatcher crash)", "markup": "markdown", "html": "<p>Changes to how labscript handles initialisation and cleanup.<br />\nSince runmanager runs labscripts repeatedly, and labscript does initialisation at import time, we've previously been handling this by reloading labscript every run.<br />\nThis has caused some nasty interaction with ModuleWatcher which I don't quite understand.<br />\nSince this was pretty bad practise anyway, labscript now has explicit init and cleanup functions. Usage is still identical in that initialisation still happens at import time, however there is now the option to supress auto-initialisation by setting labscript_auto_init = False in your <strong>main</strong> module. runmanager's batch_compiler does this and then calls labscript.labscript_init(h5_file, labscript_file) and labscript.labscript_cleanup() explicitly for every shot it compiles, rather than munging sys.argv and simulating a fresh import.</p>\n<p>This seems like a much cleaner solution. A quick test will reveal if this fixes #600 (The ModuleWatcher crash)</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "467d418ad25c7ec756db3980da3d2056e945c1b7", "type": "commit", "links": {"self": {"href": "data/repositories/monashkrb/runmanager/commit/467d418ad25c7ec756db3980da3d2056e945c1b7.json"}, "html": {"href": "#!/monashkrb/runmanager/commits/467d418ad25c7ec756db3980da3d2056e945c1b7"}}}], "date": "2012-09-07T03:56:51+00:00", "message": "Changes to how labscript handles initialisation and cleanup.\nSince runmanager runs labscripts repeatedly, and labscript does initialisation at import time, we've previously been handling this by reloading labscript every run.\nThis has caused some nasty interaction with ModuleWatcher which I don't quite understand.\nSince this was pretty bad practise anyway, labscript now has explicit init and cleanup functions. Usage is still identical in that initialisation still happens at import time, however there is now the option to supress auto-initialisation by setting labscript_auto_init = False in your __main__ module. runmanager's batch_compiler does this and then calls labscript.labscript_init(h5_file, labscript_file) and labscript.labscript_cleanup() explicitly for every shot it compiles, rather than munging sys.argv and simulating a fresh import.\n\nThis seems like a much cleaner solution. A quick test will reveal if this fixes #600 (The ModuleWatcher crash)", "type": "commit", "git_hash": "fc93692c95e951ae850f918c3de2e31837087a73", "tags": null, "branches": "default"}