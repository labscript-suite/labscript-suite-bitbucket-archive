{"rendered": {"message": {"raw": "Fix for issue #52. Remove deprecated convert_objects() call.\n\nIn current versions of pandas and lyse, in normal use the majority of dataframe\ncolumns that can be are already specific datatypes and not 'object', so there is\nlimited performance improvement to this.\n\nSome colums that were temporarily a mixed datatype (due to the analysis\nresults being saved by single shot routines changing type) will remain dtype\nobject even if all the entries are later of the same type, which is not ideal.\n\nThis should be rare and so not likely to be a performance problem, which was the\noriginal purpose of adding convert_objects. But these columns may appear differently\nfrom the perspective of multishot routines, and some code may not be able to handle\nthem. However we will see empirically if this causes any problems, as perhaps\nall relevant code can in fact handle the mixed datatypes fine, so we shouldn't\nfix what isn't broken.", "markup": "markdown", "html": "<p>Fix for issue #52. Remove deprecated convert_objects() call.</p>\n<p>In current versions of pandas and lyse, in normal use the majority of dataframe<br />\ncolumns that can be are already specific datatypes and not 'object', so there is<br />\nlimited performance improvement to this.</p>\n<p>Some colums that were temporarily a mixed datatype (due to the analysis<br />\nresults being saved by single shot routines changing type) will remain dtype<br />\nobject even if all the entries are later of the same type, which is not ideal.</p>\n<p>This should be rare and so not likely to be a performance problem, which was the<br />\noriginal purpose of adding convert_objects. But these columns may appear differently<br />\nfrom the perspective of multishot routines, and some code may not be able to handle<br />\nthem. However we will see empirically if this causes any problems, as perhaps<br />\nall relevant code can in fact handle the mixed datatypes fine, so we shouldn't<br />\nfix what isn't broken.</p>", "type": "rendered"}}, "hash": "cb51a41e5bed68b22ffda49338323131e734ee40", "repository": {"links": {"self": {"href": "data/repositories/monashspinor/lyse.json"}, "html": {"href": "#!/monashspinor/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bc4f4324-6fe7-4c56-adaf-c4e726bd4914}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "monashspinor/lyse", "uuid": "{bc4f4324-6fe7-4c56-adaf-c4e726bd4914}"}, "links": {"self": {"href": "data/repositories/monashspinor/lyse/commit/cb51a41e5bed68b22ffda49338323131e734ee40.json"}, "comments": {"href": "data/repositories/monashspinor/lyse/commit/cb51a41e5bed68b22ffda49338323131e734ee40/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/lyse/patch/cb51a41e5bed68b22ffda49338323131e734ee40"}, "html": {"href": "#!/monashspinor/lyse/commits/cb51a41e5bed68b22ffda49338323131e734ee40"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/lyse/diff/cb51a41e5bed68b22ffda49338323131e734ee40"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/lyse/commit/cb51a41e5bed68b22ffda49338323131e734ee40/approve"}, "statuses": {"href": "data/repositories/monashspinor/lyse/commit/cb51a41e5bed68b22ffda49338323131e734ee40/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Fix for issue #52. Remove deprecated convert_objects() call.\n\nIn current versions of pandas and lyse, in normal use the majority of dataframe\ncolumns that can be are already specific datatypes and not 'object', so there is\nlimited performance improvement to this.\n\nSome colums that were temporarily a mixed datatype (due to the analysis\nresults being saved by single shot routines changing type) will remain dtype\nobject even if all the entries are later of the same type, which is not ideal.\n\nThis should be rare and so not likely to be a performance problem, which was the\noriginal purpose of adding convert_objects. But these columns may appear differently\nfrom the perspective of multishot routines, and some code may not be able to handle\nthem. However we will see empirically if this causes any problems, as perhaps\nall relevant code can in fact handle the mixed datatypes fine, so we shouldn't\nfix what isn't broken.", "markup": "markdown", "html": "<p>Fix for issue #52. Remove deprecated convert_objects() call.</p>\n<p>In current versions of pandas and lyse, in normal use the majority of dataframe<br />\ncolumns that can be are already specific datatypes and not 'object', so there is<br />\nlimited performance improvement to this.</p>\n<p>Some colums that were temporarily a mixed datatype (due to the analysis<br />\nresults being saved by single shot routines changing type) will remain dtype<br />\nobject even if all the entries are later of the same type, which is not ideal.</p>\n<p>This should be rare and so not likely to be a performance problem, which was the<br />\noriginal purpose of adding convert_objects. But these columns may appear differently<br />\nfrom the perspective of multishot routines, and some code may not be able to handle<br />\nthem. However we will see empirically if this causes any problems, as perhaps<br />\nall relevant code can in fact handle the mixed datatypes fine, so we shouldn't<br />\nfix what isn't broken.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "b7e1eb8b03efd4062d0755408ef6fade1b7ea645", "type": "commit", "links": {"self": {"href": "data/repositories/monashspinor/lyse/commit/b7e1eb8b03efd4062d0755408ef6fade1b7ea645.json"}, "html": {"href": "#!/monashspinor/lyse/commits/b7e1eb8b03efd4062d0755408ef6fade1b7ea645"}}}], "date": "2019-08-14T14:04:07+00:00", "message": "Fix for issue #52. Remove deprecated convert_objects() call.\n\nIn current versions of pandas and lyse, in normal use the majority of dataframe\ncolumns that can be are already specific datatypes and not 'object', so there is\nlimited performance improvement to this.\n\nSome colums that were temporarily a mixed datatype (due to the analysis\nresults being saved by single shot routines changing type) will remain dtype\nobject even if all the entries are later of the same type, which is not ideal.\n\nThis should be rare and so not likely to be a performance problem, which was the\noriginal purpose of adding convert_objects. But these columns may appear differently\nfrom the perspective of multishot routines, and some code may not be able to handle\nthem. However we will see empirically if this causes any problems, as perhaps\nall relevant code can in fact handle the mixed datatypes fine, so we shouldn't\nfix what isn't broken.", "type": "commit", "git_hash": "4db0e4939ab77ad2fe2d43e23cec32466db372f4", "tags": null, "branches": "bugfix"}