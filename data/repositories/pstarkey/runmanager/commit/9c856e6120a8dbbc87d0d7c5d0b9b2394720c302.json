{"rendered": {"message": {"raw": "Fairly huge changes to runmanager.\n(This commit affects issues #439 and #523)\nFirstly, many, many functions for interacting with globals 5 files and globals themselves, and for compiling labscripts, have been split of into __init__.py. Thus they are available to ayone with the dexterity to type 'import runmanager' without any typos. Most of file_ops.py (now deleted) ended up in there too, as indicidual functions rather than a class.\nThe more interesting of these functions are actually pretty well documented if I do say so myself, so go and have a look. The cooler ones are at the bottom.\nThese functions are mainly intended for use with BLACS and  (the future program) mise, so that they may manipulate globals and make run files to their hearts content.\nIn particular, the compile_labscript_async() function is designed to slot right into a GUI program, running in a thread (so as not to hog the GUI mainloop) and coughing out the compilation's output into a queue-like object, such as a subproc_utils.gtk_components.OutputBox, which I just moved out of lyse so I can use one in BLACS for this very purpose. I imagine mise will use it too.\nThis kind of output capturing is a *vast* improvement on what runmanager was doing previously, and as a result, you'll probably see output lines coming out of runmanager actually *in order* all the time. Runmanager isn't using an OutputBox yet, but will be soon. Making it do so isn't much of a change, it's mainly just removing duplication, since the thing runmanager is using was my first attempt at OutputBox before I made it better.\nAnyway, this is all possible because I now have a long running Python process in which labscript compilation occurs. It's connected to the main process over zmq sockets (abstracted away by subproc_utils, naturally). Requests for compilation are queued up and execute in the subprocess. This should be way faster than what we've been doing so far, as we don't have to start a Python interpreter for every run file. It will be interesting to see how it goes.\nAlso, runmanager has a new icon. Enjoy.\nOh and I got rid of some GUI duplication and some options which I'm pretty sure no-one uses (correct me if anyone actually does), that is making h5 files without compiling, or parsing globals without compiling. So now the smallest action you can do is compile. Less checkboxes.\n I also changed a couple of icons in runmanager, the 'delete group' ison is now a minus sign rather than the universal 'no' symbol.\nOh and opening runviewer from runmanager now doesn't block runmanager until you close it.\nAs this is a big change there may be bugs. Hopefully not many, but be alert.", "markup": "markdown", "html": "<p>Fairly huge changes to runmanager.<br />\n(This commit affects issues #439 and #523)<br />\nFirstly, many, many functions for interacting with globals 5 files and globals themselves, and for compiling labscripts, have been split of into <strong>init</strong>.py. Thus they are available to ayone with the dexterity to type 'import runmanager' without any typos. Most of file_ops.py (now deleted) ended up in there too, as indicidual functions rather than a class.<br />\nThe more interesting of these functions are actually pretty well documented if I do say so myself, so go and have a look. The cooler ones are at the bottom.<br />\nThese functions are mainly intended for use with BLACS and  (the future program) mise, so that they may manipulate globals and make run files to their hearts content.<br />\nIn particular, the compile_labscript_async() function is designed to slot right into a GUI program, running in a thread (so as not to hog the GUI mainloop) and coughing out the compilation's output into a queue-like object, such as a subproc_utils.gtk_components.OutputBox, which I just moved out of lyse so I can use one in BLACS for this very purpose. I imagine mise will use it too.<br />\nThis kind of output capturing is a <em>vast</em> improvement on what runmanager was doing previously, and as a result, you'll probably see output lines coming out of runmanager actually <em>in order</em> all the time. Runmanager isn't using an OutputBox yet, but will be soon. Making it do so isn't much of a change, it's mainly just removing duplication, since the thing runmanager is using was my first attempt at OutputBox before I made it better.<br />\nAnyway, this is all possible because I now have a long running Python process in which labscript compilation occurs. It's connected to the main process over zmq sockets (abstracted away by subproc_utils, naturally). Requests for compilation are queued up and execute in the subprocess. This should be way faster than what we've been doing so far, as we don't have to start a Python interpreter for every run file. It will be interesting to see how it goes.<br />\nAlso, runmanager has a new icon. Enjoy.<br />\nOh and I got rid of some GUI duplication and some options which I'm pretty sure no-one uses (correct me if anyone actually does), that is making h5 files without compiling, or parsing globals without compiling. So now the smallest action you can do is compile. Less checkboxes.<br />\n I also changed a couple of icons in runmanager, the 'delete group' ison is now a minus sign rather than the universal 'no' symbol.<br />\nOh and opening runviewer from runmanager now doesn't block runmanager until you close it.<br />\nAs this is a big change there may be bugs. Hopefully not many, but be alert.</p>", "type": "rendered"}}, "hash": "9c856e6120a8dbbc87d0d7c5d0b9b2394720c302", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/runmanager.json"}, "html": {"href": "#!/pstarkey/runmanager"}, "avatar": {"href": "data/bytebucket.org/ravatar/{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}ts=python"}}, "type": "repository", "name": "runmanager", "full_name": "pstarkey/runmanager", "uuid": "{2f11f5fd-c84d-42bd-a265-eda8b5bef98b}"}, "links": {"self": {"href": "data/repositories/pstarkey/runmanager/commit/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302.json"}, "comments": {"href": "data/repositories/pstarkey/runmanager/commit/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager/patch/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302"}, "html": {"href": "#!/pstarkey/runmanager/commits/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager/diff/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/runmanager/commit/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302/approve"}, "statuses": {"href": "data/repositories/pstarkey/runmanager/commit/9c856e6120a8dbbc87d0d7c5d0b9b2394720c302/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Fairly huge changes to runmanager.\n(This commit affects issues #439 and #523)\nFirstly, many, many functions for interacting with globals 5 files and globals themselves, and for compiling labscripts, have been split of into __init__.py. Thus they are available to ayone with the dexterity to type 'import runmanager' without any typos. Most of file_ops.py (now deleted) ended up in there too, as indicidual functions rather than a class.\nThe more interesting of these functions are actually pretty well documented if I do say so myself, so go and have a look. The cooler ones are at the bottom.\nThese functions are mainly intended for use with BLACS and  (the future program) mise, so that they may manipulate globals and make run files to their hearts content.\nIn particular, the compile_labscript_async() function is designed to slot right into a GUI program, running in a thread (so as not to hog the GUI mainloop) and coughing out the compilation's output into a queue-like object, such as a subproc_utils.gtk_components.OutputBox, which I just moved out of lyse so I can use one in BLACS for this very purpose. I imagine mise will use it too.\nThis kind of output capturing is a *vast* improvement on what runmanager was doing previously, and as a result, you'll probably see output lines coming out of runmanager actually *in order* all the time. Runmanager isn't using an OutputBox yet, but will be soon. Making it do so isn't much of a change, it's mainly just removing duplication, since the thing runmanager is using was my first attempt at OutputBox before I made it better.\nAnyway, this is all possible because I now have a long running Python process in which labscript compilation occurs. It's connected to the main process over zmq sockets (abstracted away by subproc_utils, naturally). Requests for compilation are queued up and execute in the subprocess. This should be way faster than what we've been doing so far, as we don't have to start a Python interpreter for every run file. It will be interesting to see how it goes.\nAlso, runmanager has a new icon. Enjoy.\nOh and I got rid of some GUI duplication and some options which I'm pretty sure no-one uses (correct me if anyone actually does), that is making h5 files without compiling, or parsing globals without compiling. So now the smallest action you can do is compile. Less checkboxes.\n I also changed a couple of icons in runmanager, the 'delete group' ison is now a minus sign rather than the universal 'no' symbol.\nOh and opening runviewer from runmanager now doesn't block runmanager until you close it.\nAs this is a big change there may be bugs. Hopefully not many, but be alert.", "markup": "markdown", "html": "<p>Fairly huge changes to runmanager.<br />\n(This commit affects issues #439 and #523)<br />\nFirstly, many, many functions for interacting with globals 5 files and globals themselves, and for compiling labscripts, have been split of into <strong>init</strong>.py. Thus they are available to ayone with the dexterity to type 'import runmanager' without any typos. Most of file_ops.py (now deleted) ended up in there too, as indicidual functions rather than a class.<br />\nThe more interesting of these functions are actually pretty well documented if I do say so myself, so go and have a look. The cooler ones are at the bottom.<br />\nThese functions are mainly intended for use with BLACS and  (the future program) mise, so that they may manipulate globals and make run files to their hearts content.<br />\nIn particular, the compile_labscript_async() function is designed to slot right into a GUI program, running in a thread (so as not to hog the GUI mainloop) and coughing out the compilation's output into a queue-like object, such as a subproc_utils.gtk_components.OutputBox, which I just moved out of lyse so I can use one in BLACS for this very purpose. I imagine mise will use it too.<br />\nThis kind of output capturing is a <em>vast</em> improvement on what runmanager was doing previously, and as a result, you'll probably see output lines coming out of runmanager actually <em>in order</em> all the time. Runmanager isn't using an OutputBox yet, but will be soon. Making it do so isn't much of a change, it's mainly just removing duplication, since the thing runmanager is using was my first attempt at OutputBox before I made it better.<br />\nAnyway, this is all possible because I now have a long running Python process in which labscript compilation occurs. It's connected to the main process over zmq sockets (abstracted away by subproc_utils, naturally). Requests for compilation are queued up and execute in the subprocess. This should be way faster than what we've been doing so far, as we don't have to start a Python interpreter for every run file. It will be interesting to see how it goes.<br />\nAlso, runmanager has a new icon. Enjoy.<br />\nOh and I got rid of some GUI duplication and some options which I'm pretty sure no-one uses (correct me if anyone actually does), that is making h5 files without compiling, or parsing globals without compiling. So now the smallest action you can do is compile. Less checkboxes.<br />\n I also changed a couple of icons in runmanager, the 'delete group' ison is now a minus sign rather than the universal 'no' symbol.<br />\nOh and opening runviewer from runmanager now doesn't block runmanager until you close it.<br />\nAs this is a big change there may be bugs. Hopefully not many, but be alert.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "d52fdc96da7df4c81acb79051010cbbfa5298c80", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/runmanager/commit/d52fdc96da7df4c81acb79051010cbbfa5298c80.json"}, "html": {"href": "#!/pstarkey/runmanager/commits/d52fdc96da7df4c81acb79051010cbbfa5298c80"}}}], "date": "2012-06-11T15:55:02+00:00", "message": "Fairly huge changes to runmanager.\n(This commit affects issues #439 and #523)\nFirstly, many, many functions for interacting with globals 5 files and globals themselves, and for compiling labscripts, have been split of into __init__.py. Thus they are available to ayone with the dexterity to type 'import runmanager' without any typos. Most of file_ops.py (now deleted) ended up in there too, as indicidual functions rather than a class.\nThe more interesting of these functions are actually pretty well documented if I do say so myself, so go and have a look. The cooler ones are at the bottom.\nThese functions are mainly intended for use with BLACS and  (the future program) mise, so that they may manipulate globals and make run files to their hearts content.\nIn particular, the compile_labscript_async() function is designed to slot right into a GUI program, running in a thread (so as not to hog the GUI mainloop) and coughing out the compilation's output into a queue-like object, such as a subproc_utils.gtk_components.OutputBox, which I just moved out of lyse so I can use one in BLACS for this very purpose. I imagine mise will use it too.\nThis kind of output capturing is a *vast* improvement on what runmanager was doing previously, and as a result, you'll probably see output lines coming out of runmanager actually *in order* all the time. Runmanager isn't using an OutputBox yet, but will be soon. Making it do so isn't much of a change, it's mainly just removing duplication, since the thing runmanager is using was my first attempt at OutputBox before I made it better.\nAnyway, this is all possible because I now have a long running Python process in which labscript compilation occurs. It's connected to the main process over zmq sockets (abstracted away by subproc_utils, naturally). Requests for compilation are queued up and execute in the subprocess. This should be way faster than what we've been doing so far, as we don't have to start a Python interpreter for every run file. It will be interesting to see how it goes.\nAlso, runmanager has a new icon. Enjoy.\nOh and I got rid of some GUI duplication and some options which I'm pretty sure no-one uses (correct me if anyone actually does), that is making h5 files without compiling, or parsing globals without compiling. So now the smallest action you can do is compile. Less checkboxes.\n I also changed a couple of icons in runmanager, the 'delete group' ison is now a minus sign rather than the universal 'no' symbol.\nOh and opening runviewer from runmanager now doesn't block runmanager until you close it.\nAs this is a big change there may be bugs. Hopefully not many, but be alert.", "type": "commit", "git_hash": "d65adb484c813ed7e8d104e08c536fb42b0c5af1", "tags": null, "branches": "default"}