{"rendered": {"message": {"raw": "Promoted the lock acquisition to happen at a higher level so that modulewatcher does not even *read* sys.modules unless it has the lock.\nThis is to work around a bug whereby h5py appears not to be threadsafe and is corrupting simultaneously running threads...but seeminly only when they do a dict.items() loop. Very strage.", "markup": "markdown", "html": "<p>Promoted the lock acquisition to happen at a higher level so that modulewatcher does not even <em>read</em> sys.modules unless it has the lock.<br />\nThis is to work around a bug whereby h5py appears not to be threadsafe and is corrupting simultaneously running threads...but seeminly only when they do a dict.items() loop. Very strage.</p>", "type": "rendered"}}, "hash": "f790294c1a736f618f7e07640ac65d5cac052057", "repository": {"links": {"self": {"href": "data/repositories/rpanderson/labscript_utils.json"}, "html": {"href": "#!/rpanderson/labscript_utils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{ab48a23d-f1bf-4808-8458-2fb85655c5de}ts=2203674"}}, "type": "repository", "name": "labscript_utils", "full_name": "rpanderson/labscript_utils", "uuid": "{ab48a23d-f1bf-4808-8458-2fb85655c5de}"}, "links": {"self": {"href": "data/repositories/rpanderson/labscript_utils/commit/f790294c1a736f618f7e07640ac65d5cac052057.json"}, "comments": {"href": "data/repositories/rpanderson/labscript_utils/commit/f790294c1a736f618f7e07640ac65d5cac052057/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils/patch/f790294c1a736f618f7e07640ac65d5cac052057"}, "html": {"href": "#!/rpanderson/labscript_utils/commits/f790294c1a736f618f7e07640ac65d5cac052057"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils/diff/f790294c1a736f618f7e07640ac65d5cac052057"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/rpanderson/labscript_utils/commit/f790294c1a736f618f7e07640ac65d5cac052057/approve"}, "statuses": {"href": "data/repositories/rpanderson/labscript_utils/commit/f790294c1a736f618f7e07640ac65d5cac052057/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Promoted the lock acquisition to happen at a higher level so that modulewatcher does not even *read* sys.modules unless it has the lock.\nThis is to work around a bug whereby h5py appears not to be threadsafe and is corrupting simultaneously running threads...but seeminly only when they do a dict.items() loop. Very strage.", "markup": "markdown", "html": "<p>Promoted the lock acquisition to happen at a higher level so that modulewatcher does not even <em>read</em> sys.modules unless it has the lock.<br />\nThis is to work around a bug whereby h5py appears not to be threadsafe and is corrupting simultaneously running threads...but seeminly only when they do a dict.items() loop. Very strage.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "ddb02d7420bb2ecb6b47f8961ca758e8ab74e3b9", "type": "commit", "links": {"self": {"href": "data/repositories/rpanderson/labscript_utils/commit/ddb02d7420bb2ecb6b47f8961ca758e8ab74e3b9.json"}, "html": {"href": "#!/rpanderson/labscript_utils/commits/ddb02d7420bb2ecb6b47f8961ca758e8ab74e3b9"}}}], "date": "2013-09-18T01:42:22+00:00", "message": "Promoted the lock acquisition to happen at a higher level so that modulewatcher does not even *read* sys.modules unless it has the lock.\nThis is to work around a bug whereby h5py appears not to be threadsafe and is corrupting simultaneously running threads...but seeminly only when they do a dict.items() loop. Very strage.", "type": "commit", "git_hash": "eed8cedef8112f90bcc8f5f6a747f09868f31c6a", "tags": null, "branches": "default"}