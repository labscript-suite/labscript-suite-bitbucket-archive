{"rendered": {"message": {"raw": "Analog inputs implemented with a class called AnalogIn, which is to be a child device of an NIBoard object. The list of analog inputs used is stored as an attribute\nto the group for the NI Card in the hdf5 file.\n\nAcquisitions can be programmed with calls to AnalogIn.acquire(label,start_time,stop_time), with an optional scale factor and units string. These can be used later duting analysis.\nThe NIBoard class now takes an acquisition_rate argument when initialised, which is stored as an attribute as well. The LabVIEW control system will use this clock rate and the list\nof analog inputs to program the boards to acquire data for the entirety of the experiment. The acquired data will have the same number of points for each input channel, and so can be\nstored as a single array under the NI card's group in the hdf5 file.\n\nA post-processing script will take this acquired data and split it up into separate measurements (corresponding to single calls to AnalogIn.acquire), using data for the start and stop\ntimes of each call, stored as a table called ACQUISITIONS in the hdf5 file.\n\nA couple of attributes changed name in this revision (to avoid ambiguities), so unless they were hardcoded in LabVIEW, things might break!", "markup": "markdown", "html": "<p>Analog inputs implemented with a class called AnalogIn, which is to be a child device of an NIBoard object. The list of analog inputs used is stored as an attribute<br />\nto the group for the NI Card in the hdf5 file.</p>\n<p>Acquisitions can be programmed with calls to AnalogIn.acquire(label,start_time,stop_time), with an optional scale factor and units string. These can be used later duting analysis.<br />\nThe NIBoard class now takes an acquisition_rate argument when initialised, which is stored as an attribute as well. The LabVIEW control system will use this clock rate and the list<br />\nof analog inputs to program the boards to acquire data for the entirety of the experiment. The acquired data will have the same number of points for each input channel, and so can be<br />\nstored as a single array under the NI card's group in the hdf5 file.</p>\n<p>A post-processing script will take this acquired data and split it up into separate measurements (corresponding to single calls to AnalogIn.acquire), using data for the start and stop<br />\ntimes of each call, stored as a table called ACQUISITIONS in the hdf5 file.</p>\n<p>A couple of attributes changed name in this revision (to avoid ambiguities), so unless they were hardcoded in LabVIEW, things might break!</p>", "type": "rendered"}}, "hash": "8a944cb3c51fa021c5c03efc3457cec1859255e5", "repository": {"links": {"self": {"href": "data/repositories/shjohnst/labscript.json"}, "html": {"href": "#!/shjohnst/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7abe33d7-0b22-49e6-bb15-ec1d22835819}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "shjohnst/labscript", "uuid": "{7abe33d7-0b22-49e6-bb15-ec1d22835819}"}, "links": {"self": {"href": "data/repositories/shjohnst/labscript/commit/8a944cb3c51fa021c5c03efc3457cec1859255e5.json"}, "comments": {"href": "data/repositories/shjohnst/labscript/commit/8a944cb3c51fa021c5c03efc3457cec1859255e5/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/patch/8a944cb3c51fa021c5c03efc3457cec1859255e5"}, "html": {"href": "#!/shjohnst/labscript/commits/8a944cb3c51fa021c5c03efc3457cec1859255e5"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/diff/8a944cb3c51fa021c5c03efc3457cec1859255e5"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/commit/8a944cb3c51fa021c5c03efc3457cec1859255e5/approve"}, "statuses": {"href": "data/repositories/shjohnst/labscript/commit/8a944cb3c51fa021c5c03efc3457cec1859255e5/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Analog inputs implemented with a class called AnalogIn, which is to be a child device of an NIBoard object. The list of analog inputs used is stored as an attribute\nto the group for the NI Card in the hdf5 file.\n\nAcquisitions can be programmed with calls to AnalogIn.acquire(label,start_time,stop_time), with an optional scale factor and units string. These can be used later duting analysis.\nThe NIBoard class now takes an acquisition_rate argument when initialised, which is stored as an attribute as well. The LabVIEW control system will use this clock rate and the list\nof analog inputs to program the boards to acquire data for the entirety of the experiment. The acquired data will have the same number of points for each input channel, and so can be\nstored as a single array under the NI card's group in the hdf5 file.\n\nA post-processing script will take this acquired data and split it up into separate measurements (corresponding to single calls to AnalogIn.acquire), using data for the start and stop\ntimes of each call, stored as a table called ACQUISITIONS in the hdf5 file.\n\nA couple of attributes changed name in this revision (to avoid ambiguities), so unless they were hardcoded in LabVIEW, things might break!", "markup": "markdown", "html": "<p>Analog inputs implemented with a class called AnalogIn, which is to be a child device of an NIBoard object. The list of analog inputs used is stored as an attribute<br />\nto the group for the NI Card in the hdf5 file.</p>\n<p>Acquisitions can be programmed with calls to AnalogIn.acquire(label,start_time,stop_time), with an optional scale factor and units string. These can be used later duting analysis.<br />\nThe NIBoard class now takes an acquisition_rate argument when initialised, which is stored as an attribute as well. The LabVIEW control system will use this clock rate and the list<br />\nof analog inputs to program the boards to acquire data for the entirety of the experiment. The acquired data will have the same number of points for each input channel, and so can be<br />\nstored as a single array under the NI card's group in the hdf5 file.</p>\n<p>A post-processing script will take this acquired data and split it up into separate measurements (corresponding to single calls to AnalogIn.acquire), using data for the start and stop<br />\ntimes of each call, stored as a table called ACQUISITIONS in the hdf5 file.</p>\n<p>A couple of attributes changed name in this revision (to avoid ambiguities), so unless they were hardcoded in LabVIEW, things might break!</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "23c0a099711c93a8211c865a812f988bcefedb32", "type": "commit", "links": {"self": {"href": "data/repositories/shjohnst/labscript/commit/23c0a099711c93a8211c865a812f988bcefedb32.json"}, "html": {"href": "#!/shjohnst/labscript/commits/23c0a099711c93a8211c865a812f988bcefedb32"}}}], "date": "2011-04-08T13:31:28+00:00", "message": "Analog inputs implemented with a class called AnalogIn, which is to be a child device of an NIBoard object. The list of analog inputs used is stored as an attribute\nto the group for the NI Card in the hdf5 file.\n\nAcquisitions can be programmed with calls to AnalogIn.acquire(label,start_time,stop_time), with an optional scale factor and units string. These can be used later duting analysis.\nThe NIBoard class now takes an acquisition_rate argument when initialised, which is stored as an attribute as well. The LabVIEW control system will use this clock rate and the list\nof analog inputs to program the boards to acquire data for the entirety of the experiment. The acquired data will have the same number of points for each input channel, and so can be\nstored as a single array under the NI card's group in the hdf5 file.\n\nA post-processing script will take this acquired data and split it up into separate measurements (corresponding to single calls to AnalogIn.acquire), using data for the start and stop\ntimes of each call, stored as a table called ACQUISITIONS in the hdf5 file.\n\nA couple of attributes changed name in this revision (to avoid ambiguities), so unless they were hardcoded in LabVIEW, things might break!", "type": "commit", "git_hash": "852612e75cef689eb4adc0d63c4c18d582f71595", "tags": null, "branches": "default"}