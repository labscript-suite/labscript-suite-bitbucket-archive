{"rendered": {"message": {"raw": "minor change to how params and device references are put into the global namespace. Now one can do:\n\n        import labscript\n        labscript.Device('device1', *otherargs)\n        device1.do_something(t=7)\n        print param1, param2\n\tlabscript.stop(t=10)\n\nrather than having to import * (which is generally frowned upon in production code), or reference the params\n(which are the experimental run's 'global' arguments, as read from the hdf5 file) with labsript.param1 or similar.\n\nI've left example.py as having 'import *' for the moment, which also imports * from pylab. I can't really see this\nbecoming an issue, but if it does we can just import labscript instead. Or maybe when I package labscript properly\nI'll make an __all__ list that will only import the bits that the user is supposed to use. But it doesn't matter,\nwe're all grown ups here and don't have to have the code hidden from us to make sure we don't break things.\n\nIf it turns out people slip into the habit of breaking things (making names that conflict with what labscript uses etc),\nthen we'll work out what should be hidden based on that.", "markup": "markdown", "html": "<p>minor change to how params and device references are put into the global namespace. Now one can do:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kn\">import</span> <span class=\"nn\">labscript</span>\n    <span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s1\">&#39;device1&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">otherargs</span><span class=\"p\">)</span>\n    <span class=\"n\">device1</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span>\n<span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>rather than having to import * (which is generally frowned upon in production code), or reference the params<br />\n(which are the experimental run's 'global' arguments, as read from the hdf5 file) with labsript.param1 or similar.</p>\n<p>I've left example.py as having 'import *' for the moment, which also imports * from pylab. I can't really see this<br />\nbecoming an issue, but if it does we can just import labscript instead. Or maybe when I package labscript properly<br />\nI'll make an <strong>all</strong> list that will only import the bits that the user is supposed to use. But it doesn't matter,<br />\nwe're all grown ups here and don't have to have the code hidden from us to make sure we don't break things.</p>\n<p>If it turns out people slip into the habit of breaking things (making names that conflict with what labscript uses etc),<br />\nthen we'll work out what should be hidden based on that.</p>", "type": "rendered"}}, "hash": "8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0", "repository": {"links": {"self": {"href": "data/repositories/shjohnst/labscript.json"}, "html": {"href": "#!/shjohnst/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{7abe33d7-0b22-49e6-bb15-ec1d22835819}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "shjohnst/labscript", "uuid": "{7abe33d7-0b22-49e6-bb15-ec1d22835819}"}, "links": {"self": {"href": "data/repositories/shjohnst/labscript/commit/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0.json"}, "comments": {"href": "data/repositories/shjohnst/labscript/commit/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/patch/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0"}, "html": {"href": "#!/shjohnst/labscript/commits/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/diff/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/shjohnst/labscript/commit/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0/approve"}, "statuses": {"href": "data/repositories/shjohnst/labscript/commit/8cb3a0164ee1ba5be8e1d6d4b475f81e4c0cb5f0/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "minor change to how params and device references are put into the global namespace. Now one can do:\n\n        import labscript\n        labscript.Device('device1', *otherargs)\n        device1.do_something(t=7)\n        print param1, param2\n\tlabscript.stop(t=10)\n\nrather than having to import * (which is generally frowned upon in production code), or reference the params\n(which are the experimental run's 'global' arguments, as read from the hdf5 file) with labsript.param1 or similar.\n\nI've left example.py as having 'import *' for the moment, which also imports * from pylab. I can't really see this\nbecoming an issue, but if it does we can just import labscript instead. Or maybe when I package labscript properly\nI'll make an __all__ list that will only import the bits that the user is supposed to use. But it doesn't matter,\nwe're all grown ups here and don't have to have the code hidden from us to make sure we don't break things.\n\nIf it turns out people slip into the habit of breaking things (making names that conflict with what labscript uses etc),\nthen we'll work out what should be hidden based on that.", "markup": "markdown", "html": "<p>minor change to how params and device references are put into the global namespace. Now one can do:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"kn\">import</span> <span class=\"nn\">labscript</span>\n    <span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s1\">&#39;device1&#39;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">otherargs</span><span class=\"p\">)</span>\n    <span class=\"n\">device1</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"n\">param1</span><span class=\"p\">,</span> <span class=\"n\">param2</span>\n<span class=\"n\">labscript</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>rather than having to import * (which is generally frowned upon in production code), or reference the params<br />\n(which are the experimental run's 'global' arguments, as read from the hdf5 file) with labsript.param1 or similar.</p>\n<p>I've left example.py as having 'import *' for the moment, which also imports * from pylab. I can't really see this<br />\nbecoming an issue, but if it does we can just import labscript instead. Or maybe when I package labscript properly<br />\nI'll make an <strong>all</strong> list that will only import the bits that the user is supposed to use. But it doesn't matter,<br />\nwe're all grown ups here and don't have to have the code hidden from us to make sure we don't break things.</p>\n<p>If it turns out people slip into the habit of breaking things (making names that conflict with what labscript uses etc),<br />\nthen we'll work out what should be hidden based on that.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "7fa19d7d851663762febf9e038314fb235842211", "type": "commit", "links": {"self": {"href": "data/repositories/shjohnst/labscript/commit/7fa19d7d851663762febf9e038314fb235842211.json"}, "html": {"href": "#!/shjohnst/labscript/commits/7fa19d7d851663762febf9e038314fb235842211"}}}], "date": "2011-04-13T06:18:37+00:00", "message": "minor change to how params and device references are put into the global namespace. Now one can do:\n\n        import labscript\n        labscript.Device('device1', *otherargs)\n        device1.do_something(t=7)\n        print param1, param2\n\tlabscript.stop(t=10)\n\nrather than having to import * (which is generally frowned upon in production code), or reference the params\n(which are the experimental run's 'global' arguments, as read from the hdf5 file) with labsript.param1 or similar.\n\nI've left example.py as having 'import *' for the moment, which also imports * from pylab. I can't really see this\nbecoming an issue, but if it does we can just import labscript instead. Or maybe when I package labscript properly\nI'll make an __all__ list that will only import the bits that the user is supposed to use. But it doesn't matter,\nwe're all grown ups here and don't have to have the code hidden from us to make sure we don't break things.\n\nIf it turns out people slip into the habit of breaking things (making names that conflict with what labscript uses etc),\nthen we'll work out what should be hidden based on that.", "type": "commit", "git_hash": "abfc03933eb9cebd1cee122177f94072d06ccc11", "tags": null, "branches": "default"}