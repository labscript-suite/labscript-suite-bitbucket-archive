{"rendered": {"message": {"raw": "Functionality to delete repeated shots such that only a finite number of repeated\nshots are kept on disk at any one time. This prevents consuming disk space in\nthe case of an expeiment being \"kept warm\" by being left in repeat mode.\n\nThis functionality is implemented via a plugin, using a new callback for BLACS\nplugins called \"shot_complete\". The shot deletion is done in a\nseparate thread so as not to slow down the experiment in the case of blocking\ncalls, and a zlock lock is acquired on the file prior to deletion\nto minimise the harm done if say, a lyse routine is reading the file.\n\nThere is sensible behaviour in the case of the user decreasing the number of\nshots to retain on disk. Shots that are queued for deletion are kept in a queue,\nand when the number of shots to keep is decreased, shots are released from the\nfront of the queue (without being deleted) until the queue is the\nsame size as the number of shots now being retained. This means\nthat if the user set to keep 100 shots, and then goes ahead and runs a\nhundred shots, if they then set it to keep 5 shots it won't delete\nthe 95 oldest shots in the deletion queue. Rather it will only delete the\nmost recent 5 (and not immediately - over the next 5 shots). I think this is\nclose to what people will expect when changing the number, and it errs on the\nside of keeping shots.", "markup": "markdown", "html": "<p>Functionality to delete repeated shots such that only a finite number of repeated<br />\nshots are kept on disk at any one time. This prevents consuming disk space in<br />\nthe case of an expeiment being \"kept warm\" by being left in repeat mode.</p>\n<p>This functionality is implemented via a plugin, using a new callback for BLACS<br />\nplugins called \"shot_complete\". The shot deletion is done in a<br />\nseparate thread so as not to slow down the experiment in the case of blocking<br />\ncalls, and a zlock lock is acquired on the file prior to deletion<br />\nto minimise the harm done if say, a lyse routine is reading the file.</p>\n<p>There is sensible behaviour in the case of the user decreasing the number of<br />\nshots to retain on disk. Shots that are queued for deletion are kept in a queue,<br />\nand when the number of shots to keep is decreased, shots are released from the<br />\nfront of the queue (without being deleted) until the queue is the<br />\nsame size as the number of shots now being retained. This means<br />\nthat if the user set to keep 100 shots, and then goes ahead and runs a<br />\nhundred shots, if they then set it to keep 5 shots it won't delete<br />\nthe 95 oldest shots in the deletion queue. Rather it will only delete the<br />\nmost recent 5 (and not immediately - over the next 5 shots). I think this is<br />\nclose to what people will expect when changing the number, and it errs on the<br />\nside of keeping shots.</p>", "type": "rendered"}}, "hash": "bbb83389cc13d157232a412dd5ca426cda93270d", "repository": {"links": {"self": {"href": "data/repositories/spielman/blacs.json"}, "html": {"href": "#!/spielman/blacs"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0e169dea-7ba1-41c0-b66a-574694765026}ts=python"}}, "type": "repository", "name": "BLACS", "full_name": "spielman/blacs", "uuid": "{0e169dea-7ba1-41c0-b66a-574694765026}"}, "links": {"self": {"href": "data/repositories/spielman/blacs/commit/bbb83389cc13d157232a412dd5ca426cda93270d.json"}, "comments": {"href": "data/repositories/spielman/blacs/commit/bbb83389cc13d157232a412dd5ca426cda93270d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs/patch/bbb83389cc13d157232a412dd5ca426cda93270d"}, "html": {"href": "#!/spielman/blacs/commits/bbb83389cc13d157232a412dd5ca426cda93270d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs/diff/bbb83389cc13d157232a412dd5ca426cda93270d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs/commit/bbb83389cc13d157232a412dd5ca426cda93270d/approve"}, "statuses": {"href": "data/repositories/spielman/blacs/commit/bbb83389cc13d157232a412dd5ca426cda93270d/statuses_page=1.json"}}, "author": {"raw": "Chris Billington <chrisjbillington@gmail.com>", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Functionality to delete repeated shots such that only a finite number of repeated\nshots are kept on disk at any one time. This prevents consuming disk space in\nthe case of an expeiment being \"kept warm\" by being left in repeat mode.\n\nThis functionality is implemented via a plugin, using a new callback for BLACS\nplugins called \"shot_complete\". The shot deletion is done in a\nseparate thread so as not to slow down the experiment in the case of blocking\ncalls, and a zlock lock is acquired on the file prior to deletion\nto minimise the harm done if say, a lyse routine is reading the file.\n\nThere is sensible behaviour in the case of the user decreasing the number of\nshots to retain on disk. Shots that are queued for deletion are kept in a queue,\nand when the number of shots to keep is decreased, shots are released from the\nfront of the queue (without being deleted) until the queue is the\nsame size as the number of shots now being retained. This means\nthat if the user set to keep 100 shots, and then goes ahead and runs a\nhundred shots, if they then set it to keep 5 shots it won't delete\nthe 95 oldest shots in the deletion queue. Rather it will only delete the\nmost recent 5 (and not immediately - over the next 5 shots). I think this is\nclose to what people will expect when changing the number, and it errs on the\nside of keeping shots.", "markup": "markdown", "html": "<p>Functionality to delete repeated shots such that only a finite number of repeated<br />\nshots are kept on disk at any one time. This prevents consuming disk space in<br />\nthe case of an expeiment being \"kept warm\" by being left in repeat mode.</p>\n<p>This functionality is implemented via a plugin, using a new callback for BLACS<br />\nplugins called \"shot_complete\". The shot deletion is done in a<br />\nseparate thread so as not to slow down the experiment in the case of blocking<br />\ncalls, and a zlock lock is acquired on the file prior to deletion<br />\nto minimise the harm done if say, a lyse routine is reading the file.</p>\n<p>There is sensible behaviour in the case of the user decreasing the number of<br />\nshots to retain on disk. Shots that are queued for deletion are kept in a queue,<br />\nand when the number of shots to keep is decreased, shots are released from the<br />\nfront of the queue (without being deleted) until the queue is the<br />\nsame size as the number of shots now being retained. This means<br />\nthat if the user set to keep 100 shots, and then goes ahead and runs a<br />\nhundred shots, if they then set it to keep 5 shots it won't delete<br />\nthe 95 oldest shots in the deletion queue. Rather it will only delete the<br />\nmost recent 5 (and not immediately - over the next 5 shots). I think this is<br />\nclose to what people will expect when changing the number, and it errs on the<br />\nside of keeping shots.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "f4a86fd23ece81617d4ea890928af927955ae947", "type": "commit", "links": {"self": {"href": "data/repositories/spielman/blacs/commit/f4a86fd23ece81617d4ea890928af927955ae947.json"}, "html": {"href": "#!/spielman/blacs/commits/f4a86fd23ece81617d4ea890928af927955ae947"}}}], "date": "2017-06-16T03:58:03+00:00", "message": "Functionality to delete repeated shots such that only a finite number of repeated\nshots are kept on disk at any one time. This prevents consuming disk space in\nthe case of an expeiment being \"kept warm\" by being left in repeat mode.\n\nThis functionality is implemented via a plugin, using a new callback for BLACS\nplugins called \"shot_complete\". The shot deletion is done in a\nseparate thread so as not to slow down the experiment in the case of blocking\ncalls, and a zlock lock is acquired on the file prior to deletion\nto minimise the harm done if say, a lyse routine is reading the file.\n\nThere is sensible behaviour in the case of the user decreasing the number of\nshots to retain on disk. Shots that are queued for deletion are kept in a queue,\nand when the number of shots to keep is decreased, shots are released from the\nfront of the queue (without being deleted) until the queue is the\nsame size as the number of shots now being retained. This means\nthat if the user set to keep 100 shots, and then goes ahead and runs a\nhundred shots, if they then set it to keep 5 shots it won't delete\nthe 95 oldest shots in the deletion queue. Rather it will only delete the\nmost recent 5 (and not immediately - over the next 5 shots). I think this is\nclose to what people will expect when changing the number, and it errs on the\nside of keeping shots.", "type": "commit", "git_hash": "f678ca7f3b3cdb813e6e09e8340aeb7ead6a5b9c", "tags": null, "branches": "default"}