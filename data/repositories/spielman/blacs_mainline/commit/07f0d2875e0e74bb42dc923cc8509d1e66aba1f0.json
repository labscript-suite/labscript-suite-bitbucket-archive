{"rendered": {"message": {"raw": "Modified worker initialisation to always run the worker's init method first\n\nWe now manually insert the state that will run Tab._initialise_worker at the start of the queue. Any states queued up before this are thus bumped further down the queue.\n\nNote that while the mainloop is started immediatedly in Tab.__init__ it cannot get an item out of the queue until control is returned to the Qt Event loop and the Qt Event is processed to check for items in the queue (which doesn't happen until after the worker processes are created by DeviceTab.__init__ )", "markup": "markdown", "html": "<p>Modified worker initialisation to always run the worker's init method first</p>\n<p>We now manually insert the state that will run Tab._initialise_worker at the start of the queue. Any states queued up before this are thus bumped further down the queue.</p>\n<p>Note that while the mainloop is started immediatedly in Tab.<strong>init</strong> it cannot get an item out of the queue until control is returned to the Qt Event loop and the Qt Event is processed to check for items in the queue (which doesn't happen until after the worker processes are created by DeviceTab.<strong>init</strong> )</p>", "type": "rendered"}}, "hash": "07f0d2875e0e74bb42dc923cc8509d1e66aba1f0", "repository": {"links": {"self": {"href": "data/repositories/spielman/blacs_mainline.json"}, "html": {"href": "#!/spielman/blacs_mainline"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c890ce49-3391-43c1-923b-49fe785d3026}ts=python"}}, "type": "repository", "name": "BLACS_mainline", "full_name": "spielman/blacs_mainline", "uuid": "{c890ce49-3391-43c1-923b-49fe785d3026}"}, "links": {"self": {"href": "data/repositories/spielman/blacs_mainline/commit/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0.json"}, "comments": {"href": "data/repositories/spielman/blacs_mainline/commit/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs_mainline/patch/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0"}, "html": {"href": "#!/spielman/blacs_mainline/commits/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs_mainline/diff/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/blacs_mainline/commit/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0/approve"}, "statuses": {"href": "data/repositories/spielman/blacs_mainline/commit/07f0d2875e0e74bb42dc923cc8509d1e66aba1f0/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Modified worker initialisation to always run the worker's init method first\n\nWe now manually insert the state that will run Tab._initialise_worker at the start of the queue. Any states queued up before this are thus bumped further down the queue.\n\nNote that while the mainloop is started immediatedly in Tab.__init__ it cannot get an item out of the queue until control is returned to the Qt Event loop and the Qt Event is processed to check for items in the queue (which doesn't happen until after the worker processes are created by DeviceTab.__init__ )", "markup": "markdown", "html": "<p>Modified worker initialisation to always run the worker's init method first</p>\n<p>We now manually insert the state that will run Tab._initialise_worker at the start of the queue. Any states queued up before this are thus bumped further down the queue.</p>\n<p>Note that while the mainloop is started immediatedly in Tab.<strong>init</strong> it cannot get an item out of the queue until control is returned to the Qt Event loop and the Qt Event is processed to check for items in the queue (which doesn't happen until after the worker processes are created by DeviceTab.<strong>init</strong> )</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "5bd9b2854433a8ebae110bcc34374a2798a58fd2", "type": "commit", "links": {"self": {"href": "data/repositories/spielman/blacs_mainline/commit/5bd9b2854433a8ebae110bcc34374a2798a58fd2.json"}, "html": {"href": "#!/spielman/blacs_mainline/commits/5bd9b2854433a8ebae110bcc34374a2798a58fd2"}}}], "date": "2014-06-11T08:21:38+00:00", "message": "Modified worker initialisation to always run the worker's init method first\n\nWe now manually insert the state that will run Tab._initialise_worker at the start of the queue. Any states queued up before this are thus bumped further down the queue.\n\nNote that while the mainloop is started immediatedly in Tab.__init__ it cannot get an item out of the queue until control is returned to the Qt Event loop and the Qt Event is processed to check for items in the queue (which doesn't happen until after the worker processes are created by DeviceTab.__init__ )", "type": "commit", "git_hash": "a56151fbcd8f76d14f08ac5ef1fc0729cab7ec5d", "tags": null, "branches": "1.1.0-dev"}