{"rendered": {"message": {"raw": "FIxed bugs in and made more robust the copying to clipboard functionality.\nThe figure is saved to disk and then a subprocess is used to copy it to\nthe clipboard, and the subprocess keeps running until the clipboard is\noverwritten, so that pasting works on setups which require the program to provide\nthe paste data at paste time (and thus require them to keep running). Cough\nXorg, cough.\n\nThis might sound like overkill, but It's much cleaner. The subprocess can have\nits own QApplication to handle the clipboard actions, and thus doesn't\ninterfere with the parent's QApplication, and doesn't require it to have one,\nif matplotlib is using a different backend (even the Qt backend could be qt 4 or\nqt 5 at the moment, so we don't want to have to deal with this). I found\ndifficult to debug breakage when trying to make this work when a QApplication\nalready existed, so a clean break is much nicer, and is required to keep the\nclipboard data around (on linux anyway) once the copying program has closed.\n\nI've made the subprocess code forward compatible with PyQt5.\n\nThis functionality requires a function I added to zprocess 2.2, so I added\na check_version call for this.", "markup": "markdown", "html": "<p>FIxed bugs in and made more robust the copying to clipboard functionality.<br />\nThe figure is saved to disk and then a subprocess is used to copy it to<br />\nthe clipboard, and the subprocess keeps running until the clipboard is<br />\noverwritten, so that pasting works on setups which require the program to provide<br />\nthe paste data at paste time (and thus require them to keep running). Cough<br />\nXorg, cough.</p>\n<p>This might sound like overkill, but It's much cleaner. The subprocess can have<br />\nits own QApplication to handle the clipboard actions, and thus doesn't<br />\ninterfere with the parent's QApplication, and doesn't require it to have one,<br />\nif matplotlib is using a different backend (even the Qt backend could be qt 4 or<br />\nqt 5 at the moment, so we don't want to have to deal with this). I found<br />\ndifficult to debug breakage when trying to make this work when a QApplication<br />\nalready existed, so a clean break is much nicer, and is required to keep the<br />\nclipboard data around (on linux anyway) once the copying program has closed.</p>\n<p>I've made the subprocess code forward compatible with PyQt5.</p>\n<p>This functionality requires a function I added to zprocess 2.2, so I added<br />\na check_version call for this.</p>", "type": "rendered"}}, "hash": "c7a845e9611942d7bc678382b6b03d899f1ee99d", "repository": {"links": {"self": {"href": "data/repositories/spielman/lyse.json"}, "html": {"href": "#!/spielman/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{1a8642e0-6a94-4407-8893-df9922c2b2fc}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "spielman/lyse", "uuid": "{1a8642e0-6a94-4407-8893-df9922c2b2fc}"}, "links": {"self": {"href": "data/repositories/spielman/lyse/commit/c7a845e9611942d7bc678382b6b03d899f1ee99d.json"}, "comments": {"href": "data/repositories/spielman/lyse/commit/c7a845e9611942d7bc678382b6b03d899f1ee99d/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/lyse/patch/c7a845e9611942d7bc678382b6b03d899f1ee99d"}, "html": {"href": "#!/spielman/lyse/commits/c7a845e9611942d7bc678382b6b03d899f1ee99d"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/lyse/diff/c7a845e9611942d7bc678382b6b03d899f1ee99d"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/spielman/lyse/commit/c7a845e9611942d7bc678382b6b03d899f1ee99d/approve"}, "statuses": {"href": "data/repositories/spielman/lyse/commit/c7a845e9611942d7bc678382b6b03d899f1ee99d/statuses_page=1.json"}}, "author": {"raw": "Chris Billington <chrisjbillington@gmail.com>", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "FIxed bugs in and made more robust the copying to clipboard functionality.\nThe figure is saved to disk and then a subprocess is used to copy it to\nthe clipboard, and the subprocess keeps running until the clipboard is\noverwritten, so that pasting works on setups which require the program to provide\nthe paste data at paste time (and thus require them to keep running). Cough\nXorg, cough.\n\nThis might sound like overkill, but It's much cleaner. The subprocess can have\nits own QApplication to handle the clipboard actions, and thus doesn't\ninterfere with the parent's QApplication, and doesn't require it to have one,\nif matplotlib is using a different backend (even the Qt backend could be qt 4 or\nqt 5 at the moment, so we don't want to have to deal with this). I found\ndifficult to debug breakage when trying to make this work when a QApplication\nalready existed, so a clean break is much nicer, and is required to keep the\nclipboard data around (on linux anyway) once the copying program has closed.\n\nI've made the subprocess code forward compatible with PyQt5.\n\nThis functionality requires a function I added to zprocess 2.2, so I added\na check_version call for this.", "markup": "markdown", "html": "<p>FIxed bugs in and made more robust the copying to clipboard functionality.<br />\nThe figure is saved to disk and then a subprocess is used to copy it to<br />\nthe clipboard, and the subprocess keeps running until the clipboard is<br />\noverwritten, so that pasting works on setups which require the program to provide<br />\nthe paste data at paste time (and thus require them to keep running). Cough<br />\nXorg, cough.</p>\n<p>This might sound like overkill, but It's much cleaner. The subprocess can have<br />\nits own QApplication to handle the clipboard actions, and thus doesn't<br />\ninterfere with the parent's QApplication, and doesn't require it to have one,<br />\nif matplotlib is using a different backend (even the Qt backend could be qt 4 or<br />\nqt 5 at the moment, so we don't want to have to deal with this). I found<br />\ndifficult to debug breakage when trying to make this work when a QApplication<br />\nalready existed, so a clean break is much nicer, and is required to keep the<br />\nclipboard data around (on linux anyway) once the copying program has closed.</p>\n<p>I've made the subprocess code forward compatible with PyQt5.</p>\n<p>This functionality requires a function I added to zprocess 2.2, so I added<br />\na check_version call for this.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "93c49731b41dab842e1cc602ee035283ddd51795", "type": "commit", "links": {"self": {"href": "data/repositories/spielman/lyse/commit/93c49731b41dab842e1cc602ee035283ddd51795.json"}, "html": {"href": "#!/spielman/lyse/commits/93c49731b41dab842e1cc602ee035283ddd51795"}}}], "date": "2017-04-26T01:03:57+00:00", "message": "FIxed bugs in and made more robust the copying to clipboard functionality.\nThe figure is saved to disk and then a subprocess is used to copy it to\nthe clipboard, and the subprocess keeps running until the clipboard is\noverwritten, so that pasting works on setups which require the program to provide\nthe paste data at paste time (and thus require them to keep running). Cough\nXorg, cough.\n\nThis might sound like overkill, but It's much cleaner. The subprocess can have\nits own QApplication to handle the clipboard actions, and thus doesn't\ninterfere with the parent's QApplication, and doesn't require it to have one,\nif matplotlib is using a different backend (even the Qt backend could be qt 4 or\nqt 5 at the moment, so we don't want to have to deal with this). I found\ndifficult to debug breakage when trying to make this work when a QApplication\nalready existed, so a clean break is much nicer, and is required to keep the\nclipboard data around (on linux anyway) once the copying program has closed.\n\nI've made the subprocess code forward compatible with PyQt5.\n\nThis functionality requires a function I added to zprocess 2.2, so I added\na check_version call for this.", "type": "commit", "git_hash": "2d0953b8d2736b928c5e82bc4d85942234c9b493", "tags": null, "branches": "default"}