{"rendered": {"message": {"raw": "Make lyse handle gracefully shot files that have been deleted off disk.\n\nWhenever lyse tries to read a HDF5 file that has been deleted, it\npreviously would crash. Now, the shot's row\nin the filebox is marked with an icon showing it as deleted off disk\nand a warning is printed. No more singleshot analysis will be run on that shot\nfile, but its data will be kept in the dataframe until the user removes it\nfrom the filebox, and thus still be available for multishot analysis.\n\nThe use case for this is when an experiment is cycling just to 'keep warm' or\nwhatever, and shots are being deleted so as not to consume hard drive space.\n\nI removed some of the unused optional ways of calling some of lyse's\ninternal methods so as to decrease the number of places where\nlyse reads a HDF5 file. Previously multiple code paths were allowed - one\nwhich was a bit cleaner (reading HDF5 files at the last minute)\n and one which was a performance optimisation (read them in advance, outside the\n GUI thread, and pass the results to the GUI-related methods). Now only\nthe performant way of calling these methods is allowed - which is what all\nthe calling code was using anyway.", "markup": "markdown", "html": "<p>Make lyse handle gracefully shot files that have been deleted off disk.</p>\n<p>Whenever lyse tries to read a HDF5 file that has been deleted, it<br />\npreviously would crash. Now, the shot's row<br />\nin the filebox is marked with an icon showing it as deleted off disk<br />\nand a warning is printed. No more singleshot analysis will be run on that shot<br />\nfile, but its data will be kept in the dataframe until the user removes it<br />\nfrom the filebox, and thus still be available for multishot analysis.</p>\n<p>The use case for this is when an experiment is cycling just to 'keep warm' or<br />\nwhatever, and shots are being deleted so as not to consume hard drive space.</p>\n<p>I removed some of the unused optional ways of calling some of lyse's<br />\ninternal methods so as to decrease the number of places where<br />\nlyse reads a HDF5 file. Previously multiple code paths were allowed - one<br />\nwhich was a bit cleaner (reading HDF5 files at the last minute)<br />\n and one which was a performance optimisation (read them in advance, outside the<br />\n GUI thread, and pass the results to the GUI-related methods). Now only<br />\nthe performant way of calling these methods is allowed - which is what all<br />\nthe calling code was using anyway.</p>", "type": "rendered"}}, "hash": "a252f823dc333caf4a85f62110351b2d8b1de479", "repository": {"links": {"self": {"href": "data/repositories/synqs/lyse.json"}, "html": {"href": "#!/synqs/lyse"}, "avatar": {"href": "data/bytebucket.org/ravatar/{d56848b4-4fa4-4e99-ac65-170642f66276}ts=python"}}, "type": "repository", "name": "lyse", "full_name": "synqs/lyse", "uuid": "{d56848b4-4fa4-4e99-ac65-170642f66276}"}, "links": {"self": {"href": "data/repositories/synqs/lyse/commit/a252f823dc333caf4a85f62110351b2d8b1de479.json"}, "comments": {"href": "data/repositories/synqs/lyse/commit/a252f823dc333caf4a85f62110351b2d8b1de479/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/synqs/lyse/patch/a252f823dc333caf4a85f62110351b2d8b1de479"}, "html": {"href": "#!/synqs/lyse/commits/a252f823dc333caf4a85f62110351b2d8b1de479"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/synqs/lyse/diff/a252f823dc333caf4a85f62110351b2d8b1de479"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/synqs/lyse/commit/a252f823dc333caf4a85f62110351b2d8b1de479/approve"}, "statuses": {"href": "data/repositories/synqs/lyse/commit/a252f823dc333caf4a85f62110351b2d8b1de479/statuses_page=1.json"}}, "author": {"raw": "Chris Billington", "type": "author"}, "summary": {"raw": "Make lyse handle gracefully shot files that have been deleted off disk.\n\nWhenever lyse tries to read a HDF5 file that has been deleted, it\npreviously would crash. Now, the shot's row\nin the filebox is marked with an icon showing it as deleted off disk\nand a warning is printed. No more singleshot analysis will be run on that shot\nfile, but its data will be kept in the dataframe until the user removes it\nfrom the filebox, and thus still be available for multishot analysis.\n\nThe use case for this is when an experiment is cycling just to 'keep warm' or\nwhatever, and shots are being deleted so as not to consume hard drive space.\n\nI removed some of the unused optional ways of calling some of lyse's\ninternal methods so as to decrease the number of places where\nlyse reads a HDF5 file. Previously multiple code paths were allowed - one\nwhich was a bit cleaner (reading HDF5 files at the last minute)\n and one which was a performance optimisation (read them in advance, outside the\n GUI thread, and pass the results to the GUI-related methods). Now only\nthe performant way of calling these methods is allowed - which is what all\nthe calling code was using anyway.", "markup": "markdown", "html": "<p>Make lyse handle gracefully shot files that have been deleted off disk.</p>\n<p>Whenever lyse tries to read a HDF5 file that has been deleted, it<br />\npreviously would crash. Now, the shot's row<br />\nin the filebox is marked with an icon showing it as deleted off disk<br />\nand a warning is printed. No more singleshot analysis will be run on that shot<br />\nfile, but its data will be kept in the dataframe until the user removes it<br />\nfrom the filebox, and thus still be available for multishot analysis.</p>\n<p>The use case for this is when an experiment is cycling just to 'keep warm' or<br />\nwhatever, and shots are being deleted so as not to consume hard drive space.</p>\n<p>I removed some of the unused optional ways of calling some of lyse's<br />\ninternal methods so as to decrease the number of places where<br />\nlyse reads a HDF5 file. Previously multiple code paths were allowed - one<br />\nwhich was a bit cleaner (reading HDF5 files at the last minute)<br />\n and one which was a performance optimisation (read them in advance, outside the<br />\n GUI thread, and pass the results to the GUI-related methods). Now only<br />\nthe performant way of calling these methods is allowed - which is what all<br />\nthe calling code was using anyway.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "c4908e5d0a94634ee9f53b85d44b645b46d12a2e", "type": "commit", "links": {"self": {"href": "data/repositories/synqs/lyse/commit/c4908e5d0a94634ee9f53b85d44b645b46d12a2e.json"}, "html": {"href": "#!/synqs/lyse/commits/c4908e5d0a94634ee9f53b85d44b645b46d12a2e"}}}], "date": "2017-04-11T21:37:22+00:00", "message": "Make lyse handle gracefully shot files that have been deleted off disk.\n\nWhenever lyse tries to read a HDF5 file that has been deleted, it\npreviously would crash. Now, the shot's row\nin the filebox is marked with an icon showing it as deleted off disk\nand a warning is printed. No more singleshot analysis will be run on that shot\nfile, but its data will be kept in the dataframe until the user removes it\nfrom the filebox, and thus still be available for multishot analysis.\n\nThe use case for this is when an experiment is cycling just to 'keep warm' or\nwhatever, and shots are being deleted so as not to consume hard drive space.\n\nI removed some of the unused optional ways of calling some of lyse's\ninternal methods so as to decrease the number of places where\nlyse reads a HDF5 file. Previously multiple code paths were allowed - one\nwhich was a bit cleaner (reading HDF5 files at the last minute)\n and one which was a performance optimisation (read them in advance, outside the\n GUI thread, and pass the results to the GUI-related methods). Now only\nthe performant way of calling these methods is allowed - which is what all\nthe calling code was using anyway.", "type": "commit", "git_hash": "0c4fff8f3dac0bb7decfb2a3379f13da887263f2", "tags": null, "branches": "feature"}