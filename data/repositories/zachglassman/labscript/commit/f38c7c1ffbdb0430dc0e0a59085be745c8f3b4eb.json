{"rendered": {"message": {"raw": "Device initialisation now requires only one name for each object, rather than two.\n\nPreviously, you had to both give the object a name as a string argument, and you had to specify a python variable name to reference it:\n\n\tname_1 = Device('name_2', *otherargs)\n\nNow you only provide one name, as a string argument, and the initialisation will automatically place a reference to the device object in the\nglobal namespace:\n\n>>> Device('name_1', *otherargs)\n>>> print name_1\n<__main__.Device object at 0x7f0ca4a64e50>\n\nOf course, the name must be a valid Python variable name -- else a ValueError will be raised.\n\nThis also means that you now have to explicitly give the full name of all the IntermediateDevices, such as NovatechDDS9ms, NIBoards, and also\nPulseBlasters. Previously these objects made their own names from a fixed string, and just appended a number to it. We'll have to ensure that these\nnames match what LabVIEW expects -- so that it can match these devices to the actual hardware it programs.\n\nThis should be pretty easy to enforce, especially since I'm about to implement code generation for the device initialisation part of labscripts.\n\nStay tuned for that!", "markup": "markdown", "html": "<p>Device initialisation now requires only one name for each object, rather than two.</p>\n<p>Previously, you had to both give the object a name as a string argument, and you had to specify a python variable name to reference it:</p>\n<div class=\"codehilite\"><pre><span></span>name_1 = Device(&#39;name_2&#39;, *otherargs)\n</pre></div>\n\n\n<p>Now you only provide one name, as a string argument, and the initialisation will automatically place a reference to the device object in the<br />\nglobal namespace:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Device('name_1', *otherargs)<br />\nprint name_1<br />\n&lt;<strong>main</strong>.Device object at 0x7f0ca4a64e50&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Of course, the name must be a valid Python variable name -- else a ValueError will be raised.</p>\n<p>This also means that you now have to explicitly give the full name of all the IntermediateDevices, such as NovatechDDS9ms, NIBoards, and also<br />\nPulseBlasters. Previously these objects made their own names from a fixed string, and just appended a number to it. We'll have to ensure that these<br />\nnames match what LabVIEW expects -- so that it can match these devices to the actual hardware it programs.</p>\n<p>This should be pretty easy to enforce, especially since I'm about to implement code generation for the device initialisation part of labscripts.</p>\n<p>Stay tuned for that!</p>", "type": "rendered"}}, "hash": "f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb", "repository": {"links": {"self": {"href": "data/repositories/zachglassman/labscript.json"}, "html": {"href": "#!/zachglassman/labscript"}, "avatar": {"href": "data/bytebucket.org/ravatar/{58f76745-eca1-44b8-9da1-66b8604b30a4}ts=python"}}, "type": "repository", "name": "labscript", "full_name": "zachglassman/labscript", "uuid": "{58f76745-eca1-44b8-9da1-66b8604b30a4}"}, "links": {"self": {"href": "data/repositories/zachglassman/labscript/commit/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb.json"}, "comments": {"href": "data/repositories/zachglassman/labscript/commit/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/zachglassman/labscript/patch/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb"}, "html": {"href": "#!/zachglassman/labscript/commits/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/zachglassman/labscript/diff/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/zachglassman/labscript/commit/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb/approve"}, "statuses": {"href": "data/repositories/zachglassman/labscript/commit/f38c7c1ffbdb0430dc0e0a59085be745c8f3b4eb/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Device initialisation now requires only one name for each object, rather than two.\n\nPreviously, you had to both give the object a name as a string argument, and you had to specify a python variable name to reference it:\n\n\tname_1 = Device('name_2', *otherargs)\n\nNow you only provide one name, as a string argument, and the initialisation will automatically place a reference to the device object in the\nglobal namespace:\n\n>>> Device('name_1', *otherargs)\n>>> print name_1\n<__main__.Device object at 0x7f0ca4a64e50>\n\nOf course, the name must be a valid Python variable name -- else a ValueError will be raised.\n\nThis also means that you now have to explicitly give the full name of all the IntermediateDevices, such as NovatechDDS9ms, NIBoards, and also\nPulseBlasters. Previously these objects made their own names from a fixed string, and just appended a number to it. We'll have to ensure that these\nnames match what LabVIEW expects -- so that it can match these devices to the actual hardware it programs.\n\nThis should be pretty easy to enforce, especially since I'm about to implement code generation for the device initialisation part of labscripts.\n\nStay tuned for that!", "markup": "markdown", "html": "<p>Device initialisation now requires only one name for each object, rather than two.</p>\n<p>Previously, you had to both give the object a name as a string argument, and you had to specify a python variable name to reference it:</p>\n<div class=\"codehilite\"><pre><span></span>name_1 = Device(&#39;name_2&#39;, *otherargs)\n</pre></div>\n\n\n<p>Now you only provide one name, as a string argument, and the initialisation will automatically place a reference to the device object in the<br />\nglobal namespace:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Device('name_1', *otherargs)<br />\nprint name_1<br />\n&lt;<strong>main</strong>.Device object at 0x7f0ca4a64e50&gt;</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Of course, the name must be a valid Python variable name -- else a ValueError will be raised.</p>\n<p>This also means that you now have to explicitly give the full name of all the IntermediateDevices, such as NovatechDDS9ms, NIBoards, and also<br />\nPulseBlasters. Previously these objects made their own names from a fixed string, and just appended a number to it. We'll have to ensure that these<br />\nnames match what LabVIEW expects -- so that it can match these devices to the actual hardware it programs.</p>\n<p>This should be pretty easy to enforce, especially since I'm about to implement code generation for the device initialisation part of labscripts.</p>\n<p>Stay tuned for that!</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "897fe3f4d690f605325d4df7d13be0bafd202876", "type": "commit", "links": {"self": {"href": "data/repositories/zachglassman/labscript/commit/897fe3f4d690f605325d4df7d13be0bafd202876.json"}, "html": {"href": "#!/zachglassman/labscript/commits/897fe3f4d690f605325d4df7d13be0bafd202876"}}}], "date": "2011-04-13T05:38:08+00:00", "message": "Device initialisation now requires only one name for each object, rather than two.\n\nPreviously, you had to both give the object a name as a string argument, and you had to specify a python variable name to reference it:\n\n\tname_1 = Device('name_2', *otherargs)\n\nNow you only provide one name, as a string argument, and the initialisation will automatically place a reference to the device object in the\nglobal namespace:\n\n>>> Device('name_1', *otherargs)\n>>> print name_1\n<__main__.Device object at 0x7f0ca4a64e50>\n\nOf course, the name must be a valid Python variable name -- else a ValueError will be raised.\n\nThis also means that you now have to explicitly give the full name of all the IntermediateDevices, such as NovatechDDS9ms, NIBoards, and also\nPulseBlasters. Previously these objects made their own names from a fixed string, and just appended a number to it. We'll have to ensure that these\nnames match what LabVIEW expects -- so that it can match these devices to the actual hardware it programs.\n\nThis should be pretty easy to enforce, especially since I'm about to implement code generation for the device initialisation part of labscripts.\n\nStay tuned for that!", "type": "commit", "git_hash": "6fc45a4a6d1ba4a5d9f90d38919566686af4cfd7", "tags": null, "branches": "default"}